
Domain_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013fcc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003420  0801426c  0801426c  0001526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801768c  0801768c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017694  08017694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017698  08017698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000008c  24000000  0801769c  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00043418  2400008c  08017728  0001908c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240434a4  08017728  000194a4  2**0
                  ALLOC
  9 .lwip_sec     00044b83  30000000  30000000  0001a000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001908c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00023b01  00000000  00000000  000190ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005969  00000000  00000000  0003cbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001978  00000000  00000000  00042528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000144c  00000000  00000000  00043ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00043f68  00000000  00000000  000452ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00027b08  00000000  00000000  00089254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00174749  00000000  00000000  000b0d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002254a5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000071d8  00000000  00000000  002254e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000067  00000000  00000000  0022c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400008c 	.word	0x2400008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014254 	.word	0x08014254

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000090 	.word	0x24000090
 80002dc:	08014254 	.word	0x08014254

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <mqtt_incoming_publish_cb>:
/* USER CODE BEGIN 0 */




void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
  if (strcmp(topic, "firmware") == 0) {
 80003bc:	490a      	ldr	r1, [pc, #40]	@ (80003e8 <mqtt_incoming_publish_cb+0x38>)
 80003be:	68b8      	ldr	r0, [r7, #8]
 80003c0:	f7ff ff8e 	bl	80002e0 <strcmp>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d106      	bne.n	80003d8 <mqtt_incoming_publish_cb+0x28>
    firmware_offset = 0;
 80003ca:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <mqtt_incoming_publish_cb+0x3c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
    receiving_firmware = 1;
 80003d0:	4b07      	ldr	r3, [pc, #28]	@ (80003f0 <mqtt_incoming_publish_cb+0x40>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	701a      	strb	r2, [r3, #0]
  } else {
    receiving_firmware = 0;
  }
}
 80003d6:	e002      	b.n	80003de <mqtt_incoming_publish_cb+0x2e>
    receiving_firmware = 0;
 80003d8:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <mqtt_incoming_publish_cb+0x40>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	0801426c 	.word	0x0801426c
 80003ec:	2404014c 	.word	0x2404014c
 80003f0:	24040150 	.word	0x24040150

080003f4 <mqtt_incoming_data_cb>:

void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	4611      	mov	r1, r2
 8000400:	461a      	mov	r2, r3
 8000402:	460b      	mov	r3, r1
 8000404:	80fb      	strh	r3, [r7, #6]
 8000406:	4613      	mov	r3, r2
 8000408:	717b      	strb	r3, [r7, #5]
  if (!receiving_firmware) return;
 800040a:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <mqtt_incoming_data_cb+0x74>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d026      	beq.n	8000460 <mqtt_incoming_data_cb+0x6c>

  if ((firmware_offset + len) < FIRMWARE_MAX_SIZE) {
 8000412:	88fa      	ldrh	r2, [r7, #6]
 8000414:	4b15      	ldr	r3, [pc, #84]	@ (800046c <mqtt_incoming_data_cb+0x78>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4413      	add	r3, r2
 800041a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800041e:	d214      	bcs.n	800044a <mqtt_incoming_data_cb+0x56>
    memcpy(&firmware_buffer[firmware_offset], data, len);
 8000420:	4b12      	ldr	r3, [pc, #72]	@ (800046c <mqtt_incoming_data_cb+0x78>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a12      	ldr	r2, [pc, #72]	@ (8000470 <mqtt_incoming_data_cb+0x7c>)
 8000426:	4413      	add	r3, r2
 8000428:	88fa      	ldrh	r2, [r7, #6]
 800042a:	68b9      	ldr	r1, [r7, #8]
 800042c:	4618      	mov	r0, r3
 800042e:	f013 f8e4 	bl	80135fa <memcpy>
    firmware_offset += len;
 8000432:	88fa      	ldrh	r2, [r7, #6]
 8000434:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <mqtt_incoming_data_cb+0x78>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4413      	add	r3, r2
 800043a:	4a0c      	ldr	r2, [pc, #48]	@ (800046c <mqtt_incoming_data_cb+0x78>)
 800043c:	6013      	str	r3, [r2, #0]
  } else {
    receiving_firmware = 0;
    return;
  }

  if (flags & MQTT_DATA_FLAG_LAST) {
 800043e:	797b      	ldrb	r3, [r7, #5]
 8000440:	f003 0301 	and.w	r3, r3, #1
 8000444:	2b00      	cmp	r3, #0
 8000446:	d00c      	beq.n	8000462 <mqtt_incoming_data_cb+0x6e>
 8000448:	e003      	b.n	8000452 <mqtt_incoming_data_cb+0x5e>
    receiving_firmware = 0;
 800044a:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <mqtt_incoming_data_cb+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
    return;
 8000450:	e007      	b.n	8000462 <mqtt_incoming_data_cb+0x6e>
    receiving_firmware = 0;
 8000452:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <mqtt_incoming_data_cb+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
    send_to_can = 1;
 8000458:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <mqtt_incoming_data_cb+0x80>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
 800045e:	e000      	b.n	8000462 <mqtt_incoming_data_cb+0x6e>
  if (!receiving_firmware) return;
 8000460:	bf00      	nop
  }
}
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	24040150 	.word	0x24040150
 800046c:	2404014c 	.word	0x2404014c
 8000470:	2400014c 	.word	0x2400014c
 8000474:	24040151 	.word	0x24040151

08000478 <do_connect>:


void do_connect(mqtt_client_t *client) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b08c      	sub	sp, #48	@ 0x30
 800047c:	af02      	add	r7, sp, #8
 800047e:	6078      	str	r0, [r7, #4]
  struct mqtt_connect_client_info_t ci;
  memset(&ci, 0, sizeof(ci));
 8000480:	f107 030c 	add.w	r3, r7, #12
 8000484:	221c      	movs	r2, #28
 8000486:	2100      	movs	r1, #0
 8000488:	4618      	mov	r0, r3
 800048a:	f013 f840 	bl	801350e <memset>

  ci.client_id = "DomainController";
 800048e:	4b13      	ldr	r3, [pc, #76]	@ (80004dc <do_connect+0x64>)
 8000490:	60fb      	str	r3, [r7, #12]
  ci.keep_alive  = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	833b      	strh	r3, [r7, #24]
  ci.will_topic  = "Status/Domain";
 8000496:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <do_connect+0x68>)
 8000498:	61fb      	str	r3, [r7, #28]
  ci.will_msg    = "Domain has disconnected unexpectedly";
 800049a:	4b12      	ldr	r3, [pc, #72]	@ (80004e4 <do_connect+0x6c>)
 800049c:	623b      	str	r3, [r7, #32]
  ci.will_qos    = 1;
 800049e:	2301      	movs	r3, #1
 80004a0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  ci.will_retain = 1;
 80004a4:	2301      	movs	r3, #1
 80004a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ip_addr_t mqttServerIP;
  IP4_ADDR(&mqttServerIP, 192, 168, 10, 231); // Broker IP
 80004aa:	4b0f      	ldr	r3, [pc, #60]	@ (80004e8 <do_connect+0x70>)
 80004ac:	60bb      	str	r3, [r7, #8]

  // Registra i callback per i messaggi in entrata
  mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, NULL);
 80004ae:	2300      	movs	r3, #0
 80004b0:	4a0e      	ldr	r2, [pc, #56]	@ (80004ec <do_connect+0x74>)
 80004b2:	490f      	ldr	r1, [pc, #60]	@ (80004f0 <do_connect+0x78>)
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f007 fe65 	bl	8008184 <mqtt_set_inpub_callback>

  // Connetti al broker
  mqtt_client_connect(client, &mqttServerIP, MQTT_PORT, NULL, 0, &ci);
 80004ba:	f107 0108 	add.w	r1, r7, #8
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	2300      	movs	r3, #0
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	2300      	movs	r3, #0
 80004ca:	f240 725b 	movw	r2, #1883	@ 0x75b
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f007 fe86 	bl	80081e0 <mqtt_client_connect>
}
 80004d4:	bf00      	nop
 80004d6:	3728      	adds	r7, #40	@ 0x28
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	08014278 	.word	0x08014278
 80004e0:	0801428c 	.word	0x0801428c
 80004e4:	0801429c 	.word	0x0801429c
 80004e8:	e70aa8c0 	.word	0xe70aa8c0
 80004ec:	080003f5 	.word	0x080003f5
 80004f0:	080003b1 	.word	0x080003b1

080004f4 <send_firmware_over_can>:



void send_firmware_over_can()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
    uint32_t offset = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
    uint32_t total_len = firmware_offset;
 80004fe:	4b49      	ldr	r3, [pc, #292]	@ (8000624 <send_firmware_over_can+0x130>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	613b      	str	r3, [r7, #16]



    TxHeader1.IdType = FDCAN_STANDARD_ID;
 8000504:	4b48      	ldr	r3, [pc, #288]	@ (8000628 <send_firmware_over_can+0x134>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
    TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 800050a:	4b47      	ldr	r3, [pc, #284]	@ (8000628 <send_firmware_over_can+0x134>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
    TxHeader1.DataLength = FDCAN_DLC_BYTES_1;
 8000510:	4b45      	ldr	r3, [pc, #276]	@ (8000628 <send_firmware_over_can+0x134>)
 8000512:	2201      	movs	r2, #1
 8000514:	60da      	str	r2, [r3, #12]
    TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000516:	4b44      	ldr	r3, [pc, #272]	@ (8000628 <send_firmware_over_can+0x134>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
    TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 800051c:	4b42      	ldr	r3, [pc, #264]	@ (8000628 <send_firmware_over_can+0x134>)
 800051e:	2200      	movs	r2, #0
 8000520:	615a      	str	r2, [r3, #20]
    TxHeader1.FDFormat = FDCAN_CLASSIC_CAN;
 8000522:	4b41      	ldr	r3, [pc, #260]	@ (8000628 <send_firmware_over_can+0x134>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
    TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000528:	4b3f      	ldr	r3, [pc, #252]	@ (8000628 <send_firmware_over_can+0x134>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
    TxHeader1.MessageMarker = 0;
 800052e:	4b3e      	ldr	r3, [pc, #248]	@ (8000628 <send_firmware_over_can+0x134>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]

    //Start message
    TxHeader1.Identifier = 0x10;
 8000534:	4b3c      	ldr	r3, [pc, #240]	@ (8000628 <send_firmware_over_can+0x134>)
 8000536:	2210      	movs	r2, #16
 8000538:	601a      	str	r2, [r3, #0]
    uint8_t data = 1;
 800053a:	2301      	movs	r3, #1
 800053c:	73bb      	strb	r3, [r7, #14]
    while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 800053e:	bf00      	nop
 8000540:	483a      	ldr	r0, [pc, #232]	@ (800062c <send_firmware_over_can+0x138>)
 8000542:	f003 f802 	bl	800354a <HAL_FDCAN_GetTxFifoFreeLevel>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0f9      	beq.n	8000540 <send_firmware_over_can+0x4c>
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, &data) != HAL_OK)
 800054c:	f107 030e 	add.w	r3, r7, #14
 8000550:	461a      	mov	r2, r3
 8000552:	4935      	ldr	r1, [pc, #212]	@ (8000628 <send_firmware_over_can+0x134>)
 8000554:	4835      	ldr	r0, [pc, #212]	@ (800062c <send_firmware_over_can+0x138>)
 8000556:	f002 ff9d 	bl	8003494 <HAL_FDCAN_AddMessageToTxFifoQ>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <send_firmware_over_can+0x70>
    {
    	/* Transmission request Error */
    	Error_Handler();
 8000560:	f000 fb58 	bl	8000c14 <Error_Handler>
    }
    //Data message
    TxHeader1.Identifier = 0x11;
 8000564:	4b30      	ldr	r3, [pc, #192]	@ (8000628 <send_firmware_over_can+0x134>)
 8000566:	2211      	movs	r2, #17
 8000568:	601a      	str	r2, [r3, #0]
    TxHeader1.DataLength = FDCAN_DLC_BYTES_8;
 800056a:	4b2f      	ldr	r3, [pc, #188]	@ (8000628 <send_firmware_over_can+0x134>)
 800056c:	2208      	movs	r2, #8
 800056e:	60da      	str	r2, [r3, #12]
    while (offset < total_len)
 8000570:	e02f      	b.n	80005d2 <send_firmware_over_can+0xde>
    {
        uint8_t can_data[CAN_MAX_PAYLOAD] = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
        uint8_t len = ((total_len - offset) >= CAN_MAX_PAYLOAD) ? CAN_MAX_PAYLOAD : (total_len - offset);
 800057a:	693a      	ldr	r2, [r7, #16]
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	1ad3      	subs	r3, r2, r3
 8000580:	2b08      	cmp	r3, #8
 8000582:	bf28      	it	cs
 8000584:	2308      	movcs	r3, #8
 8000586:	73fb      	strb	r3, [r7, #15]

        memcpy(can_data, &firmware_buffer[offset], len);
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	4a29      	ldr	r2, [pc, #164]	@ (8000630 <send_firmware_over_can+0x13c>)
 800058c:	1899      	adds	r1, r3, r2
 800058e:	7bfa      	ldrb	r2, [r7, #15]
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4618      	mov	r0, r3
 8000594:	f013 f831 	bl	80135fa <memcpy>
        offset += len;
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	4413      	add	r3, r2
 800059e:	617b      	str	r3, [r7, #20]


        uint32_t txMailbox;
        while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 80005a0:	bf00      	nop
 80005a2:	4822      	ldr	r0, [pc, #136]	@ (800062c <send_firmware_over_can+0x138>)
 80005a4:	f002 ffd1 	bl	800354a <HAL_FDCAN_GetTxFifoFreeLevel>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0f9      	beq.n	80005a2 <send_firmware_over_can+0xae>
        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, can_data) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	461a      	mov	r2, r3
 80005b2:	491d      	ldr	r1, [pc, #116]	@ (8000628 <send_firmware_over_can+0x134>)
 80005b4:	481d      	ldr	r0, [pc, #116]	@ (800062c <send_firmware_over_can+0x138>)
 80005b6:	f002 ff6d 	bl	8003494 <HAL_FDCAN_AddMessageToTxFifoQ>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <send_firmware_over_can+0xd0>
               {
                 /* Transmission request Error */
                 Error_Handler();
 80005c0:	f000 fb28 	bl	8000c14 <Error_Handler>
               }
        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80005c4:	2101      	movs	r1, #1
 80005c6:	481b      	ldr	r0, [pc, #108]	@ (8000634 <send_firmware_over_can+0x140>)
 80005c8:	f003 fb9f 	bl	8003d0a <HAL_GPIO_TogglePin>
        HAL_Delay(10);
 80005cc:	200a      	movs	r0, #10
 80005ce:	f000 ff2f 	bl	8001430 <HAL_Delay>
    while (offset < total_len)
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d3cb      	bcc.n	8000572 <send_firmware_over_can+0x7e>

    }
    //Final frame
    TxHeader1.Identifier = 0x12;
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <send_firmware_over_can+0x134>)
 80005dc:	2212      	movs	r2, #18
 80005de:	601a      	str	r2, [r3, #0]
    TxHeader1.DataLength = FDCAN_DLC_BYTES_1;
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <send_firmware_over_can+0x134>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	60da      	str	r2, [r3, #12]

    while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 80005e6:	bf00      	nop
 80005e8:	4810      	ldr	r0, [pc, #64]	@ (800062c <send_firmware_over_can+0x138>)
 80005ea:	f002 ffae 	bl	800354a <HAL_FDCAN_GetTxFifoFreeLevel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0f9      	beq.n	80005e8 <send_firmware_over_can+0xf4>
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, &data) != HAL_OK)
 80005f4:	f107 030e 	add.w	r3, r7, #14
 80005f8:	461a      	mov	r2, r3
 80005fa:	490b      	ldr	r1, [pc, #44]	@ (8000628 <send_firmware_over_can+0x134>)
 80005fc:	480b      	ldr	r0, [pc, #44]	@ (800062c <send_firmware_over_can+0x138>)
 80005fe:	f002 ff49 	bl	8003494 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <send_firmware_over_can+0x118>
                  {
                    /* Transmission request Error */
                    Error_Handler();
 8000608:	f000 fb04 	bl	8000c14 <Error_Handler>
                  }
           HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800060c:	2101      	movs	r1, #1
 800060e:	4809      	ldr	r0, [pc, #36]	@ (8000634 <send_firmware_over_can+0x140>)
 8000610:	f003 fb7b 	bl	8003d0a <HAL_GPIO_TogglePin>
           HAL_Delay(10);
 8000614:	200a      	movs	r0, #10
 8000616:	f000 ff0b 	bl	8001430 <HAL_Delay>
}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2404014c 	.word	0x2404014c
 8000628:	24040154 	.word	0x24040154
 800062c:	240000a8 	.word	0x240000a8
 8000630:	2400014c 	.word	0x2400014c
 8000634:	58020400 	.word	0x58020400

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800063e:	f000 fa97 	bl	8000b70 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000642:	4b60      	ldr	r3, [pc, #384]	@ (80007c4 <main+0x18c>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800064a:	2b00      	cmp	r3, #0
 800064c:	d11b      	bne.n	8000686 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000654:	f3bf 8f6f 	isb	sy
}
 8000658:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800065a:	4b5a      	ldr	r3, [pc, #360]	@ (80007c4 <main+0x18c>)
 800065c:	2200      	movs	r2, #0
 800065e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000662:	f3bf 8f4f 	dsb	sy
}
 8000666:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000668:	f3bf 8f6f 	isb	sy
}
 800066c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800066e:	4b55      	ldr	r3, [pc, #340]	@ (80007c4 <main+0x18c>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a54      	ldr	r2, [pc, #336]	@ (80007c4 <main+0x18c>)
 8000674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000678:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800067a:	f3bf 8f4f 	dsb	sy
}
 800067e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000680:	f3bf 8f6f 	isb	sy
}
 8000684:	e000      	b.n	8000688 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000686:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000688:	4b4e      	ldr	r3, [pc, #312]	@ (80007c4 <main+0x18c>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000690:	2b00      	cmp	r3, #0
 8000692:	d138      	bne.n	8000706 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000694:	4b4b      	ldr	r3, [pc, #300]	@ (80007c4 <main+0x18c>)
 8000696:	2200      	movs	r2, #0
 8000698:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800069c:	f3bf 8f4f 	dsb	sy
}
 80006a0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006a2:	4b48      	ldr	r3, [pc, #288]	@ (80007c4 <main+0x18c>)
 80006a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80006a8:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	0b5b      	lsrs	r3, r3, #13
 80006ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006b2:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	08db      	lsrs	r3, r3, #3
 80006b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006bc:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	015a      	lsls	r2, r3, #5
 80006c2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80006c6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006cc:	493d      	ldr	r1, [pc, #244]	@ (80007c4 <main+0x18c>)
 80006ce:	4313      	orrs	r3, r2
 80006d0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	1e5a      	subs	r2, r3, #1
 80006d8:	603a      	str	r2, [r7, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1ef      	bne.n	80006be <main+0x86>
    } while(sets-- != 0U);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1e5a      	subs	r2, r3, #1
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1e5      	bne.n	80006b4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80006e8:	f3bf 8f4f 	dsb	sy
}
 80006ec:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006ee:	4b35      	ldr	r3, [pc, #212]	@ (80007c4 <main+0x18c>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a34      	ldr	r2, [pc, #208]	@ (80007c4 <main+0x18c>)
 80006f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006fa:	f3bf 8f4f 	dsb	sy
}
 80006fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000700:	f3bf 8f6f 	isb	sy
}
 8000704:	e000      	b.n	8000708 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000706:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 fe00 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f866 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f000 f966 	bl	80009e0 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000714:	f005 fe76 	bl	8006404 <MX_LWIP_Init>
  MX_FDCAN1_Init();
 8000718:	f000 f8dc 	bl	80008d4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  client = mqtt_client_new();
 800071c:	f007 fd56 	bl	80081cc <mqtt_client_new>
 8000720:	4603      	mov	r3, r0
 8000722:	4a29      	ldr	r2, [pc, #164]	@ (80007c8 <main+0x190>)
 8000724:	6013      	str	r3, [r2, #0]
   while (!mqtt_client_is_connected(client)) {
 8000726:	e009      	b.n	800073c <main+0x104>
     MX_LWIP_Process();
 8000728:	f005 ffac 	bl	8006684 <MX_LWIP_Process>
     do_connect(client);
 800072c:	4b26      	ldr	r3, [pc, #152]	@ (80007c8 <main+0x190>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fea1 	bl	8000478 <do_connect>
     HAL_Delay(100);
 8000736:	2064      	movs	r0, #100	@ 0x64
 8000738:	f000 fe7a 	bl	8001430 <HAL_Delay>
   while (!mqtt_client_is_connected(client)) {
 800073c:	4b22      	ldr	r3, [pc, #136]	@ (80007c8 <main+0x190>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f007 ffc9 	bl	80086d8 <mqtt_client_is_connected>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0ed      	beq.n	8000728 <main+0xf0>
   }

   // Dopo la connessione, sottoscriviti al topic
   err_t err = mqtt_subscribe(client, "firmware", 1, NULL, NULL);
 800074c:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <main+0x190>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	2301      	movs	r3, #1
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	2300      	movs	r3, #0
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2300      	movs	r3, #0
 800075a:	2201      	movs	r2, #1
 800075c:	491b      	ldr	r1, [pc, #108]	@ (80007cc <main+0x194>)
 800075e:	f007 fc3b 	bl	8007fd8 <mqtt_sub_unsub>
 8000762:	4603      	mov	r3, r0
 8000764:	73fb      	strb	r3, [r7, #15]



   if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000766:	481a      	ldr	r0, [pc, #104]	@ (80007d0 <main+0x198>)
 8000768:	f002 fe69 	bl	800343e <HAL_FDCAN_Start>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <main+0x13e>
       Error_Handler();
 8000772:	f000 fa4f 	bl	8000c14 <Error_Handler>
   }

   // Configure TX Header for FDCAN1
    TxHeader1.Identifier = 0x11;
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <main+0x19c>)
 8000778:	2211      	movs	r2, #17
 800077a:	601a      	str	r2, [r3, #0]
    TxHeader1.IdType = FDCAN_STANDARD_ID;
 800077c:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <main+0x19c>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
    TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 8000782:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <main+0x19c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
    TxHeader1.DataLength = FDCAN_DLC_BYTES_8;
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <main+0x19c>)
 800078a:	2208      	movs	r2, #8
 800078c:	60da      	str	r2, [r3, #12]
    TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <main+0x19c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
    TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <main+0x19c>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
    TxHeader1.FDFormat = FDCAN_CLASSIC_CAN;
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <main+0x19c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
    TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <main+0x19c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
    TxHeader1.MessageMarker = 0;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <main+0x19c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80007ac:	f005 ff6a 	bl	8006684 <MX_LWIP_Process>
	  if(send_to_can){
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <main+0x1a0>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d0f9      	beq.n	80007ac <main+0x174>
		  send_to_can = 0;
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <main+0x1a0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
		  send_firmware_over_can();
 80007be:	f7ff fe99 	bl	80004f4 <send_firmware_over_can>
	  MX_LWIP_Process();
 80007c2:	e7f3      	b.n	80007ac <main+0x174>
 80007c4:	e000ed00 	.word	0xe000ed00
 80007c8:	24000148 	.word	0x24000148
 80007cc:	0801426c 	.word	0x0801426c
 80007d0:	240000a8 	.word	0x240000a8
 80007d4:	24040154 	.word	0x24040154
 80007d8:	24040151 	.word	0x24040151

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09c      	sub	sp, #112	@ 0x70
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e6:	224c      	movs	r2, #76	@ 0x4c
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f012 fe8f 	bl	801350e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2220      	movs	r2, #32
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f012 fe89 	bl	801350e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007fc:	2002      	movs	r0, #2
 80007fe:	f003 fa9f 	bl	8003d40 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b31      	ldr	r3, [pc, #196]	@ (80008cc <SystemClock_Config+0xf0>)
 8000808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800080a:	4a30      	ldr	r2, [pc, #192]	@ (80008cc <SystemClock_Config+0xf0>)
 800080c:	f023 0301 	bic.w	r3, r3, #1
 8000810:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000812:	4b2e      	ldr	r3, [pc, #184]	@ (80008cc <SystemClock_Config+0xf0>)
 8000814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4b2c      	ldr	r3, [pc, #176]	@ (80008d0 <SystemClock_Config+0xf4>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a2b      	ldr	r2, [pc, #172]	@ (80008d0 <SystemClock_Config+0xf4>)
 8000822:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b29      	ldr	r3, [pc, #164]	@ (80008d0 <SystemClock_Config+0xf4>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000834:	bf00      	nop
 8000836:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <SystemClock_Config+0xf4>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800083e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000842:	d1f8      	bne.n	8000836 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000848:	2301      	movs	r3, #1
 800084a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084c:	2340      	movs	r3, #64	@ 0x40
 800084e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000850:	2302      	movs	r3, #2
 8000852:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000854:	2300      	movs	r3, #0
 8000856:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000858:	2304      	movs	r3, #4
 800085a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 800085c:	2332      	movs	r3, #50	@ 0x32
 800085e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000860:	2302      	movs	r3, #2
 8000862:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000864:	2308      	movs	r3, #8
 8000866:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000868:	2302      	movs	r3, #2
 800086a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800086c:	230c      	movs	r3, #12
 800086e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000870:	2300      	movs	r3, #0
 8000872:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fa99 	bl	8003db4 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000888:	f000 f9c4 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	233f      	movs	r3, #63	@ 0x3f
 800088e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2303      	movs	r3, #3
 8000892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000898:	2308      	movs	r3, #8
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800089c:	2340      	movs	r3, #64	@ 0x40
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008a0:	2340      	movs	r3, #64	@ 0x40
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008aa:	2340      	movs	r3, #64	@ 0x40
 80008ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2102      	movs	r1, #2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 fed8 	bl	8004668 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80008be:	f000 f9a9 	bl	8000c14 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3770      	adds	r7, #112	@ 0x70
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	58000400 	.word	0x58000400
 80008d0:	58024800 	.word	0x58024800

080008d4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80008da:	4b3f      	ldr	r3, [pc, #252]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 80008dc:	4a3f      	ldr	r2, [pc, #252]	@ (80009dc <MX_FDCAN1_Init+0x108>)
 80008de:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008e0:	4b3d      	ldr	r3, [pc, #244]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80008e6:	4b3c      	ldr	r3, [pc, #240]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80008ec:	4b3a      	ldr	r3, [pc, #232]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008f2:	4b39      	ldr	r3, [pc, #228]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80008f8:	4b37      	ldr	r3, [pc, #220]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 80008fe:	4b36      	ldr	r3, [pc, #216]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000900:	2214      	movs	r2, #20
 8000902:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000904:	4b34      	ldr	r3, [pc, #208]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000906:	2201      	movs	r2, #1
 8000908:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800090a:	4b33      	ldr	r3, [pc, #204]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 800090c:	2202      	movs	r2, #2
 800090e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000910:	4b31      	ldr	r3, [pc, #196]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000912:	2202      	movs	r2, #2
 8000914:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000916:	4b30      	ldr	r3, [pc, #192]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000918:	2201      	movs	r2, #1
 800091a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800091c:	4b2e      	ldr	r3, [pc, #184]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 800091e:	2201      	movs	r2, #1
 8000920:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000922:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000924:	2201      	movs	r2, #1
 8000926:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000928:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 800092a:	2201      	movs	r2, #1
 800092c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800092e:	4b2a      	ldr	r3, [pc, #168]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000930:	2200      	movs	r2, #0
 8000932:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000934:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000936:	2201      	movs	r2, #1
 8000938:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800093a:	4b27      	ldr	r3, [pc, #156]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 800093c:	2200      	movs	r2, #0
 800093e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000940:	4b25      	ldr	r3, [pc, #148]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000942:	2201      	movs	r2, #1
 8000944:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000946:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000948:	2204      	movs	r2, #4
 800094a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 800094e:	2200      	movs	r2, #0
 8000950:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000952:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000954:	2204      	movs	r2, #4
 8000956:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 800095a:	2200      	movs	r2, #0
 800095c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800095e:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000960:	2204      	movs	r2, #4
 8000962:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000964:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000966:	2200      	movs	r2, #0
 8000968:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800096a:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 800096c:	2200      	movs	r2, #0
 800096e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 8;
 8000970:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000972:	2208      	movs	r2, #8
 8000974:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000976:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000978:	2200      	movs	r2, #0
 800097a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800097c:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 800097e:	2204      	movs	r2, #4
 8000980:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000982:	4815      	ldr	r0, [pc, #84]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 8000984:	f002 fada 	bl	8002f3c <HAL_FDCAN_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800098e:	f000 f941 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
   sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
   sFilterConfig.FilterIndex = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
   sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800099a:	2302      	movs	r3, #2
 800099c:	60bb      	str	r3, [r7, #8]
   sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800099e:	2301      	movs	r3, #1
 80009a0:	60fb      	str	r3, [r7, #12]
   sFilterConfig.FilterID1 = 0x0000;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
   sFilterConfig.FilterID2 = 0x0000;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]

   if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) !=HAL_OK){
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	480a      	ldr	r0, [pc, #40]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 80009b0:	f002 fca2 	bl	80032f8 <HAL_FDCAN_ConfigFilter>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_FDCAN1_Init+0xea>
       Error_Handler();
 80009ba:	f000 f92b 	bl	8000c14 <Error_Handler>
     }
   HAL_FDCAN_ConfigGlobalFilter(&hfdcan1,
 80009be:	2300      	movs	r3, #0
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2300      	movs	r3, #0
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <MX_FDCAN1_Init+0x104>)
 80009ca:	f002 fd0b 	bl	80033e4 <HAL_FDCAN_ConfigGlobalFilter>
       FDCAN_FILTER_REMOTE);


  /* USER CODE END FDCAN1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	240000a8 	.word	0x240000a8
 80009dc:	4000a000 	.word	0x4000a000

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	@ 0x30
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b59      	ldr	r3, [pc, #356]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	4a57      	ldr	r2, [pc, #348]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a06:	4b55      	ldr	r3, [pc, #340]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a14:	4b51      	ldr	r3, [pc, #324]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1a:	4a50      	ldr	r2, [pc, #320]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a24:	4b4d      	ldr	r3, [pc, #308]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b4a      	ldr	r3, [pc, #296]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	4a48      	ldr	r2, [pc, #288]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a42:	4b46      	ldr	r3, [pc, #280]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	4b42      	ldr	r3, [pc, #264]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a56:	4a41      	ldr	r2, [pc, #260]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a60:	4b3e      	ldr	r3, [pc, #248]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a74:	4a39      	ldr	r2, [pc, #228]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a7e:	4b37      	ldr	r3, [pc, #220]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8c:	4b33      	ldr	r3, [pc, #204]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a92:	4a32      	ldr	r2, [pc, #200]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aba:	4b28      	ldr	r3, [pc, #160]	@ (8000b5c <MX_GPIO_Init+0x17c>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac0:	f003 0310 	and.w	r3, r3, #16
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ace:	4824      	ldr	r0, [pc, #144]	@ (8000b60 <MX_GPIO_Init+0x180>)
 8000ad0:	f003 f902 	bl	8003cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	4822      	ldr	r0, [pc, #136]	@ (8000b64 <MX_GPIO_Init+0x184>)
 8000ada:	f003 f8fd 	bl	8003cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ade:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	481d      	ldr	r0, [pc, #116]	@ (8000b68 <MX_GPIO_Init+0x188>)
 8000af4:	f002 ff40 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000af8:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4813      	ldr	r0, [pc, #76]	@ (8000b60 <MX_GPIO_Init+0x180>)
 8000b12:	f002 ff31 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	480e      	ldr	r0, [pc, #56]	@ (8000b6c <MX_GPIO_Init+0x18c>)
 8000b34:	f002 ff20 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <MX_GPIO_Init+0x184>)
 8000b50:	f002 ff12 	bl	8003978 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b54:	bf00      	nop
 8000b56:	3730      	adds	r7, #48	@ 0x30
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020400 	.word	0x58020400
 8000b64:	58021000 	.word	0x58021000
 8000b68:	58020800 	.word	0x58020800
 8000b6c:	58020c00 	.word	0x58020c00

08000b70 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b76:	463b      	mov	r3, r7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b82:	f000 fd7d 	bl	8001680 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b86:	2301      	movs	r3, #1
 8000b88:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b92:	231f      	movs	r3, #31
 8000b94:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b96:	2387      	movs	r3, #135	@ 0x87
 8000b98:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fd9b 	bl	80016f0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MPU_Config+0x9c>)
 8000bc0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fd89 	bl	80016f0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <MPU_Config+0xa0>)
 8000be4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000be6:	2308      	movs	r3, #8
 8000be8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 fd79 	bl	80016f0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bfe:	2004      	movs	r0, #4
 8000c00:	f000 fd56 	bl	80016b0 <HAL_MPU_Enable>

}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	30020000 	.word	0x30020000
 8000c10:	30040000 	.word	0x30040000

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <Error_Handler+0x8>

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <HAL_MspInit+0x30>)
 8000c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c2c:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_MspInit+0x30>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_MspInit+0x30>)
 8000c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	58024400 	.word	0x58024400

08000c54 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0ba      	sub	sp, #232	@ 0xe8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	22c0      	movs	r2, #192	@ 0xc0
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f012 fc4a 	bl	801350e <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a27      	ldr	r2, [pc, #156]	@ (8000d1c <HAL_FDCAN_MspInit+0xc8>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d146      	bne.n	8000d12 <HAL_FDCAN_MspInit+0xbe>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000c90:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f004 f843 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000ca8:	f7ff ffb4 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000cac:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <HAL_FDCAN_MspInit+0xcc>)
 8000cae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d20 <HAL_FDCAN_MspInit+0xcc>)
 8000cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cb8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <HAL_FDCAN_MspInit+0xcc>)
 8000cbe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_FDCAN_MspInit+0xcc>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd0:	4a13      	ldr	r2, [pc, #76]	@ (8000d20 <HAL_FDCAN_MspInit+0xcc>)
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <HAL_FDCAN_MspInit+0xcc>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce0:	f003 0308 	and.w	r3, r3, #8
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d00:	2309      	movs	r3, #9
 8000d02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d06:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <HAL_FDCAN_MspInit+0xd0>)
 8000d0e:	f002 fe33 	bl	8003978 <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000d12:	bf00      	nop
 8000d14:	37e8      	adds	r7, #232	@ 0xe8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	4000a000 	.word	0x4000a000
 8000d20:	58024400 	.word	0x58024400
 8000d24:	58020c00 	.word	0x58020c00

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <NMI_Handler+0x4>

08000d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <MemManage_Handler+0x4>

08000d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7e:	f000 fb37 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  return 1;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <_kill>:

int _kill(int pid, int sig)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000da2:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <_kill+0x20>)
 8000da4:	2216      	movs	r2, #22
 8000da6:	601a      	str	r2, [r3, #0]
  return -1;
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	24043494 	.word	0x24043494

08000dbc <_exit>:

void _exit (int status)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ffe5 	bl	8000d98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dce:	bf00      	nop
 8000dd0:	e7fd      	b.n	8000dce <_exit+0x12>

08000dd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e00a      	b.n	8000dfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000de4:	f3af 8000 	nop.w
 8000de8:	4601      	mov	r1, r0
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1c5a      	adds	r2, r3, #1
 8000dee:	60ba      	str	r2, [r7, #8]
 8000df0:	b2ca      	uxtb	r2, r1
 8000df2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3301      	adds	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	dbf0      	blt.n	8000de4 <_read+0x12>
  }

  return len;
 8000e02:	687b      	ldr	r3, [r7, #4]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	e009      	b.n	8000e32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	60ba      	str	r2, [r7, #8]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dbf1      	blt.n	8000e1e <_write+0x12>
  }
  return len;
 8000e3a:	687b      	ldr	r3, [r7, #4]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <_close>:

int _close(int file)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e6c:	605a      	str	r2, [r3, #4]
  return 0;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <_isatty>:

int _isatty(int file)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e84:	2301      	movs	r3, #1
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b085      	sub	sp, #20
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	@ (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d205      	bcs.n	8000ee8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <_sbrk+0x6c>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee6:	e009      	b.n	8000efc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eee:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <_sbrk+0x64>)
 8000ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	371c      	adds	r7, #28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	24080000 	.word	0x24080000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	24040178 	.word	0x24040178
 8000f14:	240434a8 	.word	0x240434a8
 8000f18:	24043494 	.word	0x24043494

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f22:	4b4a      	ldr	r3, [pc, #296]	@ (800104c <SystemInit+0x130>)
 8000f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f28:	4a48      	ldr	r2, [pc, #288]	@ (800104c <SystemInit+0x130>)
 8000f2a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f2e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f32:	4b47      	ldr	r3, [pc, #284]	@ (8001050 <SystemInit+0x134>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d807      	bhi.n	8000f4e <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f3e:	4b44      	ldr	r3, [pc, #272]	@ (8001050 <SystemInit+0x134>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f023 030f 	bic.w	r3, r3, #15
 8000f46:	4a42      	ldr	r2, [pc, #264]	@ (8001050 <SystemInit+0x134>)
 8000f48:	f043 0307 	orr.w	r3, r3, #7
 8000f4c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f4e:	4b41      	ldr	r3, [pc, #260]	@ (8001054 <SystemInit+0x138>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a40      	ldr	r2, [pc, #256]	@ (8001054 <SystemInit+0x138>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001054 <SystemInit+0x138>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f60:	4b3c      	ldr	r3, [pc, #240]	@ (8001054 <SystemInit+0x138>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	493b      	ldr	r1, [pc, #236]	@ (8001054 <SystemInit+0x138>)
 8000f66:	4b3c      	ldr	r3, [pc, #240]	@ (8001058 <SystemInit+0x13c>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f6c:	4b38      	ldr	r3, [pc, #224]	@ (8001050 <SystemInit+0x134>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d007      	beq.n	8000f88 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f78:	4b35      	ldr	r3, [pc, #212]	@ (8001050 <SystemInit+0x134>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 030f 	bic.w	r3, r3, #15
 8000f80:	4a33      	ldr	r2, [pc, #204]	@ (8001050 <SystemInit+0x134>)
 8000f82:	f043 0307 	orr.w	r3, r3, #7
 8000f86:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f88:	4b32      	ldr	r3, [pc, #200]	@ (8001054 <SystemInit+0x138>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f8e:	4b31      	ldr	r3, [pc, #196]	@ (8001054 <SystemInit+0x138>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f94:	4b2f      	ldr	r3, [pc, #188]	@ (8001054 <SystemInit+0x138>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001054 <SystemInit+0x138>)
 8000f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800105c <SystemInit+0x140>)
 8000f9e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8001054 <SystemInit+0x138>)
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8001060 <SystemInit+0x144>)
 8000fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8001054 <SystemInit+0x138>)
 8000fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8001064 <SystemInit+0x148>)
 8000faa:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fac:	4b29      	ldr	r3, [pc, #164]	@ (8001054 <SystemInit+0x138>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <SystemInit+0x138>)
 8000fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8001064 <SystemInit+0x148>)
 8000fb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <SystemInit+0x138>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	@ (8001054 <SystemInit+0x138>)
 8000fc0:	4a28      	ldr	r2, [pc, #160]	@ (8001064 <SystemInit+0x148>)
 8000fc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <SystemInit+0x138>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fca:	4b22      	ldr	r3, [pc, #136]	@ (8001054 <SystemInit+0x138>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a21      	ldr	r2, [pc, #132]	@ (8001054 <SystemInit+0x138>)
 8000fd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fd4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <SystemInit+0x138>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fdc:	4b22      	ldr	r3, [pc, #136]	@ (8001068 <SystemInit+0x14c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b22      	ldr	r3, [pc, #136]	@ (800106c <SystemInit+0x150>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fe8:	d202      	bcs.n	8000ff0 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fea:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <SystemInit+0x154>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <SystemInit+0x138>)
 8000ff2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000ff6:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <SystemInit+0x138>)
 8000ff8:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 8000ffc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <SystemInit+0x138>)
 8001002:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001006:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001008:	687b      	ldr	r3, [r7, #4]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <SystemInit+0x138>)
 800100c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d113      	bne.n	8001040 <SystemInit+0x124>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <SystemInit+0x138>)
 800101a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800101e:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <SystemInit+0x138>)
 8001020:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001024:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <SystemInit+0x158>)
 800102a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800102e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <SystemInit+0x138>)
 8001032:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001036:	4a07      	ldr	r2, [pc, #28]	@ (8001054 <SystemInit+0x138>)
 8001038:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800103c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00
 8001050:	52002000 	.word	0x52002000
 8001054:	58024400 	.word	0x58024400
 8001058:	eaf6ed7f 	.word	0xeaf6ed7f
 800105c:	02020200 	.word	0x02020200
 8001060:	01ff0000 	.word	0x01ff0000
 8001064:	01010280 	.word	0x01010280
 8001068:	5c001000 	.word	0x5c001000
 800106c:	ffff0000 	.word	0xffff0000
 8001070:	51008108 	.word	0x51008108
 8001074:	52004000 	.word	0x52004000

08001078 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <ExitRun0Mode+0x2c>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <ExitRun0Mode+0x2c>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001088:	bf00      	nop
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <ExitRun0Mode+0x2c>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f9      	beq.n	800108a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	58024800 	.word	0x58024800

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80010e4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80010ac:	f7ff ffe4 	bl	8001078 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b0:	f7ff ff34 	bl	8000f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	@ (80010ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	@ (80010f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010da:	f012 fa67 	bl	80135ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010de:	f7ff faab 	bl	8000638 <main>
  bx  lr
 80010e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010ec:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 80010f0:	0801769c 	.word	0x0801769c
  ldr r2, =_sbss
 80010f4:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 80010f8:	240434a4 	.word	0x240434a4

080010fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC3_IRQHandler>

080010fe <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00b      	beq.n	8001126 <LAN8742_RegisterBusIO+0x28>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d007      	beq.n	8001126 <LAN8742_RegisterBusIO+0x28>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <LAN8742_RegisterBusIO+0x28>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800112a:	e014      	b.n	8001156 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	691a      	ldr	r2, [r3, #16]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d139      	bne.n	80011f2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2220      	movs	r2, #32
 8001190:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e01c      	b.n	80011d2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	f107 020c 	add.w	r2, r7, #12
 80011a0:	2112      	movs	r1, #18
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	4798      	blx	r3
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da03      	bge.n	80011b4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80011ac:	f06f 0304 	mvn.w	r3, #4
 80011b0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80011b2:	e00b      	b.n	80011cc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d105      	bne.n	80011cc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
         break;
 80011ca:	e005      	b.n	80011d8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b1f      	cmp	r3, #31
 80011d6:	d9df      	bls.n	8001198 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b1f      	cmp	r3, #31
 80011de:	d902      	bls.n	80011e6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011e0:	f06f 0302 	mvn.w	r3, #2
 80011e4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80011f2:	693b      	ldr	r3, [r7, #16]
 }
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6810      	ldr	r0, [r2, #0]
 8001210:	f107 020c 	add.w	r2, r7, #12
 8001214:	2101      	movs	r1, #1
 8001216:	4798      	blx	r3
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	da02      	bge.n	8001224 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800121e:	f06f 0304 	mvn.w	r3, #4
 8001222:	e06e      	b.n	8001302 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6810      	ldr	r0, [r2, #0]
 800122c:	f107 020c 	add.w	r2, r7, #12
 8001230:	2101      	movs	r1, #1
 8001232:	4798      	blx	r3
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	da02      	bge.n	8001240 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800123a:	f06f 0304 	mvn.w	r3, #4
 800123e:	e060      	b.n	8001302 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800124a:	2301      	movs	r3, #1
 800124c:	e059      	b.n	8001302 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6810      	ldr	r0, [r2, #0]
 8001256:	f107 020c 	add.w	r2, r7, #12
 800125a:	2100      	movs	r1, #0
 800125c:	4798      	blx	r3
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	da02      	bge.n	800126a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001264:	f06f 0304 	mvn.w	r3, #4
 8001268:	e04b      	b.n	8001302 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d11b      	bne.n	80012ac <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <LAN8742_GetLinkState+0x90>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001288:	2302      	movs	r3, #2
 800128a:	e03a      	b.n	8001302 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001296:	2303      	movs	r3, #3
 8001298:	e033      	b.n	8001302 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012a4:	2304      	movs	r3, #4
 80012a6:	e02c      	b.n	8001302 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012a8:	2305      	movs	r3, #5
 80012aa:	e02a      	b.n	8001302 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6810      	ldr	r0, [r2, #0]
 80012b4:	f107 020c 	add.w	r2, r7, #12
 80012b8:	211f      	movs	r1, #31
 80012ba:	4798      	blx	r3
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	da02      	bge.n	80012c8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80012c2:	f06f 0304 	mvn.w	r3, #4
 80012c6:	e01c      	b.n	8001302 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80012d2:	2306      	movs	r3, #6
 80012d4:	e015      	b.n	8001302 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f003 031c 	and.w	r3, r3, #28
 80012dc:	2b18      	cmp	r3, #24
 80012de:	d101      	bne.n	80012e4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012e0:	2302      	movs	r3, #2
 80012e2:	e00e      	b.n	8001302 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 031c 	and.w	r3, r3, #28
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d101      	bne.n	80012f2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e007      	b.n	8001302 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f003 031c 	and.w	r3, r3, #28
 80012f8:	2b14      	cmp	r3, #20
 80012fa:	d101      	bne.n	8001300 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012fc:	2304      	movs	r3, #4
 80012fe:	e000      	b.n	8001302 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001300:	2305      	movs	r3, #5
    }
  }
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001312:	2003      	movs	r0, #3
 8001314:	f000 f982 	bl	800161c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001318:	f003 fb5c 	bl	80049d4 <HAL_RCC_GetSysClockFreq>
 800131c:	4602      	mov	r2, r0
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <HAL_Init+0x68>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	f003 030f 	and.w	r3, r3, #15
 8001328:	4913      	ldr	r1, [pc, #76]	@ (8001378 <HAL_Init+0x6c>)
 800132a:	5ccb      	ldrb	r3, [r1, r3]
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001336:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <HAL_Init+0x68>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	4a0e      	ldr	r2, [pc, #56]	@ (8001378 <HAL_Init+0x6c>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
 8001342:	f003 031f 	and.w	r3, r3, #31
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	4a0b      	ldr	r2, [pc, #44]	@ (800137c <HAL_Init+0x70>)
 800134e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001350:	4a0b      	ldr	r2, [pc, #44]	@ (8001380 <HAL_Init+0x74>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001356:	2000      	movs	r0, #0
 8001358:	f000 f814 	bl	8001384 <HAL_InitTick>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e002      	b.n	800136c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001366:	f7ff fc5b 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	58024400 	.word	0x58024400
 8001378:	080174a0 	.word	0x080174a0
 800137c:	24000004 	.word	0x24000004
 8001380:	24000000 	.word	0x24000000

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_InitTick+0x60>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e021      	b.n	80013dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001398:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <HAL_InitTick+0x64>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_InitTick+0x60>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f959 	bl	8001666 <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00e      	b.n	80013dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d80a      	bhi.n	80013da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013cc:	f000 f931 	bl	8001632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d0:	4a06      	ldr	r2, [pc, #24]	@ (80013ec <HAL_InitTick+0x68>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2400000c 	.word	0x2400000c
 80013e8:	24000000 	.word	0x24000000
 80013ec:	24000008 	.word	0x24000008

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	2400000c 	.word	0x2400000c
 8001414:	2404017c 	.word	0x2404017c

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	2404017c 	.word	0x2404017c

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff ffee 	bl	8001418 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffde 	bl	8001418 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2400000c 	.word	0x2400000c

08001478 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800147c:	4b03      	ldr	r3, [pc, #12]	@ (800148c <HAL_GetREVID+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0c1b      	lsrs	r3, r3, #16
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	5c001000 	.word	0x5c001000

08001490 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80014a0:	4904      	ldr	r1, [pc, #16]	@ (80014b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	58000400 	.word	0x58000400

080014b8 <__NVIC_SetPriorityGrouping>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <__NVIC_SetPriorityGrouping+0x40>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	@ (80014f8 <__NVIC_SetPriorityGrouping+0x40>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00
 80014fc:	05fa0000 	.word	0x05fa0000

08001500 <__NVIC_GetPriorityGrouping>:
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b04      	ldr	r3, [pc, #16]	@ (8001518 <__NVIC_GetPriorityGrouping+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	f003 0307 	and.w	r3, r3, #7
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_SetPriority>:
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152c:	2b00      	cmp	r3, #0
 800152e:	db0a      	blt.n	8001546 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	490c      	ldr	r1, [pc, #48]	@ (8001568 <__NVIC_SetPriority+0x4c>)
 8001536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	440b      	add	r3, r1
 8001540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001544:	e00a      	b.n	800155c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4908      	ldr	r1, [pc, #32]	@ (800156c <__NVIC_SetPriority+0x50>)
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	3b04      	subs	r3, #4
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	440b      	add	r3, r1
 800155a:	761a      	strb	r2, [r3, #24]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <NVIC_EncodePriority>:
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	@ 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f1c3 0307 	rsb	r3, r3, #7
 800158a:	2b04      	cmp	r3, #4
 800158c:	bf28      	it	cs
 800158e:	2304      	movcs	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3304      	adds	r3, #4
 8001596:	2b06      	cmp	r3, #6
 8001598:	d902      	bls.n	80015a0 <NVIC_EncodePriority+0x30>
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3b03      	subs	r3, #3
 800159e:	e000      	b.n	80015a2 <NVIC_EncodePriority+0x32>
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	401a      	ands	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
 80015c2:	43d9      	mvns	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	4313      	orrs	r3, r2
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3724      	adds	r7, #36	@ 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015e8:	d301      	bcc.n	80015ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00f      	b.n	800160e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <SysTick_Config+0x40>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f6:	210f      	movs	r1, #15
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015fc:	f7ff ff8e 	bl	800151c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <SysTick_Config+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <SysTick_Config+0x40>)
 8001608:	2207      	movs	r2, #7
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff47 	bl	80014b8 <__NVIC_SetPriorityGrouping>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff5e 	bl	8001500 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff90 	bl	8001570 <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5f 	bl	800151c <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffb2 	bl	80015d8 <SysTick_Config>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001684:	f3bf 8f5f 	dmb	sy
}
 8001688:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800168a:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <HAL_MPU_Disable+0x28>)
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168e:	4a06      	ldr	r2, [pc, #24]	@ (80016a8 <HAL_MPU_Disable+0x28>)
 8001690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001694:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001696:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <HAL_MPU_Disable+0x2c>)
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00
 80016ac:	e000ed90 	.word	0xe000ed90

080016b0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016b8:	4a0b      	ldr	r2, [pc, #44]	@ (80016e8 <HAL_MPU_Enable+0x38>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_MPU_Enable+0x3c>)
 80016c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c6:	4a09      	ldr	r2, [pc, #36]	@ (80016ec <HAL_MPU_Enable+0x3c>)
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016cc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016ce:	f3bf 8f4f 	dsb	sy
}
 80016d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016d4:	f3bf 8f6f 	isb	sy
}
 80016d8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed90 	.word	0xe000ed90
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	785a      	ldrb	r2, [r3, #1]
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <HAL_MPU_ConfigRegion+0x7c>)
 80016fe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001700:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <HAL_MPU_ConfigRegion+0x7c>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	4a19      	ldr	r2, [pc, #100]	@ (800176c <HAL_MPU_ConfigRegion+0x7c>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800170c:	4a17      	ldr	r2, [pc, #92]	@ (800176c <HAL_MPU_ConfigRegion+0x7c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7b1b      	ldrb	r3, [r3, #12]
 8001718:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7adb      	ldrb	r3, [r3, #11]
 800171e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001720:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7a9b      	ldrb	r3, [r3, #10]
 8001726:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001728:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7b5b      	ldrb	r3, [r3, #13]
 800172e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001730:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7b9b      	ldrb	r3, [r3, #14]
 8001736:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001738:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7bdb      	ldrb	r3, [r3, #15]
 800173e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001740:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7a5b      	ldrb	r3, [r3, #9]
 8001746:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001748:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7a1b      	ldrb	r3, [r3, #8]
 800174e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001750:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001758:	4a04      	ldr	r2, [pc, #16]	@ (800176c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800175a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800175c:	6113      	str	r3, [r2, #16]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed90 	.word	0xe000ed90

08001770 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0e3      	b.n	800194a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001788:	2b00      	cmp	r3, #0
 800178a:	d106      	bne.n	800179a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2220      	movs	r2, #32
 8001790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f005 f939 	bl	8006a0c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	4b6e      	ldr	r3, [pc, #440]	@ (8001954 <HAL_ETH_Init+0x1e4>)
 800179c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017a0:	4a6c      	ldr	r2, [pc, #432]	@ (8001954 <HAL_ETH_Init+0x1e4>)
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001954 <HAL_ETH_Init+0x1e4>)
 80017ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7a1b      	ldrb	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d103      	bne.n	80017c8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff fe65 	bl	8001490 <HAL_SYSCFG_ETHInterfaceSelect>
 80017c6:	e003      	b.n	80017d0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80017c8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80017cc:	f7ff fe60 	bl	8001490 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80017d0:	4b61      	ldr	r3, [pc, #388]	@ (8001958 <HAL_ETH_Init+0x1e8>)
 80017d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ec:	f7ff fe14 	bl	8001418 <HAL_GetTick>
 80017f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017f2:	e011      	b.n	8001818 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017f4:	f7ff fe10 	bl	8001418 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001802:	d909      	bls.n	8001818 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2204      	movs	r2, #4
 8001808:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	22e0      	movs	r2, #224	@ 0xe0
 8001810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e098      	b.n	800194a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1e4      	bne.n	80017f4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fdb4 	bl	8002398 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001830:	f003 fa4a 	bl	8004cc8 <HAL_RCC_GetHCLKFreq>
 8001834:	4603      	mov	r3, r0
 8001836:	4a49      	ldr	r2, [pc, #292]	@ (800195c <HAL_ETH_Init+0x1ec>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	0c9a      	lsrs	r2, r3, #18
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3a01      	subs	r2, #1
 8001844:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 ff97 	bl	800277c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001856:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800185a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001866:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800186a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	22e0      	movs	r2, #224	@ 0xe0
 8001886:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e05d      	b.n	800194a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001896:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800189a:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <HAL_ETH_Init+0x1f0>)
 800189c:	4013      	ands	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6952      	ldr	r2, [r2, #20]
 80018a2:	0051      	lsls	r1, r2, #1
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	430b      	orrs	r3, r1
 80018aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018ae:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 ffff 	bl	80028b6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f001 f845 	bl	8002948 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	3305      	adds	r3, #5
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	021a      	lsls	r2, r3, #8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	3304      	adds	r3, #4
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	3303      	adds	r3, #3
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	061a      	lsls	r2, r3, #24
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	3302      	adds	r3, #2
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	041b      	lsls	r3, r3, #16
 80018f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	3301      	adds	r3, #1
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800190a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800190c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <HAL_ETH_Init+0x1f4>)
 800191e:	430b      	orrs	r3, r1
 8001920:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <HAL_ETH_Init+0x1f8>)
 8001932:	430b      	orrs	r3, r1
 8001934:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2210      	movs	r2, #16
 8001944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	58024400 	.word	0x58024400
 8001958:	58000400 	.word	0x58000400
 800195c:	431bde83 	.word	0x431bde83
 8001960:	ffff8001 	.word	0xffff8001
 8001964:	0c020060 	.word	0x0c020060
 8001968:	0c20c000 	.word	0x0c20c000

0800196c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800197a:	2b10      	cmp	r3, #16
 800197c:	d153      	bne.n	8001a26 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2220      	movs	r2, #32
 8001982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2204      	movs	r2, #4
 800198a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f9f3 	bl	8001d78 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0202 	orr.w	r2, r2, #2
 80019a0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019de:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019fa:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a06:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001a12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a16:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2240      	movs	r2, #64	@ 0x40
 8001a1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
  }
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a3e:	2b40      	cmp	r3, #64	@ 0x40
 8001a40:	d13f      	bne.n	8001ac2 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a52:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a62:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a7e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0202 	bic.w	r2, r2, #2
 8001ab4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
  }
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e07f      	b.n	8001bf6 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001afc:	2b40      	cmp	r3, #64	@ 0x40
 8001afe:	d179      	bne.n	8001bf4 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001b00:	2200      	movs	r2, #0
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 ff7d 	bl	8002a04 <ETH_Prepare_Tx_Descriptors>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d009      	beq.n	8001b24 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b16:	f043 0202 	orr.w	r2, r3, #2
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e068      	b.n	8001bf6 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b24:	f3bf 8f4f 	dsb	sy
}
 8001b28:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3206      	adds	r2, #6
 8001b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b36:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d904      	bls.n	8001b54 <HAL_ETH_Transmit+0x84>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	1f1a      	subs	r2, r3, #4
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3106      	adds	r1, #6
 8001b60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b68:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 8001b6c:	f7ff fc54 	bl	8001418 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001b72:	e039      	b.n	8001be8 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b7c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001b80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d012      	beq.n	8001bae <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8e:	f043 0208 	orr.w	r2, r3, #8
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e023      	b.n	8001bf6 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bb4:	d018      	beq.n	8001be8 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bb6:	f7ff fc2f 	bl	8001418 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d302      	bcc.n	8001bcc <HAL_ETH_Transmit+0xfc>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10d      	bne.n	8001be8 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bd2:	f043 0204 	orr.w	r2, r3, #4
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001be2:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e006      	b.n	8001bf6 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	dbc1      	blt.n	8001b74 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e000      	b.n	8001bf6 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
  }
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b088      	sub	sp, #32
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0a2      	b.n	8001d70 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c30:	2b40      	cmp	r3, #64	@ 0x40
 8001c32:	d001      	beq.n	8001c38 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e09b      	b.n	8001d70 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	3212      	adds	r2, #18
 8001c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c48:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c4e:	f1c3 0304 	rsb	r3, r3, #4
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c54:	e064      	b.n	8001d20 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <HAL_ETH_ReadData+0x88>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d03a      	beq.n	8001cfc <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f005 f86e 	bl	8006dbc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	441a      	add	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d902      	bls.n	8001d0e <HAL_ETH_ReadData+0x110>
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	3212      	adds	r2, #18
 8001d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d18:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db06      	blt.n	8001d36 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d202      	bcs.n	8001d36 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8001d30:	7cfb      	ldrb	r3, [r7, #19]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d08f      	beq.n	8001c56 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	441a      	add	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f814 	bl	8001d78 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001d56:	7cfb      	ldrb	r3, [r7, #19]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d108      	bne.n	8001d6e <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001d84:	2301      	movs	r3, #1
 8001d86:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d8c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	3212      	adds	r2, #18
 8001d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d98:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d9e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001da0:	e038      	b.n	8001e14 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d112      	bne.n	8001dd0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	4618      	mov	r0, r3
 8001db0:	f004 ffd4 	bl	8006d5c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	74fb      	strb	r3, [r7, #19]
 8001dbe:	e007      	b.n	8001dd0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001dd0:	7cfb      	ldrb	r3, [r7, #19]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d01e      	beq.n	8001e14 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	e003      	b.n	8001df0 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8001dee:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	3301      	adds	r3, #1
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d902      	bls.n	8001e02 <ETH_UpdateDescriptor+0x8a>
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	3212      	adds	r2, #18
 8001e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <ETH_UpdateDescriptor+0xa8>
 8001e1a:	7cfb      	ldrb	r3, [r7, #19]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1c0      	bne.n	8001da2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d01b      	beq.n	8001e62 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3303      	adds	r3, #3
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001e34:	f3bf 8f5f 	dmb	sy
}
 8001e38:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6919      	ldr	r1, [r3, #16]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	18ca      	adds	r2, r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e52:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001e62:	bf00      	nop
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e03e      	b.n	8001f0a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e94:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	055b      	lsls	r3, r3, #21
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f043 030c 	orr.w	r3, r3, #12
 8001eb8:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001ecc:	f7ff faa4 	bl	8001418 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001ed2:	e009      	b.n	8001ee8 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001ed4:	f7ff faa0 	bl	8001418 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ee2:	d901      	bls.n	8001ee8 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e010      	b.n	8001f0a <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1ed      	bne.n	8001ed4 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e03c      	b.n	8001fb0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f3e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	055b      	lsls	r3, r3, #21
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	041b      	lsls	r3, r3, #16
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f023 030c 	bic.w	r3, r3, #12
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f76:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb8 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001f82:	f7ff fa49 	bl	8001418 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f88:	e009      	b.n	8001f9e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f8a:	f7ff fa45 	bl	8001418 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f98:	d901      	bls.n	8001f9e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e008      	b.n	8001fb0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ed      	bne.n	8001f8a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40028000 	.word	0x40028000

08001fbc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e1c3      	b.n	8002358 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 020c 	and.w	r2, r3, #12
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf14      	ite	ne
 8001fec:	2301      	movne	r3, #1
 8001fee:	2300      	moveq	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	bf0c      	ite	eq
 8002016:	2301      	moveq	r3, #1
 8002018:	2300      	movne	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf14      	ite	ne
 8002032:	2301      	movne	r3, #1
 8002034:	2300      	moveq	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800205e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002062:	2b00      	cmp	r3, #0
 8002064:	bf14      	ite	ne
 8002066:	2301      	movne	r3, #1
 8002068:	2300      	moveq	r3, #0
 800206a:	b2db      	uxtb	r3, r3
 800206c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	461a      	mov	r2, r3
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bf14      	ite	ne
 80020b6:	2301      	movne	r3, #1
 80020b8:	2300      	moveq	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800211a:	2b00      	cmp	r3, #0
 800211c:	bf14      	ite	ne
 800211e:	2301      	movne	r3, #1
 8002120:	2300      	moveq	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf14      	ite	ne
 8002138:	2301      	movne	r3, #1
 800213a:	2300      	moveq	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800214a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf14      	ite	ne
 8002152:	2301      	movne	r3, #1
 8002154:	2300      	moveq	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf14      	ite	ne
 800217a:	2301      	movne	r3, #1
 800217c:	2300      	moveq	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80021e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	0e5b      	lsrs	r3, r3, #25
 800221a:	f003 021f 	and.w	r2, r3, #31
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 020f 	and.w	r2, r3, #15
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	bf14      	ite	ne
 800225a:	2301      	movne	r3, #1
 800225c:	2300      	moveq	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	b29a      	uxth	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c6:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bf14      	ite	ne
 80022ce:	2301      	movne	r3, #1
 80022d0:	2300      	moveq	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80022e4:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80022f4:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf0c      	ite	eq
 8002348:	2301      	moveq	r3, #1
 800234a:	2300      	movne	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e00b      	b.n	8002390 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800237e:	2b10      	cmp	r3, #16
 8002380:	d105      	bne.n	800238e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002382:	6839      	ldr	r1, [r7, #0]
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f857 	bl	8002438 <ETH_SetMACConfig>

    return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
  }
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80023b2:	f002 fc89 	bl	8004cc8 <HAL_RCC_GetHCLKFreq>
 80023b6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002424 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d804      	bhi.n	80023ca <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	e022      	b.n	8002410 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	4a16      	ldr	r2, [pc, #88]	@ (8002428 <HAL_ETH_SetMDIOClockRange+0x90>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d204      	bcs.n	80023dc <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e019      	b.n	8002410 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4a13      	ldr	r2, [pc, #76]	@ (800242c <HAL_ETH_SetMDIOClockRange+0x94>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d915      	bls.n	8002410 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4a12      	ldr	r2, [pc, #72]	@ (8002430 <HAL_ETH_SetMDIOClockRange+0x98>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d804      	bhi.n	80023f6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e00c      	b.n	8002410 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002434 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d804      	bhi.n	8002408 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	e003      	b.n	8002410 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800240e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	02160ebf 	.word	0x02160ebf
 8002428:	03938700 	.word	0x03938700
 800242c:	05f5e0ff 	.word	0x05f5e0ff
 8002430:	08f0d17f 	.word	0x08f0d17f
 8002434:	0ee6b27f 	.word	0x0ee6b27f

08002438 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800244a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	791b      	ldrb	r3, [r3, #4]
 8002450:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002452:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	7b1b      	ldrb	r3, [r3, #12]
 8002458:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800245a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	7b5b      	ldrb	r3, [r3, #13]
 8002460:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002462:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	7b9b      	ldrb	r3, [r3, #14]
 8002468:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800246a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	7bdb      	ldrb	r3, [r3, #15]
 8002470:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002472:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	7c12      	ldrb	r2, [r2, #16]
 8002478:	2a00      	cmp	r2, #0
 800247a:	d102      	bne.n	8002482 <ETH_SetMACConfig+0x4a>
 800247c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002480:	e000      	b.n	8002484 <ETH_SetMACConfig+0x4c>
 8002482:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002484:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	7c52      	ldrb	r2, [r2, #17]
 800248a:	2a00      	cmp	r2, #0
 800248c:	d102      	bne.n	8002494 <ETH_SetMACConfig+0x5c>
 800248e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002492:	e000      	b.n	8002496 <ETH_SetMACConfig+0x5e>
 8002494:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002496:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	7c9b      	ldrb	r3, [r3, #18]
 800249c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800249e:	431a      	orrs	r2, r3
               macconf->Speed |
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80024a4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80024aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	7f1b      	ldrb	r3, [r3, #28]
 80024b0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80024b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	7f5b      	ldrb	r3, [r3, #29]
 80024b8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80024ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	7f92      	ldrb	r2, [r2, #30]
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	d102      	bne.n	80024ca <ETH_SetMACConfig+0x92>
 80024c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024c8:	e000      	b.n	80024cc <ETH_SetMACConfig+0x94>
 80024ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80024cc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	7fdb      	ldrb	r3, [r3, #31]
 80024d2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80024d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024dc:	2a00      	cmp	r2, #0
 80024de:	d102      	bne.n	80024e6 <ETH_SetMACConfig+0xae>
 80024e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024e4:	e000      	b.n	80024e8 <ETH_SetMACConfig+0xb0>
 80024e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80024e8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024f6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80024f8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b56      	ldr	r3, [pc, #344]	@ (8002664 <ETH_SetMACConfig+0x22c>)
 800250a:	4013      	ands	r3, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	68f9      	ldr	r1, [r7, #12]
 8002512:	430b      	orrs	r3, r1
 8002514:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002522:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002524:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800252c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800252e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002536:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002538:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002540:	2a00      	cmp	r2, #0
 8002542:	d102      	bne.n	800254a <ETH_SetMACConfig+0x112>
 8002544:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002548:	e000      	b.n	800254c <ETH_SetMACConfig+0x114>
 800254a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800254c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4b42      	ldr	r3, [pc, #264]	@ (8002668 <ETH_SetMACConfig+0x230>)
 800255e:	4013      	ands	r3, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	430b      	orrs	r3, r1
 8002568:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002570:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	4b3a      	ldr	r3, [pc, #232]	@ (800266c <ETH_SetMACConfig+0x234>)
 8002582:	4013      	ands	r3, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	68f9      	ldr	r1, [r7, #12]
 800258a:	430b      	orrs	r3, r1
 800258c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002594:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800259a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	d101      	bne.n	80025aa <ETH_SetMACConfig+0x172>
 80025a6:	2280      	movs	r2, #128	@ 0x80
 80025a8:	e000      	b.n	80025ac <ETH_SetMACConfig+0x174>
 80025aa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80025ac:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025be:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80025c2:	4013      	ands	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	68f9      	ldr	r1, [r7, #12]
 80025ca:	430b      	orrs	r3, r1
 80025cc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80025d4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80025dc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ea:	f023 0103 	bic.w	r1, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002602:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800261e:	2a00      	cmp	r2, #0
 8002620:	d101      	bne.n	8002626 <ETH_SetMACConfig+0x1ee>
 8002622:	2240      	movs	r2, #64	@ 0x40
 8002624:	e000      	b.n	8002628 <ETH_SetMACConfig+0x1f0>
 8002626:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002628:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002630:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002632:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800263a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002648:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	430a      	orrs	r2, r1
 8002654:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	00048083 	.word	0x00048083
 8002668:	c0f88000 	.word	0xc0f88000
 800266c:	fffffef0 	.word	0xfffffef0

08002670 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b38      	ldr	r3, [pc, #224]	@ (8002768 <ETH_SetDMAConfig+0xf8>)
 8002686:	4013      	ands	r3, r2
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	6811      	ldr	r1, [r2, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	430b      	orrs	r3, r1
 8002692:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002696:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	791b      	ldrb	r3, [r3, #4]
 800269c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	7b1b      	ldrb	r3, [r3, #12]
 80026a8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	4b2c      	ldr	r3, [pc, #176]	@ (800276c <ETH_SetDMAConfig+0xfc>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	430b      	orrs	r3, r1
 80026c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026c8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	7b5b      	ldrb	r3, [r3, #13]
 80026ce:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80026e4:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <ETH_SetDMAConfig+0x100>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	68f9      	ldr	r1, [r7, #12]
 80026ee:	430b      	orrs	r3, r1
 80026f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026f4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	7d1b      	ldrb	r3, [r3, #20]
 8002700:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002702:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	7f5b      	ldrb	r3, [r3, #29]
 8002708:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002716:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800271a:	4b16      	ldr	r3, [pc, #88]	@ (8002774 <ETH_SetDMAConfig+0x104>)
 800271c:	4013      	ands	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	68f9      	ldr	r1, [r7, #12]
 8002724:	430b      	orrs	r3, r1
 8002726:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800272a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	7f1b      	ldrb	r3, [r3, #28]
 8002732:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002744:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002748:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <ETH_SetDMAConfig+0x108>)
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	68f9      	ldr	r1, [r7, #12]
 8002752:	430b      	orrs	r3, r1
 8002754:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002758:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	ffff87fd 	.word	0xffff87fd
 800276c:	ffff2ffe 	.word	0xffff2ffe
 8002770:	fffec000 	.word	0xfffec000
 8002774:	ffc0efef 	.word	0xffc0efef
 8002778:	7fc0ffff 	.word	0x7fc0ffff

0800277c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b0a4      	sub	sp, #144	@ 0x90
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002784:	2301      	movs	r3, #1
 8002786:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800278a:	2300      	movs	r3, #0
 800278c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800279a:	2301      	movs	r3, #1
 800279c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027bc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80027be:	2300      	movs	r3, #0
 80027c0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80027d4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80027d8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80027e0:	2300      	movs	r3, #0
 80027e2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80027f6:	2300      	movs	r3, #0
 80027f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80027fe:	2300      	movs	r3, #0
 8002800:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002808:	2300      	movs	r3, #0
 800280a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800280e:	2301      	movs	r3, #1
 8002810:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002814:	2320      	movs	r3, #32
 8002816:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002826:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800282a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800282c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002830:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002832:	2300      	movs	r3, #0
 8002834:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002838:	2302      	movs	r3, #2
 800283a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800284a:	2300      	movs	r3, #0
 800284c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002850:	2301      	movs	r3, #1
 8002852:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002856:	2300      	movs	r3, #0
 8002858:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff fde6 	bl	8002438 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800286c:	2301      	movs	r3, #1
 800286e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002870:	2301      	movs	r3, #1
 8002872:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002878:	2300      	movs	r3, #0
 800287a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002886:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800288a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002890:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002894:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800289c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80028a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028a2:	f107 0308 	add.w	r3, r7, #8
 80028a6:	4619      	mov	r1, r3
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff fee1 	bl	8002670 <ETH_SetDMAConfig>
}
 80028ae:	bf00      	nop
 80028b0:	3790      	adds	r7, #144	@ 0x90
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e01d      	b.n	8002900 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68d9      	ldr	r1, [r3, #12]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2200      	movs	r2, #0
 80028e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	3206      	adds	r2, #6
 80028f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	3301      	adds	r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b03      	cmp	r3, #3
 8002904:	d9de      	bls.n	80028c4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002914:	461a      	mov	r2, r3
 8002916:	2303      	movs	r3, #3
 8002918:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002928:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002938:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	e023      	b.n	800299e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6919      	ldr	r1, [r3, #16]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2200      	movs	r2, #0
 8002972:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2200      	movs	r2, #0
 800297e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2200      	movs	r2, #0
 800298a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	3212      	adds	r2, #18
 8002994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3301      	adds	r3, #1
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d9d8      	bls.n	8002956 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ca:	461a      	mov	r2, r3
 80029cc:	2303      	movs	r3, #3
 80029ce:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029de:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029f2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b091      	sub	sp, #68	@ 0x44
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3318      	adds	r3, #24
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a46:	d007      	beq.n	8002a58 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e266      	b.n	8002f2a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d044      	beq.n	8002af2 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	4b75      	ldr	r3, [pc, #468]	@ (8002c44 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a74:	431a      	orrs	r2, r3
 8002a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a78:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002a94:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d027      	beq.n	8002af2 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abe:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002acc:	431a      	orrs	r2, r3
 8002ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002ae0:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002af0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00e      	beq.n	8002b1c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	4b51      	ldr	r3, [pc, #324]	@ (8002c48 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	6992      	ldr	r2, [r2, #24]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d036      	beq.n	8002ba2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b40:	f3bf 8f5f 	dmb	sy
}
 8002b44:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b50:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b54:	3301      	adds	r3, #1
 8002b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d902      	bls.n	8002b64 <ETH_Prepare_Tx_Descriptors+0x160>
 8002b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b60:	3b04      	subs	r3, #4
 8002b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6c:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8002b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b70:	3301      	adds	r3, #1
 8002b72:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b80:	d10f      	bne.n	8002ba2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	6a3a      	ldr	r2, [r7, #32]
 8002b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002b8c:	f3bf 8f5f 	dmb	sy
}
 8002b90:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e1c3      	b.n	8002f2a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	4b24      	ldr	r3, [pc, #144]	@ (8002c48 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bbc:	6852      	ldr	r2, [r2, #4]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc2:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d012      	beq.n	8002bf2 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bda:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c4c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002be6:	6852      	ldr	r2, [r2, #4]
 8002be8:	0412      	lsls	r2, r2, #16
 8002bea:	431a      	orrs	r2, r3
 8002bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	e008      	b.n	8002c04 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	4b13      	ldr	r3, [pc, #76]	@ (8002c4c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c02:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d021      	beq.n	8002c54 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	04db      	lsls	r3, r3, #19
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c22:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	69d2      	ldr	r2, [r2, #28]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c34:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	e02e      	b.n	8002ca2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002c44:	ffff0000 	.word	0xffff0000
 8002c48:	ffffc000 	.word	0xffffc000
 8002c4c:	c000ffff 	.word	0xc000ffff
 8002c50:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	4b7b      	ldr	r3, [pc, #492]	@ (8002e48 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	6852      	ldr	r2, [r2, #4]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c64:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c82:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbe:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cca:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cd8:	f3bf 8f5f 	dmb	sy
}
 8002cdc:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce8:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 80da 	beq.w	8002eac <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d08:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d0a:	e0cf      	b.n	8002eac <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d16:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d902      	bls.n	8002d2a <ETH_Prepare_Tx_Descriptors+0x326>
 8002d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d26:	3b04      	subs	r3, #4
 8002d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d32:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d4c:	d007      	beq.n	8002d5e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d52:	3304      	adds	r3, #4
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d029      	beq.n	8002db2 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d70:	e019      	b.n	8002da6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d72:	f3bf 8f5f 	dmb	sy
}
 8002d76:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d82:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d86:	3301      	adds	r3, #1
 8002d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d902      	bls.n	8002d96 <ETH_Prepare_Tx_Descriptors+0x392>
 8002d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d92:	3b04      	subs	r3, #4
 8002d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da2:	3301      	adds	r3, #1
 8002da4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002da6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d3e1      	bcc.n	8002d72 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002dae:	2302      	movs	r3, #2
 8002db0:	e0bb      	b.n	8002f2a <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8002db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db4:	3301      	adds	r3, #1
 8002db6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e4c <ETH_Prepare_Tx_Descriptors+0x448>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dd2:	6852      	ldr	r2, [r2, #4]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d012      	beq.n	8002e08 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	4b16      	ldr	r3, [pc, #88]	@ (8002e50 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dfc:	6852      	ldr	r2, [r2, #4]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	431a      	orrs	r2, r3
 8002e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	e008      	b.n	8002e1a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	4b0f      	ldr	r3, [pc, #60]	@ (8002e50 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e18:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d018      	beq.n	8002e58 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e54 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	69d2      	ldr	r2, [r2, #28]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e36:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e42:	60da      	str	r2, [r3, #12]
 8002e44:	e020      	b.n	8002e88 <ETH_Prepare_Tx_Descriptors+0x484>
 8002e46:	bf00      	nop
 8002e48:	ffff8000 	.word	0xffff8000
 8002e4c:	ffffc000 	.word	0xffffc000
 8002e50:	c000ffff 	.word	0xc000ffff
 8002e54:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	4b36      	ldr	r3, [pc, #216]	@ (8002f38 <ETH_Prepare_Tx_Descriptors+0x534>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	6852      	ldr	r2, [r2, #4]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e68:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e86:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002e8e:	f3bf 8f5f 	dmb	sy
}
 8002e92:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eaa:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f47f af2b 	bne.w	8002d0c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d006      	beq.n	8002eca <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	e005      	b.n	8002ed6 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee0:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ee6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eea:	3304      	adds	r3, #4
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ef6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8002efc:	61bb      	str	r3, [r7, #24]
  return(result);
 8002efe:	69bb      	ldr	r3, [r7, #24]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	2301      	movs	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f383 8810 	msr	PRIMASK, r3
}
 8002f0c:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f14:	4413      	add	r3, r2
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f383 8810 	msr	PRIMASK, r3
}
 8002f26:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3744      	adds	r7, #68	@ 0x44
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	ffff8000 	.word	0xffff8000

08002f3c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b098      	sub	sp, #96	@ 0x60
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002f44:	4a84      	ldr	r2, [pc, #528]	@ (8003158 <HAL_FDCAN_Init+0x21c>)
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	224c      	movs	r2, #76	@ 0x4c
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f010 fb53 	bl	80135fa <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e1c6      	b.n	80032ec <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a7e      	ldr	r2, [pc, #504]	@ (800315c <HAL_FDCAN_Init+0x220>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d106      	bne.n	8002f76 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f70:	461a      	mov	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fd fe62 	bl	8000c54 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0210 	bic.w	r2, r2, #16
 8002f9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fa0:	f7fe fa3a 	bl	8001418 <HAL_GetTick>
 8002fa4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002fa6:	e014      	b.n	8002fd2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002fa8:	f7fe fa36 	bl	8001418 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b0a      	cmp	r3, #10
 8002fb4:	d90d      	bls.n	8002fd2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2203      	movs	r2, #3
 8002fca:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e18c      	b.n	80032ec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d0e3      	beq.n	8002fa8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ff0:	f7fe fa12 	bl	8001418 <HAL_GetTick>
 8002ff4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ff6:	e014      	b.n	8003022 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ff8:	f7fe fa0e 	bl	8001418 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b0a      	cmp	r3, #10
 8003004:	d90d      	bls.n	8003022 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2203      	movs	r2, #3
 800301a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e164      	b.n	80032ec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0e3      	beq.n	8002ff8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0202 	orr.w	r2, r2, #2
 800303e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7c1b      	ldrb	r3, [r3, #16]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d108      	bne.n	800305a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003056:	619a      	str	r2, [r3, #24]
 8003058:	e007      	b.n	800306a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003068:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7c5b      	ldrb	r3, [r3, #17]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d108      	bne.n	8003084 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699a      	ldr	r2, [r3, #24]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003080:	619a      	str	r2, [r3, #24]
 8003082:	e007      	b.n	8003094 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003092:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	7c9b      	ldrb	r3, [r3, #18]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d108      	bne.n	80030ae <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030aa:	619a      	str	r2, [r3, #24]
 80030ac:	e007      	b.n	80030be <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699a      	ldr	r2, [r3, #24]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030bc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80030e2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0210 	bic.w	r2, r2, #16
 80030f2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d108      	bne.n	800310e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0204 	orr.w	r2, r2, #4
 800310a:	619a      	str	r2, [r3, #24]
 800310c:	e030      	b.n	8003170 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d02c      	beq.n	8003170 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d020      	beq.n	8003160 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699a      	ldr	r2, [r3, #24]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800312c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0210 	orr.w	r2, r2, #16
 800313c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b03      	cmp	r3, #3
 8003144:	d114      	bne.n	8003170 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0220 	orr.w	r2, r2, #32
 8003154:	619a      	str	r2, [r3, #24]
 8003156:	e00b      	b.n	8003170 <HAL_FDCAN_Init+0x234>
 8003158:	080142c4 	.word	0x080142c4
 800315c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0220 	orr.w	r2, r2, #32
 800316e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	3b01      	subs	r3, #1
 8003176:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	3b01      	subs	r3, #1
 800317e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003180:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003188:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	3b01      	subs	r3, #1
 8003192:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003198:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800319a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031a4:	d115      	bne.n	80031d2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031aa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	3b01      	subs	r3, #1
 80031b2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80031b4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	3b01      	subs	r3, #1
 80031bc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80031be:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	3b01      	subs	r3, #1
 80031c8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80031ce:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80031d0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f8:	4413      	add	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d011      	beq.n	8003222 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003206:	f023 0107 	bic.w	r1, r3, #7
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	3360      	adds	r3, #96	@ 0x60
 8003212:	443b      	add	r3, r7
 8003214:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d011      	beq.n	800324e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003232:	f023 0107 	bic.w	r1, r3, #7
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	3360      	adds	r3, #96	@ 0x60
 800323e:	443b      	add	r3, r7
 8003240:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003252:	2b00      	cmp	r3, #0
 8003254:	d012      	beq.n	800327c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800325e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	3360      	adds	r3, #96	@ 0x60
 800326a:	443b      	add	r3, r7
 800326c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003270:	011a      	lsls	r2, r3, #4
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003280:	2b00      	cmp	r3, #0
 8003282:	d012      	beq.n	80032aa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800328c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	3360      	adds	r3, #96	@ 0x60
 8003298:	443b      	add	r3, r7
 800329a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800329e:	021a      	lsls	r2, r3, #8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a11      	ldr	r2, [pc, #68]	@ (80032f4 <HAL_FDCAN_Init+0x3b8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d107      	bne.n	80032c4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f022 0203 	bic.w	r2, r2, #3
 80032c2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f947 	bl	8003570 <FDCAN_CalcultateRamBlockAddresses>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80032e8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3760      	adds	r7, #96	@ 0x60
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	4000a000 	.word	0x4000a000

080032f8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003308:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d002      	beq.n	8003316 <HAL_FDCAN_ConfigFilter+0x1e>
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d157      	bne.n	80033c6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d12b      	bne.n	8003376 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b07      	cmp	r3, #7
 8003324:	d10d      	bne.n	8003342 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003332:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003338:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800333a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	e00e      	b.n	8003360 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800334e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003356:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e025      	b.n	80033c2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	075a      	lsls	r2, r3, #29
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b07      	cmp	r3, #7
 800338a:	d103      	bne.n	8003394 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	e006      	b.n	80033a2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	079a      	lsls	r2, r3, #30
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3304      	adds	r3, #4
 80033ba:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	e008      	b.n	80033d8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033cc:	f043 0202 	orr.w	r2, r3, #2
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
  }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d110      	bne.n	8003420 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003406:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800340c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003418:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e008      	b.n	8003432 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003426:	f043 0204 	orr.w	r2, r3, #4
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d111      	bne.n	8003476 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699a      	ldr	r2, [r3, #24]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e008      	b.n	8003488 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800347c:	f043 0204 	orr.w	r2, r3, #4
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
  }
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d141      	bne.n	8003530 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80034b4:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034c2:	f043 0220 	orr.w	r2, r3, #32
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e038      	b.n	8003542 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80034d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d009      	beq.n	80034f4 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e026      	b.n	8003542 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80034fc:	0c1b      	lsrs	r3, r3, #16
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f9b6 	bl	800387c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2101      	movs	r1, #1
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003520:	2201      	movs	r2, #1
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	409a      	lsls	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	e008      	b.n	8003542 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003536:	f043 0208 	orr.w	r2, r3, #8
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800355a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800355e:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8003560:	68fb      	ldr	r3, [r7, #12]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003586:	4ba7      	ldr	r3, [pc, #668]	@ (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003588:	4013      	ands	r3, r2
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	0091      	lsls	r1, r2, #2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	430b      	orrs	r3, r1
 8003594:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035a0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	041a      	lsls	r2, r3, #16
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	4413      	add	r3, r2
 80035bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80035c6:	4b97      	ldr	r3, [pc, #604]	@ (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	0091      	lsls	r1, r2, #2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	430b      	orrs	r3, r1
 80035d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	041a      	lsls	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4413      	add	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003608:	4b86      	ldr	r3, [pc, #536]	@ (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800360a:	4013      	ands	r3, r2
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	0091      	lsls	r1, r2, #2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	430b      	orrs	r3, r1
 8003616:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003622:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	041a      	lsls	r2, r3, #16
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	4413      	add	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003650:	4b74      	ldr	r3, [pc, #464]	@ (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003652:	4013      	ands	r3, r2
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	0091      	lsls	r1, r2, #2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	430b      	orrs	r3, r1
 800365e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800366a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003672:	041a      	lsls	r2, r3, #16
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4413      	add	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8003698:	4b62      	ldr	r3, [pc, #392]	@ (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800369a:	4013      	ands	r3, r2
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	0091      	lsls	r1, r2, #2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4413      	add	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80036c4:	4b57      	ldr	r3, [pc, #348]	@ (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	0091      	lsls	r1, r2, #2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036de:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e6:	041a      	lsls	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	4413      	add	r3, r2
 80036fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003706:	4b47      	ldr	r3, [pc, #284]	@ (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003708:	4013      	ands	r3, r2
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	0091      	lsls	r1, r2, #2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	430b      	orrs	r3, r1
 8003714:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003720:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003728:	041a      	lsls	r2, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800373c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003744:	061a      	lsls	r2, r3, #24
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003754:	4b34      	ldr	r3, [pc, #208]	@ (8003828 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003756:	4413      	add	r3, r2
 8003758:	009a      	lsls	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	441a      	add	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	441a      	add	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003790:	441a      	add	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80037a8:	441a      	add	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80037c0:	441a      	add	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800380c:	441a      	add	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381a:	4a04      	ldr	r2, [pc, #16]	@ (800382c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d915      	bls.n	800384c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003820:	e006      	b.n	8003830 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003822:	bf00      	nop
 8003824:	ffff0003 	.word	0xffff0003
 8003828:	10002b00 	.word	0x10002b00
 800382c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003836:	f043 0220 	orr.w	r2, r3, #32
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2203      	movs	r2, #3
 8003844:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e010      	b.n	800386e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e005      	b.n	8003860 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3304      	adds	r3, #4
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	429a      	cmp	r2, r3
 800386a:	d3f3      	bcc.n	8003854 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop

0800387c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	@ 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800389a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e00a      	b.n	80038be <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80038b0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80038b6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80038b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80038bc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80038c8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80038ce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80038d4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038ea:	6839      	ldr	r1, [r7, #0]
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	3304      	adds	r3, #4
 8003900:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	3304      	adds	r3, #4
 800390c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	e020      	b.n	8003956 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	3303      	adds	r3, #3
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	4413      	add	r3, r2
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	3302      	adds	r3, #2
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	440b      	add	r3, r1
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800392c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	3301      	adds	r3, #1
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	440b      	add	r3, r1
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800393a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	440a      	add	r2, r1
 8003942:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003944:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	3304      	adds	r3, #4
 800394e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3304      	adds	r3, #4
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	4a06      	ldr	r2, [pc, #24]	@ (8003974 <FDCAN_CopyMessageToRAM+0xf8>)
 800395c:	5cd3      	ldrb	r3, [r2, r3]
 800395e:	461a      	mov	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	4293      	cmp	r3, r2
 8003964:	d3d6      	bcc.n	8003914 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8003966:	bf00      	nop
 8003968:	bf00      	nop
 800396a:	3724      	adds	r7, #36	@ 0x24
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	080174b0 	.word	0x080174b0

08003978 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	@ 0x24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003986:	4b89      	ldr	r3, [pc, #548]	@ (8003bac <HAL_GPIO_Init+0x234>)
 8003988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800398a:	e194      	b.n	8003cb6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8186 	beq.w	8003cb0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d005      	beq.n	80039bc <HAL_GPIO_Init+0x44>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d130      	bne.n	8003a1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039f2:	2201      	movs	r2, #1
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 0201 	and.w	r2, r3, #1
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d017      	beq.n	8003a5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	2203      	movs	r2, #3
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d123      	bne.n	8003aae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	08da      	lsrs	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3208      	adds	r2, #8
 8003a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	220f      	movs	r2, #15
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	08da      	lsrs	r2, r3, #3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3208      	adds	r2, #8
 8003aa8:	69b9      	ldr	r1, [r7, #24]
 8003aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	2203      	movs	r2, #3
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0203 	and.w	r2, r3, #3
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80e0 	beq.w	8003cb0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af0:	4b2f      	ldr	r3, [pc, #188]	@ (8003bb0 <HAL_GPIO_Init+0x238>)
 8003af2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003af6:	4a2e      	ldr	r2, [pc, #184]	@ (8003bb0 <HAL_GPIO_Init+0x238>)
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003b00:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb0 <HAL_GPIO_Init+0x238>)
 8003b02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b0e:	4a29      	ldr	r2, [pc, #164]	@ (8003bb4 <HAL_GPIO_Init+0x23c>)
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	089b      	lsrs	r3, r3, #2
 8003b14:	3302      	adds	r3, #2
 8003b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	220f      	movs	r2, #15
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a20      	ldr	r2, [pc, #128]	@ (8003bb8 <HAL_GPIO_Init+0x240>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d052      	beq.n	8003be0 <HAL_GPIO_Init+0x268>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bbc <HAL_GPIO_Init+0x244>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d031      	beq.n	8003ba6 <HAL_GPIO_Init+0x22e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc0 <HAL_GPIO_Init+0x248>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d02b      	beq.n	8003ba2 <HAL_GPIO_Init+0x22a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc4 <HAL_GPIO_Init+0x24c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d025      	beq.n	8003b9e <HAL_GPIO_Init+0x226>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc8 <HAL_GPIO_Init+0x250>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01f      	beq.n	8003b9a <HAL_GPIO_Init+0x222>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bcc <HAL_GPIO_Init+0x254>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d019      	beq.n	8003b96 <HAL_GPIO_Init+0x21e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1a      	ldr	r2, [pc, #104]	@ (8003bd0 <HAL_GPIO_Init+0x258>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <HAL_GPIO_Init+0x21a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a19      	ldr	r2, [pc, #100]	@ (8003bd4 <HAL_GPIO_Init+0x25c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00d      	beq.n	8003b8e <HAL_GPIO_Init+0x216>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a18      	ldr	r2, [pc, #96]	@ (8003bd8 <HAL_GPIO_Init+0x260>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d007      	beq.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a17      	ldr	r2, [pc, #92]	@ (8003bdc <HAL_GPIO_Init+0x264>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d101      	bne.n	8003b86 <HAL_GPIO_Init+0x20e>
 8003b82:	2309      	movs	r3, #9
 8003b84:	e02d      	b.n	8003be2 <HAL_GPIO_Init+0x26a>
 8003b86:	230a      	movs	r3, #10
 8003b88:	e02b      	b.n	8003be2 <HAL_GPIO_Init+0x26a>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	e029      	b.n	8003be2 <HAL_GPIO_Init+0x26a>
 8003b8e:	2307      	movs	r3, #7
 8003b90:	e027      	b.n	8003be2 <HAL_GPIO_Init+0x26a>
 8003b92:	2306      	movs	r3, #6
 8003b94:	e025      	b.n	8003be2 <HAL_GPIO_Init+0x26a>
 8003b96:	2305      	movs	r3, #5
 8003b98:	e023      	b.n	8003be2 <HAL_GPIO_Init+0x26a>
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	e021      	b.n	8003be2 <HAL_GPIO_Init+0x26a>
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e01f      	b.n	8003be2 <HAL_GPIO_Init+0x26a>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e01d      	b.n	8003be2 <HAL_GPIO_Init+0x26a>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e01b      	b.n	8003be2 <HAL_GPIO_Init+0x26a>
 8003baa:	bf00      	nop
 8003bac:	58000080 	.word	0x58000080
 8003bb0:	58024400 	.word	0x58024400
 8003bb4:	58000400 	.word	0x58000400
 8003bb8:	58020000 	.word	0x58020000
 8003bbc:	58020400 	.word	0x58020400
 8003bc0:	58020800 	.word	0x58020800
 8003bc4:	58020c00 	.word	0x58020c00
 8003bc8:	58021000 	.word	0x58021000
 8003bcc:	58021400 	.word	0x58021400
 8003bd0:	58021800 	.word	0x58021800
 8003bd4:	58021c00 	.word	0x58021c00
 8003bd8:	58022000 	.word	0x58022000
 8003bdc:	58022400 	.word	0x58022400
 8003be0:	2300      	movs	r3, #0
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	f002 0203 	and.w	r2, r2, #3
 8003be8:	0092      	lsls	r2, r2, #2
 8003bea:	4093      	lsls	r3, r2
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bf2:	4938      	ldr	r1, [pc, #224]	@ (8003cd4 <HAL_GPIO_Init+0x35c>)
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003c54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4013      	ands	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f47f ae63 	bne.w	800398c <HAL_GPIO_Init+0x14>
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	3724      	adds	r7, #36	@ 0x24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	58000400 	.word	0x58000400

08003cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ce8:	787b      	ldrb	r3, [r7, #1]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cee:	887a      	ldrh	r2, [r7, #2]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003cf4:	e003      	b.n	8003cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003cf6:	887b      	ldrh	r3, [r7, #2]
 8003cf8:	041a      	lsls	r2, r3, #16
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	619a      	str	r2, [r3, #24]
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d1c:	887a      	ldrh	r2, [r7, #2]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4013      	ands	r3, r2
 8003d22:	041a      	lsls	r2, r3, #16
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	43d9      	mvns	r1, r3
 8003d28:	887b      	ldrh	r3, [r7, #2]
 8003d2a:	400b      	ands	r3, r1
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	619a      	str	r2, [r3, #24]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003d48:	4b19      	ldr	r3, [pc, #100]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x70>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d00a      	beq.n	8003d6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d54:	4b16      	ldr	r3, [pc, #88]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x70>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d001      	beq.n	8003d66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e01f      	b.n	8003da6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e01d      	b.n	8003da6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d6a:	4b11      	ldr	r3, [pc, #68]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x70>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f023 0207 	bic.w	r2, r3, #7
 8003d72:	490f      	ldr	r1, [pc, #60]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x70>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d7a:	f7fd fb4d 	bl	8001418 <HAL_GetTick>
 8003d7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d80:	e009      	b.n	8003d96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d82:	f7fd fb49 	bl	8001418 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d90:	d901      	bls.n	8003d96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e007      	b.n	8003da6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d96:	4b06      	ldr	r3, [pc, #24]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x70>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da2:	d1ee      	bne.n	8003d82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	58024800 	.word	0x58024800

08003db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08c      	sub	sp, #48	@ 0x30
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f000 bc48 	b.w	8004658 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8088 	beq.w	8003ee6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dd6:	4b99      	ldr	r3, [pc, #612]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003de0:	4b96      	ldr	r3, [pc, #600]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d007      	beq.n	8003dfc <HAL_RCC_OscConfig+0x48>
 8003dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dee:	2b18      	cmp	r3, #24
 8003df0:	d111      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62>
 8003df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d10c      	bne.n	8003e16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	4b8f      	ldr	r3, [pc, #572]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d06d      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x130>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d169      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f000 bc21 	b.w	8004658 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCC_OscConfig+0x7a>
 8003e20:	4b86      	ldr	r3, [pc, #536]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a85      	ldr	r2, [pc, #532]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	e02e      	b.n	8003e8c <HAL_RCC_OscConfig+0xd8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x9c>
 8003e36:	4b81      	ldr	r3, [pc, #516]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a80      	ldr	r2, [pc, #512]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b7e      	ldr	r3, [pc, #504]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a7d      	ldr	r2, [pc, #500]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e01d      	b.n	8003e8c <HAL_RCC_OscConfig+0xd8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0xc0>
 8003e5a:	4b78      	ldr	r3, [pc, #480]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a77      	ldr	r2, [pc, #476]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	4b75      	ldr	r3, [pc, #468]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a74      	ldr	r2, [pc, #464]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e00b      	b.n	8003e8c <HAL_RCC_OscConfig+0xd8>
 8003e74:	4b71      	ldr	r3, [pc, #452]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a70      	ldr	r2, [pc, #448]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4b6e      	ldr	r3, [pc, #440]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a6d      	ldr	r2, [pc, #436]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d013      	beq.n	8003ebc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fd fac0 	bl	8001418 <HAL_GetTick>
 8003e98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e9c:	f7fd fabc 	bl	8001418 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	@ 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e3d4      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003eae:	4b63      	ldr	r3, [pc, #396]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0xe8>
 8003eba:	e014      	b.n	8003ee6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fd faac 	bl	8001418 <HAL_GetTick>
 8003ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7fd faa8 	bl	8001418 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	@ 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e3c0      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ed6:	4b59      	ldr	r3, [pc, #356]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x110>
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80ca 	beq.w	8004088 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ef4:	4b51      	ldr	r3, [pc, #324]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003efc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003efe:	4b4f      	ldr	r3, [pc, #316]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <HAL_RCC_OscConfig+0x166>
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	2b18      	cmp	r3, #24
 8003f0e:	d156      	bne.n	8003fbe <HAL_RCC_OscConfig+0x20a>
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d151      	bne.n	8003fbe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f1a:	4b48      	ldr	r3, [pc, #288]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_RCC_OscConfig+0x17e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e392      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f32:	4b42      	ldr	r3, [pc, #264]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 0219 	bic.w	r2, r3, #25
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	493f      	ldr	r1, [pc, #252]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd fa68 	bl	8001418 <HAL_GetTick>
 8003f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4c:	f7fd fa64 	bl	8001418 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e37c      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f5e:	4b37      	ldr	r3, [pc, #220]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6a:	f7fd fa85 	bl	8001478 <HAL_GetREVID>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d817      	bhi.n	8003fa8 <HAL_RCC_OscConfig+0x1f4>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b40      	cmp	r3, #64	@ 0x40
 8003f7e:	d108      	bne.n	8003f92 <HAL_RCC_OscConfig+0x1de>
 8003f80:	4b2e      	ldr	r3, [pc, #184]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003f88:	4a2c      	ldr	r2, [pc, #176]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f8e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f90:	e07a      	b.n	8004088 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f92:	4b2a      	ldr	r3, [pc, #168]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	031b      	lsls	r3, r3, #12
 8003fa0:	4926      	ldr	r1, [pc, #152]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa6:	e06f      	b.n	8004088 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa8:	4b24      	ldr	r3, [pc, #144]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	4921      	ldr	r1, [pc, #132]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fbc:	e064      	b.n	8004088 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d047      	beq.n	8004056 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0219 	bic.w	r2, r3, #25
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	491a      	ldr	r1, [pc, #104]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fa1e 	bl	8001418 <HAL_GetTick>
 8003fdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe0:	f7fd fa1a 	bl	8001418 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e332      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ff2:	4b12      	ldr	r3, [pc, #72]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffe:	f7fd fa3b 	bl	8001478 <HAL_GetREVID>
 8004002:	4603      	mov	r3, r0
 8004004:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004008:	4293      	cmp	r3, r2
 800400a:	d819      	bhi.n	8004040 <HAL_RCC_OscConfig+0x28c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b40      	cmp	r3, #64	@ 0x40
 8004012:	d108      	bne.n	8004026 <HAL_RCC_OscConfig+0x272>
 8004014:	4b09      	ldr	r3, [pc, #36]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800401c:	4a07      	ldr	r2, [pc, #28]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 800401e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004022:	6053      	str	r3, [r2, #4]
 8004024:	e030      	b.n	8004088 <HAL_RCC_OscConfig+0x2d4>
 8004026:	4b05      	ldr	r3, [pc, #20]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	031b      	lsls	r3, r3, #12
 8004034:	4901      	ldr	r1, [pc, #4]	@ (800403c <HAL_RCC_OscConfig+0x288>)
 8004036:	4313      	orrs	r3, r2
 8004038:	604b      	str	r3, [r1, #4]
 800403a:	e025      	b.n	8004088 <HAL_RCC_OscConfig+0x2d4>
 800403c:	58024400 	.word	0x58024400
 8004040:	4b9a      	ldr	r3, [pc, #616]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	4997      	ldr	r1, [pc, #604]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004050:	4313      	orrs	r3, r2
 8004052:	604b      	str	r3, [r1, #4]
 8004054:	e018      	b.n	8004088 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004056:	4b95      	ldr	r3, [pc, #596]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a94      	ldr	r2, [pc, #592]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7fd f9d9 	bl	8001418 <HAL_GetTick>
 8004066:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800406a:	f7fd f9d5 	bl	8001418 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e2ed      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800407c:	4b8b      	ldr	r3, [pc, #556]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f0      	bne.n	800406a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80a9 	beq.w	80041e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004096:	4b85      	ldr	r3, [pc, #532]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800409e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040a0:	4b82      	ldr	r3, [pc, #520]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d007      	beq.n	80040bc <HAL_RCC_OscConfig+0x308>
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b18      	cmp	r3, #24
 80040b0:	d13a      	bne.n	8004128 <HAL_RCC_OscConfig+0x374>
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d135      	bne.n	8004128 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040bc:	4b7b      	ldr	r3, [pc, #492]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_OscConfig+0x320>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	2b80      	cmp	r3, #128	@ 0x80
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e2c1      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040d4:	f7fd f9d0 	bl	8001478 <HAL_GetREVID>
 80040d8:	4603      	mov	r3, r0
 80040da:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040de:	4293      	cmp	r3, r2
 80040e0:	d817      	bhi.n	8004112 <HAL_RCC_OscConfig+0x35e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d108      	bne.n	80040fc <HAL_RCC_OscConfig+0x348>
 80040ea:	4b70      	ldr	r3, [pc, #448]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80040f2:	4a6e      	ldr	r2, [pc, #440]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 80040f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040fa:	e075      	b.n	80041e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040fc:	4b6b      	ldr	r3, [pc, #428]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	069b      	lsls	r3, r3, #26
 800410a:	4968      	ldr	r1, [pc, #416]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004110:	e06a      	b.n	80041e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004112:	4b66      	ldr	r3, [pc, #408]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	061b      	lsls	r3, r3, #24
 8004120:	4962      	ldr	r1, [pc, #392]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004122:	4313      	orrs	r3, r2
 8004124:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004126:	e05f      	b.n	80041e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d042      	beq.n	80041b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004130:	4b5e      	ldr	r3, [pc, #376]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a5d      	ldr	r2, [pc, #372]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800413a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fd f96c 	bl	8001418 <HAL_GetTick>
 8004140:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004144:	f7fd f968 	bl	8001418 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e280      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004156:	4b55      	ldr	r3, [pc, #340]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004162:	f7fd f989 	bl	8001478 <HAL_GetREVID>
 8004166:	4603      	mov	r3, r0
 8004168:	f241 0203 	movw	r2, #4099	@ 0x1003
 800416c:	4293      	cmp	r3, r2
 800416e:	d817      	bhi.n	80041a0 <HAL_RCC_OscConfig+0x3ec>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	2b20      	cmp	r3, #32
 8004176:	d108      	bne.n	800418a <HAL_RCC_OscConfig+0x3d6>
 8004178:	4b4c      	ldr	r3, [pc, #304]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004180:	4a4a      	ldr	r2, [pc, #296]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004182:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004186:	6053      	str	r3, [r2, #4]
 8004188:	e02e      	b.n	80041e8 <HAL_RCC_OscConfig+0x434>
 800418a:	4b48      	ldr	r3, [pc, #288]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	069b      	lsls	r3, r3, #26
 8004198:	4944      	ldr	r1, [pc, #272]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 800419a:	4313      	orrs	r3, r2
 800419c:	604b      	str	r3, [r1, #4]
 800419e:	e023      	b.n	80041e8 <HAL_RCC_OscConfig+0x434>
 80041a0:	4b42      	ldr	r3, [pc, #264]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	061b      	lsls	r3, r3, #24
 80041ae:	493f      	ldr	r1, [pc, #252]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60cb      	str	r3, [r1, #12]
 80041b4:	e018      	b.n	80041e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041b6:	4b3d      	ldr	r3, [pc, #244]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a3c      	ldr	r2, [pc, #240]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 80041bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fd f929 	bl	8001418 <HAL_GetTick>
 80041c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80041ca:	f7fd f925 	bl	8001418 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e23d      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041dc:	4b33      	ldr	r3, [pc, #204]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f0      	bne.n	80041ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d036      	beq.n	8004262 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d019      	beq.n	8004230 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041fc:	4b2b      	ldr	r3, [pc, #172]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 80041fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004200:	4a2a      	ldr	r2, [pc, #168]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004208:	f7fd f906 	bl	8001418 <HAL_GetTick>
 800420c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004210:	f7fd f902 	bl	8001418 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e21a      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004222:	4b22      	ldr	r3, [pc, #136]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0x45c>
 800422e:	e018      	b.n	8004262 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004230:	4b1e      	ldr	r3, [pc, #120]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004234:	4a1d      	ldr	r2, [pc, #116]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004236:	f023 0301 	bic.w	r3, r3, #1
 800423a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423c:	f7fd f8ec 	bl	8001418 <HAL_GetTick>
 8004240:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004244:	f7fd f8e8 	bl	8001418 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e200      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004256:	4b15      	ldr	r3, [pc, #84]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b00      	cmp	r3, #0
 800426c:	d039      	beq.n	80042e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01c      	beq.n	80042b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004276:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a0c      	ldr	r2, [pc, #48]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 800427c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004280:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004282:	f7fd f8c9 	bl	8001418 <HAL_GetTick>
 8004286:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800428a:	f7fd f8c5 	bl	8001418 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e1dd      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800429c:	4b03      	ldr	r3, [pc, #12]	@ (80042ac <HAL_RCC_OscConfig+0x4f8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0f0      	beq.n	800428a <HAL_RCC_OscConfig+0x4d6>
 80042a8:	e01b      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
 80042aa:	bf00      	nop
 80042ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042b0:	4b9b      	ldr	r3, [pc, #620]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a9a      	ldr	r2, [pc, #616]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80042b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042bc:	f7fd f8ac 	bl	8001418 <HAL_GetTick>
 80042c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042c4:	f7fd f8a8 	bl	8001418 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e1c0      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042d6:	4b92      	ldr	r3, [pc, #584]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8081 	beq.w	80043f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042f0:	4b8c      	ldr	r3, [pc, #560]	@ (8004524 <HAL_RCC_OscConfig+0x770>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a8b      	ldr	r2, [pc, #556]	@ (8004524 <HAL_RCC_OscConfig+0x770>)
 80042f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042fc:	f7fd f88c 	bl	8001418 <HAL_GetTick>
 8004300:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004304:	f7fd f888 	bl	8001418 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	@ 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e1a0      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004316:	4b83      	ldr	r3, [pc, #524]	@ (8004524 <HAL_RCC_OscConfig+0x770>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d106      	bne.n	8004338 <HAL_RCC_OscConfig+0x584>
 800432a:	4b7d      	ldr	r3, [pc, #500]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432e:	4a7c      	ldr	r2, [pc, #496]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6713      	str	r3, [r2, #112]	@ 0x70
 8004336:	e02d      	b.n	8004394 <HAL_RCC_OscConfig+0x5e0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10c      	bne.n	800435a <HAL_RCC_OscConfig+0x5a6>
 8004340:	4b77      	ldr	r3, [pc, #476]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004344:	4a76      	ldr	r2, [pc, #472]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	6713      	str	r3, [r2, #112]	@ 0x70
 800434c:	4b74      	ldr	r3, [pc, #464]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004350:	4a73      	ldr	r2, [pc, #460]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004352:	f023 0304 	bic.w	r3, r3, #4
 8004356:	6713      	str	r3, [r2, #112]	@ 0x70
 8004358:	e01c      	b.n	8004394 <HAL_RCC_OscConfig+0x5e0>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b05      	cmp	r3, #5
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0x5c8>
 8004362:	4b6f      	ldr	r3, [pc, #444]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	4a6e      	ldr	r2, [pc, #440]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004368:	f043 0304 	orr.w	r3, r3, #4
 800436c:	6713      	str	r3, [r2, #112]	@ 0x70
 800436e:	4b6c      	ldr	r3, [pc, #432]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004372:	4a6b      	ldr	r2, [pc, #428]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	6713      	str	r3, [r2, #112]	@ 0x70
 800437a:	e00b      	b.n	8004394 <HAL_RCC_OscConfig+0x5e0>
 800437c:	4b68      	ldr	r3, [pc, #416]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004380:	4a67      	ldr	r2, [pc, #412]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004382:	f023 0301 	bic.w	r3, r3, #1
 8004386:	6713      	str	r3, [r2, #112]	@ 0x70
 8004388:	4b65      	ldr	r3, [pc, #404]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438c:	4a64      	ldr	r2, [pc, #400]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 800438e:	f023 0304 	bic.w	r3, r3, #4
 8004392:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d015      	beq.n	80043c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fd f83c 	bl	8001418 <HAL_GetTick>
 80043a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043a2:	e00a      	b.n	80043ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a4:	f7fd f838 	bl	8001418 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e14e      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ba:	4b59      	ldr	r3, [pc, #356]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0ee      	beq.n	80043a4 <HAL_RCC_OscConfig+0x5f0>
 80043c6:	e014      	b.n	80043f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fd f826 	bl	8001418 <HAL_GetTick>
 80043cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fd f822 	bl	8001418 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e138      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043e6:	4b4e      	ldr	r3, [pc, #312]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1ee      	bne.n	80043d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 812d 	beq.w	8004656 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80043fc:	4b48      	ldr	r3, [pc, #288]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004404:	2b18      	cmp	r3, #24
 8004406:	f000 80bd 	beq.w	8004584 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440e:	2b02      	cmp	r3, #2
 8004410:	f040 809e 	bne.w	8004550 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004414:	4b42      	ldr	r3, [pc, #264]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a41      	ldr	r2, [pc, #260]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 800441a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800441e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fc fffa 	bl	8001418 <HAL_GetTick>
 8004424:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004428:	f7fc fff6 	bl	8001418 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e10e      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800443a:	4b39      	ldr	r3, [pc, #228]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004446:	4b36      	ldr	r3, [pc, #216]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004448:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800444a:	4b37      	ldr	r3, [pc, #220]	@ (8004528 <HAL_RCC_OscConfig+0x774>)
 800444c:	4013      	ands	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004456:	0112      	lsls	r2, r2, #4
 8004458:	430a      	orrs	r2, r1
 800445a:	4931      	ldr	r1, [pc, #196]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 800445c:	4313      	orrs	r3, r2
 800445e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004464:	3b01      	subs	r3, #1
 8004466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446e:	3b01      	subs	r3, #1
 8004470:	025b      	lsls	r3, r3, #9
 8004472:	b29b      	uxth	r3, r3
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447a:	3b01      	subs	r3, #1
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004488:	3b01      	subs	r3, #1
 800448a:	061b      	lsls	r3, r3, #24
 800448c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004490:	4923      	ldr	r1, [pc, #140]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004492:	4313      	orrs	r3, r2
 8004494:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004496:	4b22      	ldr	r3, [pc, #136]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449a:	4a21      	ldr	r2, [pc, #132]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80044a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044a6:	4b21      	ldr	r3, [pc, #132]	@ (800452c <HAL_RCC_OscConfig+0x778>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80044ae:	00d2      	lsls	r2, r2, #3
 80044b0:	491b      	ldr	r1, [pc, #108]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	f023 020c 	bic.w	r2, r3, #12
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	4917      	ldr	r1, [pc, #92]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044c8:	4b15      	ldr	r3, [pc, #84]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	f023 0202 	bic.w	r2, r3, #2
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d4:	4912      	ldr	r1, [pc, #72]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044da:	4b11      	ldr	r3, [pc, #68]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	4a10      	ldr	r2, [pc, #64]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80044e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80044ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80044f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 80044f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80044fe:	4b08      	ldr	r3, [pc, #32]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004502:	4a07      	ldr	r2, [pc, #28]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800450a:	4b05      	ldr	r3, [pc, #20]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a04      	ldr	r2, [pc, #16]	@ (8004520 <HAL_RCC_OscConfig+0x76c>)
 8004510:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004516:	f7fc ff7f 	bl	8001418 <HAL_GetTick>
 800451a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800451c:	e011      	b.n	8004542 <HAL_RCC_OscConfig+0x78e>
 800451e:	bf00      	nop
 8004520:	58024400 	.word	0x58024400
 8004524:	58024800 	.word	0x58024800
 8004528:	fffffc0c 	.word	0xfffffc0c
 800452c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004530:	f7fc ff72 	bl	8001418 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e08a      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004542:	4b47      	ldr	r3, [pc, #284]	@ (8004660 <HAL_RCC_OscConfig+0x8ac>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x77c>
 800454e:	e082      	b.n	8004656 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004550:	4b43      	ldr	r3, [pc, #268]	@ (8004660 <HAL_RCC_OscConfig+0x8ac>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a42      	ldr	r2, [pc, #264]	@ (8004660 <HAL_RCC_OscConfig+0x8ac>)
 8004556:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800455a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fc ff5c 	bl	8001418 <HAL_GetTick>
 8004560:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004564:	f7fc ff58 	bl	8001418 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e070      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004576:	4b3a      	ldr	r3, [pc, #232]	@ (8004660 <HAL_RCC_OscConfig+0x8ac>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x7b0>
 8004582:	e068      	b.n	8004656 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004584:	4b36      	ldr	r3, [pc, #216]	@ (8004660 <HAL_RCC_OscConfig+0x8ac>)
 8004586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004588:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800458a:	4b35      	ldr	r3, [pc, #212]	@ (8004660 <HAL_RCC_OscConfig+0x8ac>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	2b01      	cmp	r3, #1
 8004596:	d031      	beq.n	80045fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f003 0203 	and.w	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d12a      	bne.n	80045fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d122      	bne.n	80045fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d11a      	bne.n	80045fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	0a5b      	lsrs	r3, r3, #9
 80045ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d111      	bne.n	80045fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	0c1b      	lsrs	r3, r3, #16
 80045dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d108      	bne.n	80045fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	0e1b      	lsrs	r3, r3, #24
 80045ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e02b      	b.n	8004658 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004600:	4b17      	ldr	r3, [pc, #92]	@ (8004660 <HAL_RCC_OscConfig+0x8ac>)
 8004602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004604:	08db      	lsrs	r3, r3, #3
 8004606:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800460a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	429a      	cmp	r2, r3
 8004614:	d01f      	beq.n	8004656 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004616:	4b12      	ldr	r3, [pc, #72]	@ (8004660 <HAL_RCC_OscConfig+0x8ac>)
 8004618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461a:	4a11      	ldr	r2, [pc, #68]	@ (8004660 <HAL_RCC_OscConfig+0x8ac>)
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004622:	f7fc fef9 	bl	8001418 <HAL_GetTick>
 8004626:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004628:	bf00      	nop
 800462a:	f7fc fef5 	bl	8001418 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	4293      	cmp	r3, r2
 8004634:	d0f9      	beq.n	800462a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004636:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <HAL_RCC_OscConfig+0x8ac>)
 8004638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800463a:	4b0a      	ldr	r3, [pc, #40]	@ (8004664 <HAL_RCC_OscConfig+0x8b0>)
 800463c:	4013      	ands	r3, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004642:	00d2      	lsls	r2, r2, #3
 8004644:	4906      	ldr	r1, [pc, #24]	@ (8004660 <HAL_RCC_OscConfig+0x8ac>)
 8004646:	4313      	orrs	r3, r2
 8004648:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800464a:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <HAL_RCC_OscConfig+0x8ac>)
 800464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464e:	4a04      	ldr	r2, [pc, #16]	@ (8004660 <HAL_RCC_OscConfig+0x8ac>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3730      	adds	r7, #48	@ 0x30
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	58024400 	.word	0x58024400
 8004664:	ffff0007 	.word	0xffff0007

08004668 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e19c      	b.n	80049b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800467c:	4b8a      	ldr	r3, [pc, #552]	@ (80048a8 <HAL_RCC_ClockConfig+0x240>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d910      	bls.n	80046ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b87      	ldr	r3, [pc, #540]	@ (80048a8 <HAL_RCC_ClockConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 020f 	bic.w	r2, r3, #15
 8004692:	4985      	ldr	r1, [pc, #532]	@ (80048a8 <HAL_RCC_ClockConfig+0x240>)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	4313      	orrs	r3, r2
 8004698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b83      	ldr	r3, [pc, #524]	@ (80048a8 <HAL_RCC_ClockConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e184      	b.n	80049b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d010      	beq.n	80046da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	4b7b      	ldr	r3, [pc, #492]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d908      	bls.n	80046da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046c8:	4b78      	ldr	r3, [pc, #480]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	4975      	ldr	r1, [pc, #468]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d010      	beq.n	8004708 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695a      	ldr	r2, [r3, #20]
 80046ea:	4b70      	ldr	r3, [pc, #448]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d908      	bls.n	8004708 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046f6:	4b6d      	ldr	r3, [pc, #436]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	496a      	ldr	r1, [pc, #424]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 8004704:	4313      	orrs	r3, r2
 8004706:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b00      	cmp	r3, #0
 8004712:	d010      	beq.n	8004736 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699a      	ldr	r2, [r3, #24]
 8004718:	4b64      	ldr	r3, [pc, #400]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004720:	429a      	cmp	r2, r3
 8004722:	d908      	bls.n	8004736 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004724:	4b61      	ldr	r3, [pc, #388]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	495e      	ldr	r1, [pc, #376]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 8004732:	4313      	orrs	r3, r2
 8004734:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d010      	beq.n	8004764 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	4b59      	ldr	r3, [pc, #356]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800474e:	429a      	cmp	r2, r3
 8004750:	d908      	bls.n	8004764 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004752:	4b56      	ldr	r3, [pc, #344]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	4953      	ldr	r1, [pc, #332]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 8004760:	4313      	orrs	r3, r2
 8004762:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d010      	beq.n	8004792 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	4b4d      	ldr	r3, [pc, #308]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	429a      	cmp	r2, r3
 800477e:	d908      	bls.n	8004792 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004780:	4b4a      	ldr	r3, [pc, #296]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f023 020f 	bic.w	r2, r3, #15
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4947      	ldr	r1, [pc, #284]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 800478e:	4313      	orrs	r3, r2
 8004790:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d055      	beq.n	800484a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800479e:	4b43      	ldr	r3, [pc, #268]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	4940      	ldr	r1, [pc, #256]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d107      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047b8:	4b3c      	ldr	r3, [pc, #240]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d121      	bne.n	8004808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0f6      	b.n	80049b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d107      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047d0:	4b36      	ldr	r3, [pc, #216]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d115      	bne.n	8004808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0ea      	b.n	80049b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d107      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047e8:	4b30      	ldr	r3, [pc, #192]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0de      	b.n	80049b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047f8:	4b2c      	ldr	r3, [pc, #176]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0d6      	b.n	80049b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004808:	4b28      	ldr	r3, [pc, #160]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f023 0207 	bic.w	r2, r3, #7
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4925      	ldr	r1, [pc, #148]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 8004816:	4313      	orrs	r3, r2
 8004818:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481a:	f7fc fdfd 	bl	8001418 <HAL_GetTick>
 800481e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004820:	e00a      	b.n	8004838 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004822:	f7fc fdf9 	bl	8001418 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e0be      	b.n	80049b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004838:	4b1c      	ldr	r3, [pc, #112]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	429a      	cmp	r2, r3
 8004848:	d1eb      	bne.n	8004822 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d010      	beq.n	8004878 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	4b14      	ldr	r3, [pc, #80]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	429a      	cmp	r2, r3
 8004864:	d208      	bcs.n	8004878 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004866:	4b11      	ldr	r3, [pc, #68]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f023 020f 	bic.w	r2, r3, #15
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	490e      	ldr	r1, [pc, #56]	@ (80048ac <HAL_RCC_ClockConfig+0x244>)
 8004874:	4313      	orrs	r3, r2
 8004876:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004878:	4b0b      	ldr	r3, [pc, #44]	@ (80048a8 <HAL_RCC_ClockConfig+0x240>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d214      	bcs.n	80048b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b08      	ldr	r3, [pc, #32]	@ (80048a8 <HAL_RCC_ClockConfig+0x240>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 020f 	bic.w	r2, r3, #15
 800488e:	4906      	ldr	r1, [pc, #24]	@ (80048a8 <HAL_RCC_ClockConfig+0x240>)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b04      	ldr	r3, [pc, #16]	@ (80048a8 <HAL_RCC_ClockConfig+0x240>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e086      	b.n	80049b6 <HAL_RCC_ClockConfig+0x34e>
 80048a8:	52002000 	.word	0x52002000
 80048ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d010      	beq.n	80048de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	4b3f      	ldr	r3, [pc, #252]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d208      	bcs.n	80048de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048cc:	4b3c      	ldr	r3, [pc, #240]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	4939      	ldr	r1, [pc, #228]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d010      	beq.n	800490c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	4b34      	ldr	r3, [pc, #208]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d208      	bcs.n	800490c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048fa:	4b31      	ldr	r3, [pc, #196]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	492e      	ldr	r1, [pc, #184]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 8004908:	4313      	orrs	r3, r2
 800490a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b00      	cmp	r3, #0
 8004916:	d010      	beq.n	800493a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699a      	ldr	r2, [r3, #24]
 800491c:	4b28      	ldr	r3, [pc, #160]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004924:	429a      	cmp	r2, r3
 8004926:	d208      	bcs.n	800493a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004928:	4b25      	ldr	r3, [pc, #148]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	4922      	ldr	r1, [pc, #136]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 8004936:	4313      	orrs	r3, r2
 8004938:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b00      	cmp	r3, #0
 8004944:	d010      	beq.n	8004968 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69da      	ldr	r2, [r3, #28]
 800494a:	4b1d      	ldr	r3, [pc, #116]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004952:	429a      	cmp	r2, r3
 8004954:	d208      	bcs.n	8004968 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004956:	4b1a      	ldr	r3, [pc, #104]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	4917      	ldr	r1, [pc, #92]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 8004964:	4313      	orrs	r3, r2
 8004966:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004968:	f000 f834 	bl	80049d4 <HAL_RCC_GetSysClockFreq>
 800496c:	4602      	mov	r2, r0
 800496e:	4b14      	ldr	r3, [pc, #80]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	4912      	ldr	r1, [pc, #72]	@ (80049c4 <HAL_RCC_ClockConfig+0x35c>)
 800497a:	5ccb      	ldrb	r3, [r1, r3]
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
 8004984:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004986:	4b0e      	ldr	r3, [pc, #56]	@ (80049c0 <HAL_RCC_ClockConfig+0x358>)
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	4a0d      	ldr	r2, [pc, #52]	@ (80049c4 <HAL_RCC_ClockConfig+0x35c>)
 8004990:	5cd3      	ldrb	r3, [r2, r3]
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
 800499c:	4a0a      	ldr	r2, [pc, #40]	@ (80049c8 <HAL_RCC_ClockConfig+0x360>)
 800499e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049a0:	4a0a      	ldr	r2, [pc, #40]	@ (80049cc <HAL_RCC_ClockConfig+0x364>)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80049a6:	4b0a      	ldr	r3, [pc, #40]	@ (80049d0 <HAL_RCC_ClockConfig+0x368>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fc fcea 	bl	8001384 <HAL_InitTick>
 80049b0:	4603      	mov	r3, r0
 80049b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	58024400 	.word	0x58024400
 80049c4:	080174a0 	.word	0x080174a0
 80049c8:	24000004 	.word	0x24000004
 80049cc:	24000000 	.word	0x24000000
 80049d0:	24000008 	.word	0x24000008

080049d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	@ 0x24
 80049d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049da:	4bb3      	ldr	r3, [pc, #716]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049e2:	2b18      	cmp	r3, #24
 80049e4:	f200 8155 	bhi.w	8004c92 <HAL_RCC_GetSysClockFreq+0x2be>
 80049e8:	a201      	add	r2, pc, #4	@ (adr r2, 80049f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a55 	.word	0x08004a55
 80049f4:	08004c93 	.word	0x08004c93
 80049f8:	08004c93 	.word	0x08004c93
 80049fc:	08004c93 	.word	0x08004c93
 8004a00:	08004c93 	.word	0x08004c93
 8004a04:	08004c93 	.word	0x08004c93
 8004a08:	08004c93 	.word	0x08004c93
 8004a0c:	08004c93 	.word	0x08004c93
 8004a10:	08004a7b 	.word	0x08004a7b
 8004a14:	08004c93 	.word	0x08004c93
 8004a18:	08004c93 	.word	0x08004c93
 8004a1c:	08004c93 	.word	0x08004c93
 8004a20:	08004c93 	.word	0x08004c93
 8004a24:	08004c93 	.word	0x08004c93
 8004a28:	08004c93 	.word	0x08004c93
 8004a2c:	08004c93 	.word	0x08004c93
 8004a30:	08004a81 	.word	0x08004a81
 8004a34:	08004c93 	.word	0x08004c93
 8004a38:	08004c93 	.word	0x08004c93
 8004a3c:	08004c93 	.word	0x08004c93
 8004a40:	08004c93 	.word	0x08004c93
 8004a44:	08004c93 	.word	0x08004c93
 8004a48:	08004c93 	.word	0x08004c93
 8004a4c:	08004c93 	.word	0x08004c93
 8004a50:	08004a87 	.word	0x08004a87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a54:	4b94      	ldr	r3, [pc, #592]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d009      	beq.n	8004a74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a60:	4b91      	ldr	r3, [pc, #580]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	08db      	lsrs	r3, r3, #3
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	4a90      	ldr	r2, [pc, #576]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004a72:	e111      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a74:	4b8d      	ldr	r3, [pc, #564]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a76:	61bb      	str	r3, [r7, #24]
      break;
 8004a78:	e10e      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004a7a:	4b8d      	ldr	r3, [pc, #564]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a7c:	61bb      	str	r3, [r7, #24]
      break;
 8004a7e:	e10b      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004a80:	4b8c      	ldr	r3, [pc, #560]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a82:	61bb      	str	r3, [r7, #24]
      break;
 8004a84:	e108      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a86:	4b88      	ldr	r3, [pc, #544]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004a90:	4b85      	ldr	r3, [pc, #532]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a9a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a9c:	4b82      	ldr	r3, [pc, #520]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004aa6:	4b80      	ldr	r3, [pc, #512]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aaa:	08db      	lsrs	r3, r3, #3
 8004aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80e1 	beq.w	8004c8c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	f000 8083 	beq.w	8004bd8 <HAL_RCC_GetSysClockFreq+0x204>
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	f200 80a1 	bhi.w	8004c1c <HAL_RCC_GetSysClockFreq+0x248>
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x114>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d056      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ae6:	e099      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d02d      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004af4:	4b6c      	ldr	r3, [pc, #432]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	08db      	lsrs	r3, r3, #3
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	4a6b      	ldr	r2, [pc, #428]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
 8004b04:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	ee07 3a90 	vmov	s15, r3
 8004b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1e:	4b62      	ldr	r3, [pc, #392]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b32:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004b4e:	e087      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004cbc <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b62:	4b51      	ldr	r3, [pc, #324]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b76:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b92:	e065      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004cc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba6:	4b40      	ldr	r3, [pc, #256]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bd6:	e043      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004cc4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bea:	4b2f      	ldr	r3, [pc, #188]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bfe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c1a:	e021      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004cc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c42:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004cb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004c60:	4b11      	ldr	r3, [pc, #68]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c64:	0a5b      	lsrs	r3, r3, #9
 8004c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	ee07 3a90 	vmov	s15, r3
 8004c74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c84:	ee17 3a90 	vmov	r3, s15
 8004c88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004c8a:	e005      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
      break;
 8004c90:	e002      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004c92:	4b07      	ldr	r3, [pc, #28]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c94:	61bb      	str	r3, [r7, #24]
      break;
 8004c96:	bf00      	nop
  }

  return sysclockfreq;
 8004c98:	69bb      	ldr	r3, [r7, #24]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3724      	adds	r7, #36	@ 0x24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	58024400 	.word	0x58024400
 8004cac:	03d09000 	.word	0x03d09000
 8004cb0:	003d0900 	.word	0x003d0900
 8004cb4:	017d7840 	.word	0x017d7840
 8004cb8:	46000000 	.word	0x46000000
 8004cbc:	4c742400 	.word	0x4c742400
 8004cc0:	4a742400 	.word	0x4a742400
 8004cc4:	4bbebc20 	.word	0x4bbebc20

08004cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004cce:	f7ff fe81 	bl	80049d4 <HAL_RCC_GetSysClockFreq>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	4b10      	ldr	r3, [pc, #64]	@ (8004d18 <HAL_RCC_GetHCLKFreq+0x50>)
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	0a1b      	lsrs	r3, r3, #8
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	490f      	ldr	r1, [pc, #60]	@ (8004d1c <HAL_RCC_GetHCLKFreq+0x54>)
 8004ce0:	5ccb      	ldrb	r3, [r1, r3]
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cec:	4b0a      	ldr	r3, [pc, #40]	@ (8004d18 <HAL_RCC_GetHCLKFreq+0x50>)
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	4a09      	ldr	r2, [pc, #36]	@ (8004d1c <HAL_RCC_GetHCLKFreq+0x54>)
 8004cf6:	5cd3      	ldrb	r3, [r2, r3]
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004d02:	4a07      	ldr	r2, [pc, #28]	@ (8004d20 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d06:	4a07      	ldr	r2, [pc, #28]	@ (8004d24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004d0c:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	58024400 	.word	0x58024400
 8004d1c:	080174a0 	.word	0x080174a0
 8004d20:	24000004 	.word	0x24000004
 8004d24:	24000000 	.word	0x24000000

08004d28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d2c:	b0ca      	sub	sp, #296	@ 0x128
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d34:	2300      	movs	r3, #0
 8004d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004d4c:	2500      	movs	r5, #0
 8004d4e:	ea54 0305 	orrs.w	r3, r4, r5
 8004d52:	d049      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d5e:	d02f      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004d60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d64:	d828      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d6a:	d01a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d70:	d822      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d7a:	d007      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d7c:	e01c      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d7e:	4bb8      	ldr	r3, [pc, #736]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d82:	4ab7      	ldr	r2, [pc, #732]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d8a:	e01a      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d90:	3308      	adds	r3, #8
 8004d92:	2102      	movs	r1, #2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 f9d1 	bl	800613c <RCCEx_PLL2_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004da0:	e00f      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da6:	3328      	adds	r3, #40	@ 0x28
 8004da8:	2102      	movs	r1, #2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f001 fa78 	bl	80062a0 <RCCEx_PLL3_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004db6:	e004      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004dca:	4ba5      	ldr	r3, [pc, #660]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dd8:	4aa1      	ldr	r2, [pc, #644]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dde:	e003      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004de4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004df4:	f04f 0900 	mov.w	r9, #0
 8004df8:	ea58 0309 	orrs.w	r3, r8, r9
 8004dfc:	d047      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d82a      	bhi.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e08:	a201      	add	r2, pc, #4	@ (adr r2, 8004e10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e25 	.word	0x08004e25
 8004e14:	08004e33 	.word	0x08004e33
 8004e18:	08004e49 	.word	0x08004e49
 8004e1c:	08004e67 	.word	0x08004e67
 8004e20:	08004e67 	.word	0x08004e67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e24:	4b8e      	ldr	r3, [pc, #568]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e28:	4a8d      	ldr	r2, [pc, #564]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e30:	e01a      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e36:	3308      	adds	r3, #8
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f001 f97e 	bl	800613c <RCCEx_PLL2_Config>
 8004e40:	4603      	mov	r3, r0
 8004e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e46:	e00f      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4c:	3328      	adds	r3, #40	@ 0x28
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 fa25 	bl	80062a0 <RCCEx_PLL3_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e5c:	e004      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e64:	e000      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e70:	4b7b      	ldr	r3, [pc, #492]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e74:	f023 0107 	bic.w	r1, r3, #7
 8004e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7e:	4a78      	ldr	r2, [pc, #480]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e80:	430b      	orrs	r3, r1
 8004e82:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e84:	e003      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004e9a:	f04f 0b00 	mov.w	fp, #0
 8004e9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004ea2:	d04c      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eae:	d030      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eb4:	d829      	bhi.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004eb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004eb8:	d02d      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004eba:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ebc:	d825      	bhi.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ebe:	2b80      	cmp	r3, #128	@ 0x80
 8004ec0:	d018      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004ec2:	2b80      	cmp	r3, #128	@ 0x80
 8004ec4:	d821      	bhi.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004eca:	2b40      	cmp	r3, #64	@ 0x40
 8004ecc:	d007      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004ece:	e01c      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed0:	4b63      	ldr	r3, [pc, #396]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	4a62      	ldr	r2, [pc, #392]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004edc:	e01c      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 f928 	bl	800613c <RCCEx_PLL2_Config>
 8004eec:	4603      	mov	r3, r0
 8004eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ef2:	e011      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef8:	3328      	adds	r3, #40	@ 0x28
 8004efa:	2100      	movs	r1, #0
 8004efc:	4618      	mov	r0, r3
 8004efe:	f001 f9cf 	bl	80062a0 <RCCEx_PLL3_Config>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f08:	e006      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f10:	e002      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f20:	4b4f      	ldr	r3, [pc, #316]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f24:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2e:	4a4c      	ldr	r2, [pc, #304]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f34:	e003      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004f4a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004f54:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	d053      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f6a:	d035      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004f6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f70:	d82e      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f72:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f76:	d031      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004f78:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f7c:	d828      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f82:	d01a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004f84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f88:	d822      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004f8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f92:	d007      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004f94:	e01c      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f96:	4b32      	ldr	r3, [pc, #200]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9a:	4a31      	ldr	r2, [pc, #196]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fa2:	e01c      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa8:	3308      	adds	r3, #8
 8004faa:	2100      	movs	r1, #0
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 f8c5 	bl	800613c <RCCEx_PLL2_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004fb8:	e011      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fbe:	3328      	adds	r3, #40	@ 0x28
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f001 f96c 	bl	80062a0 <RCCEx_PLL3_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fce:	e006      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fd6:	e002      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004fd8:	bf00      	nop
 8004fda:	e000      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10b      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ffc:	e003      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005002:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005012:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005016:	2300      	movs	r3, #0
 8005018:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800501c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005020:	460b      	mov	r3, r1
 8005022:	4313      	orrs	r3, r2
 8005024:	d056      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800502e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005032:	d038      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005034:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005038:	d831      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800503a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800503e:	d034      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005040:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005044:	d82b      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005046:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800504a:	d01d      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800504c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005050:	d825      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005056:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800505c:	e01f      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800505e:	bf00      	nop
 8005060:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005064:	4ba2      	ldr	r3, [pc, #648]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	4aa1      	ldr	r2, [pc, #644]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800506a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800506e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005070:	e01c      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005076:	3308      	adds	r3, #8
 8005078:	2100      	movs	r1, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f001 f85e 	bl	800613c <RCCEx_PLL2_Config>
 8005080:	4603      	mov	r3, r0
 8005082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005086:	e011      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508c:	3328      	adds	r3, #40	@ 0x28
 800508e:	2100      	movs	r1, #0
 8005090:	4618      	mov	r0, r3
 8005092:	f001 f905 	bl	80062a0 <RCCEx_PLL3_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800509c:	e006      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050a4:	e002      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050a6:	bf00      	nop
 80050a8:	e000      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80050b4:	4b8e      	ldr	r3, [pc, #568]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80050bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80050c4:	4a8a      	ldr	r2, [pc, #552]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050c6:	430b      	orrs	r3, r1
 80050c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ca:	e003      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80050e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80050e4:	2300      	movs	r3, #0
 80050e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80050ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80050ee:	460b      	mov	r3, r1
 80050f0:	4313      	orrs	r3, r2
 80050f2:	d03a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80050f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050fa:	2b30      	cmp	r3, #48	@ 0x30
 80050fc:	d01f      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80050fe:	2b30      	cmp	r3, #48	@ 0x30
 8005100:	d819      	bhi.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005102:	2b20      	cmp	r3, #32
 8005104:	d00c      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005106:	2b20      	cmp	r3, #32
 8005108:	d815      	bhi.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d019      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800510e:	2b10      	cmp	r3, #16
 8005110:	d111      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005112:	4b77      	ldr	r3, [pc, #476]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	4a76      	ldr	r2, [pc, #472]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800511c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800511e:	e011      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005124:	3308      	adds	r3, #8
 8005126:	2102      	movs	r1, #2
 8005128:	4618      	mov	r0, r3
 800512a:	f001 f807 	bl	800613c <RCCEx_PLL2_Config>
 800512e:	4603      	mov	r3, r0
 8005130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005134:	e006      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800513c:	e002      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800513e:	bf00      	nop
 8005140:	e000      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800514c:	4b68      	ldr	r3, [pc, #416]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800514e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005150:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800515a:	4a65      	ldr	r2, [pc, #404]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800515c:	430b      	orrs	r3, r1
 800515e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005160:	e003      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800516a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005176:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800517a:	2300      	movs	r3, #0
 800517c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005180:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005184:	460b      	mov	r3, r1
 8005186:	4313      	orrs	r3, r2
 8005188:	d051      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800518a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005190:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005194:	d035      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005196:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800519a:	d82e      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800519c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051a0:	d031      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80051a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051a6:	d828      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ac:	d01a      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80051ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b2:	d822      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80051b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051bc:	d007      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80051be:	e01c      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c0:	4b4b      	ldr	r3, [pc, #300]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c4:	4a4a      	ldr	r2, [pc, #296]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051cc:	e01c      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d2:	3308      	adds	r3, #8
 80051d4:	2100      	movs	r1, #0
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 ffb0 	bl	800613c <RCCEx_PLL2_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051e2:	e011      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e8:	3328      	adds	r3, #40	@ 0x28
 80051ea:	2100      	movs	r1, #0
 80051ec:	4618      	mov	r0, r3
 80051ee:	f001 f857 	bl	80062a0 <RCCEx_PLL3_Config>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051f8:	e006      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005200:	e002      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005202:	bf00      	nop
 8005204:	e000      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005210:	4b37      	ldr	r3, [pc, #220]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005214:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800521c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800521e:	4a34      	ldr	r2, [pc, #208]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005220:	430b      	orrs	r3, r1
 8005222:	6513      	str	r3, [r2, #80]	@ 0x50
 8005224:	e003      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800522a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800522e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800523a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800523e:	2300      	movs	r3, #0
 8005240:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005244:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005248:	460b      	mov	r3, r1
 800524a:	4313      	orrs	r3, r2
 800524c:	d056      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800524e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005252:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005254:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005258:	d033      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800525a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800525e:	d82c      	bhi.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005260:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005264:	d02f      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005266:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800526a:	d826      	bhi.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800526c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005270:	d02b      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005272:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005276:	d820      	bhi.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005278:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800527c:	d012      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800527e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005282:	d81a      	bhi.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d022      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800528c:	d115      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800528e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005292:	3308      	adds	r3, #8
 8005294:	2101      	movs	r1, #1
 8005296:	4618      	mov	r0, r3
 8005298:	f000 ff50 	bl	800613c <RCCEx_PLL2_Config>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052a2:	e015      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a8:	3328      	adds	r3, #40	@ 0x28
 80052aa:	2101      	movs	r1, #1
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fff7 	bl	80062a0 <RCCEx_PLL3_Config>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052b8:	e00a      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052c0:	e006      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052c2:	bf00      	nop
 80052c4:	e004      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052c6:	bf00      	nop
 80052c8:	e002      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10d      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80052d8:	4b05      	ldr	r3, [pc, #20]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80052e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052e6:	4a02      	ldr	r2, [pc, #8]	@ (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80052ec:	e006      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80052ee:	bf00      	nop
 80052f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800530c:	2300      	movs	r3, #0
 800530e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005312:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005316:	460b      	mov	r3, r1
 8005318:	4313      	orrs	r3, r2
 800531a:	d055      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800531c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005320:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005324:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005328:	d033      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800532a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800532e:	d82c      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005334:	d02f      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533a:	d826      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800533c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005340:	d02b      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005342:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005346:	d820      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800534c:	d012      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800534e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005352:	d81a      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005354:	2b00      	cmp	r3, #0
 8005356:	d022      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005358:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800535c:	d115      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005362:	3308      	adds	r3, #8
 8005364:	2101      	movs	r1, #1
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fee8 	bl	800613c <RCCEx_PLL2_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005372:	e015      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005378:	3328      	adds	r3, #40	@ 0x28
 800537a:	2101      	movs	r1, #1
 800537c:	4618      	mov	r0, r3
 800537e:	f000 ff8f 	bl	80062a0 <RCCEx_PLL3_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005388:	e00a      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005390:	e006      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005392:	bf00      	nop
 8005394:	e004      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005396:	bf00      	nop
 8005398:	e002      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800539a:	bf00      	nop
 800539c:	e000      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800539e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10b      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80053a8:	4ba3      	ldr	r3, [pc, #652]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053b8:	4a9f      	ldr	r2, [pc, #636]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053ba:	430b      	orrs	r3, r1
 80053bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80053be:	e003      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80053d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053d8:	2300      	movs	r3, #0
 80053da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80053de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053e2:	460b      	mov	r3, r1
 80053e4:	4313      	orrs	r3, r2
 80053e6:	d037      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80053e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053f2:	d00e      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80053f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053f8:	d816      	bhi.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d018      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80053fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005402:	d111      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005404:	4b8c      	ldr	r3, [pc, #560]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005408:	4a8b      	ldr	r2, [pc, #556]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800540a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800540e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005410:	e00f      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005416:	3308      	adds	r3, #8
 8005418:	2101      	movs	r1, #1
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fe8e 	bl	800613c <RCCEx_PLL2_Config>
 8005420:	4603      	mov	r3, r0
 8005422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005426:	e004      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800542e:	e000      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800543a:	4b7f      	ldr	r3, [pc, #508]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800543c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005448:	4a7b      	ldr	r2, [pc, #492]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800544a:	430b      	orrs	r3, r1
 800544c:	6513      	str	r3, [r2, #80]	@ 0x50
 800544e:	e003      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005464:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005468:	2300      	movs	r3, #0
 800546a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800546e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005472:	460b      	mov	r3, r1
 8005474:	4313      	orrs	r3, r2
 8005476:	d039      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800547e:	2b03      	cmp	r3, #3
 8005480:	d81c      	bhi.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005482:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	080054c5 	.word	0x080054c5
 800548c:	08005499 	.word	0x08005499
 8005490:	080054a7 	.word	0x080054a7
 8005494:	080054c5 	.word	0x080054c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005498:	4b67      	ldr	r3, [pc, #412]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	4a66      	ldr	r2, [pc, #408]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800549e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054a4:	e00f      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054aa:	3308      	adds	r3, #8
 80054ac:	2102      	movs	r1, #2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fe44 	bl	800613c <RCCEx_PLL2_Config>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054ba:	e004      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054c2:	e000      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80054c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054ce:	4b5a      	ldr	r3, [pc, #360]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d2:	f023 0103 	bic.w	r1, r3, #3
 80054d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054dc:	4a56      	ldr	r2, [pc, #344]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054de:	430b      	orrs	r3, r1
 80054e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054e2:	e003      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80054f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054fc:	2300      	movs	r3, #0
 80054fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005502:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005506:	460b      	mov	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	f000 809f 	beq.w	800564c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800550e:	4b4b      	ldr	r3, [pc, #300]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a4a      	ldr	r2, [pc, #296]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005518:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800551a:	f7fb ff7d 	bl	8001418 <HAL_GetTick>
 800551e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005522:	e00b      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005524:	f7fb ff78 	bl	8001418 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b64      	cmp	r3, #100	@ 0x64
 8005532:	d903      	bls.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800553a:	e005      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800553c:	4b3f      	ldr	r3, [pc, #252]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0ed      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800554c:	2b00      	cmp	r3, #0
 800554e:	d179      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005550:	4b39      	ldr	r3, [pc, #228]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005552:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005558:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800555c:	4053      	eors	r3, r2
 800555e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005562:	2b00      	cmp	r3, #0
 8005564:	d015      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005566:	4b34      	ldr	r3, [pc, #208]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800556e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005572:	4b31      	ldr	r3, [pc, #196]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005576:	4a30      	ldr	r2, [pc, #192]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800557c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800557e:	4b2e      	ldr	r3, [pc, #184]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005582:	4a2d      	ldr	r2, [pc, #180]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005588:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800558a:	4a2b      	ldr	r2, [pc, #172]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800558c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005590:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005596:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800559a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800559e:	d118      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fb ff3a 	bl	8001418 <HAL_GetTick>
 80055a4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055a8:	e00d      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055aa:	f7fb ff35 	bl	8001418 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80055b4:	1ad2      	subs	r2, r2, r3
 80055b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d903      	bls.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80055c4:	e005      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0eb      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80055d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d129      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ea:	d10e      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80055ec:	4b12      	ldr	r3, [pc, #72]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80055f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055fc:	091a      	lsrs	r2, r3, #4
 80055fe:	4b10      	ldr	r3, [pc, #64]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005600:	4013      	ands	r3, r2
 8005602:	4a0d      	ldr	r2, [pc, #52]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005604:	430b      	orrs	r3, r1
 8005606:	6113      	str	r3, [r2, #16]
 8005608:	e005      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800560a:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	4a0a      	ldr	r2, [pc, #40]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005610:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005614:	6113      	str	r3, [r2, #16]
 8005616:	4b08      	ldr	r3, [pc, #32]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005618:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800561a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005626:	4a04      	ldr	r2, [pc, #16]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005628:	430b      	orrs	r3, r1
 800562a:	6713      	str	r3, [r2, #112]	@ 0x70
 800562c:	e00e      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800562e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005636:	e009      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005638:	58024400 	.word	0x58024400
 800563c:	58024800 	.word	0x58024800
 8005640:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005648:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f002 0301 	and.w	r3, r2, #1
 8005658:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800565c:	2300      	movs	r3, #0
 800565e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005662:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005666:	460b      	mov	r3, r1
 8005668:	4313      	orrs	r3, r2
 800566a:	f000 8089 	beq.w	8005780 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800566e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005672:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005674:	2b28      	cmp	r3, #40	@ 0x28
 8005676:	d86b      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005678:	a201      	add	r2, pc, #4	@ (adr r2, 8005680 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	08005759 	.word	0x08005759
 8005684:	08005751 	.word	0x08005751
 8005688:	08005751 	.word	0x08005751
 800568c:	08005751 	.word	0x08005751
 8005690:	08005751 	.word	0x08005751
 8005694:	08005751 	.word	0x08005751
 8005698:	08005751 	.word	0x08005751
 800569c:	08005751 	.word	0x08005751
 80056a0:	08005725 	.word	0x08005725
 80056a4:	08005751 	.word	0x08005751
 80056a8:	08005751 	.word	0x08005751
 80056ac:	08005751 	.word	0x08005751
 80056b0:	08005751 	.word	0x08005751
 80056b4:	08005751 	.word	0x08005751
 80056b8:	08005751 	.word	0x08005751
 80056bc:	08005751 	.word	0x08005751
 80056c0:	0800573b 	.word	0x0800573b
 80056c4:	08005751 	.word	0x08005751
 80056c8:	08005751 	.word	0x08005751
 80056cc:	08005751 	.word	0x08005751
 80056d0:	08005751 	.word	0x08005751
 80056d4:	08005751 	.word	0x08005751
 80056d8:	08005751 	.word	0x08005751
 80056dc:	08005751 	.word	0x08005751
 80056e0:	08005759 	.word	0x08005759
 80056e4:	08005751 	.word	0x08005751
 80056e8:	08005751 	.word	0x08005751
 80056ec:	08005751 	.word	0x08005751
 80056f0:	08005751 	.word	0x08005751
 80056f4:	08005751 	.word	0x08005751
 80056f8:	08005751 	.word	0x08005751
 80056fc:	08005751 	.word	0x08005751
 8005700:	08005759 	.word	0x08005759
 8005704:	08005751 	.word	0x08005751
 8005708:	08005751 	.word	0x08005751
 800570c:	08005751 	.word	0x08005751
 8005710:	08005751 	.word	0x08005751
 8005714:	08005751 	.word	0x08005751
 8005718:	08005751 	.word	0x08005751
 800571c:	08005751 	.word	0x08005751
 8005720:	08005759 	.word	0x08005759
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005728:	3308      	adds	r3, #8
 800572a:	2101      	movs	r1, #1
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fd05 	bl	800613c <RCCEx_PLL2_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005738:	e00f      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800573a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573e:	3328      	adds	r3, #40	@ 0x28
 8005740:	2101      	movs	r1, #1
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fdac 	bl	80062a0 <RCCEx_PLL3_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800574e:	e004      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005756:	e000      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005762:	4bbf      	ldr	r3, [pc, #764]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005766:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005770:	4abb      	ldr	r2, [pc, #748]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005772:	430b      	orrs	r3, r1
 8005774:	6553      	str	r3, [r2, #84]	@ 0x54
 8005776:	e003      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800577c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f002 0302 	and.w	r3, r2, #2
 800578c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005790:	2300      	movs	r3, #0
 8005792:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005796:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800579a:	460b      	mov	r3, r1
 800579c:	4313      	orrs	r3, r2
 800579e:	d041      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057a6:	2b05      	cmp	r3, #5
 80057a8:	d824      	bhi.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80057aa:	a201      	add	r2, pc, #4	@ (adr r2, 80057b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80057ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b0:	080057fd 	.word	0x080057fd
 80057b4:	080057c9 	.word	0x080057c9
 80057b8:	080057df 	.word	0x080057df
 80057bc:	080057fd 	.word	0x080057fd
 80057c0:	080057fd 	.word	0x080057fd
 80057c4:	080057fd 	.word	0x080057fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057cc:	3308      	adds	r3, #8
 80057ce:	2101      	movs	r1, #1
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fcb3 	bl	800613c <RCCEx_PLL2_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80057dc:	e00f      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e2:	3328      	adds	r3, #40	@ 0x28
 80057e4:	2101      	movs	r1, #1
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fd5a 	bl	80062a0 <RCCEx_PLL3_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80057f2:	e004      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057fa:	e000      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80057fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005806:	4b96      	ldr	r3, [pc, #600]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580a:	f023 0107 	bic.w	r1, r3, #7
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005812:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005814:	4a92      	ldr	r2, [pc, #584]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005816:	430b      	orrs	r3, r1
 8005818:	6553      	str	r3, [r2, #84]	@ 0x54
 800581a:	e003      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582c:	f002 0304 	and.w	r3, r2, #4
 8005830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005834:	2300      	movs	r3, #0
 8005836:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800583a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800583e:	460b      	mov	r3, r1
 8005840:	4313      	orrs	r3, r2
 8005842:	d044      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005848:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800584c:	2b05      	cmp	r3, #5
 800584e:	d825      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005850:	a201      	add	r2, pc, #4	@ (adr r2, 8005858 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	080058a5 	.word	0x080058a5
 800585c:	08005871 	.word	0x08005871
 8005860:	08005887 	.word	0x08005887
 8005864:	080058a5 	.word	0x080058a5
 8005868:	080058a5 	.word	0x080058a5
 800586c:	080058a5 	.word	0x080058a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005874:	3308      	adds	r3, #8
 8005876:	2101      	movs	r1, #1
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fc5f 	bl	800613c <RCCEx_PLL2_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005884:	e00f      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	3328      	adds	r3, #40	@ 0x28
 800588c:	2101      	movs	r1, #1
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fd06 	bl	80062a0 <RCCEx_PLL3_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800589a:	e004      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058a2:	e000      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80058a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10b      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058ae:	4b6c      	ldr	r3, [pc, #432]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b2:	f023 0107 	bic.w	r1, r3, #7
 80058b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058be:	4a68      	ldr	r2, [pc, #416]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058c0:	430b      	orrs	r3, r1
 80058c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80058c4:	e003      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f002 0320 	and.w	r3, r2, #32
 80058da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058de:	2300      	movs	r3, #0
 80058e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058e8:	460b      	mov	r3, r1
 80058ea:	4313      	orrs	r3, r2
 80058ec:	d055      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058fa:	d033      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80058fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005900:	d82c      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005906:	d02f      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800590c:	d826      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800590e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005912:	d02b      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005914:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005918:	d820      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800591a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800591e:	d012      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005924:	d81a      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d022      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800592a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800592e:	d115      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005934:	3308      	adds	r3, #8
 8005936:	2100      	movs	r1, #0
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fbff 	bl	800613c <RCCEx_PLL2_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005944:	e015      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594a:	3328      	adds	r3, #40	@ 0x28
 800594c:	2102      	movs	r1, #2
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fca6 	bl	80062a0 <RCCEx_PLL3_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800595a:	e00a      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005962:	e006      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005964:	bf00      	nop
 8005966:	e004      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005968:	bf00      	nop
 800596a:	e002      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800596c:	bf00      	nop
 800596e:	e000      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10b      	bne.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800597a:	4b39      	ldr	r3, [pc, #228]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800597c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800598a:	4a35      	ldr	r2, [pc, #212]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800598c:	430b      	orrs	r3, r1
 800598e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005990:	e003      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800599a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80059a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059aa:	2300      	movs	r3, #0
 80059ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4313      	orrs	r3, r2
 80059b8:	d058      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80059c6:	d033      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80059c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80059cc:	d82c      	bhi.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d2:	d02f      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80059d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d8:	d826      	bhi.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059de:	d02b      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80059e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059e4:	d820      	bhi.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ea:	d012      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80059ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059f0:	d81a      	bhi.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d022      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80059f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059fa:	d115      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a00:	3308      	adds	r3, #8
 8005a02:	2100      	movs	r1, #0
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fb99 	bl	800613c <RCCEx_PLL2_Config>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a10:	e015      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a16:	3328      	adds	r3, #40	@ 0x28
 8005a18:	2102      	movs	r1, #2
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fc40 	bl	80062a0 <RCCEx_PLL3_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a26:	e00a      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a2e:	e006      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a30:	bf00      	nop
 8005a32:	e004      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a34:	bf00      	nop
 8005a36:	e002      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a38:	bf00      	nop
 8005a3a:	e000      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10e      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a46:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a56:	4a02      	ldr	r2, [pc, #8]	@ (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a5c:	e006      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005a5e:	bf00      	nop
 8005a60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005a86:	460b      	mov	r3, r1
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	d055      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a94:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005a98:	d033      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005a9a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005a9e:	d82c      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aa4:	d02f      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005aa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aaa:	d826      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005aac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ab0:	d02b      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005ab2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ab6:	d820      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ab8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005abc:	d012      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005abe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ac2:	d81a      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d022      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005acc:	d115      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fb30 	bl	800613c <RCCEx_PLL2_Config>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005ae2:	e015      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae8:	3328      	adds	r3, #40	@ 0x28
 8005aea:	2102      	movs	r1, #2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fbd7 	bl	80062a0 <RCCEx_PLL3_Config>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005af8:	e00a      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b00:	e006      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b02:	bf00      	nop
 8005b04:	e004      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b06:	bf00      	nop
 8005b08:	e002      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b0a:	bf00      	nop
 8005b0c:	e000      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10b      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b18:	4ba1      	ldr	r3, [pc, #644]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b28:	4a9d      	ldr	r2, [pc, #628]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b2e:	e003      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	f002 0308 	and.w	r3, r2, #8
 8005b44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005b52:	460b      	mov	r3, r1
 8005b54:	4313      	orrs	r3, r2
 8005b56:	d01e      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b64:	d10c      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6a:	3328      	adds	r3, #40	@ 0x28
 8005b6c:	2102      	movs	r1, #2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fb96 	bl	80062a0 <RCCEx_PLL3_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b80:	4b87      	ldr	r3, [pc, #540]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b90:	4a83      	ldr	r2, [pc, #524]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b92:	430b      	orrs	r3, r1
 8005b94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	f002 0310 	and.w	r3, r2, #16
 8005ba2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005bac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	d01e      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bc2:	d10c      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc8:	3328      	adds	r3, #40	@ 0x28
 8005bca:	2102      	movs	r1, #2
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fb67 	bl	80062a0 <RCCEx_PLL3_Config>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bde:	4b70      	ldr	r3, [pc, #448]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bee:	4a6c      	ldr	r2, [pc, #432]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c04:	2300      	movs	r3, #0
 8005c06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4313      	orrs	r3, r2
 8005c12:	d03e      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c20:	d022      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005c22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c26:	d81b      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c30:	d00b      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005c32:	e015      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c38:	3308      	adds	r3, #8
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fa7d 	bl	800613c <RCCEx_PLL2_Config>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c48:	e00f      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4e:	3328      	adds	r3, #40	@ 0x28
 8005c50:	2102      	movs	r1, #2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fb24 	bl	80062a0 <RCCEx_PLL3_Config>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c5e:	e004      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c66:	e000      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10b      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c72:	4b4b      	ldr	r3, [pc, #300]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c76:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c82:	4a47      	ldr	r2, [pc, #284]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c84:	430b      	orrs	r3, r1
 8005c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c88:	e003      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005c9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ca4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4313      	orrs	r3, r2
 8005cac:	d03b      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cba:	d01f      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005cbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cc0:	d818      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cc6:	d003      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005cc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ccc:	d007      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005cce:	e011      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd0:	4b33      	ldr	r3, [pc, #204]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd4:	4a32      	ldr	r2, [pc, #200]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005cdc:	e00f      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce2:	3328      	adds	r3, #40	@ 0x28
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fada 	bl	80062a0 <RCCEx_PLL3_Config>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005cf2:	e004      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cfa:	e000      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10b      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d06:	4b26      	ldr	r3, [pc, #152]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d16:	4a22      	ldr	r2, [pc, #136]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d1c:	e003      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005d32:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d34:	2300      	movs	r3, #0
 8005d36:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	d034      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d50:	d007      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005d52:	e011      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d54:	4b12      	ldr	r3, [pc, #72]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d58:	4a11      	ldr	r2, [pc, #68]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d60:	e00e      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d66:	3308      	adds	r3, #8
 8005d68:	2102      	movs	r1, #2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f9e6 	bl	800613c <RCCEx_PLL2_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d76:	e003      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10d      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d96:	4a02      	ldr	r2, [pc, #8]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d9c:	e006      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005d9e:	bf00      	nop
 8005da0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005db8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dba:	2300      	movs	r3, #0
 8005dbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dbe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	d00c      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dcc:	3328      	adds	r3, #40	@ 0x28
 8005dce:	2102      	movs	r1, #2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fa65 	bl	80062a0 <RCCEx_PLL3_Config>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005dee:	663b      	str	r3, [r7, #96]	@ 0x60
 8005df0:	2300      	movs	r3, #0
 8005df2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005df4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	d038      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e0a:	d018      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005e0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e10:	d811      	bhi.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e16:	d014      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e1c:	d80b      	bhi.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d011      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e26:	d106      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e28:	4bc3      	ldr	r3, [pc, #780]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	4ac2      	ldr	r2, [pc, #776]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005e34:	e008      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e3c:	e004      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e3e:	bf00      	nop
 8005e40:	e002      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e42:	bf00      	nop
 8005e44:	e000      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10b      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e50:	4bb9      	ldr	r3, [pc, #740]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e54:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e60:	4ab5      	ldr	r2, [pc, #724]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e62:	430b      	orrs	r3, r1
 8005e64:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e66:	e003      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005e7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e7e:	2300      	movs	r3, #0
 8005e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005e86:	460b      	mov	r3, r1
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e8c:	4baa      	ldr	r3, [pc, #680]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e9a:	4aa7      	ldr	r2, [pc, #668]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005eac:	653b      	str	r3, [r7, #80]	@ 0x50
 8005eae:	2300      	movs	r3, #0
 8005eb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005eb2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	d00a      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005ebc:	4b9e      	ldr	r3, [pc, #632]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005ecc:	4a9a      	ldr	r2, [pc, #616]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ee4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4313      	orrs	r3, r2
 8005eec:	d009      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005eee:	4b92      	ldr	r3, [pc, #584]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005efc:	4a8e      	ldr	r2, [pc, #568]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005efe:	430b      	orrs	r3, r1
 8005f00:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005f0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f10:	2300      	movs	r3, #0
 8005f12:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f14:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	d00e      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f1e:	4b86      	ldr	r3, [pc, #536]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	4a85      	ldr	r2, [pc, #532]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f24:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f28:	6113      	str	r3, [r2, #16]
 8005f2a:	4b83      	ldr	r3, [pc, #524]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f2c:	6919      	ldr	r1, [r3, #16]
 8005f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f36:	4a80      	ldr	r2, [pc, #512]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005f48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f4e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005f52:	460b      	mov	r3, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	d009      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f58:	4b77      	ldr	r3, [pc, #476]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f5c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f66:	4a74      	ldr	r2, [pc, #464]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005f82:	460b      	mov	r3, r1
 8005f84:	4313      	orrs	r3, r2
 8005f86:	d00a      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f88:	4b6b      	ldr	r3, [pc, #428]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f98:	4a67      	ldr	r2, [pc, #412]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fb0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	d011      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbe:	3308      	adds	r3, #8
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 f8ba 	bl	800613c <RCCEx_PLL2_Config>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	6239      	str	r1, [r7, #32]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ff0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	d011      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffe:	3308      	adds	r3, #8
 8006000:	2101      	movs	r1, #1
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f89a 	bl	800613c <RCCEx_PLL2_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800600e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800601a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	2100      	movs	r1, #0
 8006028:	61b9      	str	r1, [r7, #24]
 800602a:	f003 0304 	and.w	r3, r3, #4
 800602e:	61fb      	str	r3, [r7, #28]
 8006030:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006034:	460b      	mov	r3, r1
 8006036:	4313      	orrs	r3, r2
 8006038:	d011      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603e:	3308      	adds	r3, #8
 8006040:	2102      	movs	r1, #2
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f87a 	bl	800613c <RCCEx_PLL2_Config>
 8006048:	4603      	mov	r3, r0
 800604a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800604e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800605a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	2100      	movs	r1, #0
 8006068:	6139      	str	r1, [r7, #16]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006074:	460b      	mov	r3, r1
 8006076:	4313      	orrs	r3, r2
 8006078:	d011      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800607a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607e:	3328      	adds	r3, #40	@ 0x28
 8006080:	2100      	movs	r1, #0
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f90c 	bl	80062a0 <RCCEx_PLL3_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800608e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	2100      	movs	r1, #0
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060b4:	460b      	mov	r3, r1
 80060b6:	4313      	orrs	r3, r2
 80060b8:	d011      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060be:	3328      	adds	r3, #40	@ 0x28
 80060c0:	2101      	movs	r1, #1
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 f8ec 	bl	80062a0 <RCCEx_PLL3_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	2100      	movs	r1, #0
 80060e8:	6039      	str	r1, [r7, #0]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	607b      	str	r3, [r7, #4]
 80060f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80060f4:	460b      	mov	r3, r1
 80060f6:	4313      	orrs	r3, r2
 80060f8:	d011      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fe:	3328      	adds	r3, #40	@ 0x28
 8006100:	2102      	movs	r1, #2
 8006102:	4618      	mov	r0, r3
 8006104:	f000 f8cc 	bl	80062a0 <RCCEx_PLL3_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800610e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800611a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800611e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	e000      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
}
 800612c:	4618      	mov	r0, r3
 800612e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006132:	46bd      	mov	sp, r7
 8006134:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006138:	58024400 	.word	0x58024400

0800613c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800614a:	4b53      	ldr	r3, [pc, #332]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800614c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b03      	cmp	r3, #3
 8006154:	d101      	bne.n	800615a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e099      	b.n	800628e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800615a:	4b4f      	ldr	r3, [pc, #316]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a4e      	ldr	r2, [pc, #312]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006160:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006166:	f7fb f957 	bl	8001418 <HAL_GetTick>
 800616a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800616c:	e008      	b.n	8006180 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800616e:	f7fb f953 	bl	8001418 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e086      	b.n	800628e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006180:	4b45      	ldr	r3, [pc, #276]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f0      	bne.n	800616e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800618c:	4b42      	ldr	r3, [pc, #264]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	031b      	lsls	r3, r3, #12
 800619a:	493f      	ldr	r1, [pc, #252]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800619c:	4313      	orrs	r3, r2
 800619e:	628b      	str	r3, [r1, #40]	@ 0x28
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	025b      	lsls	r3, r3, #9
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	041b      	lsls	r3, r3, #16
 80061be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	061b      	lsls	r3, r3, #24
 80061cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061d0:	4931      	ldr	r1, [pc, #196]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061d6:	4b30      	ldr	r3, [pc, #192]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	492d      	ldr	r1, [pc, #180]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ec:	f023 0220 	bic.w	r2, r3, #32
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	4928      	ldr	r1, [pc, #160]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061fa:	4b27      	ldr	r3, [pc, #156]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fe:	4a26      	ldr	r2, [pc, #152]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006200:	f023 0310 	bic.w	r3, r3, #16
 8006204:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006206:	4b24      	ldr	r3, [pc, #144]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006208:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800620a:	4b24      	ldr	r3, [pc, #144]	@ (800629c <RCCEx_PLL2_Config+0x160>)
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	69d2      	ldr	r2, [r2, #28]
 8006212:	00d2      	lsls	r2, r2, #3
 8006214:	4920      	ldr	r1, [pc, #128]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006216:	4313      	orrs	r3, r2
 8006218:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800621a:	4b1f      	ldr	r3, [pc, #124]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	4a1e      	ldr	r2, [pc, #120]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006220:	f043 0310 	orr.w	r3, r3, #16
 8006224:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d106      	bne.n	800623a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800622c:	4b1a      	ldr	r3, [pc, #104]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	4a19      	ldr	r2, [pc, #100]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006232:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006238:	e00f      	b.n	800625a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d106      	bne.n	800624e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006240:	4b15      	ldr	r3, [pc, #84]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4a14      	ldr	r2, [pc, #80]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800624a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800624c:	e005      	b.n	800625a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800624e:	4b12      	ldr	r3, [pc, #72]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006252:	4a11      	ldr	r2, [pc, #68]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006254:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006258:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800625a:	4b0f      	ldr	r3, [pc, #60]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a0e      	ldr	r2, [pc, #56]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006260:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006266:	f7fb f8d7 	bl	8001418 <HAL_GetTick>
 800626a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800626c:	e008      	b.n	8006280 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800626e:	f7fb f8d3 	bl	8001418 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e006      	b.n	800628e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006280:	4b05      	ldr	r3, [pc, #20]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f0      	beq.n	800626e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	58024400 	.word	0x58024400
 800629c:	ffff0007 	.word	0xffff0007

080062a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062ae:	4b53      	ldr	r3, [pc, #332]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d101      	bne.n	80062be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e099      	b.n	80063f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062be:	4b4f      	ldr	r3, [pc, #316]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a4e      	ldr	r2, [pc, #312]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ca:	f7fb f8a5 	bl	8001418 <HAL_GetTick>
 80062ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062d0:	e008      	b.n	80062e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062d2:	f7fb f8a1 	bl	8001418 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e086      	b.n	80063f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062e4:	4b45      	ldr	r3, [pc, #276]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1f0      	bne.n	80062d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062f0:	4b42      	ldr	r3, [pc, #264]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	051b      	lsls	r3, r3, #20
 80062fe:	493f      	ldr	r1, [pc, #252]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006300:	4313      	orrs	r3, r2
 8006302:	628b      	str	r3, [r1, #40]	@ 0x28
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	3b01      	subs	r3, #1
 800630a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	3b01      	subs	r3, #1
 8006314:	025b      	lsls	r3, r3, #9
 8006316:	b29b      	uxth	r3, r3
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	3b01      	subs	r3, #1
 8006320:	041b      	lsls	r3, r3, #16
 8006322:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	3b01      	subs	r3, #1
 800632e:	061b      	lsls	r3, r3, #24
 8006330:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006334:	4931      	ldr	r1, [pc, #196]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006336:	4313      	orrs	r3, r2
 8006338:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800633a:	4b30      	ldr	r3, [pc, #192]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	492d      	ldr	r1, [pc, #180]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006348:	4313      	orrs	r3, r2
 800634a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800634c:	4b2b      	ldr	r3, [pc, #172]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006350:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	4928      	ldr	r1, [pc, #160]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800635a:	4313      	orrs	r3, r2
 800635c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800635e:	4b27      	ldr	r3, [pc, #156]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	4a26      	ldr	r2, [pc, #152]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006368:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800636a:	4b24      	ldr	r3, [pc, #144]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800636c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800636e:	4b24      	ldr	r3, [pc, #144]	@ (8006400 <RCCEx_PLL3_Config+0x160>)
 8006370:	4013      	ands	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	69d2      	ldr	r2, [r2, #28]
 8006376:	00d2      	lsls	r2, r2, #3
 8006378:	4920      	ldr	r1, [pc, #128]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800637a:	4313      	orrs	r3, r2
 800637c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800637e:	4b1f      	ldr	r3, [pc, #124]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006382:	4a1e      	ldr	r2, [pc, #120]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006388:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006390:	4b1a      	ldr	r3, [pc, #104]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	4a19      	ldr	r2, [pc, #100]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006396:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800639a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800639c:	e00f      	b.n	80063be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d106      	bne.n	80063b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063a4:	4b15      	ldr	r3, [pc, #84]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a8:	4a14      	ldr	r2, [pc, #80]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063b0:	e005      	b.n	80063be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063b2:	4b12      	ldr	r3, [pc, #72]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b6:	4a11      	ldr	r2, [pc, #68]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063be:	4b0f      	ldr	r3, [pc, #60]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a0e      	ldr	r2, [pc, #56]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ca:	f7fb f825 	bl	8001418 <HAL_GetTick>
 80063ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063d0:	e008      	b.n	80063e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063d2:	f7fb f821 	bl	8001418 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e006      	b.n	80063f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063e4:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	58024400 	.word	0x58024400
 8006400:	ffff0007 	.word	0xffff0007

08006404 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800640a:	4b87      	ldr	r3, [pc, #540]	@ (8006628 <MX_LWIP_Init+0x224>)
 800640c:	22c0      	movs	r2, #192	@ 0xc0
 800640e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006410:	4b85      	ldr	r3, [pc, #532]	@ (8006628 <MX_LWIP_Init+0x224>)
 8006412:	22a8      	movs	r2, #168	@ 0xa8
 8006414:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 8006416:	4b84      	ldr	r3, [pc, #528]	@ (8006628 <MX_LWIP_Init+0x224>)
 8006418:	220a      	movs	r2, #10
 800641a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 800641c:	4b82      	ldr	r3, [pc, #520]	@ (8006628 <MX_LWIP_Init+0x224>)
 800641e:	2232      	movs	r2, #50	@ 0x32
 8006420:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006422:	4b82      	ldr	r3, [pc, #520]	@ (800662c <MX_LWIP_Init+0x228>)
 8006424:	22ff      	movs	r2, #255	@ 0xff
 8006426:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006428:	4b80      	ldr	r3, [pc, #512]	@ (800662c <MX_LWIP_Init+0x228>)
 800642a:	22ff      	movs	r2, #255	@ 0xff
 800642c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800642e:	4b7f      	ldr	r3, [pc, #508]	@ (800662c <MX_LWIP_Init+0x228>)
 8006430:	22ff      	movs	r2, #255	@ 0xff
 8006432:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006434:	4b7d      	ldr	r3, [pc, #500]	@ (800662c <MX_LWIP_Init+0x228>)
 8006436:	2200      	movs	r2, #0
 8006438:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800643a:	4b7d      	ldr	r3, [pc, #500]	@ (8006630 <MX_LWIP_Init+0x22c>)
 800643c:	2200      	movs	r2, #0
 800643e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8006440:	4b7b      	ldr	r3, [pc, #492]	@ (8006630 <MX_LWIP_Init+0x22c>)
 8006442:	2200      	movs	r2, #0
 8006444:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006446:	4b7a      	ldr	r3, [pc, #488]	@ (8006630 <MX_LWIP_Init+0x22c>)
 8006448:	2200      	movs	r2, #0
 800644a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800644c:	4b78      	ldr	r3, [pc, #480]	@ (8006630 <MX_LWIP_Init+0x22c>)
 800644e:	2200      	movs	r2, #0
 8006450:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8006452:	f002 fa4c 	bl	80088ee <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006456:	4b74      	ldr	r3, [pc, #464]	@ (8006628 <MX_LWIP_Init+0x224>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	061a      	lsls	r2, r3, #24
 800645c:	4b72      	ldr	r3, [pc, #456]	@ (8006628 <MX_LWIP_Init+0x224>)
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	041b      	lsls	r3, r3, #16
 8006462:	431a      	orrs	r2, r3
 8006464:	4b70      	ldr	r3, [pc, #448]	@ (8006628 <MX_LWIP_Init+0x224>)
 8006466:	789b      	ldrb	r3, [r3, #2]
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	4313      	orrs	r3, r2
 800646c:	4a6e      	ldr	r2, [pc, #440]	@ (8006628 <MX_LWIP_Init+0x224>)
 800646e:	78d2      	ldrb	r2, [r2, #3]
 8006470:	4313      	orrs	r3, r2
 8006472:	061a      	lsls	r2, r3, #24
 8006474:	4b6c      	ldr	r3, [pc, #432]	@ (8006628 <MX_LWIP_Init+0x224>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	0619      	lsls	r1, r3, #24
 800647a:	4b6b      	ldr	r3, [pc, #428]	@ (8006628 <MX_LWIP_Init+0x224>)
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	4319      	orrs	r1, r3
 8006482:	4b69      	ldr	r3, [pc, #420]	@ (8006628 <MX_LWIP_Init+0x224>)
 8006484:	789b      	ldrb	r3, [r3, #2]
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	430b      	orrs	r3, r1
 800648a:	4967      	ldr	r1, [pc, #412]	@ (8006628 <MX_LWIP_Init+0x224>)
 800648c:	78c9      	ldrb	r1, [r1, #3]
 800648e:	430b      	orrs	r3, r1
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006496:	431a      	orrs	r2, r3
 8006498:	4b63      	ldr	r3, [pc, #396]	@ (8006628 <MX_LWIP_Init+0x224>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	0619      	lsls	r1, r3, #24
 800649e:	4b62      	ldr	r3, [pc, #392]	@ (8006628 <MX_LWIP_Init+0x224>)
 80064a0:	785b      	ldrb	r3, [r3, #1]
 80064a2:	041b      	lsls	r3, r3, #16
 80064a4:	4319      	orrs	r1, r3
 80064a6:	4b60      	ldr	r3, [pc, #384]	@ (8006628 <MX_LWIP_Init+0x224>)
 80064a8:	789b      	ldrb	r3, [r3, #2]
 80064aa:	021b      	lsls	r3, r3, #8
 80064ac:	430b      	orrs	r3, r1
 80064ae:	495e      	ldr	r1, [pc, #376]	@ (8006628 <MX_LWIP_Init+0x224>)
 80064b0:	78c9      	ldrb	r1, [r1, #3]
 80064b2:	430b      	orrs	r3, r1
 80064b4:	0a1b      	lsrs	r3, r3, #8
 80064b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80064ba:	431a      	orrs	r2, r3
 80064bc:	4b5a      	ldr	r3, [pc, #360]	@ (8006628 <MX_LWIP_Init+0x224>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	0619      	lsls	r1, r3, #24
 80064c2:	4b59      	ldr	r3, [pc, #356]	@ (8006628 <MX_LWIP_Init+0x224>)
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	4319      	orrs	r1, r3
 80064ca:	4b57      	ldr	r3, [pc, #348]	@ (8006628 <MX_LWIP_Init+0x224>)
 80064cc:	789b      	ldrb	r3, [r3, #2]
 80064ce:	021b      	lsls	r3, r3, #8
 80064d0:	430b      	orrs	r3, r1
 80064d2:	4955      	ldr	r1, [pc, #340]	@ (8006628 <MX_LWIP_Init+0x224>)
 80064d4:	78c9      	ldrb	r1, [r1, #3]
 80064d6:	430b      	orrs	r3, r1
 80064d8:	0e1b      	lsrs	r3, r3, #24
 80064da:	4313      	orrs	r3, r2
 80064dc:	4a55      	ldr	r2, [pc, #340]	@ (8006634 <MX_LWIP_Init+0x230>)
 80064de:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80064e0:	4b52      	ldr	r3, [pc, #328]	@ (800662c <MX_LWIP_Init+0x228>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	061a      	lsls	r2, r3, #24
 80064e6:	4b51      	ldr	r3, [pc, #324]	@ (800662c <MX_LWIP_Init+0x228>)
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	041b      	lsls	r3, r3, #16
 80064ec:	431a      	orrs	r2, r3
 80064ee:	4b4f      	ldr	r3, [pc, #316]	@ (800662c <MX_LWIP_Init+0x228>)
 80064f0:	789b      	ldrb	r3, [r3, #2]
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	4313      	orrs	r3, r2
 80064f6:	4a4d      	ldr	r2, [pc, #308]	@ (800662c <MX_LWIP_Init+0x228>)
 80064f8:	78d2      	ldrb	r2, [r2, #3]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	061a      	lsls	r2, r3, #24
 80064fe:	4b4b      	ldr	r3, [pc, #300]	@ (800662c <MX_LWIP_Init+0x228>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	0619      	lsls	r1, r3, #24
 8006504:	4b49      	ldr	r3, [pc, #292]	@ (800662c <MX_LWIP_Init+0x228>)
 8006506:	785b      	ldrb	r3, [r3, #1]
 8006508:	041b      	lsls	r3, r3, #16
 800650a:	4319      	orrs	r1, r3
 800650c:	4b47      	ldr	r3, [pc, #284]	@ (800662c <MX_LWIP_Init+0x228>)
 800650e:	789b      	ldrb	r3, [r3, #2]
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	430b      	orrs	r3, r1
 8006514:	4945      	ldr	r1, [pc, #276]	@ (800662c <MX_LWIP_Init+0x228>)
 8006516:	78c9      	ldrb	r1, [r1, #3]
 8006518:	430b      	orrs	r3, r1
 800651a:	021b      	lsls	r3, r3, #8
 800651c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006520:	431a      	orrs	r2, r3
 8006522:	4b42      	ldr	r3, [pc, #264]	@ (800662c <MX_LWIP_Init+0x228>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	0619      	lsls	r1, r3, #24
 8006528:	4b40      	ldr	r3, [pc, #256]	@ (800662c <MX_LWIP_Init+0x228>)
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	041b      	lsls	r3, r3, #16
 800652e:	4319      	orrs	r1, r3
 8006530:	4b3e      	ldr	r3, [pc, #248]	@ (800662c <MX_LWIP_Init+0x228>)
 8006532:	789b      	ldrb	r3, [r3, #2]
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	430b      	orrs	r3, r1
 8006538:	493c      	ldr	r1, [pc, #240]	@ (800662c <MX_LWIP_Init+0x228>)
 800653a:	78c9      	ldrb	r1, [r1, #3]
 800653c:	430b      	orrs	r3, r1
 800653e:	0a1b      	lsrs	r3, r3, #8
 8006540:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006544:	431a      	orrs	r2, r3
 8006546:	4b39      	ldr	r3, [pc, #228]	@ (800662c <MX_LWIP_Init+0x228>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	0619      	lsls	r1, r3, #24
 800654c:	4b37      	ldr	r3, [pc, #220]	@ (800662c <MX_LWIP_Init+0x228>)
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	041b      	lsls	r3, r3, #16
 8006552:	4319      	orrs	r1, r3
 8006554:	4b35      	ldr	r3, [pc, #212]	@ (800662c <MX_LWIP_Init+0x228>)
 8006556:	789b      	ldrb	r3, [r3, #2]
 8006558:	021b      	lsls	r3, r3, #8
 800655a:	430b      	orrs	r3, r1
 800655c:	4933      	ldr	r1, [pc, #204]	@ (800662c <MX_LWIP_Init+0x228>)
 800655e:	78c9      	ldrb	r1, [r1, #3]
 8006560:	430b      	orrs	r3, r1
 8006562:	0e1b      	lsrs	r3, r3, #24
 8006564:	4313      	orrs	r3, r2
 8006566:	4a34      	ldr	r2, [pc, #208]	@ (8006638 <MX_LWIP_Init+0x234>)
 8006568:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800656a:	4b31      	ldr	r3, [pc, #196]	@ (8006630 <MX_LWIP_Init+0x22c>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	061a      	lsls	r2, r3, #24
 8006570:	4b2f      	ldr	r3, [pc, #188]	@ (8006630 <MX_LWIP_Init+0x22c>)
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	041b      	lsls	r3, r3, #16
 8006576:	431a      	orrs	r2, r3
 8006578:	4b2d      	ldr	r3, [pc, #180]	@ (8006630 <MX_LWIP_Init+0x22c>)
 800657a:	789b      	ldrb	r3, [r3, #2]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	4313      	orrs	r3, r2
 8006580:	4a2b      	ldr	r2, [pc, #172]	@ (8006630 <MX_LWIP_Init+0x22c>)
 8006582:	78d2      	ldrb	r2, [r2, #3]
 8006584:	4313      	orrs	r3, r2
 8006586:	061a      	lsls	r2, r3, #24
 8006588:	4b29      	ldr	r3, [pc, #164]	@ (8006630 <MX_LWIP_Init+0x22c>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	0619      	lsls	r1, r3, #24
 800658e:	4b28      	ldr	r3, [pc, #160]	@ (8006630 <MX_LWIP_Init+0x22c>)
 8006590:	785b      	ldrb	r3, [r3, #1]
 8006592:	041b      	lsls	r3, r3, #16
 8006594:	4319      	orrs	r1, r3
 8006596:	4b26      	ldr	r3, [pc, #152]	@ (8006630 <MX_LWIP_Init+0x22c>)
 8006598:	789b      	ldrb	r3, [r3, #2]
 800659a:	021b      	lsls	r3, r3, #8
 800659c:	430b      	orrs	r3, r1
 800659e:	4924      	ldr	r1, [pc, #144]	@ (8006630 <MX_LWIP_Init+0x22c>)
 80065a0:	78c9      	ldrb	r1, [r1, #3]
 80065a2:	430b      	orrs	r3, r1
 80065a4:	021b      	lsls	r3, r3, #8
 80065a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80065aa:	431a      	orrs	r2, r3
 80065ac:	4b20      	ldr	r3, [pc, #128]	@ (8006630 <MX_LWIP_Init+0x22c>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	0619      	lsls	r1, r3, #24
 80065b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006630 <MX_LWIP_Init+0x22c>)
 80065b4:	785b      	ldrb	r3, [r3, #1]
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	4319      	orrs	r1, r3
 80065ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006630 <MX_LWIP_Init+0x22c>)
 80065bc:	789b      	ldrb	r3, [r3, #2]
 80065be:	021b      	lsls	r3, r3, #8
 80065c0:	430b      	orrs	r3, r1
 80065c2:	491b      	ldr	r1, [pc, #108]	@ (8006630 <MX_LWIP_Init+0x22c>)
 80065c4:	78c9      	ldrb	r1, [r1, #3]
 80065c6:	430b      	orrs	r3, r1
 80065c8:	0a1b      	lsrs	r3, r3, #8
 80065ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80065ce:	431a      	orrs	r2, r3
 80065d0:	4b17      	ldr	r3, [pc, #92]	@ (8006630 <MX_LWIP_Init+0x22c>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	0619      	lsls	r1, r3, #24
 80065d6:	4b16      	ldr	r3, [pc, #88]	@ (8006630 <MX_LWIP_Init+0x22c>)
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	041b      	lsls	r3, r3, #16
 80065dc:	4319      	orrs	r1, r3
 80065de:	4b14      	ldr	r3, [pc, #80]	@ (8006630 <MX_LWIP_Init+0x22c>)
 80065e0:	789b      	ldrb	r3, [r3, #2]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	430b      	orrs	r3, r1
 80065e6:	4912      	ldr	r1, [pc, #72]	@ (8006630 <MX_LWIP_Init+0x22c>)
 80065e8:	78c9      	ldrb	r1, [r1, #3]
 80065ea:	430b      	orrs	r3, r1
 80065ec:	0e1b      	lsrs	r3, r3, #24
 80065ee:	4313      	orrs	r3, r2
 80065f0:	4a12      	ldr	r2, [pc, #72]	@ (800663c <MX_LWIP_Init+0x238>)
 80065f2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80065f4:	4b12      	ldr	r3, [pc, #72]	@ (8006640 <MX_LWIP_Init+0x23c>)
 80065f6:	9302      	str	r3, [sp, #8]
 80065f8:	4b12      	ldr	r3, [pc, #72]	@ (8006644 <MX_LWIP_Init+0x240>)
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	2300      	movs	r3, #0
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	4b0e      	ldr	r3, [pc, #56]	@ (800663c <MX_LWIP_Init+0x238>)
 8006602:	4a0d      	ldr	r2, [pc, #52]	@ (8006638 <MX_LWIP_Init+0x234>)
 8006604:	490b      	ldr	r1, [pc, #44]	@ (8006634 <MX_LWIP_Init+0x230>)
 8006606:	4810      	ldr	r0, [pc, #64]	@ (8006648 <MX_LWIP_Init+0x244>)
 8006608:	f002 fe62 	bl	80092d0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800660c:	480e      	ldr	r0, [pc, #56]	@ (8006648 <MX_LWIP_Init+0x244>)
 800660e:	f003 f811 	bl	8009634 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006612:	480d      	ldr	r0, [pc, #52]	@ (8006648 <MX_LWIP_Init+0x244>)
 8006614:	f003 f81e 	bl	8009654 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006618:	490c      	ldr	r1, [pc, #48]	@ (800664c <MX_LWIP_Init+0x248>)
 800661a:	480b      	ldr	r0, [pc, #44]	@ (8006648 <MX_LWIP_Init+0x244>)
 800661c:	f003 f91c 	bl	8009858 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006620:	bf00      	nop
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	240401c4 	.word	0x240401c4
 800662c:	240401c8 	.word	0x240401c8
 8006630:	240401cc 	.word	0x240401cc
 8006634:	240401b8 	.word	0x240401b8
 8006638:	240401bc 	.word	0x240401bc
 800663c:	240401c0 	.word	0x240401c0
 8006640:	08013099 	.word	0x08013099
 8006644:	0800696d 	.word	0x0800696d
 8006648:	24040184 	.word	0x24040184
 800664c:	080066a1 	.word	0x080066a1

08006650 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8006658:	f7fa fede 	bl	8001418 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	4b08      	ldr	r3, [pc, #32]	@ (8006680 <Ethernet_Link_Periodic_Handle+0x30>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b63      	cmp	r3, #99	@ 0x63
 8006666:	d907      	bls.n	8006678 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8006668:	f7fa fed6 	bl	8001418 <HAL_GetTick>
 800666c:	4603      	mov	r3, r0
 800666e:	4a04      	ldr	r2, [pc, #16]	@ (8006680 <Ethernet_Link_Periodic_Handle+0x30>)
 8006670:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fae6 	bl	8006c44 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8006678:	bf00      	nop
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	24040180 	.word	0x24040180

08006684 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8006688:	4804      	ldr	r0, [pc, #16]	@ (800669c <MX_LWIP_Process+0x18>)
 800668a:	f000 f94f 	bl	800692c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800668e:	f00a f8f1 	bl	8010874 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8006692:	4802      	ldr	r0, [pc, #8]	@ (800669c <MX_LWIP_Process+0x18>)
 8006694:	f7ff ffdc 	bl	8006650 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8006698:	bf00      	nop
 800669a:	bd80      	pop	{r7, pc}
 800669c:	24040184 	.word	0x24040184

080066a0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80066c0:	4b44      	ldr	r3, [pc, #272]	@ (80067d4 <low_level_init+0x120>)
 80066c2:	4a45      	ldr	r2, [pc, #276]	@ (80067d8 <low_level_init+0x124>)
 80066c4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80066c6:	2300      	movs	r3, #0
 80066c8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80066ca:	2380      	movs	r3, #128	@ 0x80
 80066cc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80066ce:	23e1      	movs	r3, #225	@ 0xe1
 80066d0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80066d2:	2300      	movs	r3, #0
 80066d4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80066d6:	2300      	movs	r3, #0
 80066d8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80066da:	2300      	movs	r3, #0
 80066dc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80066de:	4a3d      	ldr	r2, [pc, #244]	@ (80067d4 <low_level_init+0x120>)
 80066e0:	f107 0308 	add.w	r3, r7, #8
 80066e4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80066e6:	4b3b      	ldr	r3, [pc, #236]	@ (80067d4 <low_level_init+0x120>)
 80066e8:	2201      	movs	r2, #1
 80066ea:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80066ec:	4b39      	ldr	r3, [pc, #228]	@ (80067d4 <low_level_init+0x120>)
 80066ee:	4a3b      	ldr	r2, [pc, #236]	@ (80067dc <low_level_init+0x128>)
 80066f0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80066f2:	4b38      	ldr	r3, [pc, #224]	@ (80067d4 <low_level_init+0x120>)
 80066f4:	4a3a      	ldr	r2, [pc, #232]	@ (80067e0 <low_level_init+0x12c>)
 80066f6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80066f8:	4b36      	ldr	r3, [pc, #216]	@ (80067d4 <low_level_init+0x120>)
 80066fa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80066fe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006700:	4834      	ldr	r0, [pc, #208]	@ (80067d4 <low_level_init+0x120>)
 8006702:	f7fb f835 	bl	8001770 <HAL_ETH_Init>
 8006706:	4603      	mov	r3, r0
 8006708:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800670a:	2238      	movs	r2, #56	@ 0x38
 800670c:	2100      	movs	r1, #0
 800670e:	4835      	ldr	r0, [pc, #212]	@ (80067e4 <low_level_init+0x130>)
 8006710:	f00c fefd 	bl	801350e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006714:	4b33      	ldr	r3, [pc, #204]	@ (80067e4 <low_level_init+0x130>)
 8006716:	2221      	movs	r2, #33	@ 0x21
 8006718:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800671a:	4b32      	ldr	r3, [pc, #200]	@ (80067e4 <low_level_init+0x130>)
 800671c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006720:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006722:	4b30      	ldr	r3, [pc, #192]	@ (80067e4 <low_level_init+0x130>)
 8006724:	2200      	movs	r2, #0
 8006726:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006728:	482f      	ldr	r0, [pc, #188]	@ (80067e8 <low_level_init+0x134>)
 800672a:	f002 fc98 	bl	800905e <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2206      	movs	r2, #6
 8006732:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006736:	4b27      	ldr	r3, [pc, #156]	@ (80067d4 <low_level_init+0x120>)
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	781a      	ldrb	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006742:	4b24      	ldr	r3, [pc, #144]	@ (80067d4 <low_level_init+0x120>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	785a      	ldrb	r2, [r3, #1]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800674e:	4b21      	ldr	r3, [pc, #132]	@ (80067d4 <low_level_init+0x120>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	789a      	ldrb	r2, [r3, #2]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800675a:	4b1e      	ldr	r3, [pc, #120]	@ (80067d4 <low_level_init+0x120>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	78da      	ldrb	r2, [r3, #3]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006766:	4b1b      	ldr	r3, [pc, #108]	@ (80067d4 <low_level_init+0x120>)
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	791a      	ldrb	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006772:	4b18      	ldr	r3, [pc, #96]	@ (80067d4 <low_level_init+0x120>)
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	795a      	ldrb	r2, [r3, #5]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006784:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800678c:	f043 030a 	orr.w	r3, r3, #10
 8006790:	b2da      	uxtb	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006798:	4914      	ldr	r1, [pc, #80]	@ (80067ec <low_level_init+0x138>)
 800679a:	4815      	ldr	r0, [pc, #84]	@ (80067f0 <low_level_init+0x13c>)
 800679c:	f7fa fcaf 	bl	80010fe <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80067a0:	4813      	ldr	r0, [pc, #76]	@ (80067f0 <low_level_init+0x13c>)
 80067a2:	f7fa fcde 	bl	8001162 <LAN8742_Init>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d006      	beq.n	80067ba <low_level_init+0x106>
  {
    netif_set_link_down(netif);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f003 f823 	bl	80097f8 <netif_set_link_down>
    netif_set_down(netif);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f002 ffba 	bl	800972c <netif_set_down>
 80067b8:	e008      	b.n	80067cc <low_level_init+0x118>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d103      	bne.n	80067c8 <low_level_init+0x114>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fa3f 	bl	8006c44 <ethernet_link_check_state>
 80067c6:	e001      	b.n	80067cc <low_level_init+0x118>
  }
  else
  {
    Error_Handler();
 80067c8:	f7fa fa24 	bl	8000c14 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	240401d8 	.word	0x240401d8
 80067d8:	40028000 	.word	0x40028000
 80067dc:	30040060 	.word	0x30040060
 80067e0:	30040000 	.word	0x30040000
 80067e4:	24040288 	.word	0x24040288
 80067e8:	080174c0 	.word	0x080174c0
 80067ec:	24000010 	.word	0x24000010
 80067f0:	240402c0 	.word	0x240402c0

080067f4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b092      	sub	sp, #72	@ 0x48
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800680c:	f107 030c 	add.w	r3, r7, #12
 8006810:	2230      	movs	r2, #48	@ 0x30
 8006812:	2100      	movs	r1, #0
 8006814:	4618      	mov	r0, r3
 8006816:	f00c fe7a 	bl	801350e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800681a:	f107 030c 	add.w	r3, r7, #12
 800681e:	2230      	movs	r2, #48	@ 0x30
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f00c fe73 	bl	801350e <memset>

  for(q = p; q != NULL; q = q->next)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	643b      	str	r3, [r7, #64]	@ 0x40
 800682c:	e045      	b.n	80068ba <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800682e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006830:	2b03      	cmp	r3, #3
 8006832:	d902      	bls.n	800683a <low_level_output+0x46>
      return ERR_IF;
 8006834:	f06f 030b 	mvn.w	r3, #11
 8006838:	e055      	b.n	80068e6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800683a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800683c:	6859      	ldr	r1, [r3, #4]
 800683e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006840:	4613      	mov	r3, r2
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	3348      	adds	r3, #72	@ 0x48
 800684a:	443b      	add	r3, r7
 800684c:	3b3c      	subs	r3, #60	@ 0x3c
 800684e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006852:	895b      	ldrh	r3, [r3, #10]
 8006854:	4619      	mov	r1, r3
 8006856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006858:	4613      	mov	r3, r2
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	4413      	add	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	3348      	adds	r3, #72	@ 0x48
 8006862:	443b      	add	r3, r7
 8006864:	3b38      	subs	r3, #56	@ 0x38
 8006866:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800686a:	2b00      	cmp	r3, #0
 800686c:	d011      	beq.n	8006892 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800686e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006870:	1e5a      	subs	r2, r3, #1
 8006872:	f107 000c 	add.w	r0, r7, #12
 8006876:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006878:	460b      	mov	r3, r1
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	440b      	add	r3, r1
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	18c1      	adds	r1, r0, r3
 8006882:	4613      	mov	r3, r2
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	3348      	adds	r3, #72	@ 0x48
 800688c:	443b      	add	r3, r7
 800688e:	3b34      	subs	r3, #52	@ 0x34
 8006890:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d109      	bne.n	80068ae <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800689a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800689c:	4613      	mov	r3, r2
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	3348      	adds	r3, #72	@ 0x48
 80068a6:	443b      	add	r3, r7
 80068a8:	3b34      	subs	r3, #52	@ 0x34
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
    }

    i++;
 80068ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068b0:	3301      	adds	r3, #1
 80068b2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80068b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80068ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1b6      	bne.n	800682e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	891b      	ldrh	r3, [r3, #8]
 80068c4:	461a      	mov	r2, r3
 80068c6:	4b0a      	ldr	r3, [pc, #40]	@ (80068f0 <low_level_output+0xfc>)
 80068c8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80068ca:	4a09      	ldr	r2, [pc, #36]	@ (80068f0 <low_level_output+0xfc>)
 80068cc:	f107 030c 	add.w	r3, r7, #12
 80068d0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80068d2:	4a07      	ldr	r2, [pc, #28]	@ (80068f0 <low_level_output+0xfc>)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80068d8:	2214      	movs	r2, #20
 80068da:	4905      	ldr	r1, [pc, #20]	@ (80068f0 <low_level_output+0xfc>)
 80068dc:	4805      	ldr	r0, [pc, #20]	@ (80068f4 <low_level_output+0x100>)
 80068de:	f7fb f8f7 	bl	8001ad0 <HAL_ETH_Transmit>

  return errval;
 80068e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3748      	adds	r7, #72	@ 0x48
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	24040288 	.word	0x24040288
 80068f4:	240401d8 	.word	0x240401d8

080068f8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006904:	4b07      	ldr	r3, [pc, #28]	@ (8006924 <low_level_input+0x2c>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d105      	bne.n	8006918 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800690c:	f107 030c 	add.w	r3, r7, #12
 8006910:	4619      	mov	r1, r3
 8006912:	4805      	ldr	r0, [pc, #20]	@ (8006928 <low_level_input+0x30>)
 8006914:	f7fb f973 	bl	8001bfe <HAL_ETH_ReadData>
  }

  return p;
 8006918:	68fb      	ldr	r3, [r7, #12]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	240401d4 	.word	0x240401d4
 8006928:	240401d8 	.word	0x240401d8

0800692c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7ff ffdd 	bl	80068f8 <low_level_input>
 800693e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	4798      	blx	r3
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f003 fafc 	bl	8009f54 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1ea      	bne.n	8006938 <ethernetif_input+0xc>
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <ethernetif_init+0x1c>
 800697a:	4b0e      	ldr	r3, [pc, #56]	@ (80069b4 <ethernetif_init+0x48>)
 800697c:	f240 1289 	movw	r2, #393	@ 0x189
 8006980:	490d      	ldr	r1, [pc, #52]	@ (80069b8 <ethernetif_init+0x4c>)
 8006982:	480e      	ldr	r0, [pc, #56]	@ (80069bc <ethernetif_init+0x50>)
 8006984:	f00c fd5e 	bl	8013444 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2273      	movs	r2, #115	@ 0x73
 800698c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2274      	movs	r2, #116	@ 0x74
 8006994:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a09      	ldr	r2, [pc, #36]	@ (80069c0 <ethernetif_init+0x54>)
 800699c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a08      	ldr	r2, [pc, #32]	@ (80069c4 <ethernetif_init+0x58>)
 80069a2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff fe85 	bl	80066b4 <low_level_init>

  return ERR_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	08014310 	.word	0x08014310
 80069b8:	0801432c 	.word	0x0801432c
 80069bc:	0801433c 	.word	0x0801433c
 80069c0:	08011505 	.word	0x08011505
 80069c4:	080067f5 	.word	0x080067f5

080069c8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80069d4:	68f9      	ldr	r1, [r7, #12]
 80069d6:	4807      	ldr	r0, [pc, #28]	@ (80069f4 <pbuf_free_custom+0x2c>)
 80069d8:	f002 fc24 	bl	8009224 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80069dc:	4b06      	ldr	r3, [pc, #24]	@ (80069f8 <pbuf_free_custom+0x30>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d102      	bne.n	80069ea <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80069e4:	4b04      	ldr	r3, [pc, #16]	@ (80069f8 <pbuf_free_custom+0x30>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	701a      	strb	r2, [r3, #0]
  }
}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	080174c0 	.word	0x080174c0
 80069f8:	240401d4 	.word	0x240401d4

080069fc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006a00:	f7fa fd0a 	bl	8001418 <HAL_GetTick>
 8006a04:	4603      	mov	r3, r0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08e      	sub	sp, #56	@ 0x38
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	605a      	str	r2, [r3, #4]
 8006a1e:	609a      	str	r2, [r3, #8]
 8006a20:	60da      	str	r2, [r3, #12]
 8006a22:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a59      	ldr	r2, [pc, #356]	@ (8006b90 <HAL_ETH_MspInit+0x184>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	f040 80ab 	bne.w	8006b86 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006a30:	4b58      	ldr	r3, [pc, #352]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006a32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a36:	4a57      	ldr	r2, [pc, #348]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006a38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a3c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006a40:	4b54      	ldr	r3, [pc, #336]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006a42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a4a:	623b      	str	r3, [r7, #32]
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8006a4e:	4b51      	ldr	r3, [pc, #324]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006a50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a54:	4a4f      	ldr	r2, [pc, #316]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006a56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a5a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006a60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a68:	61fb      	str	r3, [r7, #28]
 8006a6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8006a6c:	4b49      	ldr	r3, [pc, #292]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006a6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a72:	4a48      	ldr	r2, [pc, #288]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a78:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006a7c:	4b45      	ldr	r3, [pc, #276]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006a7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a86:	61bb      	str	r3, [r7, #24]
 8006a88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a8a:	4b42      	ldr	r3, [pc, #264]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a90:	4a40      	ldr	r2, [pc, #256]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006a92:	f043 0304 	orr.w	r3, r3, #4
 8006a96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006aae:	4a39      	ldr	r2, [pc, #228]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006ab8:	4b36      	ldr	r3, [pc, #216]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ac6:	4b33      	ldr	r3, [pc, #204]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006acc:	4a31      	ldr	r2, [pc, #196]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006ace:	f043 0302 	orr.w	r3, r3, #2
 8006ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006aea:	4a2a      	ldr	r2, [pc, #168]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006af4:	4b27      	ldr	r3, [pc, #156]	@ (8006b94 <HAL_ETH_MspInit+0x188>)
 8006af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afe:	60bb      	str	r3, [r7, #8]
 8006b00:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006b02:	2332      	movs	r3, #50	@ 0x32
 8006b04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b06:	2302      	movs	r3, #2
 8006b08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b12:	230b      	movs	r3, #11
 8006b14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	481e      	ldr	r0, [pc, #120]	@ (8006b98 <HAL_ETH_MspInit+0x18c>)
 8006b1e:	f7fc ff2b 	bl	8003978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006b22:	2386      	movs	r3, #134	@ 0x86
 8006b24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b26:	2302      	movs	r3, #2
 8006b28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b32:	230b      	movs	r3, #11
 8006b34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4817      	ldr	r0, [pc, #92]	@ (8006b9c <HAL_ETH_MspInit+0x190>)
 8006b3e:	f7fc ff1b 	bl	8003978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006b42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b50:	2303      	movs	r3, #3
 8006b52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b54:	230b      	movs	r3, #11
 8006b56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4810      	ldr	r0, [pc, #64]	@ (8006ba0 <HAL_ETH_MspInit+0x194>)
 8006b60:	f7fc ff0a 	bl	8003978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006b64:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006b68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b72:	2303      	movs	r3, #3
 8006b74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b76:	230b      	movs	r3, #11
 8006b78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4808      	ldr	r0, [pc, #32]	@ (8006ba4 <HAL_ETH_MspInit+0x198>)
 8006b82:	f7fc fef9 	bl	8003978 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006b86:	bf00      	nop
 8006b88:	3738      	adds	r7, #56	@ 0x38
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	40028000 	.word	0x40028000
 8006b94:	58024400 	.word	0x58024400
 8006b98:	58020800 	.word	0x58020800
 8006b9c:	58020000 	.word	0x58020000
 8006ba0:	58020400 	.word	0x58020400
 8006ba4:	58021800 	.word	0x58021800

08006ba8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006bac:	4802      	ldr	r0, [pc, #8]	@ (8006bb8 <ETH_PHY_IO_Init+0x10>)
 8006bae:	f7fb fbf3 	bl	8002398 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	240401d8 	.word	0x240401d8

08006bbc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  return 0;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	68f9      	ldr	r1, [r7, #12]
 8006bde:	4807      	ldr	r0, [pc, #28]	@ (8006bfc <ETH_PHY_IO_ReadReg+0x30>)
 8006be0:	f7fb f943 	bl	8001e6a <HAL_ETH_ReadPHYRegister>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006bea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006bee:	e000      	b.n	8006bf2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	240401d8 	.word	0x240401d8

08006c00 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	68f9      	ldr	r1, [r7, #12]
 8006c12:	4807      	ldr	r0, [pc, #28]	@ (8006c30 <ETH_PHY_IO_WriteReg+0x30>)
 8006c14:	f7fb f97e 	bl	8001f14 <HAL_ETH_WritePHYRegister>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006c1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c22:	e000      	b.n	8006c26 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	240401d8 	.word	0x240401d8

08006c34 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006c38:	f7fa fbee 	bl	8001418 <HAL_GetTick>
 8006c3c:	4603      	mov	r3, r0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b0a0      	sub	sp, #128	@ 0x80
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006c4c:	f107 030c 	add.w	r3, r7, #12
 8006c50:	2264      	movs	r2, #100	@ 0x64
 8006c52:	2100      	movs	r1, #0
 8006c54:	4618      	mov	r0, r3
 8006c56:	f00c fc5a 	bl	801350e <memset>
  int32_t PHYLinkState = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c62:	2300      	movs	r3, #0
 8006c64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c66:	2300      	movs	r3, #0
 8006c68:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006c6a:	483a      	ldr	r0, [pc, #232]	@ (8006d54 <ethernet_link_check_state+0x110>)
 8006c6c:	f7fa fac6 	bl	80011fc <LAN8742_GetLinkState>
 8006c70:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006c78:	089b      	lsrs	r3, r3, #2
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00c      	beq.n	8006c9e <ethernet_link_check_state+0x5a>
 8006c84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	dc09      	bgt.n	8006c9e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8006c8a:	4833      	ldr	r0, [pc, #204]	@ (8006d58 <ethernet_link_check_state+0x114>)
 8006c8c:	f7fa fed0 	bl	8001a30 <HAL_ETH_Stop>
    netif_set_down(netif);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f002 fd4b 	bl	800972c <netif_set_down>
    netif_set_link_down(netif);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f002 fdae 	bl	80097f8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006c9c:	e055      	b.n	8006d4a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d14e      	bne.n	8006d4a <ethernet_link_check_state+0x106>
 8006cac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	dd4b      	ble.n	8006d4a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8006cb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006cb4:	3b02      	subs	r3, #2
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d82a      	bhi.n	8006d10 <ethernet_link_check_state+0xcc>
 8006cba:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc0 <ethernet_link_check_state+0x7c>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006cd1 	.word	0x08006cd1
 8006cc4:	08006ce3 	.word	0x08006ce3
 8006cc8:	08006cf3 	.word	0x08006cf3
 8006ccc:	08006d03 	.word	0x08006d03
      duplex = ETH_FULLDUPLEX_MODE;
 8006cd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006cd4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006cd6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006cda:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006ce0:	e017      	b.n	8006d12 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006ce6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006cea:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006cec:	2301      	movs	r3, #1
 8006cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006cf0:	e00f      	b.n	8006d12 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8006cf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006cf6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006d00:	e007      	b.n	8006d12 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006d02:	2300      	movs	r3, #0
 8006d04:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006d06:	2300      	movs	r3, #0
 8006d08:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006d0e:	e000      	b.n	8006d12 <ethernet_link_check_state+0xce>
      break;
 8006d10:	bf00      	nop
    if(linkchanged)
 8006d12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d018      	beq.n	8006d4a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006d18:	f107 030c 	add.w	r3, r7, #12
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	480e      	ldr	r0, [pc, #56]	@ (8006d58 <ethernet_link_check_state+0x114>)
 8006d20:	f7fb f94c 	bl	8001fbc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006d24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d26:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006d28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d2a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006d2c:	f107 030c 	add.w	r3, r7, #12
 8006d30:	4619      	mov	r1, r3
 8006d32:	4809      	ldr	r0, [pc, #36]	@ (8006d58 <ethernet_link_check_state+0x114>)
 8006d34:	f7fb fb16 	bl	8002364 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006d38:	4807      	ldr	r0, [pc, #28]	@ (8006d58 <ethernet_link_check_state+0x114>)
 8006d3a:	f7fa fe17 	bl	800196c <HAL_ETH_Start>
      netif_set_up(netif);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f002 fc88 	bl	8009654 <netif_set_up>
      netif_set_link_up(netif);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f002 fd23 	bl	8009790 <netif_set_link_up>
}
 8006d4a:	bf00      	nop
 8006d4c:	3780      	adds	r7, #128	@ 0x80
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	240402c0 	.word	0x240402c0
 8006d58:	240401d8 	.word	0x240401d8

08006d5c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006d64:	4812      	ldr	r0, [pc, #72]	@ (8006db0 <HAL_ETH_RxAllocateCallback+0x54>)
 8006d66:	f002 f9ef 	bl	8009148 <memp_malloc_pool>
 8006d6a:	60f8      	str	r0, [r7, #12]
  if (p)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d014      	beq.n	8006d9c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f103 0220 	add.w	r2, r3, #32
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8006db4 <HAL_ETH_RxAllocateCallback+0x58>)
 8006d80:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006d8a:	9201      	str	r2, [sp, #4]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2241      	movs	r2, #65	@ 0x41
 8006d92:	2100      	movs	r1, #0
 8006d94:	2000      	movs	r0, #0
 8006d96:	f002 ff25 	bl	8009be4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006d9a:	e005      	b.n	8006da8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006d9c:	4b06      	ldr	r3, [pc, #24]	@ (8006db8 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006d9e:	2201      	movs	r2, #1
 8006da0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]
}
 8006da8:	bf00      	nop
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	080174c0 	.word	0x080174c0
 8006db4:	080069c9 	.word	0x080069c9
 8006db8:	240401d4 	.word	0x240401d4

08006dbc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b08d      	sub	sp, #52	@ 0x34
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3b20      	subs	r3, #32
 8006dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8006ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de4:	2200      	movs	r2, #0
 8006de6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dea:	887a      	ldrh	r2, [r7, #2]
 8006dec:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d103      	bne.n	8006dfe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e003      	b.n	8006e06 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e04:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e0a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e12:	e009      	b.n	8006e28 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e16:	891a      	ldrh	r2, [r3, #8]
 8006e18:	887b      	ldrh	r3, [r7, #2]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e20:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f2      	bne.n	8006e14 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006e2e:	887b      	ldrh	r3, [r7, #2]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	623a      	str	r2, [r7, #32]
 8006e34:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	dd1d      	ble.n	8006e78 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	f003 021f 	and.w	r2, r3, #31
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	4413      	add	r3, r2
 8006e46:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e4c:	f3bf 8f4f 	dsb	sy
}
 8006e50:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8006e52:	4a0d      	ldr	r2, [pc, #52]	@ (8006e88 <HAL_ETH_RxLinkCallback+0xcc>)
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	3320      	adds	r3, #32
 8006e5e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	3b20      	subs	r3, #32
 8006e64:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	dcf2      	bgt.n	8006e52 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8006e6c:	f3bf 8f4f 	dsb	sy
}
 8006e70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e72:	f3bf 8f6f 	isb	sy
}
 8006e76:	bf00      	nop
}
 8006e78:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006e7a:	bf00      	nop
 8006e7c:	3734      	adds	r7, #52	@ 0x34
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	e000ed00 	.word	0xe000ed00

08006e8c <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	88db      	ldrh	r3, [r3, #6]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	88db      	ldrh	r3, [r3, #6]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d105      	bne.n	8006eb4 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	88db      	ldrh	r3, [r3, #6]
 8006eac:	3301      	adds	r3, #1
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	88db      	ldrh	r3, [r3, #6]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4413      	add	r3, r2
 8006eda:	78fa      	ldrb	r2, [r7, #3]
 8006edc:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	2bff      	cmp	r3, #255	@ 0xff
 8006ef0:	d902      	bls.n	8006ef8 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	801a      	strh	r2, [r3, #0]
  }
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	885b      	ldrh	r3, [r3, #2]
 8006f10:	461a      	mov	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4413      	add	r3, r2
 8006f16:	3304      	adds	r3, #4
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8006f30:	887b      	ldrh	r3, [r7, #2]
 8006f32:	2bff      	cmp	r3, #255	@ 0xff
 8006f34:	d905      	bls.n	8006f42 <mqtt_ringbuf_advance_get_idx+0x1e>
 8006f36:	4b0e      	ldr	r3, [pc, #56]	@ (8006f70 <mqtt_ringbuf_advance_get_idx+0x4c>)
 8006f38:	22cb      	movs	r2, #203	@ 0xcb
 8006f3a:	490e      	ldr	r1, [pc, #56]	@ (8006f74 <mqtt_ringbuf_advance_get_idx+0x50>)
 8006f3c:	480e      	ldr	r0, [pc, #56]	@ (8006f78 <mqtt_ringbuf_advance_get_idx+0x54>)
 8006f3e:	f00c fa81 	bl	8013444 <iprintf>

  rb->get += len;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	885a      	ldrh	r2, [r3, #2]
 8006f46:	887b      	ldrh	r3, [r7, #2]
 8006f48:	4413      	add	r3, r2
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	885b      	ldrh	r3, [r3, #2]
 8006f54:	2bff      	cmp	r3, #255	@ 0xff
 8006f56:	d906      	bls.n	8006f66 <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	885b      	ldrh	r3, [r3, #2]
 8006f5c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	805a      	strh	r2, [r3, #2]
  }
}
 8006f66:	bf00      	nop
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	08014364 	.word	0x08014364
 8006f74:	0801439c 	.word	0x0801439c
 8006f78:	080143dc 	.word	0x080143dc

08006f7c <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	885b      	ldrh	r3, [r3, #2]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f98:	d303      	bcc.n	8006fa2 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006fa0:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	b29b      	uxth	r3, r3
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
	...

08006fb4 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8006fb4:	b590      	push	{r4, r7, lr}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff ffda 	bl	8006f7c <mqtt_ringbuf_len>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	461a      	mov	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	885b      	ldrh	r3, [r3, #2]
 8006fd0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	da04      	bge.n	8006fe2 <mqtt_output_send+0x2e>
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff ffcf 	bl	8006f7c <mqtt_ringbuf_len>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	e004      	b.n	8006fec <mqtt_output_send+0x38>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	885b      	ldrh	r3, [r3, #2]
 8006fe6:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8006ff4:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d105      	bne.n	8007008 <mqtt_output_send+0x54>
 8006ffc:	4b44      	ldr	r3, [pc, #272]	@ (8007110 <mqtt_output_send+0x15c>)
 8006ffe:	22f0      	movs	r2, #240	@ 0xf0
 8007000:	4944      	ldr	r1, [pc, #272]	@ (8007114 <mqtt_output_send+0x160>)
 8007002:	4845      	ldr	r0, [pc, #276]	@ (8007118 <mqtt_output_send+0x164>)
 8007004:	f00c fa1e 	bl	8013444 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8007008:	89bb      	ldrh	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d07c      	beq.n	8007108 <mqtt_output_send+0x154>
 800700e:	897b      	ldrh	r3, [r7, #10]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d079      	beq.n	8007108 <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8007014:	89ba      	ldrh	r2, [r7, #12]
 8007016:	897b      	ldrh	r3, [r7, #10]
 8007018:	429a      	cmp	r2, r3
 800701a:	d90d      	bls.n	8007038 <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 800701c:	897b      	ldrh	r3, [r7, #10]
 800701e:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff ffab 	bl	8006f7c <mqtt_ringbuf_len>
 8007026:	4603      	mov	r3, r0
 8007028:	461a      	mov	r2, r3
 800702a:	897b      	ldrh	r3, [r7, #10]
 800702c:	4293      	cmp	r3, r2
 800702e:	bf34      	ite	cc
 8007030:	2301      	movcc	r3, #1
 8007032:	2300      	movcs	r3, #0
 8007034:	b2db      	uxtb	r3, r3
 8007036:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff ff63 	bl	8006f04 <mqtt_ringbuf_get_ptr>
 800703e:	4601      	mov	r1, r0
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <mqtt_output_send+0x96>
 8007046:	2303      	movs	r3, #3
 8007048:	e000      	b.n	800704c <mqtt_output_send+0x98>
 800704a:	2301      	movs	r3, #1
 800704c:	89ba      	ldrh	r2, [r7, #12]
 800704e:	6838      	ldr	r0, [r7, #0]
 8007050:	f007 fd6e 	bl	800eb30 <tcp_write>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8007058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d146      	bne.n	80070ee <mqtt_output_send+0x13a>
 8007060:	7bbb      	ldrb	r3, [r7, #14]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d043      	beq.n	80070ee <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8007066:	89bb      	ldrh	r3, [r7, #12]
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff ff5a 	bl	8006f24 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8007076:	461c      	mov	r4, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7ff ff7f 	bl	8006f7c <mqtt_ringbuf_len>
 800707e:	4603      	mov	r3, r0
 8007080:	461a      	mov	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	885b      	ldrh	r3, [r3, #2]
 8007086:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800708a:	429a      	cmp	r2, r3
 800708c:	da04      	bge.n	8007098 <mqtt_output_send+0xe4>
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff ff74 	bl	8006f7c <mqtt_ringbuf_len>
 8007094:	4603      	mov	r3, r0
 8007096:	e003      	b.n	80070a0 <mqtt_output_send+0xec>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	885b      	ldrh	r3, [r3, #2]
 800709c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	dd03      	ble.n	80070ac <mqtt_output_send+0xf8>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80070aa:	e014      	b.n	80070d6 <mqtt_output_send+0x122>
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff ff65 	bl	8006f7c <mqtt_ringbuf_len>
 80070b2:	4603      	mov	r3, r0
 80070b4:	461a      	mov	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	885b      	ldrh	r3, [r3, #2]
 80070ba:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80070be:	429a      	cmp	r2, r3
 80070c0:	da04      	bge.n	80070cc <mqtt_output_send+0x118>
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff ff5a 	bl	8006f7c <mqtt_ringbuf_len>
 80070c8:	4603      	mov	r3, r0
 80070ca:	e004      	b.n	80070d6 <mqtt_output_send+0x122>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	885b      	ldrh	r3, [r3, #2]
 80070d0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff ff13 	bl	8006f04 <mqtt_ringbuf_get_ptr>
 80070de:	4601      	mov	r1, r0
 80070e0:	89ba      	ldrh	r2, [r7, #12]
 80070e2:	2301      	movs	r3, #1
 80070e4:	6838      	ldr	r0, [r7, #0]
 80070e6:	f007 fd23 	bl	800eb30 <tcp_write>
 80070ea:	4603      	mov	r3, r0
 80070ec:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 80070ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80070f6:	89bb      	ldrh	r3, [r7, #12]
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff ff12 	bl	8006f24 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8007100:	6838      	ldr	r0, [r7, #0]
 8007102:	f008 faff 	bl	800f704 <tcp_output>
 8007106:	e000      	b.n	800710a <mqtt_output_send+0x156>
    return;
 8007108:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	bd90      	pop	{r4, r7, pc}
 8007110:	08014364 	.word	0x08014364
 8007114:	08014404 	.word	0x08014404
 8007118:	080143dc 	.word	0x080143dc

0800711c <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	4613      	mov	r3, r2
 800712a:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 800712c:	2300      	movs	r3, #0
 800712e:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d106      	bne.n	8007144 <mqtt_create_request+0x28>
 8007136:	4b19      	ldr	r3, [pc, #100]	@ (800719c <mqtt_create_request+0x80>)
 8007138:	f240 1223 	movw	r2, #291	@ 0x123
 800713c:	4918      	ldr	r1, [pc, #96]	@ (80071a0 <mqtt_create_request+0x84>)
 800713e:	4819      	ldr	r0, [pc, #100]	@ (80071a4 <mqtt_create_request+0x88>)
 8007140:	f00c f980 	bl	8013444 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8007144:	2300      	movs	r3, #0
 8007146:	74fb      	strb	r3, [r7, #19]
 8007148:	e01f      	b.n	800718a <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 800714a:	7cfb      	ldrb	r3, [r7, #19]
 800714c:	011b      	lsls	r3, r3, #4
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	7cfb      	ldrb	r3, [r7, #19]
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	68f9      	ldr	r1, [r7, #12]
 800715a:	440b      	add	r3, r1
 800715c:	429a      	cmp	r2, r3
 800715e:	d111      	bne.n	8007184 <mqtt_create_request+0x68>
      r = &r_objs[n];
 8007160:	7cfb      	ldrb	r3, [r7, #19]
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4413      	add	r3, r2
 8007168:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2200      	movs	r2, #0
 800716e:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	6a3a      	ldr	r2, [r7, #32]
 800717a:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	88fa      	ldrh	r2, [r7, #6]
 8007180:	819a      	strh	r2, [r3, #12]
      break;
 8007182:	e006      	b.n	8007192 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8007184:	7cfb      	ldrb	r3, [r7, #19]
 8007186:	3301      	adds	r3, #1
 8007188:	74fb      	strb	r3, [r7, #19]
 800718a:	7cfb      	ldrb	r3, [r7, #19]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	429a      	cmp	r2, r3
 8007190:	d8db      	bhi.n	800714a <mqtt_create_request+0x2e>
    }
  }
  return r;
 8007192:	697b      	ldr	r3, [r7, #20]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	08014364 	.word	0x08014364
 80071a0:	08014424 	.word	0x08014424
 80071a4:	080143dc 	.word	0x080143dc

080071a8 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d106      	bne.n	80071ce <mqtt_append_request+0x26>
 80071c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007230 <mqtt_append_request+0x88>)
 80071c2:	f240 123f 	movw	r2, #319	@ 0x13f
 80071c6:	491b      	ldr	r1, [pc, #108]	@ (8007234 <mqtt_append_request+0x8c>)
 80071c8:	481b      	ldr	r0, [pc, #108]	@ (8007238 <mqtt_append_request+0x90>)
 80071ca:	f00c f93b 	bl	8013444 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	e00a      	b.n	80071ec <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	89da      	ldrh	r2, [r3, #14]
 80071da:	8a7b      	ldrh	r3, [r7, #18]
 80071dc:	4413      	add	r3, r2
 80071de:	b29b      	uxth	r3, r3
 80071e0:	827b      	strh	r3, [r7, #18]
    head = iter;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f1      	bne.n	80071d6 <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 80071f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071f6:	2b1e      	cmp	r3, #30
 80071f8:	dd06      	ble.n	8007208 <mqtt_append_request+0x60>
 80071fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007230 <mqtt_append_request+0x88>)
 80071fc:	f240 1247 	movw	r2, #327	@ 0x147
 8007200:	490e      	ldr	r1, [pc, #56]	@ (800723c <mqtt_append_request+0x94>)
 8007202:	480d      	ldr	r0, [pc, #52]	@ (8007238 <mqtt_append_request+0x90>)
 8007204:	f00c f91e 	bl	8013444 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8007208:	8a7b      	ldrh	r3, [r7, #18]
 800720a:	f1c3 031e 	rsb	r3, r3, #30
 800720e:	b29a      	uxth	r2, r3
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <mqtt_append_request+0x7a>
    *tail = r;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8007220:	e002      	b.n	8007228 <mqtt_append_request+0x80>
    head->next = r;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	601a      	str	r2, [r3, #0]
}
 8007228:	bf00      	nop
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	08014364 	.word	0x08014364
 8007234:	08014448 	.word	0x08014448
 8007238:	080143dc 	.word	0x080143dc
 800723c:	0801446c 	.word	0x0801446c

08007240 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <mqtt_delete_request+0x14>
    r->next = r;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]
  }
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	2300      	movs	r3, #0
 8007272:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <mqtt_take_request+0x28>
 800727a:	4b1f      	ldr	r3, [pc, #124]	@ (80072f8 <mqtt_take_request+0x98>)
 800727c:	f240 1267 	movw	r2, #359	@ 0x167
 8007280:	491e      	ldr	r1, [pc, #120]	@ (80072fc <mqtt_take_request+0x9c>)
 8007282:	481f      	ldr	r0, [pc, #124]	@ (8007300 <mqtt_take_request+0xa0>)
 8007284:	f00c f8de 	bl	8013444 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	e009      	b.n	80072a4 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	899b      	ldrh	r3, [r3, #12]
 8007294:	887a      	ldrh	r2, [r7, #2]
 8007296:	429a      	cmp	r2, r3
 8007298:	d008      	beq.n	80072ac <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f2      	bne.n	8007290 <mqtt_take_request+0x30>
 80072aa:	e000      	b.n	80072ae <mqtt_take_request+0x4e>
      break;
 80072ac:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01c      	beq.n	80072ee <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d104      	bne.n	80072c4 <mqtt_take_request+0x64>
      *tail = iter->next;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	e003      	b.n	80072cc <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d009      	beq.n	80072e8 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	89d9      	ldrh	r1, [r3, #14]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	89da      	ldrh	r2, [r3, #14]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	440a      	add	r2, r1
 80072e4:	b292      	uxth	r2, r2
 80072e6:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]
  }
  return iter;
 80072ee:	68fb      	ldr	r3, [r7, #12]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	08014364 	.word	0x08014364
 80072fc:	080144a4 	.word	0x080144a4
 8007300:	080143dc 	.word	0x080143dc

08007304 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <mqtt_request_time_elapsed+0x20>
 8007316:	4b21      	ldr	r3, [pc, #132]	@ (800739c <mqtt_request_time_elapsed+0x98>)
 8007318:	f44f 72c5 	mov.w	r2, #394	@ 0x18a
 800731c:	4920      	ldr	r1, [pc, #128]	@ (80073a0 <mqtt_request_time_elapsed+0x9c>)
 800731e:	4821      	ldr	r0, [pc, #132]	@ (80073a4 <mqtt_request_time_elapsed+0xa0>)
 8007320:	f00c f890 	bl	8013444 <iprintf>
  r = *tail;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 800732a:	e02c      	b.n	8007386 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	89db      	ldrh	r3, [r3, #14]
 8007334:	429a      	cmp	r2, r3
 8007336:	d31c      	bcc.n	8007372 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	89db      	ldrh	r3, [r3, #14]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	78fa      	ldrb	r2, [r7, #3]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d007      	beq.n	8007364 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	6892      	ldr	r2, [r2, #8]
 800735c:	f06f 0102 	mvn.w	r1, #2
 8007360:	4610      	mov	r0, r2
 8007362:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f7ff ff6b 	bl	8007240 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e009      	b.n	8007386 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	89da      	ldrh	r2, [r3, #14]
 8007376:	78fb      	ldrb	r3, [r7, #3]
 8007378:	b29b      	uxth	r3, r3
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	b29a      	uxth	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	81da      	strh	r2, [r3, #14]
      t = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8007386:	78fb      	ldrb	r3, [r7, #3]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <mqtt_request_time_elapsed+0x8e>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1cc      	bne.n	800732c <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8007392:	bf00      	nop
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	08014364 	.word	0x08014364
 80073a0:	080144c4 	.word	0x080144c4
 80073a4:	080143dc 	.word	0x080143dc

080073a8 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <mqtt_clear_requests+0x1c>
 80073b6:	4b0e      	ldr	r3, [pc, #56]	@ (80073f0 <mqtt_clear_requests+0x48>)
 80073b8:	f240 12a7 	movw	r2, #423	@ 0x1a7
 80073bc:	490d      	ldr	r1, [pc, #52]	@ (80073f4 <mqtt_clear_requests+0x4c>)
 80073be:	480e      	ldr	r0, [pc, #56]	@ (80073f8 <mqtt_clear_requests+0x50>)
 80073c0:	f00c f840 	bl	8013444 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	e007      	b.n	80073dc <mqtt_clear_requests+0x34>
    next = iter->next;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f7ff ff34 	bl	8007240 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f4      	bne.n	80073cc <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	601a      	str	r2, [r3, #0]
}
 80073e8:	bf00      	nop
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	08014364 	.word	0x08014364
 80073f4:	080144ec 	.word	0x080144ec
 80073f8:	080143dc 	.word	0x080143dc

080073fc <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <mqtt_init_requests+0x1e>
 800740c:	4b0f      	ldr	r3, [pc, #60]	@ (800744c <mqtt_init_requests+0x50>)
 800740e:	f240 12b7 	movw	r2, #439	@ 0x1b7
 8007412:	490f      	ldr	r1, [pc, #60]	@ (8007450 <mqtt_init_requests+0x54>)
 8007414:	480f      	ldr	r0, [pc, #60]	@ (8007454 <mqtt_init_requests+0x58>)
 8007416:	f00c f815 	bl	8013444 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]
 800741e:	e00b      	b.n	8007438 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8007420:	7bfb      	ldrb	r3, [r7, #15]
 8007422:	011a      	lsls	r2, r3, #4
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	6879      	ldr	r1, [r7, #4]
 800742a:	440b      	add	r3, r1
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	440a      	add	r2, r1
 8007430:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	3301      	adds	r3, #1
 8007436:	73fb      	strb	r3, [r7, #15]
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d8ef      	bhi.n	8007420 <mqtt_init_requests+0x24>
  }
}
 8007440:	bf00      	nop
 8007442:	bf00      	nop
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	08014364 	.word	0x08014364
 8007450:	08014510 	.word	0x08014510
 8007454:	080143dc 	.word	0x080143dc

08007458 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff fd2b 	bl	8006ec4 <mqtt_ringbuf_put>
}
 800746e:	bf00      	nop
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b082      	sub	sp, #8
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	460b      	mov	r3, r1
 8007480:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8007482:	887b      	ldrh	r3, [r7, #2]
 8007484:	0a1b      	lsrs	r3, r3, #8
 8007486:	b29b      	uxth	r3, r3
 8007488:	b2db      	uxtb	r3, r3
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7ff fd19 	bl	8006ec4 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8007492:	887b      	ldrh	r3, [r7, #2]
 8007494:	b2db      	uxtb	r3, r3
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff fd13 	bl	8006ec4 <mqtt_ringbuf_put>
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <mqtt_output_append_string>:
  }
}

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b086      	sub	sp, #24
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	4613      	mov	r3, r2
 80074b2:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 80074b4:	88fb      	ldrh	r3, [r7, #6]
 80074b6:	0a1b      	lsrs	r3, r3, #8
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	4619      	mov	r1, r3
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f7ff fd00 	bl	8006ec4 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 80074c4:	88fb      	ldrh	r3, [r7, #6]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	4619      	mov	r1, r3
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7ff fcfa 	bl	8006ec4 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80074d0:	2300      	movs	r3, #0
 80074d2:	82fb      	strh	r3, [r7, #22]
 80074d4:	e00a      	b.n	80074ec <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 80074d6:	8afb      	ldrh	r3, [r7, #22]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	4413      	add	r3, r2
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	4619      	mov	r1, r3
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f7ff fcef 	bl	8006ec4 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80074e6:	8afb      	ldrh	r3, [r7, #22]
 80074e8:	3301      	adds	r3, #1
 80074ea:	82fb      	strh	r3, [r7, #22]
 80074ec:	8afa      	ldrh	r2, [r7, #22]
 80074ee:	88fb      	ldrh	r3, [r7, #6]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d3f0      	bcc.n	80074d6 <mqtt_output_append_string+0x30>
  }
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	4608      	mov	r0, r1
 8007508:	4611      	mov	r1, r2
 800750a:	461a      	mov	r2, r3
 800750c:	4603      	mov	r3, r0
 800750e:	70fb      	strb	r3, [r7, #3]
 8007510:	460b      	mov	r3, r1
 8007512:	70bb      	strb	r3, [r7, #2]
 8007514:	4613      	mov	r3, r2
 8007516:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8007518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	b25a      	sxtb	r2, r3
 8007520:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	b25b      	sxtb	r3, r3
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	b25b      	sxtb	r3, r3
 800752e:	4313      	orrs	r3, r2
 8007530:	b25a      	sxtb	r2, r3
 8007532:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	b25b      	sxtb	r3, r3
 800753a:	f003 0306 	and.w	r3, r3, #6
 800753e:	b25b      	sxtb	r3, r3
 8007540:	4313      	orrs	r3, r2
 8007542:	b25a      	sxtb	r2, r3
 8007544:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	b25b      	sxtb	r3, r3
 800754e:	4313      	orrs	r3, r2
 8007550:	b25b      	sxtb	r3, r3
 8007552:	b2db      	uxtb	r3, r3
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff ff7e 	bl	8007458 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800755c:	8abb      	ldrh	r3, [r7, #20]
 800755e:	b25b      	sxtb	r3, r3
 8007560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007564:	b25b      	sxtb	r3, r3
 8007566:	8aba      	ldrh	r2, [r7, #20]
 8007568:	2a7f      	cmp	r2, #127	@ 0x7f
 800756a:	d902      	bls.n	8007572 <mqtt_output_append_fixed_header+0x74>
 800756c:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8007570:	e000      	b.n	8007574 <mqtt_output_append_fixed_header+0x76>
 8007572:	2200      	movs	r2, #0
 8007574:	4313      	orrs	r3, r2
 8007576:	b25b      	sxtb	r3, r3
 8007578:	b2db      	uxtb	r3, r3
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff ff6b 	bl	8007458 <mqtt_output_append_u8>
    r_length >>= 7;
 8007582:	8abb      	ldrh	r3, [r7, #20]
 8007584:	09db      	lsrs	r3, r3, #7
 8007586:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8007588:	8abb      	ldrh	r3, [r7, #20]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e6      	bne.n	800755c <mqtt_output_append_fixed_header+0x5e>
}
 800758e:	bf00      	nop
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8007598:	b590      	push	{r4, r7, lr}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 80075a4:	887b      	ldrh	r3, [r7, #2]
 80075a6:	3301      	adds	r3, #1
 80075a8:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <mqtt_output_check_space+0x26>
 80075b0:	4b0f      	ldr	r3, [pc, #60]	@ (80075f0 <mqtt_output_check_space+0x58>)
 80075b2:	f240 2207 	movw	r2, #519	@ 0x207
 80075b6:	490f      	ldr	r1, [pc, #60]	@ (80075f4 <mqtt_output_check_space+0x5c>)
 80075b8:	480f      	ldr	r0, [pc, #60]	@ (80075f8 <mqtt_output_check_space+0x60>)
 80075ba:	f00b ff43 	bl	8013444 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 80075be:	89fb      	ldrh	r3, [r7, #14]
 80075c0:	3301      	adds	r3, #1
 80075c2:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 80075c4:	887b      	ldrh	r3, [r7, #2]
 80075c6:	09db      	lsrs	r3, r3, #7
 80075c8:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 80075ca:	887b      	ldrh	r3, [r7, #2]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1f6      	bne.n	80075be <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 80075d0:	89fc      	ldrh	r4, [r7, #14]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff fcd2 	bl	8006f7c <mqtt_ringbuf_len>
 80075d8:	4603      	mov	r3, r0
 80075da:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80075de:	429c      	cmp	r4, r3
 80075e0:	bfd4      	ite	le
 80075e2:	2301      	movle	r3, #1
 80075e4:	2300      	movgt	r3, #0
 80075e6:	b2db      	uxtb	r3, r3
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd90      	pop	{r4, r7, pc}
 80075f0:	08014364 	.word	0x08014364
 80075f4:	08014534 	.word	0x08014534
 80075f8:	080143dc 	.word	0x080143dc

080075fc <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <mqtt_close+0x20>
 800760e:	4b27      	ldr	r3, [pc, #156]	@ (80076ac <mqtt_close+0xb0>)
 8007610:	f240 221b 	movw	r2, #539	@ 0x21b
 8007614:	4926      	ldr	r1, [pc, #152]	@ (80076b0 <mqtt_close+0xb4>)
 8007616:	4827      	ldr	r0, [pc, #156]	@ (80076b4 <mqtt_close+0xb8>)
 8007618:	f00b ff14 	bl	8013444 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d024      	beq.n	800766e <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	2100      	movs	r1, #0
 800762a:	4618      	mov	r0, r3
 800762c:	f004 fb6e 	bl	800bd0c <tcp_recv>
    altcp_err(client->conn,  NULL);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	2100      	movs	r1, #0
 8007636:	4618      	mov	r0, r3
 8007638:	f004 fbac 	bl	800bd94 <tcp_err>
    altcp_sent(client->conn, NULL);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	2100      	movs	r1, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f004 fb84 	bl	800bd50 <tcp_sent>
    res = altcp_close(client->conn);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	4618      	mov	r0, r3
 800764e:	f003 f983 	bl	800a958 <tcp_close>
 8007652:	4603      	mov	r3, r0
 8007654:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8007656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d004      	beq.n	8007668 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	4618      	mov	r0, r3
 8007664:	f003 fa62 	bl	800ab2c <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3318      	adds	r3, #24
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff fe98 	bl	80073a8 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8007678:	6879      	ldr	r1, [r7, #4]
 800767a:	480f      	ldr	r0, [pc, #60]	@ (80076b8 <mqtt_close+0xbc>)
 800767c:	f009 f8c0 	bl	8010800 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	7a9b      	ldrb	r3, [r3, #10]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00d      	beq.n	80076a4 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d006      	beq.n	80076a4 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6911      	ldr	r1, [r2, #16]
 800769e:	887a      	ldrh	r2, [r7, #2]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	4798      	blx	r3
    }
  }
}
 80076a4:	bf00      	nop
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	08014364 	.word	0x08014364
 80076b0:	08014558 	.word	0x08014558
 80076b4:	080143dc 	.word	0x080143dc
 80076b8:	080076bd 	.word	0x080076bd

080076bc <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 80076c4:	2301      	movs	r3, #1
 80076c6:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <mqtt_cyclic_timer+0x24>
 80076d2:	4b42      	ldr	r3, [pc, #264]	@ (80077dc <mqtt_cyclic_timer+0x120>)
 80076d4:	f44f 7211 	mov.w	r2, #580	@ 0x244
 80076d8:	4941      	ldr	r1, [pc, #260]	@ (80077e0 <mqtt_cyclic_timer+0x124>)
 80076da:	4842      	ldr	r0, [pc, #264]	@ (80077e4 <mqtt_cyclic_timer+0x128>)
 80076dc:	f00b feb2 	bl	8013444 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	7a9b      	ldrb	r3, [r3, #10]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d115      	bne.n	8007714 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	3301      	adds	r3, #1
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	2b63      	cmp	r3, #99	@ 0x63
 8007702:	dd5e      	ble.n	80077c2 <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8007704:	f240 1101 	movw	r1, #257	@ 0x101
 8007708:	68b8      	ldr	r0, [r7, #8]
 800770a:	f7ff ff77 	bl	80075fc <mqtt_close>
      restart_timer = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]
 8007712:	e056      	b.n	80077c2 <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	7a9b      	ldrb	r3, [r3, #10]
 8007718:	2b03      	cmp	r3, #3
 800771a:	d150      	bne.n	80077be <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	3318      	adds	r3, #24
 8007720:	2105      	movs	r1, #5
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff fdee 	bl	8007304 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	885b      	ldrh	r3, [r3, #2]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d048      	beq.n	80077c2 <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	889b      	ldrh	r3, [r3, #4]
 8007734:	3301      	adds	r3, #1
 8007736:	b29a      	uxth	r2, r3
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	889b      	ldrh	r3, [r3, #4]
 8007740:	461a      	mov	r2, r3
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	441a      	add	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	885b      	ldrh	r3, [r3, #2]
 800774c:	4619      	mov	r1, r3
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	885b      	ldrh	r3, [r3, #2]
 8007752:	085b      	lsrs	r3, r3, #1
 8007754:	b29b      	uxth	r3, r3
 8007756:	440b      	add	r3, r1
 8007758:	429a      	cmp	r2, r3
 800775a:	dd06      	ble.n	800776a <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800775c:	f240 1101 	movw	r1, #257	@ 0x101
 8007760:	68b8      	ldr	r0, [r7, #8]
 8007762:	f7ff ff4b 	bl	80075fc <mqtt_close>
        restart_timer = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	4613      	mov	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	8852      	ldrh	r2, [r2, #2]
 800777a:	4293      	cmp	r3, r2
 800777c:	db18      	blt.n	80077b0 <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	33ec      	adds	r3, #236	@ 0xec
 8007782:	2100      	movs	r1, #0
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff ff07 	bl	8007598 <mqtt_output_check_space>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d018      	beq.n	80077c2 <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8007796:	2300      	movs	r3, #0
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	2300      	movs	r3, #0
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	2300      	movs	r3, #0
 80077a0:	2200      	movs	r2, #0
 80077a2:	210c      	movs	r1, #12
 80077a4:	f7ff feab 	bl	80074fe <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2200      	movs	r2, #0
 80077ac:	801a      	strh	r2, [r3, #0]
 80077ae:	e008      	b.n	80077c2 <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	3301      	adds	r3, #1
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	801a      	strh	r2, [r3, #0]
 80077bc:	e001      	b.n	80077c2 <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d005      	beq.n	80077d4 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	4907      	ldr	r1, [pc, #28]	@ (80077e8 <mqtt_cyclic_timer+0x12c>)
 80077cc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80077d0:	f008 fff0 	bl	80107b4 <sys_timeout>
  }
}
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	08014364 	.word	0x08014364
 80077e0:	08014574 	.word	0x08014574
 80077e4:	080143dc 	.word	0x080143dc
 80077e8:	080076bd 	.word	0x080076bd

080077ec <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	70fb      	strb	r3, [r7, #3]
 80077fe:	460b      	mov	r3, r1
 8007800:	803b      	strh	r3, [r7, #0]
 8007802:	4613      	mov	r3, r2
 8007804:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	33ec      	adds	r3, #236	@ 0xec
 800780e:	2102      	movs	r1, #2
 8007810:	4618      	mov	r0, r3
 8007812:	f7ff fec1 	bl	8007598 <mqtt_output_check_space>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01c      	beq.n	8007856 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8007822:	78bb      	ldrb	r3, [r7, #2]
 8007824:	78f9      	ldrb	r1, [r7, #3]
 8007826:	2202      	movs	r2, #2
 8007828:	9201      	str	r2, [sp, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	9200      	str	r2, [sp, #0]
 800782e:	2200      	movs	r2, #0
 8007830:	f7ff fe65 	bl	80074fe <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	33ec      	adds	r3, #236	@ 0xec
 8007838:	883a      	ldrh	r2, [r7, #0]
 800783a:	4611      	mov	r1, r2
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff fe1a 	bl	8007476 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f7ff fbb0 	bl	8006fb4 <mqtt_output_send>
 8007854:	e001      	b.n	800785a <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8007856:	23ff      	movs	r3, #255	@ 0xff
 8007858:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800785a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	460b      	mov	r3, r1
 8007870:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00c      	beq.n	8007894 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6890      	ldr	r0, [r2, #8]
 8007882:	78fa      	ldrb	r2, [r7, #3]
 8007884:	2a02      	cmp	r2, #2
 8007886:	d801      	bhi.n	800788c <mqtt_incomming_suback+0x26>
 8007888:	2200      	movs	r2, #0
 800788a:	e001      	b.n	8007890 <mqtt_incomming_suback+0x2a>
 800788c:	f06f 020c 	mvn.w	r2, #12
 8007890:	4611      	mov	r1, r2
 8007892:	4798      	blx	r3
  }
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800789c:	b590      	push	{r4, r7, lr}
 800789e:	b08f      	sub	sp, #60	@ 0x3c
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	607b      	str	r3, [r7, #4]
 80078a6:	460b      	mov	r3, r1
 80078a8:	72fb      	strb	r3, [r7, #11]
 80078aa:	4613      	mov	r3, r2
 80078ac:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 80078ae:	2300      	movs	r3, #0
 80078b0:	86fb      	strh	r3, [r7, #54]	@ 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 80078b8:	7afb      	ldrb	r3, [r7, #11]
 80078ba:	4413      	add	r3, r2
 80078bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 80078be:	7afb      	ldrb	r3, [r7, #11]
 80078c0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80078c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80078cc:	091b      	lsrs	r3, r3, #4
 80078ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u16_t pkt_id = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078da:	2b7f      	cmp	r3, #127	@ 0x7f
 80078dc:	d906      	bls.n	80078ec <mqtt_message_received+0x50>
 80078de:	4b9a      	ldr	r3, [pc, #616]	@ (8007b48 <mqtt_message_received+0x2ac>)
 80078e0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80078e4:	4999      	ldr	r1, [pc, #612]	@ (8007b4c <mqtt_message_received+0x2b0>)
 80078e6:	489a      	ldr	r0, [pc, #616]	@ (8007b50 <mqtt_message_received+0x2b4>)
 80078e8:	f00b fdac 	bl	8013444 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 80078ec:	7afa      	ldrb	r2, [r7, #11]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d906      	bls.n	8007904 <mqtt_message_received+0x68>
 80078f6:	4b94      	ldr	r3, [pc, #592]	@ (8007b48 <mqtt_message_received+0x2ac>)
 80078f8:	f44f 722b 	mov.w	r2, #684	@ 0x2ac
 80078fc:	4995      	ldr	r1, [pc, #596]	@ (8007b54 <mqtt_message_received+0x2b8>)
 80078fe:	4894      	ldr	r0, [pc, #592]	@ (8007b50 <mqtt_message_received+0x2b4>)
 8007900:	f00b fda0 	bl	8013444 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8007904:	7afa      	ldrb	r2, [r7, #11]
 8007906:	893b      	ldrh	r3, [r7, #8]
 8007908:	4413      	add	r3, r2
 800790a:	2b80      	cmp	r3, #128	@ 0x80
 800790c:	dd09      	ble.n	8007922 <mqtt_message_received+0x86>
 800790e:	4b8e      	ldr	r3, [pc, #568]	@ (8007b48 <mqtt_message_received+0x2ac>)
 8007910:	f240 22ad 	movw	r2, #685	@ 0x2ad
 8007914:	4990      	ldr	r1, [pc, #576]	@ (8007b58 <mqtt_message_received+0x2bc>)
 8007916:	488e      	ldr	r0, [pc, #568]	@ (8007b50 <mqtt_message_received+0x2b4>)
 8007918:	f00b fd94 	bl	8013444 <iprintf>
 800791c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007920:	e16a      	b.n	8007bf8 <mqtt_message_received+0x35c>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8007922:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007926:	2b02      	cmp	r3, #2
 8007928:	d123      	bne.n	8007972 <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	7a9b      	ldrb	r3, [r3, #10]
 800792e:	2b02      	cmp	r3, #2
 8007930:	f040 814d 	bne.w	8007bce <mqtt_message_received+0x332>
      if (length < 2) {
 8007934:	893b      	ldrh	r3, [r7, #8]
 8007936:	2b01      	cmp	r3, #1
 8007938:	f240 814b 	bls.w	8007bd2 <mqtt_message_received+0x336>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800793c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800793e:	3301      	adds	r3, #1
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	86fb      	strh	r3, [r7, #54]	@ 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8007944:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007946:	2b00      	cmp	r3, #0
 8007948:	f040 8141 	bne.w	8007bce <mqtt_message_received+0x332>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2203      	movs	r2, #3
 8007956:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8136 	beq.w	8007bce <mqtt_message_received+0x332>
          client->connect_cb(client, client->connect_arg, res);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	6911      	ldr	r1, [r2, #16]
 800796a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	4798      	blx	r3
 8007970:	e12d      	b.n	8007bce <mqtt_message_received+0x332>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8007972:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007976:	2b0d      	cmp	r3, #13
 8007978:	f000 8129 	beq.w	8007bce <mqtt_message_received+0x332>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800797c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007980:	2b03      	cmp	r3, #3
 8007982:	f040 80bd 	bne.w	8007b00 <mqtt_message_received+0x264>
    u16_t payload_offset = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	86bb      	strh	r3, [r7, #52]	@ 0x34
    u16_t payload_length = length;
 800798a:	893b      	ldrh	r3, [r7, #8]
 800798c:	867b      	strh	r3, [r7, #50]	@ 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8007994:	105b      	asrs	r3, r3, #1
 8007996:	b2db      	uxtb	r3, r3
 8007998:	f003 0303 	and.w	r3, r3, #3
 800799c:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079a2:	2b80      	cmp	r3, #128	@ 0x80
 80079a4:	d87a      	bhi.n	8007a9c <mqtt_message_received+0x200>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 80079a6:	7ffb      	ldrb	r3, [r7, #31]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <mqtt_message_received+0x114>
 80079ac:	2302      	movs	r3, #2
 80079ae:	e000      	b.n	80079b2 <mqtt_message_received+0x116>
 80079b0:	2300      	movs	r3, #0
 80079b2:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 80079b4:	8bbb      	ldrh	r3, [r7, #28]
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	893b      	ldrh	r3, [r7, #8]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	f280 810b 	bge.w	8007bd6 <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 80079c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 80079c6:	8b7b      	ldrh	r3, [r7, #26]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079ce:	3201      	adds	r2, #1
 80079d0:	7812      	ldrb	r2, [r2, #0]
 80079d2:	4413      	add	r3, r2
 80079d4:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 80079d6:	8b7a      	ldrh	r2, [r7, #26]
 80079d8:	8939      	ldrh	r1, [r7, #8]
 80079da:	8bbb      	ldrh	r3, [r7, #28]
 80079dc:	3302      	adds	r3, #2
 80079de:	1acb      	subs	r3, r1, r3
 80079e0:	429a      	cmp	r2, r3
 80079e2:	f300 80fa 	bgt.w	8007bda <mqtt_message_received+0x33e>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 80079e6:	8b7a      	ldrh	r2, [r7, #26]
 80079e8:	8bbb      	ldrh	r3, [r7, #28]
 80079ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079ec:	1acb      	subs	r3, r1, r3
 80079ee:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 80079f0:	429a      	cmp	r2, r3
 80079f2:	f200 80f2 	bhi.w	8007bda <mqtt_message_received+0x33e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 80079f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f8:	3302      	adds	r3, #2
 80079fa:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 80079fc:	8b7b      	ldrh	r3, [r7, #26]
 80079fe:	3302      	adds	r3, #2
 8007a00:	863b      	strh	r3, [r7, #48]	@ 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8007a02:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007a04:	7ffa      	ldrb	r2, [r7, #31]
 8007a06:	2a00      	cmp	r2, #0
 8007a08:	d001      	beq.n	8007a0e <mqtt_message_received+0x172>
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	e000      	b.n	8007a10 <mqtt_message_received+0x174>
 8007a0e:	2201      	movs	r2, #1
 8007a10:	4413      	add	r3, r2
 8007a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a14:	429a      	cmp	r2, r3
 8007a16:	f0c0 80e2 	bcc.w	8007bde <mqtt_message_received+0x342>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8007a1a:	7ffb      	ldrb	r3, [r7, #31]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d018      	beq.n	8007a52 <mqtt_message_received+0x1b6>
        if (length < after_topic + 2U) {
 8007a20:	893a      	ldrh	r2, [r7, #8]
 8007a22:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007a24:	3302      	adds	r3, #2
 8007a26:	429a      	cmp	r2, r3
 8007a28:	f0c0 80db 	bcc.w	8007be2 <mqtt_message_received+0x346>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8007a2c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a30:	4413      	add	r3, r2
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	021b      	lsls	r3, r3, #8
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007a3a:	3201      	adds	r2, #1
 8007a3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a3e:	440a      	add	r2, r1
 8007a40:	7812      	ldrb	r2, [r2, #0]
 8007a42:	4413      	add	r3, r2
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8007a4a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	863b      	strh	r3, [r7, #48]	@ 0x30
 8007a50:	e002      	b.n	8007a58 <mqtt_message_received+0x1bc>
      } else {
        client->inpub_pkt_id = 0;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 8007a58:	8b7b      	ldrh	r3, [r7, #26]
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8007a62:	8b7b      	ldrh	r3, [r7, #26]
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	4413      	add	r3, r2
 8007a68:	2200      	movs	r2, #0
 8007a6a:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8007a6c:	893a      	ldrh	r2, [r7, #8]
 8007a6e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	867b      	strh	r3, [r7, #50]	@ 0x32
      payload_offset = after_topic;
 8007a74:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007a76:	86bb      	strh	r3, [r7, #52]	@ 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d008      	beq.n	8007a92 <mqtt_message_received+0x1f6>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8007a88:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	6979      	ldr	r1, [r7, #20]
 8007a90:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8007a92:	8b7b      	ldrh	r3, [r7, #26]
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	4413      	add	r3, r2
 8007a98:	7cfa      	ldrb	r2, [r7, #19]
 8007a9a:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 8007a9c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d103      	bne.n	8007aaa <mqtt_message_received+0x20e>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f040 8092 	bne.w	8007bce <mqtt_message_received+0x332>
      if (length < (size_t)(payload_offset + payload_length)) {
 8007aaa:	893b      	ldrh	r3, [r7, #8]
 8007aac:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8007aae:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8007ab0:	440a      	add	r2, r1
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	f0c0 8097 	bcc.w	8007be6 <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8007ac0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ac4:	18d1      	adds	r1, r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bf0c      	ite	eq
 8007acc:	2301      	moveq	r3, #1
 8007ace:	2300      	movne	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8007ad4:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d178      	bne.n	8007bce <mqtt_message_received+0x332>
 8007adc:	7ffb      	ldrb	r3, [r7, #31]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d075      	beq.n	8007bce <mqtt_message_received+0x332>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8007ae2:	7ffb      	ldrb	r3, [r7, #31]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <mqtt_message_received+0x250>
 8007ae8:	2304      	movs	r3, #4
 8007aea:	e000      	b.n	8007aee <mqtt_message_received+0x252>
 8007aec:	2305      	movs	r3, #5
 8007aee:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	891a      	ldrh	r2, [r3, #8]
 8007af4:	7cb9      	ldrb	r1, [r7, #18]
 8007af6:	2300      	movs	r3, #0
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f7ff fe77 	bl	80077ec <pub_ack_rec_rel_response>
 8007afe:	e066      	b.n	8007bce <mqtt_message_received+0x332>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8007b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	84bb      	strh	r3, [r7, #36]	@ 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 8007b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b12:	4313      	orrs	r3, r2
 8007b14:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (pkt_id == 0) {
 8007b16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d066      	beq.n	8007bea <mqtt_message_received+0x34e>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8007b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b20:	2b05      	cmp	r3, #5
 8007b22:	d106      	bne.n	8007b32 <mqtt_message_received+0x296>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8007b24:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007b26:	2301      	movs	r3, #1
 8007b28:	2106      	movs	r1, #6
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7ff fe5e 	bl	80077ec <pub_ack_rec_rel_response>
 8007b30:	e04d      	b.n	8007bce <mqtt_message_received+0x332>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 8007b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b36:	2b06      	cmp	r3, #6
 8007b38:	d110      	bne.n	8007b5c <mqtt_message_received+0x2c0>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8007b3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2107      	movs	r1, #7
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff fe53 	bl	80077ec <pub_ack_rec_rel_response>
 8007b46:	e042      	b.n	8007bce <mqtt_message_received+0x332>
 8007b48:	08014364 	.word	0x08014364
 8007b4c:	08014598 	.word	0x08014598
 8007b50:	080143dc 	.word	0x080143dc
 8007b54:	080145c8 	.word	0x080145c8
 8007b58:	080145ec 	.word	0x080145ec

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8007b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b60:	2b09      	cmp	r3, #9
 8007b62:	d00b      	beq.n	8007b7c <mqtt_message_received+0x2e0>
 8007b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b68:	2b0b      	cmp	r3, #11
 8007b6a:	d007      	beq.n	8007b7c <mqtt_message_received+0x2e0>
 8007b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b70:	2b07      	cmp	r3, #7
 8007b72:	d003      	beq.n	8007b7c <mqtt_message_received+0x2e0>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8007b74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d138      	bne.n	8007bee <mqtt_message_received+0x352>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3318      	adds	r3, #24
 8007b80:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007b82:	4611      	mov	r1, r2
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7ff fb6b 	bl	8007260 <mqtt_take_request>
 8007b8a:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d01c      	beq.n	8007bcc <mqtt_message_received+0x330>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8007b92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b96:	2b09      	cmp	r3, #9
 8007b98:	d10a      	bne.n	8007bb0 <mqtt_message_received+0x314>
          if (length < 3) {
 8007b9a:	893b      	ldrh	r3, [r7, #8]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d928      	bls.n	8007bf2 <mqtt_message_received+0x356>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8007ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba2:	3302      	adds	r3, #2
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6a38      	ldr	r0, [r7, #32]
 8007baa:	f7ff fe5c 	bl	8007866 <mqtt_incomming_suback>
 8007bae:	e00a      	b.n	8007bc6 <mqtt_message_received+0x32a>
          }
        } else if (r->cb != NULL) {
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d006      	beq.n	8007bc6 <mqtt_message_received+0x32a>
          r->cb(r->arg, ERR_OK);
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	6a3a      	ldr	r2, [r7, #32]
 8007bbe:	6892      	ldr	r2, [r2, #8]
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8007bc6:	6a38      	ldr	r0, [r7, #32]
 8007bc8:	f7ff fb3a 	bl	8007240 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8007bcc:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8007bce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007bd0:	e012      	b.n	8007bf8 <mqtt_message_received+0x35c>
        goto out_disconnect;
 8007bd2:	bf00      	nop
 8007bd4:	e00e      	b.n	8007bf4 <mqtt_message_received+0x358>
        goto out_disconnect;
 8007bd6:	bf00      	nop
 8007bd8:	e00c      	b.n	8007bf4 <mqtt_message_received+0x358>
        goto out_disconnect;
 8007bda:	bf00      	nop
 8007bdc:	e00a      	b.n	8007bf4 <mqtt_message_received+0x358>
        goto out_disconnect;
 8007bde:	bf00      	nop
 8007be0:	e008      	b.n	8007bf4 <mqtt_message_received+0x358>
          goto out_disconnect;
 8007be2:	bf00      	nop
 8007be4:	e006      	b.n	8007bf4 <mqtt_message_received+0x358>
        goto out_disconnect;
 8007be6:	bf00      	nop
 8007be8:	e004      	b.n	8007bf4 <mqtt_message_received+0x358>
      goto out_disconnect;
 8007bea:	bf00      	nop
 8007bec:	e002      	b.n	8007bf4 <mqtt_message_received+0x358>
      goto out_disconnect;
 8007bee:	bf00      	nop
 8007bf0:	e000      	b.n	8007bf4 <mqtt_message_received+0x358>
            goto out_disconnect;
 8007bf2:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8007bf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	373c      	adds	r7, #60	@ 0x3c
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd90      	pop	{r4, r7, pc}

08007c00 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8007c1a:	e0be      	b.n	8007d9a <mqtt_parse_incoming+0x19a>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d903      	bls.n	8007c2a <mqtt_parse_incoming+0x2a>
 8007c22:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	da4d      	bge.n	8007cc6 <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 8007c2a:	7dfa      	ldrb	r2, [r7, #23]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d206      	bcs.n	8007c42 <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8007c3e:	75bb      	strb	r3, [r7, #22]
 8007c40:	e012      	b.n	8007c68 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 8007c42:	8bfb      	ldrh	r3, [r7, #30]
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	83fa      	strh	r2, [r7, #30]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6838      	ldr	r0, [r7, #0]
 8007c4c:	f002 fc3a 	bl	800a4c4 <pbuf_get_at>
 8007c50:	4603      	mov	r3, r0
 8007c52:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c58:	1c59      	adds	r1, r3, #1
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6691      	str	r1, [r2, #104]	@ 0x68
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	4413      	add	r3, r2
 8007c62:	7dba      	ldrb	r2, [r7, #22]
 8007c64:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      }
      fixed_hdr_idx++;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	f240 8091 	bls.w	8007d98 <mqtt_parse_incoming+0x198>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8007c76:	7dbb      	ldrb	r3, [r7, #22]
 8007c78:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	1e9a      	subs	r2, r3, #2
 8007c80:	4613      	mov	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	fa01 f303 	lsl.w	r3, r1, r3
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8007c90:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	db7f      	blt.n	8007d98 <mqtt_parse_incoming+0x198>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10b      	bne.n	8007cb6 <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8007c9e:	7df9      	ldrb	r1, [r7, #23]
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff fdf9 	bl	800789c <mqtt_message_received>
            client->msg_idx = 0;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	669a      	str	r2, [r3, #104]	@ 0x68
            fixed_hdr_idx = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	75fb      	strb	r3, [r7, #23]
      if (fixed_hdr_idx >= 2) {
 8007cb4:	e070      	b.n	8007d98 <mqtt_parse_incoming+0x198>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8007cb6:	7dfa      	ldrb	r2, [r7, #23]
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	441a      	add	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8007cc4:	e068      	b.n	8007d98 <mqtt_parse_incoming+0x198>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	7dfa      	ldrb	r2, [r7, #23]
 8007cd0:	f1c2 0280 	rsb	r2, r2, #128	@ 0x80
 8007cd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cd8:	fb01 f202 	mul.w	r2, r1, r2
 8007cdc:	1a9b      	subs	r3, r3, r2
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	4413      	add	r3, r2
 8007ce6:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	891a      	ldrh	r2, [r3, #8]
 8007cec:	8bfb      	ldrh	r3, [r7, #30]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d905      	bls.n	8007d06 <mqtt_parse_incoming+0x106>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	891a      	ldrh	r2, [r3, #8]
 8007cfe:	8bfb      	ldrh	r3, [r7, #30]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	e001      	b.n	8007d0a <mqtt_parse_incoming+0x10a>
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8007d0c:	8a7b      	ldrh	r3, [r7, #18]
 8007d0e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8007d12:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 8007d14:	8aba      	ldrh	r2, [r7, #20]
 8007d16:	8a3b      	ldrh	r3, [r7, #16]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d901      	bls.n	8007d20 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 8007d1c:	8a3b      	ldrh	r3, [r7, #16]
 8007d1e:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8007d26:	8a7b      	ldrh	r3, [r7, #18]
 8007d28:	18d1      	adds	r1, r2, r3
 8007d2a:	8bfb      	ldrh	r3, [r7, #30]
 8007d2c:	8aba      	ldrh	r2, [r7, #20]
 8007d2e:	6838      	ldr	r0, [r7, #0]
 8007d30:	f002 fafa 	bl	800a328 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007d38:	8abb      	ldrh	r3, [r7, #20]
 8007d3a:	441a      	add	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	669a      	str	r2, [r3, #104]	@ 0x68
      in_offset += cpy_len;
 8007d40:	8bfa      	ldrh	r2, [r7, #30]
 8007d42:	8abb      	ldrh	r3, [r7, #20]
 8007d44:	4413      	add	r3, r2
 8007d46:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8007d48:	8abb      	ldrh	r3, [r7, #20]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <mqtt_parse_incoming+0x15e>
 8007d56:	8aba      	ldrh	r2, [r7, #20]
 8007d58:	8a3b      	ldrh	r3, [r7, #16]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d11d      	bne.n	8007d9a <mqtt_parse_incoming+0x19a>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8007d5e:	8a7a      	ldrh	r2, [r7, #18]
 8007d60:	8abb      	ldrh	r3, [r7, #20]
 8007d62:	4413      	add	r3, r2
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	7df9      	ldrb	r1, [r7, #23]
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff fd92 	bl	800789c <mqtt_message_received>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 8007d7c:	89fb      	ldrh	r3, [r7, #14]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <mqtt_parse_incoming+0x186>
          return res;
 8007d82:	89fb      	ldrh	r3, [r7, #14]
 8007d84:	e010      	b.n	8007da8 <mqtt_parse_incoming+0x1a8>
        }
        if (msg_rem_len == 0) {
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d106      	bne.n	8007d9a <mqtt_parse_incoming+0x19a>
          /* Reset parser state */
          client->msg_idx = 0;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	669a      	str	r2, [r3, #104]	@ 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	75fb      	strb	r3, [r7, #23]
 8007d96:	e000      	b.n	8007d9a <mqtt_parse_incoming+0x19a>
      if (fixed_hdr_idx >= 2) {
 8007d98:	bf00      	nop
  while (p->tot_len > in_offset) {
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	891b      	ldrh	r3, [r3, #8]
 8007d9e:	8bfa      	ldrh	r2, [r7, #30]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	f4ff af3b 	bcc.w	8007c1c <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3720      	adds	r7, #32
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d106      	bne.n	8007dd6 <mqtt_tcp_recv_cb+0x26>
 8007dc8:	4b24      	ldr	r3, [pc, #144]	@ (8007e5c <mqtt_tcp_recv_cb+0xac>)
 8007dca:	f240 32a7 	movw	r2, #935	@ 0x3a7
 8007dce:	4924      	ldr	r1, [pc, #144]	@ (8007e60 <mqtt_tcp_recv_cb+0xb0>)
 8007dd0:	4824      	ldr	r0, [pc, #144]	@ (8007e64 <mqtt_tcp_recv_cb+0xb4>)
 8007dd2:	f00b fb37 	bl	8013444 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d006      	beq.n	8007dee <mqtt_tcp_recv_cb+0x3e>
 8007de0:	4b1e      	ldr	r3, [pc, #120]	@ (8007e5c <mqtt_tcp_recv_cb+0xac>)
 8007de2:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8007de6:	4920      	ldr	r1, [pc, #128]	@ (8007e68 <mqtt_tcp_recv_cb+0xb8>)
 8007de8:	481e      	ldr	r0, [pc, #120]	@ (8007e64 <mqtt_tcp_recv_cb+0xb4>)
 8007dea:	f00b fb2b 	bl	8013444 <iprintf>

  if (p == NULL) {
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d105      	bne.n	8007e00 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8007df4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007df8:	6978      	ldr	r0, [r7, #20]
 8007dfa:	f7ff fbff 	bl	80075fc <mqtt_close>
 8007dfe:	e027      	b.n	8007e50 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8007e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d005      	beq.n	8007e14 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f002 f8a3 	bl	8009f54 <pbuf_free>
      return err;
 8007e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e12:	e01e      	b.n	8007e52 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	891b      	ldrh	r3, [r3, #8]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	68b8      	ldr	r0, [r7, #8]
 8007e1c:	f002 ff84 	bl	800ad28 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8007e20:	6879      	ldr	r1, [r7, #4]
 8007e22:	6978      	ldr	r0, [r7, #20]
 8007e24:	f7ff feec 	bl	8007c00 <mqtt_parse_incoming>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f002 f891 	bl	8009f54 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8007e32:	8a7b      	ldrh	r3, [r7, #18]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d004      	beq.n	8007e42 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 8007e38:	8a7b      	ldrh	r3, [r7, #18]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6978      	ldr	r0, [r7, #20]
 8007e3e:	f7ff fbdd 	bl	80075fc <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	885b      	ldrh	r3, [r3, #2]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d002      	beq.n	8007e50 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	08014364 	.word	0x08014364
 8007e60:	08014604 	.word	0x08014604
 8007e64:	080143dc 	.word	0x080143dc
 8007e68:	08014628 	.word	0x08014628

08007e6c <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	7a9b      	ldrb	r3, [r3, #10]
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d127      	bne.n	8007ed6 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8007e92:	e00d      	b.n	8007eb0 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d006      	beq.n	8007eaa <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	6892      	ldr	r2, [r2, #8]
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8007eaa:	6938      	ldr	r0, [r7, #16]
 8007eac:	f7ff f9c8 	bl	8007240 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	3318      	adds	r3, #24
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff f9d2 	bl	8007260 <mqtt_take_request>
 8007ebc:	6138      	str	r0, [r7, #16]
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e7      	bne.n	8007e94 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	f7ff f86f 	bl	8006fb4 <mqtt_output_send>
  }
  return ERR_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <mqtt_tcp_err_cb+0x24>
 8007ef6:	4b09      	ldr	r3, [pc, #36]	@ (8007f1c <mqtt_tcp_err_cb+0x3c>)
 8007ef8:	f240 32f6 	movw	r2, #1014	@ 0x3f6
 8007efc:	4908      	ldr	r1, [pc, #32]	@ (8007f20 <mqtt_tcp_err_cb+0x40>)
 8007efe:	4809      	ldr	r0, [pc, #36]	@ (8007f24 <mqtt_tcp_err_cb+0x44>)
 8007f00:	f00b faa0 	bl	8013444 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8007f0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff fb74 	bl	80075fc <mqtt_close>
}
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	08014364 	.word	0x08014364
 8007f20:	08014650 	.word	0x08014650
 8007f24:	080143dc 	.word	0x080143dc

08007f28 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	7a9b      	ldrb	r3, [r3, #10]
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d105      	bne.n	8007f4a <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	33ec      	adds	r3, #236	@ 0xec
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7ff f835 	bl	8006fb4 <mqtt_output_send>
  }
  return ERR_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 8007f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 8007f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f72:	e025      	b.n	8007fc0 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2200      	movs	r2, #0
 8007f78:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8007f7a:	4913      	ldr	r1, [pc, #76]	@ (8007fc8 <mqtt_tcp_connect_cb+0x74>)
 8007f7c:	68b8      	ldr	r0, [r7, #8]
 8007f7e:	f003 fec5 	bl	800bd0c <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8007f82:	4912      	ldr	r1, [pc, #72]	@ (8007fcc <mqtt_tcp_connect_cb+0x78>)
 8007f84:	68b8      	ldr	r0, [r7, #8]
 8007f86:	f003 fee3 	bl	800bd50 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	4910      	ldr	r1, [pc, #64]	@ (8007fd0 <mqtt_tcp_connect_cb+0x7c>)
 8007f8e:	68b8      	ldr	r0, [r7, #8]
 8007f90:	f003 ff22 	bl	800bdd8 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2202      	movs	r2, #2
 8007f98:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	490d      	ldr	r1, [pc, #52]	@ (8007fd4 <mqtt_tcp_connect_cb+0x80>)
 8007f9e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8007fa2:	f008 fc07 	bl	80107b4 <sys_timeout>
  client->cyclic_tick = 0;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4610      	mov	r0, r2
 8007fba:	f7fe fffb 	bl	8006fb4 <mqtt_output_send>

  return ERR_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	08007db1 	.word	0x08007db1
 8007fcc:	08007e6d 	.word	0x08007e6d
 8007fd0:	08007f29 	.word	0x08007f29
 8007fd4:	080076bd 	.word	0x080076bd

08007fd8 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08c      	sub	sp, #48	@ 0x30
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d106      	bne.n	8007ffc <mqtt_sub_unsub+0x24>
 8007fee:	4b5e      	ldr	r3, [pc, #376]	@ (8008168 <mqtt_sub_unsub+0x190>)
 8007ff0:	f240 429f 	movw	r2, #1183	@ 0x49f
 8007ff4:	495d      	ldr	r1, [pc, #372]	@ (800816c <mqtt_sub_unsub+0x194>)
 8007ff6:	485e      	ldr	r0, [pc, #376]	@ (8008170 <mqtt_sub_unsub+0x198>)
 8007ff8:	f00b fa24 	bl	8013444 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d106      	bne.n	8008010 <mqtt_sub_unsub+0x38>
 8008002:	4b59      	ldr	r3, [pc, #356]	@ (8008168 <mqtt_sub_unsub+0x190>)
 8008004:	f44f 6294 	mov.w	r2, #1184	@ 0x4a0
 8008008:	495a      	ldr	r1, [pc, #360]	@ (8008174 <mqtt_sub_unsub+0x19c>)
 800800a:	4859      	ldr	r0, [pc, #356]	@ (8008170 <mqtt_sub_unsub+0x198>)
 800800c:	f00b fa1a 	bl	8013444 <iprintf>

  topic_strlen = strlen(topic);
 8008010:	68b8      	ldr	r0, [r7, #8]
 8008012:	f7f8 f96f 	bl	80002f4 <strlen>
 8008016:	6278      	str	r0, [r7, #36]	@ 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8008018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801a:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800801e:	4293      	cmp	r3, r2
 8008020:	d909      	bls.n	8008036 <mqtt_sub_unsub+0x5e>
 8008022:	4b51      	ldr	r3, [pc, #324]	@ (8008168 <mqtt_sub_unsub+0x190>)
 8008024:	f240 42a3 	movw	r2, #1187	@ 0x4a3
 8008028:	4953      	ldr	r1, [pc, #332]	@ (8008178 <mqtt_sub_unsub+0x1a0>)
 800802a:	4851      	ldr	r0, [pc, #324]	@ (8008170 <mqtt_sub_unsub+0x198>)
 800802c:	f00b fa0a 	bl	8013444 <iprintf>
 8008030:	f06f 030f 	mvn.w	r3, #15
 8008034:	e093      	b.n	800815e <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800803a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800803c:	3304      	adds	r3, #4
 800803e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8008042:	2a00      	cmp	r2, #0
 8008044:	bf14      	ite	ne
 8008046:	2201      	movne	r2, #1
 8008048:	2200      	moveq	r2, #0
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	4413      	add	r3, r2
 800804e:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008056:	d309      	bcc.n	800806c <mqtt_sub_unsub+0x94>
 8008058:	4b43      	ldr	r3, [pc, #268]	@ (8008168 <mqtt_sub_unsub+0x190>)
 800805a:	f240 42a7 	movw	r2, #1191	@ 0x4a7
 800805e:	4947      	ldr	r1, [pc, #284]	@ (800817c <mqtt_sub_unsub+0x1a4>)
 8008060:	4843      	ldr	r0, [pc, #268]	@ (8008170 <mqtt_sub_unsub+0x198>)
 8008062:	f00b f9ef 	bl	8013444 <iprintf>
 8008066:	f06f 030f 	mvn.w	r3, #15
 800806a:	e078      	b.n	800815e <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d906      	bls.n	8008084 <mqtt_sub_unsub+0xac>
 8008076:	4b3c      	ldr	r3, [pc, #240]	@ (8008168 <mqtt_sub_unsub+0x190>)
 8008078:	f240 42aa 	movw	r2, #1194	@ 0x4aa
 800807c:	4940      	ldr	r1, [pc, #256]	@ (8008180 <mqtt_sub_unsub+0x1a8>)
 800807e:	483c      	ldr	r0, [pc, #240]	@ (8008170 <mqtt_sub_unsub+0x198>)
 8008080:	f00b f9e0 	bl	8013444 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	7a9b      	ldrb	r3, [r3, #10]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d102      	bne.n	8008092 <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 800808c:	f06f 030a 	mvn.w	r3, #10
 8008090:	e065      	b.n	800815e <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7fe fefa 	bl	8006e8c <msg_generate_packet_id>
 8008098:	4603      	mov	r3, r0
 800809a:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f103 001c 	add.w	r0, r3, #28
 80080a2:	8b3a      	ldrh	r2, [r7, #24]
 80080a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2104      	movs	r1, #4
 80080ac:	f7ff f836 	bl	800711c <mqtt_create_request>
 80080b0:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d102      	bne.n	80080be <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 80080b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080bc:	e04f      	b.n	800815e <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	33ec      	adds	r3, #236	@ 0xec
 80080c2:	8b7a      	ldrh	r2, [r7, #26]
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff fa66 	bl	8007598 <mqtt_output_check_space>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d105      	bne.n	80080de <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 80080d2:	6978      	ldr	r0, [r7, #20]
 80080d4:	f7ff f8b4 	bl	8007240 <mqtt_delete_request>
    return ERR_MEM;
 80080d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080dc:	e03f      	b.n	800815e <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 80080e4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <mqtt_sub_unsub+0x118>
 80080ec:	2108      	movs	r1, #8
 80080ee:	e000      	b.n	80080f2 <mqtt_sub_unsub+0x11a>
 80080f0:	210a      	movs	r1, #10
 80080f2:	8b7b      	ldrh	r3, [r7, #26]
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	2300      	movs	r3, #0
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	2301      	movs	r3, #1
 80080fc:	2200      	movs	r2, #0
 80080fe:	f7ff f9fe 	bl	80074fe <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	33ec      	adds	r3, #236	@ 0xec
 8008106:	8b3a      	ldrh	r2, [r7, #24]
 8008108:	4611      	mov	r1, r2
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff f9b3 	bl	8007476 <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	33ec      	adds	r3, #236	@ 0xec
 8008114:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008116:	68b9      	ldr	r1, [r7, #8]
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff f9c4 	bl	80074a6 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 800811e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00b      	beq.n	800813e <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 800812c:	79fb      	ldrb	r3, [r7, #7]
 800812e:	2b02      	cmp	r3, #2
 8008130:	bf28      	it	cs
 8008132:	2302      	movcs	r3, #2
 8008134:	b2db      	uxtb	r3, r3
 8008136:	4619      	mov	r1, r3
 8008138:	4610      	mov	r0, r2
 800813a:	f7ff f98d 	bl	8007458 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3318      	adds	r3, #24
 8008142:	6979      	ldr	r1, [r7, #20]
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff f82f 	bl	80071a8 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	4619      	mov	r1, r3
 8008156:	4610      	mov	r0, r2
 8008158:	f7fe ff2c 	bl	8006fb4 <mqtt_output_send>
  return ERR_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3728      	adds	r7, #40	@ 0x28
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	08014364 	.word	0x08014364
 800816c:	08014714 	.word	0x08014714
 8008170:	080143dc 	.word	0x080143dc
 8008174:	08014734 	.word	0x08014734
 8008178:	08014754 	.word	0x08014754
 800817c:	0801477c 	.word	0x0801477c
 8008180:	080147a4 	.word	0x080147a4

08008184 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d106      	bne.n	80081a6 <mqtt_set_inpub_callback+0x22>
 8008198:	4b09      	ldr	r3, [pc, #36]	@ (80081c0 <mqtt_set_inpub_callback+0x3c>)
 800819a:	f240 42da 	movw	r2, #1242	@ 0x4da
 800819e:	4909      	ldr	r1, [pc, #36]	@ (80081c4 <mqtt_set_inpub_callback+0x40>)
 80081a0:	4809      	ldr	r0, [pc, #36]	@ (80081c8 <mqtt_set_inpub_callback+0x44>)
 80081a2:	f00b f94f 	bl	8013444 <iprintf>
  client->data_cb = data_cb;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	661a      	str	r2, [r3, #96]	@ 0x60
  client->pub_cb = pub_cb;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	665a      	str	r2, [r3, #100]	@ 0x64
  client->inpub_arg = arg;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80081b8:	bf00      	nop
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	08014364 	.word	0x08014364
 80081c4:	080147bc 	.word	0x080147bc
 80081c8:	080143dc 	.word	0x080143dc

080081cc <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 80081d0:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 80081d4:	2001      	movs	r0, #1
 80081d6:	f000 ff27 	bl	8009028 <mem_calloc>
 80081da:	4603      	mov	r3, r0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	bd80      	pop	{r7, pc}

080081e0 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08c      	sub	sp, #48	@ 0x30
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	4613      	mov	r3, r2
 80081ee:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 80081f0:	230a      	movs	r3, #10
 80081f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081fa:	2300      	movs	r3, #0
 80081fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008200:	2300      	movs	r3, #0
 8008202:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 8008206:	2300      	movs	r3, #0
 8008208:	83fb      	strh	r3, [r7, #30]
 800820a:	2300      	movs	r3, #0
 800820c:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d106      	bne.n	8008222 <mqtt_client_connect+0x42>
 8008214:	4b9e      	ldr	r3, [pc, #632]	@ (8008490 <mqtt_client_connect+0x2b0>)
 8008216:	f240 520f 	movw	r2, #1295	@ 0x50f
 800821a:	499e      	ldr	r1, [pc, #632]	@ (8008494 <mqtt_client_connect+0x2b4>)
 800821c:	489e      	ldr	r0, [pc, #632]	@ (8008498 <mqtt_client_connect+0x2b8>)
 800821e:	f00b f911 	bl	8013444 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d106      	bne.n	8008236 <mqtt_client_connect+0x56>
 8008228:	4b99      	ldr	r3, [pc, #612]	@ (8008490 <mqtt_client_connect+0x2b0>)
 800822a:	f44f 62a2 	mov.w	r2, #1296	@ 0x510
 800822e:	499b      	ldr	r1, [pc, #620]	@ (800849c <mqtt_client_connect+0x2bc>)
 8008230:	4899      	ldr	r0, [pc, #612]	@ (8008498 <mqtt_client_connect+0x2b8>)
 8008232:	f00b f907 	bl	8013444 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8008236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008238:	2b00      	cmp	r3, #0
 800823a:	d106      	bne.n	800824a <mqtt_client_connect+0x6a>
 800823c:	4b94      	ldr	r3, [pc, #592]	@ (8008490 <mqtt_client_connect+0x2b0>)
 800823e:	f240 5211 	movw	r2, #1297	@ 0x511
 8008242:	4997      	ldr	r1, [pc, #604]	@ (80084a0 <mqtt_client_connect+0x2c0>)
 8008244:	4894      	ldr	r0, [pc, #592]	@ (8008498 <mqtt_client_connect+0x2b8>)
 8008246:	f00b f8fd 	bl	8013444 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800824a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d106      	bne.n	8008260 <mqtt_client_connect+0x80>
 8008252:	4b8f      	ldr	r3, [pc, #572]	@ (8008490 <mqtt_client_connect+0x2b0>)
 8008254:	f240 5212 	movw	r2, #1298	@ 0x512
 8008258:	4992      	ldr	r1, [pc, #584]	@ (80084a4 <mqtt_client_connect+0x2c4>)
 800825a:	488f      	ldr	r0, [pc, #572]	@ (8008498 <mqtt_client_connect+0x2b8>)
 800825c:	f00b f8f2 	bl	8013444 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	7a9b      	ldrb	r3, [r3, #10]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8008268:	f06f 0309 	mvn.w	r3, #9
 800826c:	e21f      	b.n	80086ae <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800826e:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 8008272:	2100      	movs	r1, #0
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f00b f94a 	bl	801350e <memset>
  client->connect_arg = arg;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800827e:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8008286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008288:	899a      	ldrh	r2, [r3, #12]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	331c      	adds	r3, #28
 8008292:	2104      	movs	r1, #4
 8008294:	4618      	mov	r0, r3
 8008296:	f7ff f8b1 	bl	80073fc <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800829a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d074      	beq.n	800838c <mqtt_client_connect+0x1ac>
 80082a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d070      	beq.n	800838c <mqtt_client_connect+0x1ac>
    flags |= MQTT_CONNECT_FLAG_WILL;
 80082aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80082ae:	f043 0304 	orr.w	r3, r3, #4
 80082b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    flags |= (client_info->will_qos & 3) << 3;
 80082b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b8:	7e1b      	ldrb	r3, [r3, #24]
 80082ba:	b25b      	sxtb	r3, r3
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	b25b      	sxtb	r3, r3
 80082c0:	f003 0318 	and.w	r3, r3, #24
 80082c4:	b25a      	sxtb	r2, r3
 80082c6:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80082ca:	4313      	orrs	r3, r2
 80082cc:	b25b      	sxtb	r3, r3
 80082ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (client_info->will_retain) {
 80082d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d4:	7e5b      	ldrb	r3, [r3, #25]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d005      	beq.n	80082e6 <mqtt_client_connect+0x106>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 80082da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80082de:	f043 0320 	orr.w	r3, r3, #32
 80082e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    len = strlen(client_info->will_topic);
 80082e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7f8 f802 	bl	80002f4 <strlen>
 80082f0:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2bff      	cmp	r3, #255	@ 0xff
 80082f6:	d909      	bls.n	800830c <mqtt_client_connect+0x12c>
 80082f8:	4b65      	ldr	r3, [pc, #404]	@ (8008490 <mqtt_client_connect+0x2b0>)
 80082fa:	f44f 62a5 	mov.w	r2, #1320	@ 0x528
 80082fe:	496a      	ldr	r1, [pc, #424]	@ (80084a8 <mqtt_client_connect+0x2c8>)
 8008300:	4865      	ldr	r0, [pc, #404]	@ (8008498 <mqtt_client_connect+0x2b8>)
 8008302:	f00b f89f 	bl	8013444 <iprintf>
 8008306:	f06f 0305 	mvn.w	r3, #5
 800830a:	e1d0      	b.n	80086ae <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d109      	bne.n	8008326 <mqtt_client_connect+0x146>
 8008312:	4b5f      	ldr	r3, [pc, #380]	@ (8008490 <mqtt_client_connect+0x2b0>)
 8008314:	f240 5229 	movw	r2, #1321	@ 0x529
 8008318:	4964      	ldr	r1, [pc, #400]	@ (80084ac <mqtt_client_connect+0x2cc>)
 800831a:	485f      	ldr	r0, [pc, #380]	@ (8008498 <mqtt_client_connect+0x2b8>)
 800831c:	f00b f892 	bl	8013444 <iprintf>
 8008320:	f06f 0305 	mvn.w	r3, #5
 8008324:	e1c3      	b.n	80086ae <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    len = strlen(client_info->will_msg);
 800832c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	4618      	mov	r0, r3
 8008332:	f7f7 ffdf 	bl	80002f4 <strlen>
 8008336:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	2bff      	cmp	r3, #255	@ 0xff
 800833c:	d909      	bls.n	8008352 <mqtt_client_connect+0x172>
 800833e:	4b54      	ldr	r3, [pc, #336]	@ (8008490 <mqtt_client_connect+0x2b0>)
 8008340:	f240 522c 	movw	r2, #1324	@ 0x52c
 8008344:	495a      	ldr	r1, [pc, #360]	@ (80084b0 <mqtt_client_connect+0x2d0>)
 8008346:	4854      	ldr	r0, [pc, #336]	@ (8008498 <mqtt_client_connect+0x2b8>)
 8008348:	f00b f87c 	bl	8013444 <iprintf>
 800834c:	f06f 0305 	mvn.w	r3, #5
 8008350:	e1ad      	b.n	80086ae <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8008358:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800835a:	1c9a      	adds	r2, r3, #2
 800835c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008360:	4413      	add	r3, r2
 8008362:	1c9a      	adds	r2, r3, #2
 8008364:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008368:	4413      	add	r3, r2
 800836a:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008372:	d309      	bcc.n	8008388 <mqtt_client_connect+0x1a8>
 8008374:	4b46      	ldr	r3, [pc, #280]	@ (8008490 <mqtt_client_connect+0x2b0>)
 8008376:	f240 522f 	movw	r2, #1327	@ 0x52f
 800837a:	494e      	ldr	r1, [pc, #312]	@ (80084b4 <mqtt_client_connect+0x2d4>)
 800837c:	4846      	ldr	r0, [pc, #280]	@ (8008498 <mqtt_client_connect+0x2b8>)
 800837e:	f00b f861 	bl	8013444 <iprintf>
 8008382:	f06f 0305 	mvn.w	r3, #5
 8008386:	e192      	b.n	80086ae <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }
  if (client_info->client_user != NULL) {
 800838c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d03d      	beq.n	8008410 <mqtt_client_connect+0x230>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8008394:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008398:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800839c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    len = strlen(client_info->client_user);
 80083a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7f7 ffa5 	bl	80002f4 <strlen>
 80083aa:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083b2:	d309      	bcc.n	80083c8 <mqtt_client_connect+0x1e8>
 80083b4:	4b36      	ldr	r3, [pc, #216]	@ (8008490 <mqtt_client_connect+0x2b0>)
 80083b6:	f240 5235 	movw	r2, #1333	@ 0x535
 80083ba:	493f      	ldr	r1, [pc, #252]	@ (80084b8 <mqtt_client_connect+0x2d8>)
 80083bc:	4836      	ldr	r0, [pc, #216]	@ (8008498 <mqtt_client_connect+0x2b8>)
 80083be:	f00b f841 	bl	8013444 <iprintf>
 80083c2:	f06f 0305 	mvn.w	r3, #5
 80083c6:	e172      	b.n	80086ae <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d109      	bne.n	80083e2 <mqtt_client_connect+0x202>
 80083ce:	4b30      	ldr	r3, [pc, #192]	@ (8008490 <mqtt_client_connect+0x2b0>)
 80083d0:	f240 5236 	movw	r2, #1334	@ 0x536
 80083d4:	4939      	ldr	r1, [pc, #228]	@ (80084bc <mqtt_client_connect+0x2dc>)
 80083d6:	4830      	ldr	r0, [pc, #192]	@ (8008498 <mqtt_client_connect+0x2b8>)
 80083d8:	f00b f834 	bl	8013444 <iprintf>
 80083dc:	f06f 0305 	mvn.w	r3, #5
 80083e0:	e165      	b.n	80086ae <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 80083e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083e8:	1c9a      	adds	r2, r3, #2
 80083ea:	8bfb      	ldrh	r3, [r7, #30]
 80083ec:	4413      	add	r3, r2
 80083ee:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083f6:	d309      	bcc.n	800840c <mqtt_client_connect+0x22c>
 80083f8:	4b25      	ldr	r3, [pc, #148]	@ (8008490 <mqtt_client_connect+0x2b0>)
 80083fa:	f240 5239 	movw	r2, #1337	@ 0x539
 80083fe:	492d      	ldr	r1, [pc, #180]	@ (80084b4 <mqtt_client_connect+0x2d4>)
 8008400:	4825      	ldr	r0, [pc, #148]	@ (8008498 <mqtt_client_connect+0x2b8>)
 8008402:	f00b f81f 	bl	8013444 <iprintf>
 8008406:	f06f 0305 	mvn.w	r3, #5
 800840a:	e150      	b.n	80086ae <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }
  if (client_info->client_pass != NULL) {
 8008410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d059      	beq.n	80084cc <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8008418:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800841c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008420:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    len = strlen(client_info->client_pass);
 8008424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	4618      	mov	r0, r3
 800842a:	f7f7 ff63 	bl	80002f4 <strlen>
 800842e:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008436:	d309      	bcc.n	800844c <mqtt_client_connect+0x26c>
 8008438:	4b15      	ldr	r3, [pc, #84]	@ (8008490 <mqtt_client_connect+0x2b0>)
 800843a:	f240 523f 	movw	r2, #1343	@ 0x53f
 800843e:	4920      	ldr	r1, [pc, #128]	@ (80084c0 <mqtt_client_connect+0x2e0>)
 8008440:	4815      	ldr	r0, [pc, #84]	@ (8008498 <mqtt_client_connect+0x2b8>)
 8008442:	f00a ffff 	bl	8013444 <iprintf>
 8008446:	f06f 0305 	mvn.w	r3, #5
 800844a:	e130      	b.n	80086ae <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d109      	bne.n	8008466 <mqtt_client_connect+0x286>
 8008452:	4b0f      	ldr	r3, [pc, #60]	@ (8008490 <mqtt_client_connect+0x2b0>)
 8008454:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 8008458:	491a      	ldr	r1, [pc, #104]	@ (80084c4 <mqtt_client_connect+0x2e4>)
 800845a:	480f      	ldr	r0, [pc, #60]	@ (8008498 <mqtt_client_connect+0x2b8>)
 800845c:	f00a fff2 	bl	8013444 <iprintf>
 8008460:	f06f 0305 	mvn.w	r3, #5
 8008464:	e123      	b.n	80086ae <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 800846a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800846c:	1c9a      	adds	r2, r3, #2
 800846e:	8bbb      	ldrh	r3, [r7, #28]
 8008470:	4413      	add	r3, r2
 8008472:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800847a:	d325      	bcc.n	80084c8 <mqtt_client_connect+0x2e8>
 800847c:	4b04      	ldr	r3, [pc, #16]	@ (8008490 <mqtt_client_connect+0x2b0>)
 800847e:	f240 5243 	movw	r2, #1347	@ 0x543
 8008482:	490c      	ldr	r1, [pc, #48]	@ (80084b4 <mqtt_client_connect+0x2d4>)
 8008484:	4804      	ldr	r0, [pc, #16]	@ (8008498 <mqtt_client_connect+0x2b8>)
 8008486:	f00a ffdd 	bl	8013444 <iprintf>
 800848a:	f06f 0305 	mvn.w	r3, #5
 800848e:	e10e      	b.n	80086ae <mqtt_client_connect+0x4ce>
 8008490:	08014364 	.word	0x08014364
 8008494:	080147e4 	.word	0x080147e4
 8008498:	080143dc 	.word	0x080143dc
 800849c:	08014808 	.word	0x08014808
 80084a0:	08014830 	.word	0x08014830
 80084a4:	0801485c 	.word	0x0801485c
 80084a8:	08014890 	.word	0x08014890
 80084ac:	080148d0 	.word	0x080148d0
 80084b0:	08014910 	.word	0x08014910
 80084b4:	0801494c 	.word	0x0801494c
 80084b8:	0801497c 	.word	0x0801497c
 80084bc:	080149bc 	.word	0x080149bc
 80084c0:	08014a00 	.word	0x08014a00
 80084c4:	08014a40 	.word	0x08014a40
    remaining_length = (u16_t)len;
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 80084cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80084d0:	f043 0302 	orr.w	r3, r3, #2
 80084d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  len = strlen(client_info->client_id);
 80084d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f7 ff09 	bl	80002f4 <strlen>
 80084e2:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084ea:	d309      	bcc.n	8008500 <mqtt_client_connect+0x320>
 80084ec:	4b72      	ldr	r3, [pc, #456]	@ (80086b8 <mqtt_client_connect+0x4d8>)
 80084ee:	f240 524b 	movw	r2, #1355	@ 0x54b
 80084f2:	4972      	ldr	r1, [pc, #456]	@ (80086bc <mqtt_client_connect+0x4dc>)
 80084f4:	4872      	ldr	r0, [pc, #456]	@ (80086c0 <mqtt_client_connect+0x4e0>)
 80084f6:	f00a ffa5 	bl	8013444 <iprintf>
 80084fa:	f06f 0305 	mvn.w	r3, #5
 80084fe:	e0d6      	b.n	80086ae <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 8008504:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008506:	1c9a      	adds	r2, r3, #2
 8008508:	8afb      	ldrh	r3, [r7, #22]
 800850a:	4413      	add	r3, r2
 800850c:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008514:	d309      	bcc.n	800852a <mqtt_client_connect+0x34a>
 8008516:	4b68      	ldr	r3, [pc, #416]	@ (80086b8 <mqtt_client_connect+0x4d8>)
 8008518:	f240 524e 	movw	r2, #1358	@ 0x54e
 800851c:	4969      	ldr	r1, [pc, #420]	@ (80086c4 <mqtt_client_connect+0x4e4>)
 800851e:	4868      	ldr	r0, [pc, #416]	@ (80086c0 <mqtt_client_connect+0x4e0>)
 8008520:	f00a ff90 	bl	8013444 <iprintf>
 8008524:	f06f 0305 	mvn.w	r3, #5
 8008528:	e0c1      	b.n	80086ae <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	33ec      	adds	r3, #236	@ 0xec
 8008532:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008534:	4611      	mov	r1, r2
 8008536:	4618      	mov	r0, r3
 8008538:	f7ff f82e 	bl	8007598 <mqtt_output_check_space>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d102      	bne.n	8008548 <mqtt_client_connect+0x368>
    return ERR_MEM;
 8008542:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008546:	e0b2      	b.n	80086ae <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8008548:	2000      	movs	r0, #0
 800854a:	f003 fbbf 	bl	800bccc <tcp_new_ip_type>
 800854e:	4602      	mov	r2, r0
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d102      	bne.n	8008562 <mqtt_client_connect+0x382>
    return ERR_MEM;
 800855c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008560:	e0a5      	b.n	80086ae <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	68f9      	ldr	r1, [r7, #12]
 8008568:	4618      	mov	r0, r3
 800856a:	f003 fbbd 	bl	800bce8 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	4954      	ldr	r1, [pc, #336]	@ (80086c8 <mqtt_client_connect+0x4e8>)
 8008576:	4618      	mov	r0, r3
 8008578:	f002 fae4 	bl	800ab44 <tcp_bind>
 800857c:	4603      	mov	r3, r0
 800857e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 8008582:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008586:	2b00      	cmp	r3, #0
 8008588:	f040 8084 	bne.w	8008694 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	68d8      	ldr	r0, [r3, #12]
 8008590:	88fa      	ldrh	r2, [r7, #6]
 8008592:	4b4e      	ldr	r3, [pc, #312]	@ (80086cc <mqtt_client_connect+0x4ec>)
 8008594:	68b9      	ldr	r1, [r7, #8]
 8008596:	f002 fc5d 	bl	800ae54 <tcp_connect>
 800859a:	4603      	mov	r3, r0
 800859c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 80085a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d177      	bne.n	8008698 <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	4948      	ldr	r1, [pc, #288]	@ (80086d0 <mqtt_client_connect+0x4f0>)
 80085ae:	4618      	mov	r0, r3
 80085b0:	f003 fbf0 	bl	800bd94 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2201      	movs	r2, #1
 80085b8:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 80085c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085c2:	9301      	str	r3, [sp, #4]
 80085c4:	2300      	movs	r3, #0
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	2300      	movs	r3, #0
 80085ca:	2200      	movs	r2, #0
 80085cc:	2101      	movs	r1, #1
 80085ce:	f7fe ff96 	bl	80074fe <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	33ec      	adds	r3, #236	@ 0xec
 80085d6:	2204      	movs	r2, #4
 80085d8:	493e      	ldr	r1, [pc, #248]	@ (80086d4 <mqtt_client_connect+0x4f4>)
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe ff63 	bl	80074a6 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	33ec      	adds	r3, #236	@ 0xec
 80085e4:	2104      	movs	r1, #4
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe ff36 	bl	8007458 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	33ec      	adds	r3, #236	@ 0xec
 80085f0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe ff2e 	bl	8007458 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8008602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008604:	899b      	ldrh	r3, [r3, #12]
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f7fe ff34 	bl	8007476 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8008614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	8afa      	ldrh	r2, [r7, #22]
 800861a:	4619      	mov	r1, r3
 800861c:	f7fe ff43 	bl	80074a6 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8008620:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	d015      	beq.n	8008658 <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8008632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800863a:	b292      	uxth	r2, r2
 800863c:	4619      	mov	r1, r3
 800863e:	f7fe ff32 	bl	80074a6 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8008648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8008650:	b292      	uxth	r2, r2
 8008652:	4619      	mov	r1, r3
 8008654:	f7fe ff27 	bl	80074a6 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8008658:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800865c:	2b00      	cmp	r3, #0
 800865e:	da08      	bge.n	8008672 <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8008666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	8bfa      	ldrh	r2, [r7, #30]
 800866c:	4619      	mov	r1, r3
 800866e:	f7fe ff1a 	bl	80074a6 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8008672:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d008      	beq.n	8008690 <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8008684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	8bba      	ldrh	r2, [r7, #28]
 800868a:	4619      	mov	r1, r3
 800868c:	f7fe ff0b 	bl	80074a6 <mqtt_output_append_string>
  }
  return ERR_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	e00c      	b.n	80086ae <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 8008694:	bf00      	nop
 8008696:	e000      	b.n	800869a <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 8008698:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	4618      	mov	r0, r3
 80086a0:	f002 fa44 	bl	800ab2c <tcp_abort>
  client->conn = NULL;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	60da      	str	r2, [r3, #12]
  return err;
 80086aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3728      	adds	r7, #40	@ 0x28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	08014364 	.word	0x08014364
 80086bc:	08014a84 	.word	0x08014a84
 80086c0:	080143dc 	.word	0x080143dc
 80086c4:	0801494c 	.word	0x0801494c
 80086c8:	0801759c 	.word	0x0801759c
 80086cc:	08007f55 	.word	0x08007f55
 80086d0:	08007ee1 	.word	0x08007ee1
 80086d4:	08014ac0 	.word	0x08014ac0

080086d8 <mqtt_client_is_connected>:
 * @param client MQTT client
 * @return 1 if connected to server, 0 otherwise
 */
u8_t
mqtt_client_is_connected(mqtt_client_t *client)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_is_connected: client != NULL", client);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d106      	bne.n	80086f4 <mqtt_client_is_connected+0x1c>
 80086e6:	4b09      	ldr	r3, [pc, #36]	@ (800870c <mqtt_client_is_connected+0x34>)
 80086e8:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80086ec:	4908      	ldr	r1, [pc, #32]	@ (8008710 <mqtt_client_is_connected+0x38>)
 80086ee:	4809      	ldr	r0, [pc, #36]	@ (8008714 <mqtt_client_is_connected+0x3c>)
 80086f0:	f00a fea8 	bl	8013444 <iprintf>
  return client->conn_state == MQTT_CONNECTED;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	7a9b      	ldrb	r3, [r3, #10]
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	bf0c      	ite	eq
 80086fc:	2301      	moveq	r3, #1
 80086fe:	2300      	movne	r3, #0
 8008700:	b2db      	uxtb	r3, r3
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	08014364 	.word	0x08014364
 8008710:	08014ae8 	.word	0x08014ae8
 8008714:	080143dc 	.word	0x080143dc

08008718 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008726:	021b      	lsls	r3, r3, #8
 8008728:	b21a      	sxth	r2, r3
 800872a:	88fb      	ldrh	r3, [r7, #6]
 800872c:	0a1b      	lsrs	r3, r3, #8
 800872e:	b29b      	uxth	r3, r3
 8008730:	b21b      	sxth	r3, r3
 8008732:	4313      	orrs	r3, r2
 8008734:	b21b      	sxth	r3, r3
 8008736:	b29b      	uxth	r3, r3
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	061a      	lsls	r2, r3, #24
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	021b      	lsls	r3, r3, #8
 8008754:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008758:	431a      	orrs	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	0a1b      	lsrs	r3, r3, #8
 800875e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	0e1b      	lsrs	r3, r3, #24
 8008768:	4313      	orrs	r3, r2
}
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8008776:	b480      	push	{r7}
 8008778:	b089      	sub	sp, #36	@ 0x24
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00d      	beq.n	80087b6 <lwip_standard_chksum+0x40>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	dd0a      	ble.n	80087b6 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80087a0:	69fa      	ldr	r2, [r7, #28]
 80087a2:	1c53      	adds	r3, r2, #1
 80087a4:	61fb      	str	r3, [r7, #28]
 80087a6:	f107 030e 	add.w	r3, r7, #14
 80087aa:	3301      	adds	r3, #1
 80087ac:	7812      	ldrb	r2, [r2, #0]
 80087ae:	701a      	strb	r2, [r3, #0]
    len--;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80087ba:	e00a      	b.n	80087d2 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	1c9a      	adds	r2, r3, #2
 80087c0:	61ba      	str	r2, [r7, #24]
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	461a      	mov	r2, r3
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	4413      	add	r3, r2
 80087ca:	617b      	str	r3, [r7, #20]
    len -= 2;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	3b02      	subs	r3, #2
 80087d0:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	dcf1      	bgt.n	80087bc <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	dd04      	ble.n	80087e8 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80087de:	f107 030e 	add.w	r3, r7, #14
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	7812      	ldrb	r2, [r2, #0]
 80087e6:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80087e8:	89fb      	ldrh	r3, [r7, #14]
 80087ea:	461a      	mov	r2, r3
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	4413      	add	r3, r2
 80087f0:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	0c1a      	lsrs	r2, r3, #16
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	4413      	add	r3, r2
 80087fc:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	0c1a      	lsrs	r2, r3, #16
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	b29b      	uxth	r3, r3
 8008806:	4413      	add	r3, r2
 8008808:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d007      	beq.n	8008820 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	b29a      	uxth	r2, r3
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	0a1b      	lsrs	r3, r3, #8
 800881a:	b2db      	uxtb	r3, r3
 800881c:	4313      	orrs	r3, r2
 800881e:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	b29b      	uxth	r3, r3
}
 8008824:	4618      	mov	r0, r3
 8008826:	3724      	adds	r7, #36	@ 0x24
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800883c:	887b      	ldrh	r3, [r7, #2]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff ff98 	bl	8008776 <lwip_standard_chksum>
 8008846:	4603      	mov	r3, r0
 8008848:	43db      	mvns	r3, r3
 800884a:	b29b      	uxth	r3, r3
}
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	613b      	str	r3, [r7, #16]
 8008868:	e02b      	b.n	80088c2 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	895b      	ldrh	r3, [r3, #10]
 8008872:	4619      	mov	r1, r3
 8008874:	4610      	mov	r0, r2
 8008876:	f7ff ff7e 	bl	8008776 <lwip_standard_chksum>
 800887a:	4603      	mov	r3, r0
 800887c:	461a      	mov	r2, r3
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	4413      	add	r3, r2
 8008882:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	0c1a      	lsrs	r2, r3, #16
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	b29b      	uxth	r3, r3
 800888c:	4413      	add	r3, r2
 800888e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	895b      	ldrh	r3, [r3, #10]
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	b29b      	uxth	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00e      	beq.n	80088bc <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bf0c      	ite	eq
 80088a4:	2301      	moveq	r3, #1
 80088a6:	2300      	movne	r3, #0
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	021b      	lsls	r3, r3, #8
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	0a1b      	lsrs	r3, r3, #8
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	4313      	orrs	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1d0      	bne.n	800886a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d007      	beq.n	80088de <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	021b      	lsls	r3, r3, #8
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	0a1b      	lsrs	r3, r3, #8
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	4313      	orrs	r3, r2
 80088dc:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	43db      	mvns	r3, r3
 80088e4:	b29b      	uxth	r3, r3
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80088f8:	f000 f8d2 	bl	8008aa0 <mem_init>
  memp_init();
 80088fc:	f000 fbe0 	bl	80090c0 <memp_init>
  pbuf_init();
  netif_init();
 8008900:	f000 fcde 	bl	80092c0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008904:	f007 fff8 	bl	80108f8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008908:	f001 fe16 	bl	800a538 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800890c:	f007 ff30 	bl	8010770 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 8008920:	4b04      	ldr	r3, [pc, #16]	@ (8008934 <ptr_to_mem+0x1c>)
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4413      	add	r3, r2
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	240402f8 	.word	0x240402f8

08008938 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008940:	4b04      	ldr	r3, [pc, #16]	@ (8008954 <mem_to_ptr+0x1c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	1ad3      	subs	r3, r2, r3
}
 8008948:	4618      	mov	r0, r3
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	240402f8 	.word	0x240402f8

08008958 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008958:	b590      	push	{r4, r7, lr}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008960:	4b45      	ldr	r3, [pc, #276]	@ (8008a78 <plug_holes+0x120>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	429a      	cmp	r2, r3
 8008968:	d206      	bcs.n	8008978 <plug_holes+0x20>
 800896a:	4b44      	ldr	r3, [pc, #272]	@ (8008a7c <plug_holes+0x124>)
 800896c:	f240 12df 	movw	r2, #479	@ 0x1df
 8008970:	4943      	ldr	r1, [pc, #268]	@ (8008a80 <plug_holes+0x128>)
 8008972:	4844      	ldr	r0, [pc, #272]	@ (8008a84 <plug_holes+0x12c>)
 8008974:	f00a fd66 	bl	8013444 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008978:	4b43      	ldr	r3, [pc, #268]	@ (8008a88 <plug_holes+0x130>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	429a      	cmp	r2, r3
 8008980:	d306      	bcc.n	8008990 <plug_holes+0x38>
 8008982:	4b3e      	ldr	r3, [pc, #248]	@ (8008a7c <plug_holes+0x124>)
 8008984:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8008988:	4940      	ldr	r1, [pc, #256]	@ (8008a8c <plug_holes+0x134>)
 800898a:	483e      	ldr	r0, [pc, #248]	@ (8008a84 <plug_holes+0x12c>)
 800898c:	f00a fd5a 	bl	8013444 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	7a1b      	ldrb	r3, [r3, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d006      	beq.n	80089a6 <plug_holes+0x4e>
 8008998:	4b38      	ldr	r3, [pc, #224]	@ (8008a7c <plug_holes+0x124>)
 800899a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800899e:	493c      	ldr	r1, [pc, #240]	@ (8008a90 <plug_holes+0x138>)
 80089a0:	4838      	ldr	r0, [pc, #224]	@ (8008a84 <plug_holes+0x12c>)
 80089a2:	f00a fd4f 	bl	8013444 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a3a      	ldr	r2, [pc, #232]	@ (8008a94 <plug_holes+0x13c>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d906      	bls.n	80089be <plug_holes+0x66>
 80089b0:	4b32      	ldr	r3, [pc, #200]	@ (8008a7c <plug_holes+0x124>)
 80089b2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80089b6:	4938      	ldr	r1, [pc, #224]	@ (8008a98 <plug_holes+0x140>)
 80089b8:	4832      	ldr	r0, [pc, #200]	@ (8008a84 <plug_holes+0x12c>)
 80089ba:	f00a fd43 	bl	8013444 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff ffa8 	bl	8008918 <ptr_to_mem>
 80089c8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d024      	beq.n	8008a1c <plug_holes+0xc4>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	7a1b      	ldrb	r3, [r3, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d120      	bne.n	8008a1c <plug_holes+0xc4>
 80089da:	4b2b      	ldr	r3, [pc, #172]	@ (8008a88 <plug_holes+0x130>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d01b      	beq.n	8008a1c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80089e4:	4b2d      	ldr	r3, [pc, #180]	@ (8008a9c <plug_holes+0x144>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d102      	bne.n	80089f4 <plug_holes+0x9c>
      lfree = mem;
 80089ee:	4a2b      	ldr	r2, [pc, #172]	@ (8008a9c <plug_holes+0x144>)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a24      	ldr	r2, [pc, #144]	@ (8008a94 <plug_holes+0x13c>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d00a      	beq.n	8008a1c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff ff84 	bl	8008918 <ptr_to_mem>
 8008a10:	4604      	mov	r4, r0
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff ff90 	bl	8008938 <mem_to_ptr>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7ff ff79 	bl	8008918 <ptr_to_mem>
 8008a26:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d01f      	beq.n	8008a70 <plug_holes+0x118>
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	7a1b      	ldrb	r3, [r3, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d11b      	bne.n	8008a70 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008a38:	4b18      	ldr	r3, [pc, #96]	@ (8008a9c <plug_holes+0x144>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d102      	bne.n	8008a48 <plug_holes+0xf0>
      lfree = pmem;
 8008a42:	4a16      	ldr	r2, [pc, #88]	@ (8008a9c <plug_holes+0x144>)
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a0f      	ldr	r2, [pc, #60]	@ (8008a94 <plug_holes+0x13c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d00a      	beq.n	8008a70 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff ff5a 	bl	8008918 <ptr_to_mem>
 8008a64:	4604      	mov	r4, r0
 8008a66:	68b8      	ldr	r0, [r7, #8]
 8008a68:	f7ff ff66 	bl	8008938 <mem_to_ptr>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	6063      	str	r3, [r4, #4]
    }
  }
}
 8008a70:	bf00      	nop
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd90      	pop	{r4, r7, pc}
 8008a78:	240402f8 	.word	0x240402f8
 8008a7c:	08014b14 	.word	0x08014b14
 8008a80:	08014b44 	.word	0x08014b44
 8008a84:	08014b5c 	.word	0x08014b5c
 8008a88:	240402fc 	.word	0x240402fc
 8008a8c:	08014b84 	.word	0x08014b84
 8008a90:	08014ba0 	.word	0x08014ba0
 8008a94:	0001ffe8 	.word	0x0001ffe8
 8008a98:	08014bbc 	.word	0x08014bbc
 8008a9c:	24040300 	.word	0x24040300

08008aa0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008aa6:	4b14      	ldr	r3, [pc, #80]	@ (8008af8 <mem_init+0x58>)
 8008aa8:	4a14      	ldr	r2, [pc, #80]	@ (8008afc <mem_init+0x5c>)
 8008aaa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008aac:	4b12      	ldr	r3, [pc, #72]	@ (8008af8 <mem_init+0x58>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a12      	ldr	r2, [pc, #72]	@ (8008b00 <mem_init+0x60>)
 8008ab6:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008ac4:	480e      	ldr	r0, [pc, #56]	@ (8008b00 <mem_init+0x60>)
 8008ac6:	f7ff ff27 	bl	8008918 <ptr_to_mem>
 8008aca:	4603      	mov	r3, r0
 8008acc:	4a0d      	ldr	r2, [pc, #52]	@ (8008b04 <mem_init+0x64>)
 8008ace:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8008b04 <mem_init+0x64>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b04 <mem_init+0x64>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a08      	ldr	r2, [pc, #32]	@ (8008b00 <mem_init+0x60>)
 8008ade:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008ae0:	4b08      	ldr	r3, [pc, #32]	@ (8008b04 <mem_init+0x64>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a06      	ldr	r2, [pc, #24]	@ (8008b00 <mem_init+0x60>)
 8008ae6:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008ae8:	4b03      	ldr	r3, [pc, #12]	@ (8008af8 <mem_init+0x58>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a06      	ldr	r2, [pc, #24]	@ (8008b08 <mem_init+0x68>)
 8008aee:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008af0:	bf00      	nop
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	240402f8 	.word	0x240402f8
 8008afc:	30020000 	.word	0x30020000
 8008b00:	0001ffe8 	.word	0x0001ffe8
 8008b04:	240402fc 	.word	0x240402fc
 8008b08:	24040300 	.word	0x24040300

08008b0c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff ff0f 	bl	8008938 <mem_to_ptr>
 8008b1a:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7ff fef9 	bl	8008918 <ptr_to_mem>
 8008b26:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7ff fef3 	bl	8008918 <ptr_to_mem>
 8008b32:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a11      	ldr	r2, [pc, #68]	@ (8008b80 <mem_link_valid+0x74>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d818      	bhi.n	8008b70 <mem_link_valid+0x64>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	4a0f      	ldr	r2, [pc, #60]	@ (8008b80 <mem_link_valid+0x74>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d813      	bhi.n	8008b70 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d004      	beq.n	8008b5c <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d109      	bne.n	8008b70 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008b5c:	4b09      	ldr	r3, [pc, #36]	@ (8008b84 <mem_link_valid+0x78>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d006      	beq.n	8008b74 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d001      	beq.n	8008b74 <mem_link_valid+0x68>
    return 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	e000      	b.n	8008b76 <mem_link_valid+0x6a>
  }
  return 1;
 8008b74:	2301      	movs	r3, #1
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	0001ffe8 	.word	0x0001ffe8
 8008b84:	240402fc 	.word	0x240402fc

08008b88 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d04c      	beq.n	8008c30 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f003 0303 	and.w	r3, r3, #3
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d007      	beq.n	8008bb0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008ba0:	4b25      	ldr	r3, [pc, #148]	@ (8008c38 <mem_free+0xb0>)
 8008ba2:	f240 2273 	movw	r2, #627	@ 0x273
 8008ba6:	4925      	ldr	r1, [pc, #148]	@ (8008c3c <mem_free+0xb4>)
 8008ba8:	4825      	ldr	r0, [pc, #148]	@ (8008c40 <mem_free+0xb8>)
 8008baa:	f00a fc4b 	bl	8013444 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008bae:	e040      	b.n	8008c32 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3b0c      	subs	r3, #12
 8008bb4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008bb6:	4b23      	ldr	r3, [pc, #140]	@ (8008c44 <mem_free+0xbc>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d306      	bcc.n	8008bce <mem_free+0x46>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f103 020c 	add.w	r2, r3, #12
 8008bc6:	4b20      	ldr	r3, [pc, #128]	@ (8008c48 <mem_free+0xc0>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d907      	bls.n	8008bde <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008bce:	4b1a      	ldr	r3, [pc, #104]	@ (8008c38 <mem_free+0xb0>)
 8008bd0:	f240 227f 	movw	r2, #639	@ 0x27f
 8008bd4:	491d      	ldr	r1, [pc, #116]	@ (8008c4c <mem_free+0xc4>)
 8008bd6:	481a      	ldr	r0, [pc, #104]	@ (8008c40 <mem_free+0xb8>)
 8008bd8:	f00a fc34 	bl	8013444 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008bdc:	e029      	b.n	8008c32 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	7a1b      	ldrb	r3, [r3, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d107      	bne.n	8008bf6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008be6:	4b14      	ldr	r3, [pc, #80]	@ (8008c38 <mem_free+0xb0>)
 8008be8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8008bec:	4918      	ldr	r1, [pc, #96]	@ (8008c50 <mem_free+0xc8>)
 8008bee:	4814      	ldr	r0, [pc, #80]	@ (8008c40 <mem_free+0xb8>)
 8008bf0:	f00a fc28 	bl	8013444 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008bf4:	e01d      	b.n	8008c32 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f7ff ff88 	bl	8008b0c <mem_link_valid>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d107      	bne.n	8008c12 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008c02:	4b0d      	ldr	r3, [pc, #52]	@ (8008c38 <mem_free+0xb0>)
 8008c04:	f240 2295 	movw	r2, #661	@ 0x295
 8008c08:	4912      	ldr	r1, [pc, #72]	@ (8008c54 <mem_free+0xcc>)
 8008c0a:	480d      	ldr	r0, [pc, #52]	@ (8008c40 <mem_free+0xb8>)
 8008c0c:	f00a fc1a 	bl	8013444 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008c10:	e00f      	b.n	8008c32 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 8008c18:	4b0f      	ldr	r3, [pc, #60]	@ (8008c58 <mem_free+0xd0>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d202      	bcs.n	8008c28 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008c22:	4a0d      	ldr	r2, [pc, #52]	@ (8008c58 <mem_free+0xd0>)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff fe95 	bl	8008958 <plug_holes>
 8008c2e:	e000      	b.n	8008c32 <mem_free+0xaa>
    return;
 8008c30:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	08014b14 	.word	0x08014b14
 8008c3c:	08014be8 	.word	0x08014be8
 8008c40:	08014b5c 	.word	0x08014b5c
 8008c44:	240402f8 	.word	0x240402f8
 8008c48:	240402fc 	.word	0x240402fc
 8008c4c:	08014c0c 	.word	0x08014c0c
 8008c50:	08014c28 	.word	0x08014c28
 8008c54:	08014c50 	.word	0x08014c50
 8008c58:	24040300 	.word	0x24040300

08008c5c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08a      	sub	sp, #40	@ 0x28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	3303      	adds	r3, #3
 8008c6a:	f023 0303 	bic.w	r3, r3, #3
 8008c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 8008c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c72:	2b0b      	cmp	r3, #11
 8008c74:	d801      	bhi.n	8008c7a <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008c76:	230c      	movs	r3, #12
 8008c78:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7c:	4a68      	ldr	r2, [pc, #416]	@ (8008e20 <mem_trim+0x1c4>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d803      	bhi.n	8008c8a <mem_trim+0x2e>
 8008c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d201      	bcs.n	8008c8e <mem_trim+0x32>
    return NULL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	e0c4      	b.n	8008e18 <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008c8e:	4b65      	ldr	r3, [pc, #404]	@ (8008e24 <mem_trim+0x1c8>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d304      	bcc.n	8008ca2 <mem_trim+0x46>
 8008c98:	4b63      	ldr	r3, [pc, #396]	@ (8008e28 <mem_trim+0x1cc>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d306      	bcc.n	8008cb0 <mem_trim+0x54>
 8008ca2:	4b62      	ldr	r3, [pc, #392]	@ (8008e2c <mem_trim+0x1d0>)
 8008ca4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8008ca8:	4961      	ldr	r1, [pc, #388]	@ (8008e30 <mem_trim+0x1d4>)
 8008caa:	4862      	ldr	r0, [pc, #392]	@ (8008e34 <mem_trim+0x1d8>)
 8008cac:	f00a fbca 	bl	8013444 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008cb0:	4b5c      	ldr	r3, [pc, #368]	@ (8008e24 <mem_trim+0x1c8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d304      	bcc.n	8008cc4 <mem_trim+0x68>
 8008cba:	4b5b      	ldr	r3, [pc, #364]	@ (8008e28 <mem_trim+0x1cc>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d301      	bcc.n	8008cc8 <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	e0a7      	b.n	8008e18 <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3b0c      	subs	r3, #12
 8008ccc:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008cce:	6a38      	ldr	r0, [r7, #32]
 8008cd0:	f7ff fe32 	bl	8008938 <mem_to_ptr>
 8008cd4:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	3b0c      	subs	r3, #12
 8008ce0:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d906      	bls.n	8008cf8 <mem_trim+0x9c>
 8008cea:	4b50      	ldr	r3, [pc, #320]	@ (8008e2c <mem_trim+0x1d0>)
 8008cec:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8008cf0:	4951      	ldr	r1, [pc, #324]	@ (8008e38 <mem_trim+0x1dc>)
 8008cf2:	4850      	ldr	r0, [pc, #320]	@ (8008e34 <mem_trim+0x1d8>)
 8008cf4:	f00a fba6 	bl	8013444 <iprintf>
  if (newsize > size) {
 8008cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d901      	bls.n	8008d04 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	e089      	b.n	8008e18 <mem_trim+0x1bc>
  }
  if (newsize == size) {
 8008d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d101      	bne.n	8008d10 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	e083      	b.n	8008e18 <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff fdff 	bl	8008918 <ptr_to_mem>
 8008d1a:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	7a1b      	ldrb	r3, [r3, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d13c      	bne.n	8008d9e <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a3d      	ldr	r2, [pc, #244]	@ (8008e20 <mem_trim+0x1c4>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d106      	bne.n	8008d3c <mem_trim+0xe0>
 8008d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8008e2c <mem_trim+0x1d0>)
 8008d30:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8008d34:	4941      	ldr	r1, [pc, #260]	@ (8008e3c <mem_trim+0x1e0>)
 8008d36:	483f      	ldr	r0, [pc, #252]	@ (8008e34 <mem_trim+0x1d8>)
 8008d38:	f00a fb84 	bl	8013444 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d46:	4413      	add	r3, r2
 8008d48:	330c      	adds	r3, #12
 8008d4a:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8008d4c:	4b3c      	ldr	r3, [pc, #240]	@ (8008e40 <mem_trim+0x1e4>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d105      	bne.n	8008d62 <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 8008d56:	6938      	ldr	r0, [r7, #16]
 8008d58:	f7ff fdde 	bl	8008918 <ptr_to_mem>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	4a38      	ldr	r2, [pc, #224]	@ (8008e40 <mem_trim+0x1e4>)
 8008d60:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008d62:	6938      	ldr	r0, [r7, #16]
 8008d64:	f7ff fdd8 	bl	8008918 <ptr_to_mem>
 8008d68:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a26      	ldr	r2, [pc, #152]	@ (8008e20 <mem_trim+0x1c4>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d044      	beq.n	8008e16 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7ff fdc1 	bl	8008918 <ptr_to_mem>
 8008d96:	4602      	mov	r2, r0
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	6053      	str	r3, [r2, #4]
 8008d9c:	e03b      	b.n	8008e16 <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da0:	3318      	adds	r3, #24
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d336      	bcc.n	8008e16 <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008da8:	69fa      	ldr	r2, [r7, #28]
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	4413      	add	r3, r2
 8008dae:	330c      	adds	r3, #12
 8008db0:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a1a      	ldr	r2, [pc, #104]	@ (8008e20 <mem_trim+0x1c4>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d106      	bne.n	8008dca <mem_trim+0x16e>
 8008dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8008e2c <mem_trim+0x1d0>)
 8008dbe:	f240 3216 	movw	r2, #790	@ 0x316
 8008dc2:	491e      	ldr	r1, [pc, #120]	@ (8008e3c <mem_trim+0x1e0>)
 8008dc4:	481b      	ldr	r0, [pc, #108]	@ (8008e34 <mem_trim+0x1d8>)
 8008dc6:	f00a fb3d 	bl	8013444 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008dca:	6938      	ldr	r0, [r7, #16]
 8008dcc:	f7ff fda4 	bl	8008918 <ptr_to_mem>
 8008dd0:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 8008dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e40 <mem_trim+0x1e4>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d202      	bcs.n	8008de2 <mem_trim+0x186>
      lfree = mem2;
 8008ddc:	4a18      	ldr	r2, [pc, #96]	@ (8008e40 <mem_trim+0x1e4>)
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2200      	movs	r2, #0
 8008de6:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	69fa      	ldr	r2, [r7, #28]
 8008df4:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a07      	ldr	r2, [pc, #28]	@ (8008e20 <mem_trim+0x1c4>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d007      	beq.n	8008e16 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fd84 	bl	8008918 <ptr_to_mem>
 8008e10:	4602      	mov	r2, r0
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008e16:	687b      	ldr	r3, [r7, #4]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3728      	adds	r7, #40	@ 0x28
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	0001ffe8 	.word	0x0001ffe8
 8008e24:	240402f8 	.word	0x240402f8
 8008e28:	240402fc 	.word	0x240402fc
 8008e2c:	08014b14 	.word	0x08014b14
 8008e30:	08014c84 	.word	0x08014c84
 8008e34:	08014b5c 	.word	0x08014b5c
 8008e38:	08014c9c 	.word	0x08014c9c
 8008e3c:	08014cbc 	.word	0x08014cbc
 8008e40:	24040300 	.word	0x24040300

08008e44 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <mem_malloc+0x12>
    return NULL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	e0d0      	b.n	8008ff8 <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3303      	adds	r3, #3
 8008e5a:	f023 0303 	bic.w	r3, r3, #3
 8008e5e:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	2b0b      	cmp	r3, #11
 8008e64:	d801      	bhi.n	8008e6a <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008e66:	230c      	movs	r3, #12
 8008e68:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	4a64      	ldr	r2, [pc, #400]	@ (8009000 <mem_malloc+0x1bc>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d803      	bhi.n	8008e7a <mem_malloc+0x36>
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d201      	bcs.n	8008e7e <mem_malloc+0x3a>
    return NULL;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e0bc      	b.n	8008ff8 <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008e7e:	4b61      	ldr	r3, [pc, #388]	@ (8009004 <mem_malloc+0x1c0>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff fd58 	bl	8008938 <mem_to_ptr>
 8008e88:	61f8      	str	r0, [r7, #28]
 8008e8a:	e0ad      	b.n	8008fe8 <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008e8c:	69f8      	ldr	r0, [r7, #28]
 8008e8e:	f7ff fd43 	bl	8008918 <ptr_to_mem>
 8008e92:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	7a1b      	ldrb	r3, [r3, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f040 809f 	bne.w	8008fdc <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	f200 8096 	bhi.w	8008fdc <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	f1a3 020c 	sub.w	r2, r3, #12
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	3318      	adds	r3, #24
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d331      	bcc.n	8008f28 <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	4413      	add	r3, r2
 8008eca:	330c      	adds	r3, #12
 8008ecc:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	4a4b      	ldr	r2, [pc, #300]	@ (8009000 <mem_malloc+0x1bc>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d106      	bne.n	8008ee4 <mem_malloc+0xa0>
 8008ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8009008 <mem_malloc+0x1c4>)
 8008ed8:	f240 3287 	movw	r2, #903	@ 0x387
 8008edc:	494b      	ldr	r1, [pc, #300]	@ (800900c <mem_malloc+0x1c8>)
 8008ede:	484c      	ldr	r0, [pc, #304]	@ (8009010 <mem_malloc+0x1cc>)
 8008ee0:	f00a fab0 	bl	8013444 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff fd17 	bl	8008918 <ptr_to_mem>
 8008eea:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a3b      	ldr	r2, [pc, #236]	@ (8009000 <mem_malloc+0x1bc>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d00b      	beq.n	8008f2e <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7ff fcfc 	bl	8008918 <ptr_to_mem>
 8008f20:	4602      	mov	r2, r0
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6053      	str	r3, [r2, #4]
 8008f26:	e002      	b.n	8008f2e <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008f2e:	4b35      	ldr	r3, [pc, #212]	@ (8009004 <mem_malloc+0x1c0>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d127      	bne.n	8008f88 <mem_malloc+0x144>
          struct mem *cur = lfree;
 8008f38:	4b32      	ldr	r3, [pc, #200]	@ (8009004 <mem_malloc+0x1c0>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008f3e:	e005      	b.n	8008f4c <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7ff fce7 	bl	8008918 <ptr_to_mem>
 8008f4a:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	7a1b      	ldrb	r3, [r3, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d004      	beq.n	8008f5e <mem_malloc+0x11a>
 8008f54:	4b2f      	ldr	r3, [pc, #188]	@ (8009014 <mem_malloc+0x1d0>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d1f0      	bne.n	8008f40 <mem_malloc+0xfc>
          }
          lfree = cur;
 8008f5e:	4a29      	ldr	r2, [pc, #164]	@ (8009004 <mem_malloc+0x1c0>)
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008f64:	4b27      	ldr	r3, [pc, #156]	@ (8009004 <mem_malloc+0x1c0>)
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	4b2a      	ldr	r3, [pc, #168]	@ (8009014 <mem_malloc+0x1d0>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d00b      	beq.n	8008f88 <mem_malloc+0x144>
 8008f70:	4b24      	ldr	r3, [pc, #144]	@ (8009004 <mem_malloc+0x1c0>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	7a1b      	ldrb	r3, [r3, #8]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d006      	beq.n	8008f88 <mem_malloc+0x144>
 8008f7a:	4b23      	ldr	r3, [pc, #140]	@ (8009008 <mem_malloc+0x1c4>)
 8008f7c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8008f80:	4925      	ldr	r1, [pc, #148]	@ (8009018 <mem_malloc+0x1d4>)
 8008f82:	4823      	ldr	r0, [pc, #140]	@ (8009010 <mem_malloc+0x1cc>)
 8008f84:	f00a fa5e 	bl	8013444 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	330c      	adds	r3, #12
 8008f90:	4a20      	ldr	r2, [pc, #128]	@ (8009014 <mem_malloc+0x1d0>)
 8008f92:	6812      	ldr	r2, [r2, #0]
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d906      	bls.n	8008fa6 <mem_malloc+0x162>
 8008f98:	4b1b      	ldr	r3, [pc, #108]	@ (8009008 <mem_malloc+0x1c4>)
 8008f9a:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8008f9e:	491f      	ldr	r1, [pc, #124]	@ (800901c <mem_malloc+0x1d8>)
 8008fa0:	481b      	ldr	r0, [pc, #108]	@ (8009010 <mem_malloc+0x1cc>)
 8008fa2:	f00a fa4f 	bl	8013444 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f003 0303 	and.w	r3, r3, #3
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d006      	beq.n	8008fbe <mem_malloc+0x17a>
 8008fb0:	4b15      	ldr	r3, [pc, #84]	@ (8009008 <mem_malloc+0x1c4>)
 8008fb2:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8008fb6:	491a      	ldr	r1, [pc, #104]	@ (8009020 <mem_malloc+0x1dc>)
 8008fb8:	4815      	ldr	r0, [pc, #84]	@ (8009010 <mem_malloc+0x1cc>)
 8008fba:	f00a fa43 	bl	8013444 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f003 0303 	and.w	r3, r3, #3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d006      	beq.n	8008fd6 <mem_malloc+0x192>
 8008fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8009008 <mem_malloc+0x1c4>)
 8008fca:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8008fce:	4915      	ldr	r1, [pc, #84]	@ (8009024 <mem_malloc+0x1e0>)
 8008fd0:	480f      	ldr	r0, [pc, #60]	@ (8009010 <mem_malloc+0x1cc>)
 8008fd2:	f00a fa37 	bl	8013444 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	330c      	adds	r3, #12
 8008fda:	e00d      	b.n	8008ff8 <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 8008fdc:	69f8      	ldr	r0, [r7, #28]
 8008fde:	f7ff fc9b 	bl	8008918 <ptr_to_mem>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	4b05      	ldr	r3, [pc, #20]	@ (8009000 <mem_malloc+0x1bc>)
 8008fec:	1a9b      	subs	r3, r3, r2
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	f4ff af4b 	bcc.w	8008e8c <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3720      	adds	r7, #32
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	0001ffe8 	.word	0x0001ffe8
 8009004:	24040300 	.word	0x24040300
 8009008:	08014b14 	.word	0x08014b14
 800900c:	08014cbc 	.word	0x08014cbc
 8009010:	08014b5c 	.word	0x08014b5c
 8009014:	240402fc 	.word	0x240402fc
 8009018:	08014cd0 	.word	0x08014cd0
 800901c:	08014cec 	.word	0x08014cec
 8009020:	08014d1c 	.word	0x08014d1c
 8009024:	08014d4c 	.word	0x08014d4c

08009028 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	fb02 f303 	mul.w	r3, r2, r3
 800903a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f7ff ff01 	bl	8008e44 <mem_malloc>
 8009042:	60b8      	str	r0, [r7, #8]
  if (p) {
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d004      	beq.n	8009054 <mem_calloc+0x2c>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	2100      	movs	r1, #0
 800904e:	68b8      	ldr	r0, [r7, #8]
 8009050:	f00a fa5d 	bl	801350e <memset>
  }
  return p;
 8009054:	68bb      	ldr	r3, [r7, #8]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800905e:	b480      	push	{r7}
 8009060:	b085      	sub	sp, #20
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	2200      	movs	r2, #0
 800906c:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	3303      	adds	r3, #3
 8009074:	f023 0303 	bic.w	r3, r3, #3
 8009078:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
 800907e:	e011      	b.n	80090a4 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	461a      	mov	r2, r3
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	4413      	add	r3, r2
 800909c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3301      	adds	r3, #1
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	885b      	ldrh	r3, [r3, #2]
 80090a8:	461a      	mov	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	4293      	cmp	r3, r2
 80090ae:	dbe7      	blt.n	8009080 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
	...

080090c0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80090c6:	2300      	movs	r3, #0
 80090c8:	80fb      	strh	r3, [r7, #6]
 80090ca:	e009      	b.n	80090e0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80090cc:	88fb      	ldrh	r3, [r7, #6]
 80090ce:	4a08      	ldr	r2, [pc, #32]	@ (80090f0 <memp_init+0x30>)
 80090d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff ffc2 	bl	800905e <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80090da:	88fb      	ldrh	r3, [r7, #6]
 80090dc:	3301      	adds	r3, #1
 80090de:	80fb      	strh	r3, [r7, #6]
 80090e0:	88fb      	ldrh	r3, [r7, #6]
 80090e2:	2b08      	cmp	r3, #8
 80090e4:	d9f2      	bls.n	80090cc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80090e6:	bf00      	nop
 80090e8:	bf00      	nop
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	08017538 	.word	0x08017538

080090f4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d012      	beq.n	8009130 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	6812      	ldr	r2, [r2, #0]
 8009112:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f003 0303 	and.w	r3, r3, #3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d006      	beq.n	800912c <do_memp_malloc_pool+0x38>
 800911e:	4b07      	ldr	r3, [pc, #28]	@ (800913c <do_memp_malloc_pool+0x48>)
 8009120:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009124:	4906      	ldr	r1, [pc, #24]	@ (8009140 <do_memp_malloc_pool+0x4c>)
 8009126:	4807      	ldr	r0, [pc, #28]	@ (8009144 <do_memp_malloc_pool+0x50>)
 8009128:	f00a f98c 	bl	8013444 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	e000      	b.n	8009132 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	08014d70 	.word	0x08014d70
 8009140:	08014da0 	.word	0x08014da0
 8009144:	08014dc4 	.word	0x08014dc4

08009148 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d106      	bne.n	8009164 <memp_malloc_pool+0x1c>
 8009156:	4b0a      	ldr	r3, [pc, #40]	@ (8009180 <memp_malloc_pool+0x38>)
 8009158:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800915c:	4909      	ldr	r1, [pc, #36]	@ (8009184 <memp_malloc_pool+0x3c>)
 800915e:	480a      	ldr	r0, [pc, #40]	@ (8009188 <memp_malloc_pool+0x40>)
 8009160:	f00a f970 	bl	8013444 <iprintf>
  if (desc == NULL) {
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <memp_malloc_pool+0x26>
    return NULL;
 800916a:	2300      	movs	r3, #0
 800916c:	e003      	b.n	8009176 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7ff ffc0 	bl	80090f4 <do_memp_malloc_pool>
 8009174:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009176:	4618      	mov	r0, r3
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	08014d70 	.word	0x08014d70
 8009184:	08014dec 	.word	0x08014dec
 8009188:	08014dc4 	.word	0x08014dc4

0800918c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	2b08      	cmp	r3, #8
 800919a:	d908      	bls.n	80091ae <memp_malloc+0x22>
 800919c:	4b0a      	ldr	r3, [pc, #40]	@ (80091c8 <memp_malloc+0x3c>)
 800919e:	f240 1257 	movw	r2, #343	@ 0x157
 80091a2:	490a      	ldr	r1, [pc, #40]	@ (80091cc <memp_malloc+0x40>)
 80091a4:	480a      	ldr	r0, [pc, #40]	@ (80091d0 <memp_malloc+0x44>)
 80091a6:	f00a f94d 	bl	8013444 <iprintf>
 80091aa:	2300      	movs	r3, #0
 80091ac:	e008      	b.n	80091c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	4a08      	ldr	r2, [pc, #32]	@ (80091d4 <memp_malloc+0x48>)
 80091b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7ff ff9c 	bl	80090f4 <do_memp_malloc_pool>
 80091bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80091be:	68fb      	ldr	r3, [r7, #12]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	08014d70 	.word	0x08014d70
 80091cc:	08014e00 	.word	0x08014e00
 80091d0:	08014dc4 	.word	0x08014dc4
 80091d4:	08017538 	.word	0x08017538

080091d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	f003 0303 	and.w	r3, r3, #3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d006      	beq.n	80091fa <do_memp_free_pool+0x22>
 80091ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009218 <do_memp_free_pool+0x40>)
 80091ee:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80091f2:	490a      	ldr	r1, [pc, #40]	@ (800921c <do_memp_free_pool+0x44>)
 80091f4:	480a      	ldr	r0, [pc, #40]	@ (8009220 <do_memp_free_pool+0x48>)
 80091f6:	f00a f925 	bl	8013444 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009210:	bf00      	nop
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	08014d70 	.word	0x08014d70
 800921c:	08014e20 	.word	0x08014e20
 8009220:	08014dc4 	.word	0x08014dc4

08009224 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d106      	bne.n	8009242 <memp_free_pool+0x1e>
 8009234:	4b0a      	ldr	r3, [pc, #40]	@ (8009260 <memp_free_pool+0x3c>)
 8009236:	f240 1295 	movw	r2, #405	@ 0x195
 800923a:	490a      	ldr	r1, [pc, #40]	@ (8009264 <memp_free_pool+0x40>)
 800923c:	480a      	ldr	r0, [pc, #40]	@ (8009268 <memp_free_pool+0x44>)
 800923e:	f00a f901 	bl	8013444 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d007      	beq.n	8009258 <memp_free_pool+0x34>
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d004      	beq.n	8009258 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff ffc1 	bl	80091d8 <do_memp_free_pool>
 8009256:	e000      	b.n	800925a <memp_free_pool+0x36>
    return;
 8009258:	bf00      	nop
}
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	08014d70 	.word	0x08014d70
 8009264:	08014dec 	.word	0x08014dec
 8009268:	08014dc4 	.word	0x08014dc4

0800926c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	4603      	mov	r3, r0
 8009274:	6039      	str	r1, [r7, #0]
 8009276:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009278:	79fb      	ldrb	r3, [r7, #7]
 800927a:	2b08      	cmp	r3, #8
 800927c:	d907      	bls.n	800928e <memp_free+0x22>
 800927e:	4b0c      	ldr	r3, [pc, #48]	@ (80092b0 <memp_free+0x44>)
 8009280:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8009284:	490b      	ldr	r1, [pc, #44]	@ (80092b4 <memp_free+0x48>)
 8009286:	480c      	ldr	r0, [pc, #48]	@ (80092b8 <memp_free+0x4c>)
 8009288:	f00a f8dc 	bl	8013444 <iprintf>
 800928c:	e00c      	b.n	80092a8 <memp_free+0x3c>

  if (mem == NULL) {
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d008      	beq.n	80092a6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	4a09      	ldr	r2, [pc, #36]	@ (80092bc <memp_free+0x50>)
 8009298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	4618      	mov	r0, r3
 80092a0:	f7ff ff9a 	bl	80091d8 <do_memp_free_pool>
 80092a4:	e000      	b.n	80092a8 <memp_free+0x3c>
    return;
 80092a6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	08014d70 	.word	0x08014d70
 80092b4:	08014e40 	.word	0x08014e40
 80092b8:	08014dc4 	.word	0x08014dc4
 80092bc:	08017538 	.word	0x08017538

080092c0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80092c0:	b480      	push	{r7}
 80092c2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80092c4:	bf00      	nop
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
	...

080092d0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d108      	bne.n	80092f6 <netif_add+0x26>
 80092e4:	4b57      	ldr	r3, [pc, #348]	@ (8009444 <netif_add+0x174>)
 80092e6:	f240 1227 	movw	r2, #295	@ 0x127
 80092ea:	4957      	ldr	r1, [pc, #348]	@ (8009448 <netif_add+0x178>)
 80092ec:	4857      	ldr	r0, [pc, #348]	@ (800944c <netif_add+0x17c>)
 80092ee:	f00a f8a9 	bl	8013444 <iprintf>
 80092f2:	2300      	movs	r3, #0
 80092f4:	e0a2      	b.n	800943c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80092f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d108      	bne.n	800930e <netif_add+0x3e>
 80092fc:	4b51      	ldr	r3, [pc, #324]	@ (8009444 <netif_add+0x174>)
 80092fe:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8009302:	4953      	ldr	r1, [pc, #332]	@ (8009450 <netif_add+0x180>)
 8009304:	4851      	ldr	r0, [pc, #324]	@ (800944c <netif_add+0x17c>)
 8009306:	f00a f89d 	bl	8013444 <iprintf>
 800930a:	2300      	movs	r3, #0
 800930c:	e096      	b.n	800943c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009314:	4b4f      	ldr	r3, [pc, #316]	@ (8009454 <netif_add+0x184>)
 8009316:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800931e:	4b4d      	ldr	r3, [pc, #308]	@ (8009454 <netif_add+0x184>)
 8009320:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009328:	4b4a      	ldr	r3, [pc, #296]	@ (8009454 <netif_add+0x184>)
 800932a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	4a45      	ldr	r2, [pc, #276]	@ (8009458 <netif_add+0x188>)
 8009342:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6a3a      	ldr	r2, [r7, #32]
 800935c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800935e:	4b3f      	ldr	r3, [pc, #252]	@ (800945c <netif_add+0x18c>)
 8009360:	781a      	ldrb	r2, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800936c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 f913 	bl	80095a0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800937a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	4798      	blx	r3
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <netif_add+0xba>
    return NULL;
 8009386:	2300      	movs	r3, #0
 8009388:	e058      	b.n	800943c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009390:	2bff      	cmp	r3, #255	@ 0xff
 8009392:	d103      	bne.n	800939c <netif_add+0xcc>
        netif->num = 0;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800939c:	2300      	movs	r3, #0
 800939e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80093a0:	4b2f      	ldr	r3, [pc, #188]	@ (8009460 <netif_add+0x190>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	617b      	str	r3, [r7, #20]
 80093a6:	e02b      	b.n	8009400 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d106      	bne.n	80093be <netif_add+0xee>
 80093b0:	4b24      	ldr	r3, [pc, #144]	@ (8009444 <netif_add+0x174>)
 80093b2:	f240 128b 	movw	r2, #395	@ 0x18b
 80093b6:	492b      	ldr	r1, [pc, #172]	@ (8009464 <netif_add+0x194>)
 80093b8:	4824      	ldr	r0, [pc, #144]	@ (800944c <netif_add+0x17c>)
 80093ba:	f00a f843 	bl	8013444 <iprintf>
        num_netifs++;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	3301      	adds	r3, #1
 80093c2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	2bff      	cmp	r3, #255	@ 0xff
 80093c8:	dd06      	ble.n	80093d8 <netif_add+0x108>
 80093ca:	4b1e      	ldr	r3, [pc, #120]	@ (8009444 <netif_add+0x174>)
 80093cc:	f240 128d 	movw	r2, #397	@ 0x18d
 80093d0:	4925      	ldr	r1, [pc, #148]	@ (8009468 <netif_add+0x198>)
 80093d2:	481e      	ldr	r0, [pc, #120]	@ (800944c <netif_add+0x17c>)
 80093d4:	f00a f836 	bl	8013444 <iprintf>
        if (netif2->num == netif->num) {
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d108      	bne.n	80093fa <netif_add+0x12a>
          netif->num++;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80093ee:	3301      	adds	r3, #1
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80093f8:	e005      	b.n	8009406 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	617b      	str	r3, [r7, #20]
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1d0      	bne.n	80093a8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1be      	bne.n	800938a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009412:	2bfe      	cmp	r3, #254	@ 0xfe
 8009414:	d103      	bne.n	800941e <netif_add+0x14e>
    netif_num = 0;
 8009416:	4b11      	ldr	r3, [pc, #68]	@ (800945c <netif_add+0x18c>)
 8009418:	2200      	movs	r2, #0
 800941a:	701a      	strb	r2, [r3, #0]
 800941c:	e006      	b.n	800942c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009424:	3301      	adds	r3, #1
 8009426:	b2da      	uxtb	r2, r3
 8009428:	4b0c      	ldr	r3, [pc, #48]	@ (800945c <netif_add+0x18c>)
 800942a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800942c:	4b0c      	ldr	r3, [pc, #48]	@ (8009460 <netif_add+0x190>)
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009434:	4a0a      	ldr	r2, [pc, #40]	@ (8009460 <netif_add+0x190>)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800943a:	68fb      	ldr	r3, [r7, #12]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	08014e5c 	.word	0x08014e5c
 8009448:	08014ef0 	.word	0x08014ef0
 800944c:	08014eac 	.word	0x08014eac
 8009450:	08014f0c 	.word	0x08014f0c
 8009454:	0801759c 	.word	0x0801759c
 8009458:	0800987b 	.word	0x0800987b
 800945c:	240431f8 	.word	0x240431f8
 8009460:	240431f0 	.word	0x240431f0
 8009464:	08014f30 	.word	0x08014f30
 8009468:	08014f44 	.word	0x08014f44

0800946c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f002 fe53 	bl	800c124 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f007 fbc3 	bl	8010c0c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009486:	bf00      	nop
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d106      	bne.n	80094b0 <netif_do_set_ipaddr+0x20>
 80094a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009518 <netif_do_set_ipaddr+0x88>)
 80094a4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80094a8:	491c      	ldr	r1, [pc, #112]	@ (800951c <netif_do_set_ipaddr+0x8c>)
 80094aa:	481d      	ldr	r0, [pc, #116]	@ (8009520 <netif_do_set_ipaddr+0x90>)
 80094ac:	f009 ffca 	bl	8013444 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d106      	bne.n	80094c4 <netif_do_set_ipaddr+0x34>
 80094b6:	4b18      	ldr	r3, [pc, #96]	@ (8009518 <netif_do_set_ipaddr+0x88>)
 80094b8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80094bc:	4917      	ldr	r1, [pc, #92]	@ (800951c <netif_do_set_ipaddr+0x8c>)
 80094be:	4818      	ldr	r0, [pc, #96]	@ (8009520 <netif_do_set_ipaddr+0x90>)
 80094c0:	f009 ffc0 	bl	8013444 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	3304      	adds	r3, #4
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d01c      	beq.n	800950c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3304      	adds	r3, #4
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80094e2:	f107 0314 	add.w	r3, r7, #20
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7ff ffbf 	bl	800946c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d002      	beq.n	80094fa <netif_do_set_ipaddr+0x6a>
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	e000      	b.n	80094fc <netif_do_set_ipaddr+0x6c>
 80094fa:	2300      	movs	r3, #0
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009500:	2101      	movs	r1, #1
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 f8d2 	bl	80096ac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009508:	2301      	movs	r3, #1
 800950a:	e000      	b.n	800950e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	08014e5c 	.word	0x08014e5c
 800951c:	08014f74 	.word	0x08014f74
 8009520:	08014eac 	.word	0x08014eac

08009524 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	3308      	adds	r3, #8
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	429a      	cmp	r2, r3
 800953c:	d00a      	beq.n	8009554 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <netif_do_set_netmask+0x26>
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	e000      	b.n	800954c <netif_do_set_netmask+0x28>
 800954a:	2300      	movs	r3, #0
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009550:	2301      	movs	r3, #1
 8009552:	e000      	b.n	8009556 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	330c      	adds	r3, #12
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	429a      	cmp	r2, r3
 800957a:	d00a      	beq.n	8009592 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d002      	beq.n	8009588 <netif_do_set_gw+0x26>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	e000      	b.n	800958a <netif_do_set_gw+0x28>
 8009588:	2300      	movs	r3, #0
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800958e:	2301      	movs	r3, #1
 8009590:	e000      	b.n	8009594 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
 80095ac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80095b2:	2300      	movs	r3, #0
 80095b4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80095bc:	4b1c      	ldr	r3, [pc, #112]	@ (8009630 <netif_set_addr+0x90>)
 80095be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80095c6:	4b1a      	ldr	r3, [pc, #104]	@ (8009630 <netif_set_addr+0x90>)
 80095c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80095d0:	4b17      	ldr	r3, [pc, #92]	@ (8009630 <netif_set_addr+0x90>)
 80095d2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <netif_set_addr+0x42>
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <netif_set_addr+0x46>
 80095e2:	2301      	movs	r3, #1
 80095e4:	e000      	b.n	80095e8 <netif_set_addr+0x48>
 80095e6:	2300      	movs	r3, #0
 80095e8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d006      	beq.n	80095fe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80095f0:	f107 0310 	add.w	r3, r7, #16
 80095f4:	461a      	mov	r2, r3
 80095f6:	68b9      	ldr	r1, [r7, #8]
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7ff ff49 	bl	8009490 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	6879      	ldr	r1, [r7, #4]
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f7ff ff8e 	bl	8009524 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009608:	69ba      	ldr	r2, [r7, #24]
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7ff ffa8 	bl	8009562 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d106      	bne.n	8009626 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009618:	f107 0310 	add.w	r3, r7, #16
 800961c:	461a      	mov	r2, r3
 800961e:	68b9      	ldr	r1, [r7, #8]
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7ff ff35 	bl	8009490 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009626:	bf00      	nop
 8009628:	3720      	adds	r7, #32
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	0801759c 	.word	0x0801759c

08009634 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800963c:	4a04      	ldr	r2, [pc, #16]	@ (8009650 <netif_set_default+0x1c>)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009642:	bf00      	nop
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	240431f4 	.word	0x240431f4

08009654 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d107      	bne.n	8009672 <netif_set_up+0x1e>
 8009662:	4b0f      	ldr	r3, [pc, #60]	@ (80096a0 <netif_set_up+0x4c>)
 8009664:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8009668:	490e      	ldr	r1, [pc, #56]	@ (80096a4 <netif_set_up+0x50>)
 800966a:	480f      	ldr	r0, [pc, #60]	@ (80096a8 <netif_set_up+0x54>)
 800966c:	f009 feea 	bl	8013444 <iprintf>
 8009670:	e013      	b.n	800969a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10c      	bne.n	800969a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	b2da      	uxtb	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009692:	2103      	movs	r1, #3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f809 	bl	80096ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	08014e5c 	.word	0x08014e5c
 80096a4:	08014fe4 	.word	0x08014fe4
 80096a8:	08014eac 	.word	0x08014eac

080096ac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d106      	bne.n	80096cc <netif_issue_reports+0x20>
 80096be:	4b18      	ldr	r3, [pc, #96]	@ (8009720 <netif_issue_reports+0x74>)
 80096c0:	f240 326d 	movw	r2, #877	@ 0x36d
 80096c4:	4917      	ldr	r1, [pc, #92]	@ (8009724 <netif_issue_reports+0x78>)
 80096c6:	4818      	ldr	r0, [pc, #96]	@ (8009728 <netif_issue_reports+0x7c>)
 80096c8:	f009 febc 	bl	8013444 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80096d2:	f003 0304 	and.w	r3, r3, #4
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d01e      	beq.n	8009718 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80096e0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d017      	beq.n	8009718 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80096e8:	78fb      	ldrb	r3, [r7, #3]
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d013      	beq.n	800971a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3304      	adds	r3, #4
 80096f6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00e      	beq.n	800971a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009702:	f003 0308 	and.w	r3, r3, #8
 8009706:	2b00      	cmp	r3, #0
 8009708:	d007      	beq.n	800971a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	3304      	adds	r3, #4
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f008 f9e5 	bl	8011ae0 <etharp_request>
 8009716:	e000      	b.n	800971a <netif_issue_reports+0x6e>
    return;
 8009718:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	08014e5c 	.word	0x08014e5c
 8009724:	08015000 	.word	0x08015000
 8009728:	08014eac 	.word	0x08014eac

0800972c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d107      	bne.n	800974a <netif_set_down+0x1e>
 800973a:	4b12      	ldr	r3, [pc, #72]	@ (8009784 <netif_set_down+0x58>)
 800973c:	f240 329b 	movw	r2, #923	@ 0x39b
 8009740:	4911      	ldr	r1, [pc, #68]	@ (8009788 <netif_set_down+0x5c>)
 8009742:	4812      	ldr	r0, [pc, #72]	@ (800978c <netif_set_down+0x60>)
 8009744:	f009 fe7e 	bl	8013444 <iprintf>
 8009748:	e019      	b.n	800977e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b00      	cmp	r3, #0
 8009756:	d012      	beq.n	800977e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800975e:	f023 0301 	bic.w	r3, r3, #1
 8009762:	b2da      	uxtb	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009770:	f003 0308 	and.w	r3, r3, #8
 8009774:	2b00      	cmp	r3, #0
 8009776:	d002      	beq.n	800977e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f007 fd6f 	bl	801125c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	08014e5c 	.word	0x08014e5c
 8009788:	08015024 	.word	0x08015024
 800978c:	08014eac 	.word	0x08014eac

08009790 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d107      	bne.n	80097ae <netif_set_link_up+0x1e>
 800979e:	4b13      	ldr	r3, [pc, #76]	@ (80097ec <netif_set_link_up+0x5c>)
 80097a0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80097a4:	4912      	ldr	r1, [pc, #72]	@ (80097f0 <netif_set_link_up+0x60>)
 80097a6:	4813      	ldr	r0, [pc, #76]	@ (80097f4 <netif_set_link_up+0x64>)
 80097a8:	f009 fe4c 	bl	8013444 <iprintf>
 80097ac:	e01b      	b.n	80097e6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80097b4:	f003 0304 	and.w	r3, r3, #4
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d114      	bne.n	80097e6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80097c2:	f043 0304 	orr.w	r3, r3, #4
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80097ce:	2103      	movs	r1, #3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7ff ff6b 	bl	80096ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <netif_set_link_up+0x56>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	08014e5c 	.word	0x08014e5c
 80097f0:	08015044 	.word	0x08015044
 80097f4:	08014eac 	.word	0x08014eac

080097f8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d107      	bne.n	8009816 <netif_set_link_down+0x1e>
 8009806:	4b11      	ldr	r3, [pc, #68]	@ (800984c <netif_set_link_down+0x54>)
 8009808:	f240 4206 	movw	r2, #1030	@ 0x406
 800980c:	4910      	ldr	r1, [pc, #64]	@ (8009850 <netif_set_link_down+0x58>)
 800980e:	4811      	ldr	r0, [pc, #68]	@ (8009854 <netif_set_link_down+0x5c>)
 8009810:	f009 fe18 	bl	8013444 <iprintf>
 8009814:	e017      	b.n	8009846 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800981c:	f003 0304 	and.w	r3, r3, #4
 8009820:	2b00      	cmp	r3, #0
 8009822:	d010      	beq.n	8009846 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800982a:	f023 0304 	bic.w	r3, r3, #4
 800982e:	b2da      	uxtb	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <netif_set_link_down+0x4e>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	69db      	ldr	r3, [r3, #28]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	08014e5c 	.word	0x08014e5c
 8009850:	08015068 	.word	0x08015068
 8009854:	08014eac 	.word	0x08014eac

08009858 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	61da      	str	r2, [r3, #28]
  }
}
 800986e:	bf00      	nop
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800987a:	b480      	push	{r7}
 800987c:	b085      	sub	sp, #20
 800987e:	af00      	add	r7, sp, #0
 8009880:	60f8      	str	r0, [r7, #12]
 8009882:	60b9      	str	r1, [r7, #8]
 8009884:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009886:	f06f 030b 	mvn.w	r3, #11
}
 800988a:	4618      	mov	r0, r3
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
	...

08009898 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d013      	beq.n	80098d0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80098a8:	4b0d      	ldr	r3, [pc, #52]	@ (80098e0 <netif_get_by_index+0x48>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	60fb      	str	r3, [r7, #12]
 80098ae:	e00c      	b.n	80098ca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80098b6:	3301      	adds	r3, #1
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	79fa      	ldrb	r2, [r7, #7]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d101      	bne.n	80098c4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	e006      	b.n	80098d2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	60fb      	str	r3, [r7, #12]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1ef      	bne.n	80098b0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	240431f0 	.word	0x240431f0

080098e4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80098ea:	4b0c      	ldr	r3, [pc, #48]	@ (800991c <pbuf_free_ooseq+0x38>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80098f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009920 <pbuf_free_ooseq+0x3c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	607b      	str	r3, [r7, #4]
 80098f6:	e00a      	b.n	800990e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f002 fc4d 	bl	800c1a0 <tcp_free_ooseq>
      return;
 8009906:	e005      	b.n	8009914 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	607b      	str	r3, [r7, #4]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1f1      	bne.n	80098f8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	240431f9 	.word	0x240431f9
 8009920:	24043208 	.word	0x24043208

08009924 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009924:	b480      	push	{r7}
 8009926:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009928:	4b03      	ldr	r3, [pc, #12]	@ (8009938 <pbuf_pool_is_empty+0x14>)
 800992a:	2201      	movs	r2, #1
 800992c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800992e:	bf00      	nop
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	240431f9 	.word	0x240431f9

0800993c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	4611      	mov	r1, r2
 8009948:	461a      	mov	r2, r3
 800994a:	460b      	mov	r3, r1
 800994c:	80fb      	strh	r3, [r7, #6]
 800994e:	4613      	mov	r3, r2
 8009950:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	88fa      	ldrh	r2, [r7, #6]
 8009962:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	88ba      	ldrh	r2, [r7, #4]
 8009968:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800996a:	8b3b      	ldrh	r3, [r7, #24]
 800996c:	b2da      	uxtb	r2, r3
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	7f3a      	ldrb	r2, [r7, #28]
 8009976:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2201      	movs	r2, #1
 800997c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	73da      	strb	r2, [r3, #15]
}
 8009984:	bf00      	nop
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b08c      	sub	sp, #48	@ 0x30
 8009994:	af02      	add	r7, sp, #8
 8009996:	4603      	mov	r3, r0
 8009998:	71fb      	strb	r3, [r7, #7]
 800999a:	460b      	mov	r3, r1
 800999c:	80bb      	strh	r3, [r7, #4]
 800999e:	4613      	mov	r3, r2
 80099a0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80099a2:	79fb      	ldrb	r3, [r7, #7]
 80099a4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80099a6:	887b      	ldrh	r3, [r7, #2]
 80099a8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80099ac:	d07f      	beq.n	8009aae <pbuf_alloc+0x11e>
 80099ae:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80099b2:	f300 80c7 	bgt.w	8009b44 <pbuf_alloc+0x1b4>
 80099b6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80099ba:	d010      	beq.n	80099de <pbuf_alloc+0x4e>
 80099bc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80099c0:	f300 80c0 	bgt.w	8009b44 <pbuf_alloc+0x1b4>
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d002      	beq.n	80099ce <pbuf_alloc+0x3e>
 80099c8:	2b41      	cmp	r3, #65	@ 0x41
 80099ca:	f040 80bb 	bne.w	8009b44 <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80099ce:	887a      	ldrh	r2, [r7, #2]
 80099d0:	88bb      	ldrh	r3, [r7, #4]
 80099d2:	4619      	mov	r1, r3
 80099d4:	2000      	movs	r0, #0
 80099d6:	f000 f8d1 	bl	8009b7c <pbuf_alloc_reference>
 80099da:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80099dc:	e0bc      	b.n	8009b58 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80099de:	2300      	movs	r3, #0
 80099e0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80099e2:	2300      	movs	r3, #0
 80099e4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80099e6:	88bb      	ldrh	r3, [r7, #4]
 80099e8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80099ea:	2008      	movs	r0, #8
 80099ec:	f7ff fbce 	bl	800918c <memp_malloc>
 80099f0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d109      	bne.n	8009a0c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80099f8:	f7ff ff94 	bl	8009924 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80099fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009a02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009a04:	f000 faa6 	bl	8009f54 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	e0a6      	b.n	8009b5a <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009a0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009a0e:	3303      	adds	r3, #3
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	f023 0303 	bic.w	r3, r3, #3
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	8b7a      	ldrh	r2, [r7, #26]
 8009a20:	4293      	cmp	r3, r2
 8009a22:	bf28      	it	cs
 8009a24:	4613      	movcs	r3, r2
 8009a26:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009a28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009a2a:	3310      	adds	r3, #16
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	4413      	add	r3, r2
 8009a30:	3303      	adds	r3, #3
 8009a32:	f023 0303 	bic.w	r3, r3, #3
 8009a36:	4618      	mov	r0, r3
 8009a38:	89f9      	ldrh	r1, [r7, #14]
 8009a3a:	8b7a      	ldrh	r2, [r7, #26]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	9301      	str	r3, [sp, #4]
 8009a40:	887b      	ldrh	r3, [r7, #2]
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	460b      	mov	r3, r1
 8009a46:	4601      	mov	r1, r0
 8009a48:	6938      	ldr	r0, [r7, #16]
 8009a4a:	f7ff ff77 	bl	800993c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d006      	beq.n	8009a68 <pbuf_alloc+0xd8>
 8009a5a:	4b42      	ldr	r3, [pc, #264]	@ (8009b64 <pbuf_alloc+0x1d4>)
 8009a5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a60:	4941      	ldr	r1, [pc, #260]	@ (8009b68 <pbuf_alloc+0x1d8>)
 8009a62:	4842      	ldr	r0, [pc, #264]	@ (8009b6c <pbuf_alloc+0x1dc>)
 8009a64:	f009 fcee 	bl	8013444 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009a68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009a6a:	3303      	adds	r3, #3
 8009a6c:	f023 0303 	bic.w	r3, r3, #3
 8009a70:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8009a74:	d106      	bne.n	8009a84 <pbuf_alloc+0xf4>
 8009a76:	4b3b      	ldr	r3, [pc, #236]	@ (8009b64 <pbuf_alloc+0x1d4>)
 8009a78:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8009a7c:	493c      	ldr	r1, [pc, #240]	@ (8009b70 <pbuf_alloc+0x1e0>)
 8009a7e:	483b      	ldr	r0, [pc, #236]	@ (8009b6c <pbuf_alloc+0x1dc>)
 8009a80:	f009 fce0 	bl	8013444 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d102      	bne.n	8009a90 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a8e:	e002      	b.n	8009a96 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009a9a:	8b7a      	ldrh	r2, [r7, #26]
 8009a9c:	89fb      	ldrh	r3, [r7, #14]
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8009aa6:	8b7b      	ldrh	r3, [r7, #26]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d19e      	bne.n	80099ea <pbuf_alloc+0x5a>
      break;
 8009aac:	e054      	b.n	8009b58 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009aae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009ab0:	3303      	adds	r3, #3
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	f023 0303 	bic.w	r3, r3, #3
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	88bb      	ldrh	r3, [r7, #4]
 8009abc:	3303      	adds	r3, #3
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	f023 0303 	bic.w	r3, r3, #3
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	4413      	add	r3, r2
 8009ac8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009aca:	8b3b      	ldrh	r3, [r7, #24]
 8009acc:	3310      	adds	r3, #16
 8009ace:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009ad0:	8b3a      	ldrh	r2, [r7, #24]
 8009ad2:	88bb      	ldrh	r3, [r7, #4]
 8009ad4:	3303      	adds	r3, #3
 8009ad6:	f023 0303 	bic.w	r3, r3, #3
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d306      	bcc.n	8009aec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009ade:	88bb      	ldrh	r3, [r7, #4]
 8009ae0:	3303      	adds	r3, #3
 8009ae2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d201      	bcs.n	8009af0 <pbuf_alloc+0x160>
        return NULL;
 8009aec:	2300      	movs	r3, #0
 8009aee:	e034      	b.n	8009b5a <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009af0:	6978      	ldr	r0, [r7, #20]
 8009af2:	f7ff f9a7 	bl	8008e44 <mem_malloc>
 8009af6:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8009af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <pbuf_alloc+0x172>
        return NULL;
 8009afe:	2300      	movs	r3, #0
 8009b00:	e02b      	b.n	8009b5a <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009b02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009b04:	3310      	adds	r3, #16
 8009b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b08:	4413      	add	r3, r2
 8009b0a:	3303      	adds	r3, #3
 8009b0c:	f023 0303 	bic.w	r3, r3, #3
 8009b10:	4618      	mov	r0, r3
 8009b12:	88b9      	ldrh	r1, [r7, #4]
 8009b14:	88ba      	ldrh	r2, [r7, #4]
 8009b16:	2300      	movs	r3, #0
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	887b      	ldrh	r3, [r7, #2]
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4601      	mov	r1, r0
 8009b22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b24:	f7ff ff0a 	bl	800993c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	f003 0303 	and.w	r3, r3, #3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d010      	beq.n	8009b56 <pbuf_alloc+0x1c6>
 8009b34:	4b0b      	ldr	r3, [pc, #44]	@ (8009b64 <pbuf_alloc+0x1d4>)
 8009b36:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8009b3a:	490e      	ldr	r1, [pc, #56]	@ (8009b74 <pbuf_alloc+0x1e4>)
 8009b3c:	480b      	ldr	r0, [pc, #44]	@ (8009b6c <pbuf_alloc+0x1dc>)
 8009b3e:	f009 fc81 	bl	8013444 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009b42:	e008      	b.n	8009b56 <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009b44:	4b07      	ldr	r3, [pc, #28]	@ (8009b64 <pbuf_alloc+0x1d4>)
 8009b46:	f240 1227 	movw	r2, #295	@ 0x127
 8009b4a:	490b      	ldr	r1, [pc, #44]	@ (8009b78 <pbuf_alloc+0x1e8>)
 8009b4c:	4807      	ldr	r0, [pc, #28]	@ (8009b6c <pbuf_alloc+0x1dc>)
 8009b4e:	f009 fc79 	bl	8013444 <iprintf>
      return NULL;
 8009b52:	2300      	movs	r3, #0
 8009b54:	e001      	b.n	8009b5a <pbuf_alloc+0x1ca>
      break;
 8009b56:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3728      	adds	r7, #40	@ 0x28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	0801508c 	.word	0x0801508c
 8009b68:	080150bc 	.word	0x080150bc
 8009b6c:	080150ec 	.word	0x080150ec
 8009b70:	08015114 	.word	0x08015114
 8009b74:	08015148 	.word	0x08015148
 8009b78:	08015174 	.word	0x08015174

08009b7c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af02      	add	r7, sp, #8
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	460b      	mov	r3, r1
 8009b86:	807b      	strh	r3, [r7, #2]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009b8c:	883b      	ldrh	r3, [r7, #0]
 8009b8e:	2b41      	cmp	r3, #65	@ 0x41
 8009b90:	d009      	beq.n	8009ba6 <pbuf_alloc_reference+0x2a>
 8009b92:	883b      	ldrh	r3, [r7, #0]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d006      	beq.n	8009ba6 <pbuf_alloc_reference+0x2a>
 8009b98:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd8 <pbuf_alloc_reference+0x5c>)
 8009b9a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8009b9e:	490f      	ldr	r1, [pc, #60]	@ (8009bdc <pbuf_alloc_reference+0x60>)
 8009ba0:	480f      	ldr	r0, [pc, #60]	@ (8009be0 <pbuf_alloc_reference+0x64>)
 8009ba2:	f009 fc4f 	bl	8013444 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009ba6:	2007      	movs	r0, #7
 8009ba8:	f7ff faf0 	bl	800918c <memp_malloc>
 8009bac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	e00b      	b.n	8009bd0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009bb8:	8879      	ldrh	r1, [r7, #2]
 8009bba:	887a      	ldrh	r2, [r7, #2]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	9301      	str	r3, [sp, #4]
 8009bc0:	883b      	ldrh	r3, [r7, #0]
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff feb7 	bl	800993c <pbuf_init_alloced_pbuf>
  return p;
 8009bce:	68fb      	ldr	r3, [r7, #12]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	0801508c 	.word	0x0801508c
 8009bdc:	08015190 	.word	0x08015190
 8009be0:	080150ec 	.word	0x080150ec

08009be4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	607b      	str	r3, [r7, #4]
 8009bec:	4603      	mov	r3, r0
 8009bee:	73fb      	strb	r3, [r7, #15]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	81bb      	strh	r3, [r7, #12]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009bfc:	8a7b      	ldrh	r3, [r7, #18]
 8009bfe:	3303      	adds	r3, #3
 8009c00:	f023 0203 	bic.w	r2, r3, #3
 8009c04:	89bb      	ldrh	r3, [r7, #12]
 8009c06:	441a      	add	r2, r3
 8009c08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d901      	bls.n	8009c12 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	e018      	b.n	8009c44 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d007      	beq.n	8009c28 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009c18:	8a7b      	ldrh	r3, [r7, #18]
 8009c1a:	3303      	adds	r3, #3
 8009c1c:	f023 0303 	bic.w	r3, r3, #3
 8009c20:	6a3a      	ldr	r2, [r7, #32]
 8009c22:	4413      	add	r3, r2
 8009c24:	617b      	str	r3, [r7, #20]
 8009c26:	e001      	b.n	8009c2c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	89b9      	ldrh	r1, [r7, #12]
 8009c30:	89ba      	ldrh	r2, [r7, #12]
 8009c32:	2302      	movs	r3, #2
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	897b      	ldrh	r3, [r7, #10]
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	6979      	ldr	r1, [r7, #20]
 8009c3e:	f7ff fe7d 	bl	800993c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009c42:	687b      	ldr	r3, [r7, #4]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3718      	adds	r7, #24
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d106      	bne.n	8009c6c <pbuf_realloc+0x20>
 8009c5e:	4b39      	ldr	r3, [pc, #228]	@ (8009d44 <pbuf_realloc+0xf8>)
 8009c60:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8009c64:	4938      	ldr	r1, [pc, #224]	@ (8009d48 <pbuf_realloc+0xfc>)
 8009c66:	4839      	ldr	r0, [pc, #228]	@ (8009d4c <pbuf_realloc+0x100>)
 8009c68:	f009 fbec 	bl	8013444 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	891b      	ldrh	r3, [r3, #8]
 8009c70:	887a      	ldrh	r2, [r7, #2]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d261      	bcs.n	8009d3a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	891a      	ldrh	r2, [r3, #8]
 8009c7a:	887b      	ldrh	r3, [r7, #2]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009c80:	887b      	ldrh	r3, [r7, #2]
 8009c82:	817b      	strh	r3, [r7, #10]
  q = p;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009c88:	e018      	b.n	8009cbc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	895b      	ldrh	r3, [r3, #10]
 8009c8e:	897a      	ldrh	r2, [r7, #10]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	891a      	ldrh	r2, [r3, #8]
 8009c98:	893b      	ldrh	r3, [r7, #8]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d106      	bne.n	8009cbc <pbuf_realloc+0x70>
 8009cae:	4b25      	ldr	r3, [pc, #148]	@ (8009d44 <pbuf_realloc+0xf8>)
 8009cb0:	f240 12af 	movw	r2, #431	@ 0x1af
 8009cb4:	4926      	ldr	r1, [pc, #152]	@ (8009d50 <pbuf_realloc+0x104>)
 8009cb6:	4825      	ldr	r0, [pc, #148]	@ (8009d4c <pbuf_realloc+0x100>)
 8009cb8:	f009 fbc4 	bl	8013444 <iprintf>
  while (rem_len > q->len) {
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	895b      	ldrh	r3, [r3, #10]
 8009cc0:	897a      	ldrh	r2, [r7, #10]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d8e1      	bhi.n	8009c8a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	7b1b      	ldrb	r3, [r3, #12]
 8009cca:	f003 030f 	and.w	r3, r3, #15
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d11f      	bne.n	8009d12 <pbuf_realloc+0xc6>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	895b      	ldrh	r3, [r3, #10]
 8009cd6:	897a      	ldrh	r2, [r7, #10]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d01a      	beq.n	8009d12 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	7b5b      	ldrb	r3, [r3, #13]
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d114      	bne.n	8009d12 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	1ad2      	subs	r2, r2, r3
 8009cf0:	897b      	ldrh	r3, [r7, #10]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f7fe ffb0 	bl	8008c5c <mem_trim>
 8009cfc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d106      	bne.n	8009d12 <pbuf_realloc+0xc6>
 8009d04:	4b0f      	ldr	r3, [pc, #60]	@ (8009d44 <pbuf_realloc+0xf8>)
 8009d06:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8009d0a:	4912      	ldr	r1, [pc, #72]	@ (8009d54 <pbuf_realloc+0x108>)
 8009d0c:	480f      	ldr	r0, [pc, #60]	@ (8009d4c <pbuf_realloc+0x100>)
 8009d0e:	f009 fb99 	bl	8013444 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	897a      	ldrh	r2, [r7, #10]
 8009d16:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	895a      	ldrh	r2, [r3, #10]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d004      	beq.n	8009d32 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 f911 	bl	8009f54 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	e000      	b.n	8009d3c <pbuf_realloc+0xf0>
    return;
 8009d3a:	bf00      	nop

}
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	0801508c 	.word	0x0801508c
 8009d48:	080151a4 	.word	0x080151a4
 8009d4c:	080150ec 	.word	0x080150ec
 8009d50:	080151bc 	.word	0x080151bc
 8009d54:	080151d4 	.word	0x080151d4

08009d58 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	4613      	mov	r3, r2
 8009d64:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d106      	bne.n	8009d7a <pbuf_add_header_impl+0x22>
 8009d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8009e1c <pbuf_add_header_impl+0xc4>)
 8009d6e:	f240 12df 	movw	r2, #479	@ 0x1df
 8009d72:	492b      	ldr	r1, [pc, #172]	@ (8009e20 <pbuf_add_header_impl+0xc8>)
 8009d74:	482b      	ldr	r0, [pc, #172]	@ (8009e24 <pbuf_add_header_impl+0xcc>)
 8009d76:	f009 fb65 	bl	8013444 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <pbuf_add_header_impl+0x30>
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d86:	d301      	bcc.n	8009d8c <pbuf_add_header_impl+0x34>
    return 1;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e043      	b.n	8009e14 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <pbuf_add_header_impl+0x3e>
    return 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	e03e      	b.n	8009e14 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	891a      	ldrh	r2, [r3, #8]
 8009d9e:	8a7b      	ldrh	r3, [r7, #18]
 8009da0:	4413      	add	r3, r2
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	8a7a      	ldrh	r2, [r7, #18]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d901      	bls.n	8009dae <pbuf_add_header_impl+0x56>
    return 1;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e032      	b.n	8009e14 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	7b1b      	ldrb	r3, [r3, #12]
 8009db2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009db4:	8a3b      	ldrh	r3, [r7, #16]
 8009db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00c      	beq.n	8009dd8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	425b      	negs	r3, r3
 8009dc6:	4413      	add	r3, r2
 8009dc8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	3310      	adds	r3, #16
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d20d      	bcs.n	8009df0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e01d      	b.n	8009e14 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009dd8:	79fb      	ldrb	r3, [r7, #7]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d006      	beq.n	8009dec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	425b      	negs	r3, r3
 8009de6:	4413      	add	r3, r2
 8009de8:	617b      	str	r3, [r7, #20]
 8009dea:	e001      	b.n	8009df0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e011      	b.n	8009e14 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	697a      	ldr	r2, [r7, #20]
 8009df4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	895a      	ldrh	r2, [r3, #10]
 8009dfa:	8a7b      	ldrh	r3, [r7, #18]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	891a      	ldrh	r2, [r3, #8]
 8009e08:	8a7b      	ldrh	r3, [r7, #18]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	811a      	strh	r2, [r3, #8]


  return 0;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	0801508c 	.word	0x0801508c
 8009e20:	080151f0 	.word	0x080151f0
 8009e24:	080150ec 	.word	0x080150ec

08009e28 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009e32:	2200      	movs	r2, #0
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7ff ff8e 	bl	8009d58 <pbuf_add_header_impl>
 8009e3c:	4603      	mov	r3, r0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d106      	bne.n	8009e66 <pbuf_remove_header+0x1e>
 8009e58:	4b20      	ldr	r3, [pc, #128]	@ (8009edc <pbuf_remove_header+0x94>)
 8009e5a:	f240 224b 	movw	r2, #587	@ 0x24b
 8009e5e:	4920      	ldr	r1, [pc, #128]	@ (8009ee0 <pbuf_remove_header+0x98>)
 8009e60:	4820      	ldr	r0, [pc, #128]	@ (8009ee4 <pbuf_remove_header+0x9c>)
 8009e62:	f009 faef 	bl	8013444 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d003      	beq.n	8009e74 <pbuf_remove_header+0x2c>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e72:	d301      	bcc.n	8009e78 <pbuf_remove_header+0x30>
    return 1;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e02c      	b.n	8009ed2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <pbuf_remove_header+0x3a>
    return 0;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	e027      	b.n	8009ed2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	895b      	ldrh	r3, [r3, #10]
 8009e8a:	89fa      	ldrh	r2, [r7, #14]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d908      	bls.n	8009ea2 <pbuf_remove_header+0x5a>
 8009e90:	4b12      	ldr	r3, [pc, #72]	@ (8009edc <pbuf_remove_header+0x94>)
 8009e92:	f240 2255 	movw	r2, #597	@ 0x255
 8009e96:	4914      	ldr	r1, [pc, #80]	@ (8009ee8 <pbuf_remove_header+0xa0>)
 8009e98:	4812      	ldr	r0, [pc, #72]	@ (8009ee4 <pbuf_remove_header+0x9c>)
 8009e9a:	f009 fad3 	bl	8013444 <iprintf>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e017      	b.n	8009ed2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	441a      	add	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	895a      	ldrh	r2, [r3, #10]
 8009eb8:	89fb      	ldrh	r3, [r7, #14]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	891a      	ldrh	r2, [r3, #8]
 8009ec6:	89fb      	ldrh	r3, [r7, #14]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	0801508c 	.word	0x0801508c
 8009ee0:	080151f0 	.word	0x080151f0
 8009ee4:	080150ec 	.word	0x080150ec
 8009ee8:	080151fc 	.word	0x080151fc

08009eec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	807b      	strh	r3, [r7, #2]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009efc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	da08      	bge.n	8009f16 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009f04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f08:	425b      	negs	r3, r3
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7ff ff9b 	bl	8009e48 <pbuf_remove_header>
 8009f12:	4603      	mov	r3, r0
 8009f14:	e007      	b.n	8009f26 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009f16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f1a:	787a      	ldrb	r2, [r7, #1]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7ff ff1a 	bl	8009d58 <pbuf_add_header_impl>
 8009f24:	4603      	mov	r3, r0
  }
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	460b      	mov	r3, r1
 8009f38:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009f3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7ff ffd2 	bl	8009eec <pbuf_header_impl>
 8009f48:	4603      	mov	r3, r0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
	...

08009f54 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d10b      	bne.n	8009f7a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d106      	bne.n	8009f76 <pbuf_free+0x22>
 8009f68:	4b38      	ldr	r3, [pc, #224]	@ (800a04c <pbuf_free+0xf8>)
 8009f6a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8009f6e:	4938      	ldr	r1, [pc, #224]	@ (800a050 <pbuf_free+0xfc>)
 8009f70:	4838      	ldr	r0, [pc, #224]	@ (800a054 <pbuf_free+0x100>)
 8009f72:	f009 fa67 	bl	8013444 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	e063      	b.n	800a042 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009f7e:	e05c      	b.n	800a03a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	7b9b      	ldrb	r3, [r3, #14]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d106      	bne.n	8009f96 <pbuf_free+0x42>
 8009f88:	4b30      	ldr	r3, [pc, #192]	@ (800a04c <pbuf_free+0xf8>)
 8009f8a:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8009f8e:	4932      	ldr	r1, [pc, #200]	@ (800a058 <pbuf_free+0x104>)
 8009f90:	4830      	ldr	r0, [pc, #192]	@ (800a054 <pbuf_free+0x100>)
 8009f92:	f009 fa57 	bl	8013444 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	7b9b      	ldrb	r3, [r3, #14]
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	739a      	strb	r2, [r3, #14]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	7b9b      	ldrb	r3, [r3, #14]
 8009fa6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009fa8:	7dbb      	ldrb	r3, [r7, #22]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d143      	bne.n	800a036 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	7b1b      	ldrb	r3, [r3, #12]
 8009fb8:	f003 030f 	and.w	r3, r3, #15
 8009fbc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	7b5b      	ldrb	r3, [r3, #13]
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d011      	beq.n	8009fee <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d106      	bne.n	8009fe4 <pbuf_free+0x90>
 8009fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800a04c <pbuf_free+0xf8>)
 8009fd8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8009fdc:	491f      	ldr	r1, [pc, #124]	@ (800a05c <pbuf_free+0x108>)
 8009fde:	481d      	ldr	r0, [pc, #116]	@ (800a054 <pbuf_free+0x100>)
 8009fe0:	f009 fa30 	bl	8013444 <iprintf>
        pc->custom_free_function(p);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	4798      	blx	r3
 8009fec:	e01d      	b.n	800a02a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d104      	bne.n	8009ffe <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009ff4:	6879      	ldr	r1, [r7, #4]
 8009ff6:	2008      	movs	r0, #8
 8009ff8:	f7ff f938 	bl	800926c <memp_free>
 8009ffc:	e015      	b.n	800a02a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d104      	bne.n	800a00e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a004:	6879      	ldr	r1, [r7, #4]
 800a006:	2007      	movs	r0, #7
 800a008:	f7ff f930 	bl	800926c <memp_free>
 800a00c:	e00d      	b.n	800a02a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d103      	bne.n	800a01c <pbuf_free+0xc8>
          mem_free(p);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7fe fdb7 	bl	8008b88 <mem_free>
 800a01a:	e006      	b.n	800a02a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a01c:	4b0b      	ldr	r3, [pc, #44]	@ (800a04c <pbuf_free+0xf8>)
 800a01e:	f240 320f 	movw	r2, #783	@ 0x30f
 800a022:	490f      	ldr	r1, [pc, #60]	@ (800a060 <pbuf_free+0x10c>)
 800a024:	480b      	ldr	r0, [pc, #44]	@ (800a054 <pbuf_free+0x100>)
 800a026:	f009 fa0d 	bl	8013444 <iprintf>
        }
      }
      count++;
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
 800a02c:	3301      	adds	r3, #1
 800a02e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	607b      	str	r3, [r7, #4]
 800a034:	e001      	b.n	800a03a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a036:	2300      	movs	r3, #0
 800a038:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d19f      	bne.n	8009f80 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a040:	7dfb      	ldrb	r3, [r7, #23]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	0801508c 	.word	0x0801508c
 800a050:	080151f0 	.word	0x080151f0
 800a054:	080150ec 	.word	0x080150ec
 800a058:	0801521c 	.word	0x0801521c
 800a05c:	08015234 	.word	0x08015234
 800a060:	08015258 	.word	0x08015258

0800a064 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a070:	e005      	b.n	800a07e <pbuf_clen+0x1a>
    ++len;
 800a072:	89fb      	ldrh	r3, [r7, #14]
 800a074:	3301      	adds	r3, #1
 800a076:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1f6      	bne.n	800a072 <pbuf_clen+0xe>
  }
  return len;
 800a084:	89fb      	ldrh	r3, [r7, #14]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
	...

0800a094 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d010      	beq.n	800a0c4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	7b9b      	ldrb	r3, [r3, #14]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	7b9b      	ldrb	r3, [r3, #14]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d106      	bne.n	800a0c4 <pbuf_ref+0x30>
 800a0b6:	4b05      	ldr	r3, [pc, #20]	@ (800a0cc <pbuf_ref+0x38>)
 800a0b8:	f240 3242 	movw	r2, #834	@ 0x342
 800a0bc:	4904      	ldr	r1, [pc, #16]	@ (800a0d0 <pbuf_ref+0x3c>)
 800a0be:	4805      	ldr	r0, [pc, #20]	@ (800a0d4 <pbuf_ref+0x40>)
 800a0c0:	f009 f9c0 	bl	8013444 <iprintf>
  }
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	0801508c 	.word	0x0801508c
 800a0d0:	0801526c 	.word	0x0801526c
 800a0d4:	080150ec 	.word	0x080150ec

0800a0d8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <pbuf_cat+0x16>
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d107      	bne.n	800a0fe <pbuf_cat+0x26>
 800a0ee:	4b20      	ldr	r3, [pc, #128]	@ (800a170 <pbuf_cat+0x98>)
 800a0f0:	f240 3259 	movw	r2, #857	@ 0x359
 800a0f4:	491f      	ldr	r1, [pc, #124]	@ (800a174 <pbuf_cat+0x9c>)
 800a0f6:	4820      	ldr	r0, [pc, #128]	@ (800a178 <pbuf_cat+0xa0>)
 800a0f8:	f009 f9a4 	bl	8013444 <iprintf>
 800a0fc:	e034      	b.n	800a168 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	60fb      	str	r3, [r7, #12]
 800a102:	e00a      	b.n	800a11a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	891a      	ldrh	r2, [r3, #8]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	891b      	ldrh	r3, [r3, #8]
 800a10c:	4413      	add	r3, r2
 800a10e:	b29a      	uxth	r2, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	60fb      	str	r3, [r7, #12]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1f0      	bne.n	800a104 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	891a      	ldrh	r2, [r3, #8]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	895b      	ldrh	r3, [r3, #10]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d006      	beq.n	800a13c <pbuf_cat+0x64>
 800a12e:	4b10      	ldr	r3, [pc, #64]	@ (800a170 <pbuf_cat+0x98>)
 800a130:	f240 3262 	movw	r2, #866	@ 0x362
 800a134:	4911      	ldr	r1, [pc, #68]	@ (800a17c <pbuf_cat+0xa4>)
 800a136:	4810      	ldr	r0, [pc, #64]	@ (800a178 <pbuf_cat+0xa0>)
 800a138:	f009 f984 	bl	8013444 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d006      	beq.n	800a152 <pbuf_cat+0x7a>
 800a144:	4b0a      	ldr	r3, [pc, #40]	@ (800a170 <pbuf_cat+0x98>)
 800a146:	f240 3263 	movw	r2, #867	@ 0x363
 800a14a:	490d      	ldr	r1, [pc, #52]	@ (800a180 <pbuf_cat+0xa8>)
 800a14c:	480a      	ldr	r0, [pc, #40]	@ (800a178 <pbuf_cat+0xa0>)
 800a14e:	f009 f979 	bl	8013444 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	891a      	ldrh	r2, [r3, #8]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	891b      	ldrh	r3, [r3, #8]
 800a15a:	4413      	add	r3, r2
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	0801508c 	.word	0x0801508c
 800a174:	08015280 	.word	0x08015280
 800a178:	080150ec 	.word	0x080150ec
 800a17c:	080152b8 	.word	0x080152b8
 800a180:	080152e8 	.word	0x080152e8

0800a184 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a18e:	2300      	movs	r3, #0
 800a190:	617b      	str	r3, [r7, #20]
 800a192:	2300      	movs	r3, #0
 800a194:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d008      	beq.n	800a1ae <pbuf_copy+0x2a>
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d005      	beq.n	800a1ae <pbuf_copy+0x2a>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	891a      	ldrh	r2, [r3, #8]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	891b      	ldrh	r3, [r3, #8]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d209      	bcs.n	800a1c2 <pbuf_copy+0x3e>
 800a1ae:	4b57      	ldr	r3, [pc, #348]	@ (800a30c <pbuf_copy+0x188>)
 800a1b0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800a1b4:	4956      	ldr	r1, [pc, #344]	@ (800a310 <pbuf_copy+0x18c>)
 800a1b6:	4857      	ldr	r0, [pc, #348]	@ (800a314 <pbuf_copy+0x190>)
 800a1b8:	f009 f944 	bl	8013444 <iprintf>
 800a1bc:	f06f 030f 	mvn.w	r3, #15
 800a1c0:	e09f      	b.n	800a302 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	895b      	ldrh	r3, [r3, #10]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	1ad2      	subs	r2, r2, r3
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	895b      	ldrh	r3, [r3, #10]
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	1acb      	subs	r3, r1, r3
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d306      	bcc.n	800a1e8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	895b      	ldrh	r3, [r3, #10]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	60fb      	str	r3, [r7, #12]
 800a1e6:	e005      	b.n	800a1f4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	895b      	ldrh	r3, [r3, #10]
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	18d0      	adds	r0, r2, r3
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	4413      	add	r3, r2
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	4619      	mov	r1, r3
 800a208:	f009 f9f7 	bl	80135fa <memcpy>
    offset_to += len;
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	4413      	add	r3, r2
 800a212:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4413      	add	r3, r2
 800a21a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	895b      	ldrh	r3, [r3, #10]
 800a220:	461a      	mov	r2, r3
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	4293      	cmp	r3, r2
 800a226:	d906      	bls.n	800a236 <pbuf_copy+0xb2>
 800a228:	4b38      	ldr	r3, [pc, #224]	@ (800a30c <pbuf_copy+0x188>)
 800a22a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800a22e:	493a      	ldr	r1, [pc, #232]	@ (800a318 <pbuf_copy+0x194>)
 800a230:	4838      	ldr	r0, [pc, #224]	@ (800a314 <pbuf_copy+0x190>)
 800a232:	f009 f907 	bl	8013444 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	895b      	ldrh	r3, [r3, #10]
 800a23a:	461a      	mov	r2, r3
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	4293      	cmp	r3, r2
 800a240:	d906      	bls.n	800a250 <pbuf_copy+0xcc>
 800a242:	4b32      	ldr	r3, [pc, #200]	@ (800a30c <pbuf_copy+0x188>)
 800a244:	f240 32da 	movw	r2, #986	@ 0x3da
 800a248:	4934      	ldr	r1, [pc, #208]	@ (800a31c <pbuf_copy+0x198>)
 800a24a:	4832      	ldr	r0, [pc, #200]	@ (800a314 <pbuf_copy+0x190>)
 800a24c:	f009 f8fa 	bl	8013444 <iprintf>
    if (offset_from >= p_from->len) {
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	895b      	ldrh	r3, [r3, #10]
 800a254:	461a      	mov	r2, r3
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	4293      	cmp	r3, r2
 800a25a:	d304      	bcc.n	800a266 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	895b      	ldrh	r3, [r3, #10]
 800a26a:	461a      	mov	r2, r3
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	4293      	cmp	r3, r2
 800a270:	d114      	bne.n	800a29c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a272:	2300      	movs	r3, #0
 800a274:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10c      	bne.n	800a29c <pbuf_copy+0x118>
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d009      	beq.n	800a29c <pbuf_copy+0x118>
 800a288:	4b20      	ldr	r3, [pc, #128]	@ (800a30c <pbuf_copy+0x188>)
 800a28a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800a28e:	4924      	ldr	r1, [pc, #144]	@ (800a320 <pbuf_copy+0x19c>)
 800a290:	4820      	ldr	r0, [pc, #128]	@ (800a314 <pbuf_copy+0x190>)
 800a292:	f009 f8d7 	bl	8013444 <iprintf>
 800a296:	f06f 030f 	mvn.w	r3, #15
 800a29a:	e032      	b.n	800a302 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d013      	beq.n	800a2ca <pbuf_copy+0x146>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	895a      	ldrh	r2, [r3, #10]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	891b      	ldrh	r3, [r3, #8]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d10d      	bne.n	800a2ca <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d009      	beq.n	800a2ca <pbuf_copy+0x146>
 800a2b6:	4b15      	ldr	r3, [pc, #84]	@ (800a30c <pbuf_copy+0x188>)
 800a2b8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800a2bc:	4919      	ldr	r1, [pc, #100]	@ (800a324 <pbuf_copy+0x1a0>)
 800a2be:	4815      	ldr	r0, [pc, #84]	@ (800a314 <pbuf_copy+0x190>)
 800a2c0:	f009 f8c0 	bl	8013444 <iprintf>
 800a2c4:	f06f 0305 	mvn.w	r3, #5
 800a2c8:	e01b      	b.n	800a302 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d013      	beq.n	800a2f8 <pbuf_copy+0x174>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	895a      	ldrh	r2, [r3, #10]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	891b      	ldrh	r3, [r3, #8]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d10d      	bne.n	800a2f8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d009      	beq.n	800a2f8 <pbuf_copy+0x174>
 800a2e4:	4b09      	ldr	r3, [pc, #36]	@ (800a30c <pbuf_copy+0x188>)
 800a2e6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800a2ea:	490e      	ldr	r1, [pc, #56]	@ (800a324 <pbuf_copy+0x1a0>)
 800a2ec:	4809      	ldr	r0, [pc, #36]	@ (800a314 <pbuf_copy+0x190>)
 800a2ee:	f009 f8a9 	bl	8013444 <iprintf>
 800a2f2:	f06f 0305 	mvn.w	r3, #5
 800a2f6:	e004      	b.n	800a302 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f47f af61 	bne.w	800a1c2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	0801508c 	.word	0x0801508c
 800a310:	08015334 	.word	0x08015334
 800a314:	080150ec 	.word	0x080150ec
 800a318:	08015364 	.word	0x08015364
 800a31c:	0801537c 	.word	0x0801537c
 800a320:	08015398 	.word	0x08015398
 800a324:	080153a8 	.word	0x080153a8

0800a328 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b088      	sub	sp, #32
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	4611      	mov	r1, r2
 800a334:	461a      	mov	r2, r3
 800a336:	460b      	mov	r3, r1
 800a338:	80fb      	strh	r3, [r7, #6]
 800a33a:	4613      	mov	r3, r2
 800a33c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d108      	bne.n	800a35e <pbuf_copy_partial+0x36>
 800a34c:	4b2b      	ldr	r3, [pc, #172]	@ (800a3fc <pbuf_copy_partial+0xd4>)
 800a34e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800a352:	492b      	ldr	r1, [pc, #172]	@ (800a400 <pbuf_copy_partial+0xd8>)
 800a354:	482b      	ldr	r0, [pc, #172]	@ (800a404 <pbuf_copy_partial+0xdc>)
 800a356:	f009 f875 	bl	8013444 <iprintf>
 800a35a:	2300      	movs	r3, #0
 800a35c:	e04a      	b.n	800a3f4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d108      	bne.n	800a376 <pbuf_copy_partial+0x4e>
 800a364:	4b25      	ldr	r3, [pc, #148]	@ (800a3fc <pbuf_copy_partial+0xd4>)
 800a366:	f240 420b 	movw	r2, #1035	@ 0x40b
 800a36a:	4927      	ldr	r1, [pc, #156]	@ (800a408 <pbuf_copy_partial+0xe0>)
 800a36c:	4825      	ldr	r0, [pc, #148]	@ (800a404 <pbuf_copy_partial+0xdc>)
 800a36e:	f009 f869 	bl	8013444 <iprintf>
 800a372:	2300      	movs	r3, #0
 800a374:	e03e      	b.n	800a3f4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	61fb      	str	r3, [r7, #28]
 800a37a:	e034      	b.n	800a3e6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a37c:	88bb      	ldrh	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00a      	beq.n	800a398 <pbuf_copy_partial+0x70>
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	895b      	ldrh	r3, [r3, #10]
 800a386:	88ba      	ldrh	r2, [r7, #4]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d305      	bcc.n	800a398 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	895b      	ldrh	r3, [r3, #10]
 800a390:	88ba      	ldrh	r2, [r7, #4]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	80bb      	strh	r3, [r7, #4]
 800a396:	e023      	b.n	800a3e0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	895a      	ldrh	r2, [r3, #10]
 800a39c:	88bb      	ldrh	r3, [r7, #4]
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a3a2:	8b3a      	ldrh	r2, [r7, #24]
 800a3a4:	88fb      	ldrh	r3, [r7, #6]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d901      	bls.n	800a3ae <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a3aa:	88fb      	ldrh	r3, [r7, #6]
 800a3ac:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a3ae:	8b7b      	ldrh	r3, [r7, #26]
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	18d0      	adds	r0, r2, r3
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	88bb      	ldrh	r3, [r7, #4]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	8b3a      	ldrh	r2, [r7, #24]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	f009 f91b 	bl	80135fa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a3c4:	8afa      	ldrh	r2, [r7, #22]
 800a3c6:	8b3b      	ldrh	r3, [r7, #24]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a3cc:	8b7a      	ldrh	r2, [r7, #26]
 800a3ce:	8b3b      	ldrh	r3, [r7, #24]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a3d4:	88fa      	ldrh	r2, [r7, #6]
 800a3d6:	8b3b      	ldrh	r3, [r7, #24]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	61fb      	str	r3, [r7, #28]
 800a3e6:	88fb      	ldrh	r3, [r7, #6]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <pbuf_copy_partial+0xca>
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1c4      	bne.n	800a37c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a3f2:	8afb      	ldrh	r3, [r7, #22]
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3720      	adds	r7, #32
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	0801508c 	.word	0x0801508c
 800a400:	080153d4 	.word	0x080153d4
 800a404:	080150ec 	.word	0x080150ec
 800a408:	080153f4 	.word	0x080153f4

0800a40c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	460b      	mov	r3, r1
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800a41a:	897b      	ldrh	r3, [r7, #10]
 800a41c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800a422:	e007      	b.n	800a434 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	895b      	ldrh	r3, [r3, #10]
 800a428:	8afa      	ldrh	r2, [r7, #22]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d004      	beq.n	800a444 <pbuf_skip_const+0x38>
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	895b      	ldrh	r3, [r3, #10]
 800a43e:	8afa      	ldrh	r2, [r7, #22]
 800a440:	429a      	cmp	r2, r3
 800a442:	d2ef      	bcs.n	800a424 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d002      	beq.n	800a450 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	8afa      	ldrh	r2, [r7, #22]
 800a44e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800a450:	693b      	ldr	r3, [r7, #16]
}
 800a452:	4618      	mov	r0, r3
 800a454:	371c      	adds	r7, #28
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
	...

0800a460 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	4603      	mov	r3, r0
 800a468:	603a      	str	r2, [r7, #0]
 800a46a:	71fb      	strb	r3, [r7, #7]
 800a46c:	460b      	mov	r3, r1
 800a46e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	8919      	ldrh	r1, [r3, #8]
 800a474:	88ba      	ldrh	r2, [r7, #4]
 800a476:	79fb      	ldrb	r3, [r7, #7]
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff fa89 	bl	8009990 <pbuf_alloc>
 800a47e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <pbuf_clone+0x2a>
    return NULL;
 800a486:	2300      	movs	r3, #0
 800a488:	e011      	b.n	800a4ae <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f7ff fe79 	bl	800a184 <pbuf_copy>
 800a492:	4603      	mov	r3, r0
 800a494:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a496:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d006      	beq.n	800a4ac <pbuf_clone+0x4c>
 800a49e:	4b06      	ldr	r3, [pc, #24]	@ (800a4b8 <pbuf_clone+0x58>)
 800a4a0:	f240 5224 	movw	r2, #1316	@ 0x524
 800a4a4:	4905      	ldr	r1, [pc, #20]	@ (800a4bc <pbuf_clone+0x5c>)
 800a4a6:	4806      	ldr	r0, [pc, #24]	@ (800a4c0 <pbuf_clone+0x60>)
 800a4a8:	f008 ffcc 	bl	8013444 <iprintf>
  return q;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	0801508c 	.word	0x0801508c
 800a4bc:	08015500 	.word	0x08015500
 800a4c0:	080150ec 	.word	0x080150ec

0800a4c4 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800a4d0:	887b      	ldrh	r3, [r7, #2]
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f80c 	bl	800a4f2 <pbuf_try_get_at>
 800a4da:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	db02      	blt.n	800a4e8 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	e000      	b.n	800a4ea <pbuf_get_at+0x26>
  }
  return 0;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800a4fe:	f107 020a 	add.w	r2, r7, #10
 800a502:	887b      	ldrh	r3, [r7, #2]
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff ff80 	bl	800a40c <pbuf_skip_const>
 800a50c:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00a      	beq.n	800a52a <pbuf_try_get_at+0x38>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	895a      	ldrh	r2, [r3, #10]
 800a518:	897b      	ldrh	r3, [r7, #10]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d905      	bls.n	800a52a <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	897a      	ldrh	r2, [r7, #10]
 800a524:	4413      	add	r3, r2
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	e001      	b.n	800a52e <pbuf_try_get_at+0x3c>
  }
  return -1;
 800a52a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
	...

0800a538 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a53c:	f008 fe82 	bl	8013244 <rand>
 800a540:	4603      	mov	r3, r0
 800a542:	b29b      	uxth	r3, r3
 800a544:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a548:	b29b      	uxth	r3, r3
 800a54a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800a54e:	b29a      	uxth	r2, r3
 800a550:	4b01      	ldr	r3, [pc, #4]	@ (800a558 <tcp_init+0x20>)
 800a552:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a554:	bf00      	nop
 800a556:	bd80      	pop	{r7, pc}
 800a558:	24000024 	.word	0x24000024

0800a55c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	7d1b      	ldrb	r3, [r3, #20]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d105      	bne.n	800a578 <tcp_free+0x1c>
 800a56c:	4b06      	ldr	r3, [pc, #24]	@ (800a588 <tcp_free+0x2c>)
 800a56e:	22d4      	movs	r2, #212	@ 0xd4
 800a570:	4906      	ldr	r1, [pc, #24]	@ (800a58c <tcp_free+0x30>)
 800a572:	4807      	ldr	r0, [pc, #28]	@ (800a590 <tcp_free+0x34>)
 800a574:	f008 ff66 	bl	8013444 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a578:	6879      	ldr	r1, [r7, #4]
 800a57a:	2001      	movs	r0, #1
 800a57c:	f7fe fe76 	bl	800926c <memp_free>
}
 800a580:	bf00      	nop
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	0801558c 	.word	0x0801558c
 800a58c:	080155bc 	.word	0x080155bc
 800a590:	080155d0 	.word	0x080155d0

0800a594 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	7d1b      	ldrb	r3, [r3, #20]
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d105      	bne.n	800a5b0 <tcp_free_listen+0x1c>
 800a5a4:	4b06      	ldr	r3, [pc, #24]	@ (800a5c0 <tcp_free_listen+0x2c>)
 800a5a6:	22df      	movs	r2, #223	@ 0xdf
 800a5a8:	4906      	ldr	r1, [pc, #24]	@ (800a5c4 <tcp_free_listen+0x30>)
 800a5aa:	4807      	ldr	r0, [pc, #28]	@ (800a5c8 <tcp_free_listen+0x34>)
 800a5ac:	f008 ff4a 	bl	8013444 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a5b0:	6879      	ldr	r1, [r7, #4]
 800a5b2:	2002      	movs	r0, #2
 800a5b4:	f7fe fe5a 	bl	800926c <memp_free>
}
 800a5b8:	bf00      	nop
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	0801558c 	.word	0x0801558c
 800a5c4:	080155f8 	.word	0x080155f8
 800a5c8:	080155d0 	.word	0x080155d0

0800a5cc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a5d0:	f001 f89a 	bl	800b708 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a5d4:	4b07      	ldr	r3, [pc, #28]	@ (800a5f4 <tcp_tmr+0x28>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	4b05      	ldr	r3, [pc, #20]	@ (800a5f4 <tcp_tmr+0x28>)
 800a5de:	701a      	strb	r2, [r3, #0]
 800a5e0:	4b04      	ldr	r3, [pc, #16]	@ (800a5f4 <tcp_tmr+0x28>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d001      	beq.n	800a5f0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a5ec:	f000 fd4a 	bl	800b084 <tcp_slowtmr>
  }
}
 800a5f0:	bf00      	nop
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	24043211 	.word	0x24043211

0800a5f8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d105      	bne.n	800a614 <tcp_remove_listener+0x1c>
 800a608:	4b0d      	ldr	r3, [pc, #52]	@ (800a640 <tcp_remove_listener+0x48>)
 800a60a:	22ff      	movs	r2, #255	@ 0xff
 800a60c:	490d      	ldr	r1, [pc, #52]	@ (800a644 <tcp_remove_listener+0x4c>)
 800a60e:	480e      	ldr	r0, [pc, #56]	@ (800a648 <tcp_remove_listener+0x50>)
 800a610:	f008 ff18 	bl	8013444 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	e00a      	b.n	800a630 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	429a      	cmp	r2, r3
 800a622:	d102      	bne.n	800a62a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	60fb      	str	r3, [r7, #12]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1f1      	bne.n	800a61a <tcp_remove_listener+0x22>
    }
  }
}
 800a636:	bf00      	nop
 800a638:	bf00      	nop
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	0801558c 	.word	0x0801558c
 800a644:	08015614 	.word	0x08015614
 800a648:	080155d0 	.word	0x080155d0

0800a64c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d106      	bne.n	800a668 <tcp_listen_closed+0x1c>
 800a65a:	4b14      	ldr	r3, [pc, #80]	@ (800a6ac <tcp_listen_closed+0x60>)
 800a65c:	f240 1211 	movw	r2, #273	@ 0x111
 800a660:	4913      	ldr	r1, [pc, #76]	@ (800a6b0 <tcp_listen_closed+0x64>)
 800a662:	4814      	ldr	r0, [pc, #80]	@ (800a6b4 <tcp_listen_closed+0x68>)
 800a664:	f008 feee 	bl	8013444 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	7d1b      	ldrb	r3, [r3, #20]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d006      	beq.n	800a67e <tcp_listen_closed+0x32>
 800a670:	4b0e      	ldr	r3, [pc, #56]	@ (800a6ac <tcp_listen_closed+0x60>)
 800a672:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800a676:	4910      	ldr	r1, [pc, #64]	@ (800a6b8 <tcp_listen_closed+0x6c>)
 800a678:	480e      	ldr	r0, [pc, #56]	@ (800a6b4 <tcp_listen_closed+0x68>)
 800a67a:	f008 fee3 	bl	8013444 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a67e:	2301      	movs	r3, #1
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	e00b      	b.n	800a69c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a684:	4a0d      	ldr	r2, [pc, #52]	@ (800a6bc <tcp_listen_closed+0x70>)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	6879      	ldr	r1, [r7, #4]
 800a690:	4618      	mov	r0, r3
 800a692:	f7ff ffb1 	bl	800a5f8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3301      	adds	r3, #1
 800a69a:	60fb      	str	r3, [r7, #12]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2b03      	cmp	r3, #3
 800a6a0:	d9f0      	bls.n	800a684 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a6a2:	bf00      	nop
 800a6a4:	bf00      	nop
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	0801558c 	.word	0x0801558c
 800a6b0:	0801563c 	.word	0x0801563c
 800a6b4:	080155d0 	.word	0x080155d0
 800a6b8:	08015648 	.word	0x08015648
 800a6bc:	08017574 	.word	0x08017574

0800a6c0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a6c0:	b5b0      	push	{r4, r5, r7, lr}
 800a6c2:	b088      	sub	sp, #32
 800a6c4:	af04      	add	r7, sp, #16
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d106      	bne.n	800a6e0 <tcp_close_shutdown+0x20>
 800a6d2:	4b63      	ldr	r3, [pc, #396]	@ (800a860 <tcp_close_shutdown+0x1a0>)
 800a6d4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800a6d8:	4962      	ldr	r1, [pc, #392]	@ (800a864 <tcp_close_shutdown+0x1a4>)
 800a6da:	4863      	ldr	r0, [pc, #396]	@ (800a868 <tcp_close_shutdown+0x1a8>)
 800a6dc:	f008 feb2 	bl	8013444 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d066      	beq.n	800a7b4 <tcp_close_shutdown+0xf4>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	7d1b      	ldrb	r3, [r3, #20]
 800a6ea:	2b04      	cmp	r3, #4
 800a6ec:	d003      	beq.n	800a6f6 <tcp_close_shutdown+0x36>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	7d1b      	ldrb	r3, [r3, #20]
 800a6f2:	2b07      	cmp	r3, #7
 800a6f4:	d15e      	bne.n	800a7b4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d104      	bne.n	800a708 <tcp_close_shutdown+0x48>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a702:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a706:	d055      	beq.n	800a7b4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	8b5b      	ldrh	r3, [r3, #26]
 800a70c:	f003 0310 	and.w	r3, r3, #16
 800a710:	2b00      	cmp	r3, #0
 800a712:	d106      	bne.n	800a722 <tcp_close_shutdown+0x62>
 800a714:	4b52      	ldr	r3, [pc, #328]	@ (800a860 <tcp_close_shutdown+0x1a0>)
 800a716:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800a71a:	4954      	ldr	r1, [pc, #336]	@ (800a86c <tcp_close_shutdown+0x1ac>)
 800a71c:	4852      	ldr	r0, [pc, #328]	@ (800a868 <tcp_close_shutdown+0x1a8>)
 800a71e:	f008 fe91 	bl	8013444 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a72a:	687d      	ldr	r5, [r7, #4]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	3304      	adds	r3, #4
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	8ad2      	ldrh	r2, [r2, #22]
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	8b09      	ldrh	r1, [r1, #24]
 800a738:	9102      	str	r1, [sp, #8]
 800a73a:	9201      	str	r2, [sp, #4]
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	462b      	mov	r3, r5
 800a740:	4622      	mov	r2, r4
 800a742:	4601      	mov	r1, r0
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f005 fd91 	bl	801026c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f001 fb74 	bl	800be38 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a750:	4b47      	ldr	r3, [pc, #284]	@ (800a870 <tcp_close_shutdown+0x1b0>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	429a      	cmp	r2, r3
 800a758:	d105      	bne.n	800a766 <tcp_close_shutdown+0xa6>
 800a75a:	4b45      	ldr	r3, [pc, #276]	@ (800a870 <tcp_close_shutdown+0x1b0>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	4a43      	ldr	r2, [pc, #268]	@ (800a870 <tcp_close_shutdown+0x1b0>)
 800a762:	6013      	str	r3, [r2, #0]
 800a764:	e013      	b.n	800a78e <tcp_close_shutdown+0xce>
 800a766:	4b42      	ldr	r3, [pc, #264]	@ (800a870 <tcp_close_shutdown+0x1b0>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	e00c      	b.n	800a788 <tcp_close_shutdown+0xc8>
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	429a      	cmp	r2, r3
 800a776:	d104      	bne.n	800a782 <tcp_close_shutdown+0xc2>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68da      	ldr	r2, [r3, #12]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	60da      	str	r2, [r3, #12]
 800a780:	e005      	b.n	800a78e <tcp_close_shutdown+0xce>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1ef      	bne.n	800a76e <tcp_close_shutdown+0xae>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	60da      	str	r2, [r3, #12]
 800a794:	4b37      	ldr	r3, [pc, #220]	@ (800a874 <tcp_close_shutdown+0x1b4>)
 800a796:	2201      	movs	r2, #1
 800a798:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a79a:	4b37      	ldr	r3, [pc, #220]	@ (800a878 <tcp_close_shutdown+0x1b8>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d102      	bne.n	800a7aa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a7a4:	f004 f808 	bl	800e7b8 <tcp_trigger_input_pcb_close>
 800a7a8:	e002      	b.n	800a7b0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff fed6 	bl	800a55c <tcp_free>
      }
      return ERR_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e050      	b.n	800a856 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	7d1b      	ldrb	r3, [r3, #20]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d03b      	beq.n	800a834 <tcp_close_shutdown+0x174>
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	dc44      	bgt.n	800a84a <tcp_close_shutdown+0x18a>
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d002      	beq.n	800a7ca <tcp_close_shutdown+0x10a>
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d02a      	beq.n	800a81e <tcp_close_shutdown+0x15e>
 800a7c8:	e03f      	b.n	800a84a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	8adb      	ldrh	r3, [r3, #22]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d021      	beq.n	800a816 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a7d2:	4b2a      	ldr	r3, [pc, #168]	@ (800a87c <tcp_close_shutdown+0x1bc>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d105      	bne.n	800a7e8 <tcp_close_shutdown+0x128>
 800a7dc:	4b27      	ldr	r3, [pc, #156]	@ (800a87c <tcp_close_shutdown+0x1bc>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	4a26      	ldr	r2, [pc, #152]	@ (800a87c <tcp_close_shutdown+0x1bc>)
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	e013      	b.n	800a810 <tcp_close_shutdown+0x150>
 800a7e8:	4b24      	ldr	r3, [pc, #144]	@ (800a87c <tcp_close_shutdown+0x1bc>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	60bb      	str	r3, [r7, #8]
 800a7ee:	e00c      	b.n	800a80a <tcp_close_shutdown+0x14a>
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d104      	bne.n	800a804 <tcp_close_shutdown+0x144>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	68da      	ldr	r2, [r3, #12]
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	60da      	str	r2, [r3, #12]
 800a802:	e005      	b.n	800a810 <tcp_close_shutdown+0x150>
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	60bb      	str	r3, [r7, #8]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1ef      	bne.n	800a7f0 <tcp_close_shutdown+0x130>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7ff fea0 	bl	800a55c <tcp_free>
      break;
 800a81c:	e01a      	b.n	800a854 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff ff14 	bl	800a64c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	4816      	ldr	r0, [pc, #88]	@ (800a880 <tcp_close_shutdown+0x1c0>)
 800a828:	f001 fb56 	bl	800bed8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7ff feb1 	bl	800a594 <tcp_free_listen>
      break;
 800a832:	e00f      	b.n	800a854 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a834:	6879      	ldr	r1, [r7, #4]
 800a836:	480e      	ldr	r0, [pc, #56]	@ (800a870 <tcp_close_shutdown+0x1b0>)
 800a838:	f001 fb4e 	bl	800bed8 <tcp_pcb_remove>
 800a83c:	4b0d      	ldr	r3, [pc, #52]	@ (800a874 <tcp_close_shutdown+0x1b4>)
 800a83e:	2201      	movs	r2, #1
 800a840:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7ff fe8a 	bl	800a55c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a848:	e004      	b.n	800a854 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f81a 	bl	800a884 <tcp_close_shutdown_fin>
 800a850:	4603      	mov	r3, r0
 800a852:	e000      	b.n	800a856 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bdb0      	pop	{r4, r5, r7, pc}
 800a85e:	bf00      	nop
 800a860:	0801558c 	.word	0x0801558c
 800a864:	08015660 	.word	0x08015660
 800a868:	080155d0 	.word	0x080155d0
 800a86c:	08015680 	.word	0x08015680
 800a870:	24043208 	.word	0x24043208
 800a874:	24043210 	.word	0x24043210
 800a878:	24043248 	.word	0x24043248
 800a87c:	24043200 	.word	0x24043200
 800a880:	24043204 	.word	0x24043204

0800a884 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d106      	bne.n	800a8a0 <tcp_close_shutdown_fin+0x1c>
 800a892:	4b2e      	ldr	r3, [pc, #184]	@ (800a94c <tcp_close_shutdown_fin+0xc8>)
 800a894:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800a898:	492d      	ldr	r1, [pc, #180]	@ (800a950 <tcp_close_shutdown_fin+0xcc>)
 800a89a:	482e      	ldr	r0, [pc, #184]	@ (800a954 <tcp_close_shutdown_fin+0xd0>)
 800a89c:	f008 fdd2 	bl	8013444 <iprintf>

  switch (pcb->state) {
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	7d1b      	ldrb	r3, [r3, #20]
 800a8a4:	2b07      	cmp	r3, #7
 800a8a6:	d020      	beq.n	800a8ea <tcp_close_shutdown_fin+0x66>
 800a8a8:	2b07      	cmp	r3, #7
 800a8aa:	dc2b      	bgt.n	800a904 <tcp_close_shutdown_fin+0x80>
 800a8ac:	2b03      	cmp	r3, #3
 800a8ae:	d002      	beq.n	800a8b6 <tcp_close_shutdown_fin+0x32>
 800a8b0:	2b04      	cmp	r3, #4
 800a8b2:	d00d      	beq.n	800a8d0 <tcp_close_shutdown_fin+0x4c>
 800a8b4:	e026      	b.n	800a904 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f004 fde6 	bl	800f488 <tcp_send_fin>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a8c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d11f      	bne.n	800a908 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2205      	movs	r2, #5
 800a8cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a8ce:	e01b      	b.n	800a908 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f004 fdd9 	bl	800f488 <tcp_send_fin>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a8da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d114      	bne.n	800a90c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2205      	movs	r2, #5
 800a8e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a8e8:	e010      	b.n	800a90c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f004 fdcc 	bl	800f488 <tcp_send_fin>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a8f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d109      	bne.n	800a910 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2209      	movs	r2, #9
 800a900:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a902:	e005      	b.n	800a910 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	e01c      	b.n	800a942 <tcp_close_shutdown_fin+0xbe>
      break;
 800a908:	bf00      	nop
 800a90a:	e002      	b.n	800a912 <tcp_close_shutdown_fin+0x8e>
      break;
 800a90c:	bf00      	nop
 800a90e:	e000      	b.n	800a912 <tcp_close_shutdown_fin+0x8e>
      break;
 800a910:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d103      	bne.n	800a922 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f004 fef2 	bl	800f704 <tcp_output>
 800a920:	e00d      	b.n	800a93e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a926:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a92a:	d108      	bne.n	800a93e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	8b5b      	ldrh	r3, [r3, #26]
 800a930:	f043 0308 	orr.w	r3, r3, #8
 800a934:	b29a      	uxth	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	e001      	b.n	800a942 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a93e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	0801558c 	.word	0x0801558c
 800a950:	0801563c 	.word	0x0801563c
 800a954:	080155d0 	.word	0x080155d0

0800a958 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d109      	bne.n	800a97a <tcp_close+0x22>
 800a966:	4b0f      	ldr	r3, [pc, #60]	@ (800a9a4 <tcp_close+0x4c>)
 800a968:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800a96c:	490e      	ldr	r1, [pc, #56]	@ (800a9a8 <tcp_close+0x50>)
 800a96e:	480f      	ldr	r0, [pc, #60]	@ (800a9ac <tcp_close+0x54>)
 800a970:	f008 fd68 	bl	8013444 <iprintf>
 800a974:	f06f 030f 	mvn.w	r3, #15
 800a978:	e00f      	b.n	800a99a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	7d1b      	ldrb	r3, [r3, #20]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d006      	beq.n	800a990 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	8b5b      	ldrh	r3, [r3, #26]
 800a986:	f043 0310 	orr.w	r3, r3, #16
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a990:	2101      	movs	r1, #1
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f7ff fe94 	bl	800a6c0 <tcp_close_shutdown>
 800a998:	4603      	mov	r3, r0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	0801558c 	.word	0x0801558c
 800a9a8:	0801569c 	.word	0x0801569c
 800a9ac:	080155d0 	.word	0x080155d0

0800a9b0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b08e      	sub	sp, #56	@ 0x38
 800a9b4:	af04      	add	r7, sp, #16
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d107      	bne.n	800a9d0 <tcp_abandon+0x20>
 800a9c0:	4b52      	ldr	r3, [pc, #328]	@ (800ab0c <tcp_abandon+0x15c>)
 800a9c2:	f240 223d 	movw	r2, #573	@ 0x23d
 800a9c6:	4952      	ldr	r1, [pc, #328]	@ (800ab10 <tcp_abandon+0x160>)
 800a9c8:	4852      	ldr	r0, [pc, #328]	@ (800ab14 <tcp_abandon+0x164>)
 800a9ca:	f008 fd3b 	bl	8013444 <iprintf>
 800a9ce:	e099      	b.n	800ab04 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	7d1b      	ldrb	r3, [r3, #20]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d106      	bne.n	800a9e6 <tcp_abandon+0x36>
 800a9d8:	4b4c      	ldr	r3, [pc, #304]	@ (800ab0c <tcp_abandon+0x15c>)
 800a9da:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800a9de:	494e      	ldr	r1, [pc, #312]	@ (800ab18 <tcp_abandon+0x168>)
 800a9e0:	484c      	ldr	r0, [pc, #304]	@ (800ab14 <tcp_abandon+0x164>)
 800a9e2:	f008 fd2f 	bl	8013444 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	7d1b      	ldrb	r3, [r3, #20]
 800a9ea:	2b0a      	cmp	r3, #10
 800a9ec:	d107      	bne.n	800a9fe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a9ee:	6879      	ldr	r1, [r7, #4]
 800a9f0:	484a      	ldr	r0, [pc, #296]	@ (800ab1c <tcp_abandon+0x16c>)
 800a9f2:	f001 fa71 	bl	800bed8 <tcp_pcb_remove>
    tcp_free(pcb);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff fdb0 	bl	800a55c <tcp_free>
 800a9fc:	e082      	b.n	800ab04 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800aa02:	2300      	movs	r3, #0
 800aa04:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa0a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa10:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa18:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	7d1b      	ldrb	r3, [r3, #20]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d126      	bne.n	800aa76 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	8adb      	ldrh	r3, [r3, #22]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d02e      	beq.n	800aa8e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800aa30:	4b3b      	ldr	r3, [pc, #236]	@ (800ab20 <tcp_abandon+0x170>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d105      	bne.n	800aa46 <tcp_abandon+0x96>
 800aa3a:	4b39      	ldr	r3, [pc, #228]	@ (800ab20 <tcp_abandon+0x170>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	4a37      	ldr	r2, [pc, #220]	@ (800ab20 <tcp_abandon+0x170>)
 800aa42:	6013      	str	r3, [r2, #0]
 800aa44:	e013      	b.n	800aa6e <tcp_abandon+0xbe>
 800aa46:	4b36      	ldr	r3, [pc, #216]	@ (800ab20 <tcp_abandon+0x170>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	61fb      	str	r3, [r7, #28]
 800aa4c:	e00c      	b.n	800aa68 <tcp_abandon+0xb8>
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d104      	bne.n	800aa62 <tcp_abandon+0xb2>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68da      	ldr	r2, [r3, #12]
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	60da      	str	r2, [r3, #12]
 800aa60:	e005      	b.n	800aa6e <tcp_abandon+0xbe>
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	61fb      	str	r3, [r7, #28]
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1ef      	bne.n	800aa4e <tcp_abandon+0x9e>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	60da      	str	r2, [r3, #12]
 800aa74:	e00b      	b.n	800aa8e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	8adb      	ldrh	r3, [r3, #22]
 800aa7e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aa80:	6879      	ldr	r1, [r7, #4]
 800aa82:	4828      	ldr	r0, [pc, #160]	@ (800ab24 <tcp_abandon+0x174>)
 800aa84:	f001 fa28 	bl	800bed8 <tcp_pcb_remove>
 800aa88:	4b27      	ldr	r3, [pc, #156]	@ (800ab28 <tcp_abandon+0x178>)
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d004      	beq.n	800aaa0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 ff14 	bl	800b8c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d004      	beq.n	800aab2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 ff0b 	bl	800b8c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d004      	beq.n	800aac4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 ff02 	bl	800b8c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800aac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00e      	beq.n	800aae8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800aaca:	6879      	ldr	r1, [r7, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	3304      	adds	r3, #4
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	8b12      	ldrh	r2, [r2, #24]
 800aad4:	9202      	str	r2, [sp, #8]
 800aad6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800aad8:	9201      	str	r2, [sp, #4]
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	460b      	mov	r3, r1
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	69b9      	ldr	r1, [r7, #24]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f005 fbc2 	bl	801026c <tcp_rst>
    }
    last_state = pcb->state;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	7d1b      	ldrb	r3, [r3, #20]
 800aaec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7ff fd34 	bl	800a55c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d004      	beq.n	800ab04 <tcp_abandon+0x154>
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	f06f 010c 	mvn.w	r1, #12
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	4798      	blx	r3
  }
}
 800ab04:	3728      	adds	r7, #40	@ 0x28
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	0801558c 	.word	0x0801558c
 800ab10:	080156d0 	.word	0x080156d0
 800ab14:	080155d0 	.word	0x080155d0
 800ab18:	080156ec 	.word	0x080156ec
 800ab1c:	2404320c 	.word	0x2404320c
 800ab20:	24043200 	.word	0x24043200
 800ab24:	24043208 	.word	0x24043208
 800ab28:	24043210 	.word	0x24043210

0800ab2c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ab34:	2101      	movs	r1, #1
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7ff ff3a 	bl	800a9b0 <tcp_abandon>
}
 800ab3c:	bf00      	nop
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b088      	sub	sp, #32
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ab52:	2304      	movs	r3, #4
 800ab54:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d101      	bne.n	800ab60 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ab5c:	4b3e      	ldr	r3, [pc, #248]	@ (800ac58 <tcp_bind+0x114>)
 800ab5e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d109      	bne.n	800ab7a <tcp_bind+0x36>
 800ab66:	4b3d      	ldr	r3, [pc, #244]	@ (800ac5c <tcp_bind+0x118>)
 800ab68:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800ab6c:	493c      	ldr	r1, [pc, #240]	@ (800ac60 <tcp_bind+0x11c>)
 800ab6e:	483d      	ldr	r0, [pc, #244]	@ (800ac64 <tcp_bind+0x120>)
 800ab70:	f008 fc68 	bl	8013444 <iprintf>
 800ab74:	f06f 030f 	mvn.w	r3, #15
 800ab78:	e06a      	b.n	800ac50 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	7d1b      	ldrb	r3, [r3, #20]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d009      	beq.n	800ab96 <tcp_bind+0x52>
 800ab82:	4b36      	ldr	r3, [pc, #216]	@ (800ac5c <tcp_bind+0x118>)
 800ab84:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ab88:	4937      	ldr	r1, [pc, #220]	@ (800ac68 <tcp_bind+0x124>)
 800ab8a:	4836      	ldr	r0, [pc, #216]	@ (800ac64 <tcp_bind+0x120>)
 800ab8c:	f008 fc5a 	bl	8013444 <iprintf>
 800ab90:	f06f 0305 	mvn.w	r3, #5
 800ab94:	e05c      	b.n	800ac50 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ab96:	88fb      	ldrh	r3, [r7, #6]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d109      	bne.n	800abb0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800ab9c:	f000 f914 	bl	800adc8 <tcp_new_port>
 800aba0:	4603      	mov	r3, r0
 800aba2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800aba4:	88fb      	ldrh	r3, [r7, #6]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d135      	bne.n	800ac16 <tcp_bind+0xd2>
      return ERR_BUF;
 800abaa:	f06f 0301 	mvn.w	r3, #1
 800abae:	e04f      	b.n	800ac50 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800abb0:	2300      	movs	r3, #0
 800abb2:	61fb      	str	r3, [r7, #28]
 800abb4:	e02b      	b.n	800ac0e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800abb6:	4a2d      	ldr	r2, [pc, #180]	@ (800ac6c <tcp_bind+0x128>)
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	61bb      	str	r3, [r7, #24]
 800abc2:	e01e      	b.n	800ac02 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	8adb      	ldrh	r3, [r3, #22]
 800abc8:	88fa      	ldrh	r2, [r7, #6]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d116      	bne.n	800abfc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800abce:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d010      	beq.n	800abf6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00c      	beq.n	800abf6 <tcp_bind+0xb2>
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d009      	beq.n	800abf6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d005      	beq.n	800abf6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d102      	bne.n	800abfc <tcp_bind+0xb8>
              return ERR_USE;
 800abf6:	f06f 0307 	mvn.w	r3, #7
 800abfa:	e029      	b.n	800ac50 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	61bb      	str	r3, [r7, #24]
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1dd      	bne.n	800abc4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	61fb      	str	r3, [r7, #28]
 800ac0e:	69fa      	ldr	r2, [r7, #28]
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	dbcf      	blt.n	800abb6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00c      	beq.n	800ac36 <tcp_bind+0xf2>
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d008      	beq.n	800ac36 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d002      	beq.n	800ac30 <tcp_bind+0xec>
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	e000      	b.n	800ac32 <tcp_bind+0xee>
 800ac30:	2300      	movs	r3, #0
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	88fa      	ldrh	r2, [r7, #6]
 800ac3a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ac3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ac70 <tcp_bind+0x12c>)
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	60da      	str	r2, [r3, #12]
 800ac44:	4a0a      	ldr	r2, [pc, #40]	@ (800ac70 <tcp_bind+0x12c>)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6013      	str	r3, [r2, #0]
 800ac4a:	f005 fcd1 	bl	80105f0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3720      	adds	r7, #32
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	0801759c 	.word	0x0801759c
 800ac5c:	0801558c 	.word	0x0801558c
 800ac60:	08015720 	.word	0x08015720
 800ac64:	080155d0 	.word	0x080155d0
 800ac68:	08015738 	.word	0x08015738
 800ac6c:	08017574 	.word	0x08017574
 800ac70:	24043200 	.word	0x24043200

0800ac74 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d106      	bne.n	800ac90 <tcp_update_rcv_ann_wnd+0x1c>
 800ac82:	4b25      	ldr	r3, [pc, #148]	@ (800ad18 <tcp_update_rcv_ann_wnd+0xa4>)
 800ac84:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ac88:	4924      	ldr	r1, [pc, #144]	@ (800ad1c <tcp_update_rcv_ann_wnd+0xa8>)
 800ac8a:	4825      	ldr	r0, [pc, #148]	@ (800ad20 <tcp_update_rcv_ann_wnd+0xac>)
 800ac8c:	f008 fbda 	bl	8013444 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ac98:	4413      	add	r3, r2
 800ac9a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800aca4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800aca8:	bf28      	it	cs
 800acaa:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800acae:	b292      	uxth	r2, r2
 800acb0:	4413      	add	r3, r2
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	db08      	blt.n	800accc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	e020      	b.n	800ad0e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	dd03      	ble.n	800ace2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ace0:	e014      	b.n	800ad0c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acf4:	d306      	bcc.n	800ad04 <tcp_update_rcv_ann_wnd+0x90>
 800acf6:	4b08      	ldr	r3, [pc, #32]	@ (800ad18 <tcp_update_rcv_ann_wnd+0xa4>)
 800acf8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800acfc:	4909      	ldr	r1, [pc, #36]	@ (800ad24 <tcp_update_rcv_ann_wnd+0xb0>)
 800acfe:	4808      	ldr	r0, [pc, #32]	@ (800ad20 <tcp_update_rcv_ann_wnd+0xac>)
 800ad00:	f008 fba0 	bl	8013444 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800ad0c:	2300      	movs	r3, #0
  }
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	0801558c 	.word	0x0801558c
 800ad1c:	080157e8 	.word	0x080157e8
 800ad20:	080155d0 	.word	0x080155d0
 800ad24:	0801580c 	.word	0x0801580c

0800ad28 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d107      	bne.n	800ad4a <tcp_recved+0x22>
 800ad3a:	4b1f      	ldr	r3, [pc, #124]	@ (800adb8 <tcp_recved+0x90>)
 800ad3c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800ad40:	491e      	ldr	r1, [pc, #120]	@ (800adbc <tcp_recved+0x94>)
 800ad42:	481f      	ldr	r0, [pc, #124]	@ (800adc0 <tcp_recved+0x98>)
 800ad44:	f008 fb7e 	bl	8013444 <iprintf>
 800ad48:	e032      	b.n	800adb0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	7d1b      	ldrb	r3, [r3, #20]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d106      	bne.n	800ad60 <tcp_recved+0x38>
 800ad52:	4b19      	ldr	r3, [pc, #100]	@ (800adb8 <tcp_recved+0x90>)
 800ad54:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800ad58:	491a      	ldr	r1, [pc, #104]	@ (800adc4 <tcp_recved+0x9c>)
 800ad5a:	4819      	ldr	r0, [pc, #100]	@ (800adc0 <tcp_recved+0x98>)
 800ad5c:	f008 fb72 	bl	8013444 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ad64:	887b      	ldrh	r3, [r7, #2]
 800ad66:	4413      	add	r3, r2
 800ad68:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ad6a:	89fb      	ldrh	r3, [r7, #14]
 800ad6c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ad70:	d804      	bhi.n	800ad7c <tcp_recved+0x54>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad76:	89fa      	ldrh	r2, [r7, #14]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d204      	bcs.n	800ad86 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ad82:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ad84:	e002      	b.n	800ad8c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	89fa      	ldrh	r2, [r7, #14]
 800ad8a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7ff ff71 	bl	800ac74 <tcp_update_rcv_ann_wnd>
 800ad92:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ad9a:	d309      	bcc.n	800adb0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	8b5b      	ldrh	r3, [r3, #26]
 800ada0:	f043 0302 	orr.w	r3, r3, #2
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f004 fcaa 	bl	800f704 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	0801558c 	.word	0x0801558c
 800adbc:	08015828 	.word	0x08015828
 800adc0:	080155d0 	.word	0x080155d0
 800adc4:	08015840 	.word	0x08015840

0800adc8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800adce:	2300      	movs	r3, #0
 800add0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800add2:	4b1e      	ldr	r3, [pc, #120]	@ (800ae4c <tcp_new_port+0x84>)
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	3301      	adds	r3, #1
 800add8:	b29a      	uxth	r2, r3
 800adda:	4b1c      	ldr	r3, [pc, #112]	@ (800ae4c <tcp_new_port+0x84>)
 800addc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800adde:	4b1b      	ldr	r3, [pc, #108]	@ (800ae4c <tcp_new_port+0x84>)
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d103      	bne.n	800adf2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800adea:	4b18      	ldr	r3, [pc, #96]	@ (800ae4c <tcp_new_port+0x84>)
 800adec:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800adf0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800adf2:	2300      	movs	r3, #0
 800adf4:	71fb      	strb	r3, [r7, #7]
 800adf6:	e01e      	b.n	800ae36 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800adf8:	79fb      	ldrb	r3, [r7, #7]
 800adfa:	4a15      	ldr	r2, [pc, #84]	@ (800ae50 <tcp_new_port+0x88>)
 800adfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	603b      	str	r3, [r7, #0]
 800ae04:	e011      	b.n	800ae2a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	8ada      	ldrh	r2, [r3, #22]
 800ae0a:	4b10      	ldr	r3, [pc, #64]	@ (800ae4c <tcp_new_port+0x84>)
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d108      	bne.n	800ae24 <tcp_new_port+0x5c>
        n++;
 800ae12:	88bb      	ldrh	r3, [r7, #4]
 800ae14:	3301      	adds	r3, #1
 800ae16:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ae18:	88bb      	ldrh	r3, [r7, #4]
 800ae1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae1e:	d3d8      	bcc.n	800add2 <tcp_new_port+0xa>
          return 0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	e00d      	b.n	800ae40 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	603b      	str	r3, [r7, #0]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1ea      	bne.n	800ae06 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ae30:	79fb      	ldrb	r3, [r7, #7]
 800ae32:	3301      	adds	r3, #1
 800ae34:	71fb      	strb	r3, [r7, #7]
 800ae36:	79fb      	ldrb	r3, [r7, #7]
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d9dd      	bls.n	800adf8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ae3c:	4b03      	ldr	r3, [pc, #12]	@ (800ae4c <tcp_new_port+0x84>)
 800ae3e:	881b      	ldrh	r3, [r3, #0]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr
 800ae4c:	24000024 	.word	0x24000024
 800ae50:	08017574 	.word	0x08017574

0800ae54 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b08a      	sub	sp, #40	@ 0x28
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	603b      	str	r3, [r7, #0]
 800ae60:	4613      	mov	r3, r2
 800ae62:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800ae64:	2300      	movs	r3, #0
 800ae66:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d109      	bne.n	800ae82 <tcp_connect+0x2e>
 800ae6e:	4b7d      	ldr	r3, [pc, #500]	@ (800b064 <tcp_connect+0x210>)
 800ae70:	f240 4235 	movw	r2, #1077	@ 0x435
 800ae74:	497c      	ldr	r1, [pc, #496]	@ (800b068 <tcp_connect+0x214>)
 800ae76:	487d      	ldr	r0, [pc, #500]	@ (800b06c <tcp_connect+0x218>)
 800ae78:	f008 fae4 	bl	8013444 <iprintf>
 800ae7c:	f06f 030f 	mvn.w	r3, #15
 800ae80:	e0ec      	b.n	800b05c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d109      	bne.n	800ae9c <tcp_connect+0x48>
 800ae88:	4b76      	ldr	r3, [pc, #472]	@ (800b064 <tcp_connect+0x210>)
 800ae8a:	f240 4236 	movw	r2, #1078	@ 0x436
 800ae8e:	4978      	ldr	r1, [pc, #480]	@ (800b070 <tcp_connect+0x21c>)
 800ae90:	4876      	ldr	r0, [pc, #472]	@ (800b06c <tcp_connect+0x218>)
 800ae92:	f008 fad7 	bl	8013444 <iprintf>
 800ae96:	f06f 030f 	mvn.w	r3, #15
 800ae9a:	e0df      	b.n	800b05c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	7d1b      	ldrb	r3, [r3, #20]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d009      	beq.n	800aeb8 <tcp_connect+0x64>
 800aea4:	4b6f      	ldr	r3, [pc, #444]	@ (800b064 <tcp_connect+0x210>)
 800aea6:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800aeaa:	4972      	ldr	r1, [pc, #456]	@ (800b074 <tcp_connect+0x220>)
 800aeac:	486f      	ldr	r0, [pc, #444]	@ (800b06c <tcp_connect+0x218>)
 800aeae:	f008 fac9 	bl	8013444 <iprintf>
 800aeb2:	f06f 0309 	mvn.w	r3, #9
 800aeb6:	e0d1      	b.n	800b05c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d002      	beq.n	800aec4 <tcp_connect+0x70>
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	e000      	b.n	800aec6 <tcp_connect+0x72>
 800aec4:	2300      	movs	r3, #0
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	88fa      	ldrh	r2, [r7, #6]
 800aece:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	7a1b      	ldrb	r3, [r3, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d006      	beq.n	800aee6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	7a1b      	ldrb	r3, [r3, #8]
 800aedc:	4618      	mov	r0, r3
 800aede:	f7fe fcdb 	bl	8009898 <netif_get_by_index>
 800aee2:	6278      	str	r0, [r7, #36]	@ 0x24
 800aee4:	e005      	b.n	800aef2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3304      	adds	r3, #4
 800aeea:	4618      	mov	r0, r3
 800aeec:	f006 ffbe 	bl	8011e6c <ip4_route>
 800aef0:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 800aef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d102      	bne.n	800aefe <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800aef8:	f06f 0303 	mvn.w	r3, #3
 800aefc:	e0ae      	b.n	800b05c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d003      	beq.n	800af0c <tcp_connect+0xb8>
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d111      	bne.n	800af30 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800af0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d002      	beq.n	800af18 <tcp_connect+0xc4>
 800af12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af14:	3304      	adds	r3, #4
 800af16:	e000      	b.n	800af1a <tcp_connect+0xc6>
 800af18:	2300      	movs	r3, #0
 800af1a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d102      	bne.n	800af28 <tcp_connect+0xd4>
      return ERR_RTE;
 800af22:	f06f 0303 	mvn.w	r3, #3
 800af26:	e099      	b.n	800b05c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	8adb      	ldrh	r3, [r3, #22]
 800af34:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	8adb      	ldrh	r3, [r3, #22]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10c      	bne.n	800af58 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800af3e:	f7ff ff43 	bl	800adc8 <tcp_new_port>
 800af42:	4603      	mov	r3, r0
 800af44:	461a      	mov	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	8adb      	ldrh	r3, [r3, #22]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d102      	bne.n	800af58 <tcp_connect+0x104>
      return ERR_BUF;
 800af52:	f06f 0301 	mvn.w	r3, #1
 800af56:	e081      	b.n	800b05c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f001 f851 	bl	800c000 <tcp_next_iss>
 800af5e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	1e5a      	subs	r2, r3, #1
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	1e5a      	subs	r2, r3, #1
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	1e5a      	subs	r2, r3, #1
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800af8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800afa2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800afac:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3304      	adds	r3, #4
 800afb6:	461a      	mov	r2, r3
 800afb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800afba:	f001 f847 	bl	800c04c <tcp_eff_send_mss_netif>
 800afbe:	4603      	mov	r3, r0
 800afc0:	461a      	mov	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2201      	movs	r2, #1
 800afca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800afd6:	2102      	movs	r1, #2
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f004 faa5 	bl	800f528 <tcp_enqueue_flags>
 800afde:	4603      	mov	r3, r0
 800afe0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800afe2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d136      	bne.n	800b058 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2202      	movs	r2, #2
 800afee:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800aff0:	8b7b      	ldrh	r3, [r7, #26]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d021      	beq.n	800b03a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800aff6:	4b20      	ldr	r3, [pc, #128]	@ (800b078 <tcp_connect+0x224>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	429a      	cmp	r2, r3
 800affe:	d105      	bne.n	800b00c <tcp_connect+0x1b8>
 800b000:	4b1d      	ldr	r3, [pc, #116]	@ (800b078 <tcp_connect+0x224>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	4a1c      	ldr	r2, [pc, #112]	@ (800b078 <tcp_connect+0x224>)
 800b008:	6013      	str	r3, [r2, #0]
 800b00a:	e013      	b.n	800b034 <tcp_connect+0x1e0>
 800b00c:	4b1a      	ldr	r3, [pc, #104]	@ (800b078 <tcp_connect+0x224>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	623b      	str	r3, [r7, #32]
 800b012:	e00c      	b.n	800b02e <tcp_connect+0x1da>
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d104      	bne.n	800b028 <tcp_connect+0x1d4>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	68da      	ldr	r2, [r3, #12]
 800b022:	6a3b      	ldr	r3, [r7, #32]
 800b024:	60da      	str	r2, [r3, #12]
 800b026:	e005      	b.n	800b034 <tcp_connect+0x1e0>
 800b028:	6a3b      	ldr	r3, [r7, #32]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	623b      	str	r3, [r7, #32]
 800b02e:	6a3b      	ldr	r3, [r7, #32]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1ef      	bne.n	800b014 <tcp_connect+0x1c0>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800b03a:	4b10      	ldr	r3, [pc, #64]	@ (800b07c <tcp_connect+0x228>)
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	60da      	str	r2, [r3, #12]
 800b042:	4a0e      	ldr	r2, [pc, #56]	@ (800b07c <tcp_connect+0x228>)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6013      	str	r3, [r2, #0]
 800b048:	f005 fad2 	bl	80105f0 <tcp_timer_needed>
 800b04c:	4b0c      	ldr	r3, [pc, #48]	@ (800b080 <tcp_connect+0x22c>)
 800b04e:	2201      	movs	r2, #1
 800b050:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f004 fb56 	bl	800f704 <tcp_output>
  }
  return ret;
 800b058:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3728      	adds	r7, #40	@ 0x28
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	0801558c 	.word	0x0801558c
 800b068:	08015868 	.word	0x08015868
 800b06c:	080155d0 	.word	0x080155d0
 800b070:	08015884 	.word	0x08015884
 800b074:	080158a0 	.word	0x080158a0
 800b078:	24043200 	.word	0x24043200
 800b07c:	24043208 	.word	0x24043208
 800b080:	24043210 	.word	0x24043210

0800b084 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b084:	b5b0      	push	{r4, r5, r7, lr}
 800b086:	b090      	sub	sp, #64	@ 0x40
 800b088:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800b090:	4b95      	ldr	r3, [pc, #596]	@ (800b2e8 <tcp_slowtmr+0x264>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3301      	adds	r3, #1
 800b096:	4a94      	ldr	r2, [pc, #592]	@ (800b2e8 <tcp_slowtmr+0x264>)
 800b098:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b09a:	4b94      	ldr	r3, [pc, #592]	@ (800b2ec <tcp_slowtmr+0x268>)
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	b2da      	uxtb	r2, r3
 800b0a2:	4b92      	ldr	r3, [pc, #584]	@ (800b2ec <tcp_slowtmr+0x268>)
 800b0a4:	701a      	strb	r2, [r3, #0]
 800b0a6:	e000      	b.n	800b0aa <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800b0a8:	bf00      	nop
  prev = NULL;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800b0ae:	4b90      	ldr	r3, [pc, #576]	@ (800b2f0 <tcp_slowtmr+0x26c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b0b4:	e29d      	b.n	800b5f2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b8:	7d1b      	ldrb	r3, [r3, #20]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d106      	bne.n	800b0cc <tcp_slowtmr+0x48>
 800b0be:	4b8d      	ldr	r3, [pc, #564]	@ (800b2f4 <tcp_slowtmr+0x270>)
 800b0c0:	f240 42be 	movw	r2, #1214	@ 0x4be
 800b0c4:	498c      	ldr	r1, [pc, #560]	@ (800b2f8 <tcp_slowtmr+0x274>)
 800b0c6:	488d      	ldr	r0, [pc, #564]	@ (800b2fc <tcp_slowtmr+0x278>)
 800b0c8:	f008 f9bc 	bl	8013444 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ce:	7d1b      	ldrb	r3, [r3, #20]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d106      	bne.n	800b0e2 <tcp_slowtmr+0x5e>
 800b0d4:	4b87      	ldr	r3, [pc, #540]	@ (800b2f4 <tcp_slowtmr+0x270>)
 800b0d6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800b0da:	4989      	ldr	r1, [pc, #548]	@ (800b300 <tcp_slowtmr+0x27c>)
 800b0dc:	4887      	ldr	r0, [pc, #540]	@ (800b2fc <tcp_slowtmr+0x278>)
 800b0de:	f008 f9b1 	bl	8013444 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e4:	7d1b      	ldrb	r3, [r3, #20]
 800b0e6:	2b0a      	cmp	r3, #10
 800b0e8:	d106      	bne.n	800b0f8 <tcp_slowtmr+0x74>
 800b0ea:	4b82      	ldr	r3, [pc, #520]	@ (800b2f4 <tcp_slowtmr+0x270>)
 800b0ec:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800b0f0:	4984      	ldr	r1, [pc, #528]	@ (800b304 <tcp_slowtmr+0x280>)
 800b0f2:	4882      	ldr	r0, [pc, #520]	@ (800b2fc <tcp_slowtmr+0x278>)
 800b0f4:	f008 f9a6 	bl	8013444 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0fa:	7f9a      	ldrb	r2, [r3, #30]
 800b0fc:	4b7b      	ldr	r3, [pc, #492]	@ (800b2ec <tcp_slowtmr+0x268>)
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	429a      	cmp	r2, r3
 800b102:	d105      	bne.n	800b110 <tcp_slowtmr+0x8c>
      prev = pcb;
 800b104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b106:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800b10e:	e270      	b.n	800b5f2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800b110:	4b76      	ldr	r3, [pc, #472]	@ (800b2ec <tcp_slowtmr+0x268>)
 800b112:	781a      	ldrb	r2, [r3, #0]
 800b114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b116:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800b118:	2300      	movs	r3, #0
 800b11a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b126:	7d1b      	ldrb	r3, [r3, #20]
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d10a      	bne.n	800b142 <tcp_slowtmr+0xbe>
 800b12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b12e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b132:	2b05      	cmp	r3, #5
 800b134:	d905      	bls.n	800b142 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800b136:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b13a:	3301      	adds	r3, #1
 800b13c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b140:	e11e      	b.n	800b380 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b144:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b148:	2b0b      	cmp	r3, #11
 800b14a:	d905      	bls.n	800b158 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800b14c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b150:	3301      	adds	r3, #1
 800b152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b156:	e113      	b.n	800b380 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800b158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d075      	beq.n	800b24e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b166:	2b00      	cmp	r3, #0
 800b168:	d006      	beq.n	800b178 <tcp_slowtmr+0xf4>
 800b16a:	4b62      	ldr	r3, [pc, #392]	@ (800b2f4 <tcp_slowtmr+0x270>)
 800b16c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800b170:	4965      	ldr	r1, [pc, #404]	@ (800b308 <tcp_slowtmr+0x284>)
 800b172:	4862      	ldr	r0, [pc, #392]	@ (800b2fc <tcp_slowtmr+0x278>)
 800b174:	f008 f966 	bl	8013444 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d106      	bne.n	800b18e <tcp_slowtmr+0x10a>
 800b180:	4b5c      	ldr	r3, [pc, #368]	@ (800b2f4 <tcp_slowtmr+0x270>)
 800b182:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800b186:	4961      	ldr	r1, [pc, #388]	@ (800b30c <tcp_slowtmr+0x288>)
 800b188:	485c      	ldr	r0, [pc, #368]	@ (800b2fc <tcp_slowtmr+0x278>)
 800b18a:	f008 f95b 	bl	8013444 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b190:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b194:	2b0b      	cmp	r3, #11
 800b196:	d905      	bls.n	800b1a4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800b198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b19c:	3301      	adds	r3, #1
 800b19e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b1a2:	e0ed      	b.n	800b380 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	4a58      	ldr	r2, [pc, #352]	@ (800b310 <tcp_slowtmr+0x28c>)
 800b1ae:	5cd3      	ldrb	r3, [r2, r3]
 800b1b0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b1b8:	7c7a      	ldrb	r2, [r7, #17]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d907      	bls.n	800b1ce <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800b1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ca:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800b1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b1d4:	7c7a      	ldrb	r2, [r7, #17]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	f200 80d2 	bhi.w	800b380 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800b1dc:	2301      	movs	r3, #1
 800b1de:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800b1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d108      	bne.n	800b1fc <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b1ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b1ec:	f005 f932 	bl	8010454 <tcp_zero_window_probe>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d014      	beq.n	800b220 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	623b      	str	r3, [r7, #32]
 800b1fa:	e011      	b.n	800b220 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b202:	4619      	mov	r1, r3
 800b204:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b206:	f003 fff7 	bl	800f1f8 <tcp_split_unsent_seg>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d107      	bne.n	800b220 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800b210:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b212:	f004 fa77 	bl	800f704 <tcp_output>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d101      	bne.n	800b220 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800b21c:	2300      	movs	r3, #0
 800b21e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800b220:	6a3b      	ldr	r3, [r7, #32]
 800b222:	2b00      	cmp	r3, #0
 800b224:	f000 80ac 	beq.w	800b380 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800b228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b232:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b236:	2b06      	cmp	r3, #6
 800b238:	f200 80a2 	bhi.w	800b380 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800b23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b242:	3301      	adds	r3, #1
 800b244:	b2da      	uxtb	r2, r3
 800b246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b248:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800b24c:	e098      	b.n	800b380 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b250:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b254:	2b00      	cmp	r3, #0
 800b256:	db0f      	blt.n	800b278 <tcp_slowtmr+0x1f4>
 800b258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b25a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b25e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b262:	4293      	cmp	r3, r2
 800b264:	d008      	beq.n	800b278 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800b266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b268:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	3301      	adds	r3, #1
 800b270:	b29b      	uxth	r3, r3
 800b272:	b21a      	sxth	r2, r3
 800b274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b276:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800b278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800b27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b280:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b284:	429a      	cmp	r2, r3
 800b286:	db7b      	blt.n	800b380 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b288:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b28a:	f004 fd2f 	bl	800fcec <tcp_rexmit_rto_prepare>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d007      	beq.n	800b2a4 <tcp_slowtmr+0x220>
 800b294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d171      	bne.n	800b380 <tcp_slowtmr+0x2fc>
 800b29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d06d      	beq.n	800b380 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800b2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a6:	7d1b      	ldrb	r3, [r3, #20]
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d03a      	beq.n	800b322 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b2b2:	2b0c      	cmp	r3, #12
 800b2b4:	bf28      	it	cs
 800b2b6:	230c      	movcs	r3, #12
 800b2b8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b2c0:	10db      	asrs	r3, r3, #3
 800b2c2:	b21b      	sxth	r3, r3
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b2cc:	4413      	add	r3, r2
 800b2ce:	7efa      	ldrb	r2, [r7, #27]
 800b2d0:	4910      	ldr	r1, [pc, #64]	@ (800b314 <tcp_slowtmr+0x290>)
 800b2d2:	5c8a      	ldrb	r2, [r1, r2]
 800b2d4:	4093      	lsls	r3, r2
 800b2d6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	dc1a      	bgt.n	800b318 <tcp_slowtmr+0x294>
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	b21a      	sxth	r2, r3
 800b2e6:	e019      	b.n	800b31c <tcp_slowtmr+0x298>
 800b2e8:	240431fc 	.word	0x240431fc
 800b2ec:	24043212 	.word	0x24043212
 800b2f0:	24043208 	.word	0x24043208
 800b2f4:	0801558c 	.word	0x0801558c
 800b2f8:	080158d0 	.word	0x080158d0
 800b2fc:	080155d0 	.word	0x080155d0
 800b300:	080158fc 	.word	0x080158fc
 800b304:	08015928 	.word	0x08015928
 800b308:	08015958 	.word	0x08015958
 800b30c:	0801598c 	.word	0x0801598c
 800b310:	0801756c 	.word	0x0801756c
 800b314:	0801755c 	.word	0x0801755c
 800b318:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b31e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800b322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b324:	2200      	movs	r2, #0
 800b326:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b330:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b334:	4293      	cmp	r3, r2
 800b336:	bf28      	it	cs
 800b338:	4613      	movcs	r3, r2
 800b33a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b33c:	8a7b      	ldrh	r3, [r7, #18]
 800b33e:	085b      	lsrs	r3, r3, #1
 800b340:	b29a      	uxth	r2, r3
 800b342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b344:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b350:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b352:	005b      	lsls	r3, r3, #1
 800b354:	b29b      	uxth	r3, r3
 800b356:	429a      	cmp	r2, r3
 800b358:	d206      	bcs.n	800b368 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b35e:	005b      	lsls	r3, r3, #1
 800b360:	b29a      	uxth	r2, r3
 800b362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b364:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800b368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800b36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800b372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b374:	2200      	movs	r2, #0
 800b376:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800b37a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b37c:	f004 fd26 	bl	800fdcc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800b380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b382:	7d1b      	ldrb	r3, [r3, #20]
 800b384:	2b06      	cmp	r3, #6
 800b386:	d111      	bne.n	800b3ac <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800b388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b38a:	8b5b      	ldrh	r3, [r3, #26]
 800b38c:	f003 0310 	and.w	r3, r3, #16
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00b      	beq.n	800b3ac <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b394:	4b9c      	ldr	r3, [pc, #624]	@ (800b608 <tcp_slowtmr+0x584>)
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39a:	6a1b      	ldr	r3, [r3, #32]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	2b28      	cmp	r3, #40	@ 0x28
 800b3a0:	d904      	bls.n	800b3ac <tcp_slowtmr+0x328>
          ++pcb_remove;
 800b3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ae:	7a5b      	ldrb	r3, [r3, #9]
 800b3b0:	f003 0308 	and.w	r3, r3, #8
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d04a      	beq.n	800b44e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b3bc:	2b04      	cmp	r3, #4
 800b3be:	d003      	beq.n	800b3c8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800b3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b3c4:	2b07      	cmp	r3, #7
 800b3c6:	d142      	bne.n	800b44e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3c8:	4b8f      	ldr	r3, [pc, #572]	@ (800b608 <tcp_slowtmr+0x584>)
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ce:	6a1b      	ldr	r3, [r3, #32]
 800b3d0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d4:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800b3d8:	4b8c      	ldr	r3, [pc, #560]	@ (800b60c <tcp_slowtmr+0x588>)
 800b3da:	440b      	add	r3, r1
 800b3dc:	498c      	ldr	r1, [pc, #560]	@ (800b610 <tcp_slowtmr+0x58c>)
 800b3de:	fba1 1303 	umull	r1, r3, r1, r3
 800b3e2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d90a      	bls.n	800b3fe <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800b3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800b3f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b3fc:	e027      	b.n	800b44e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3fe:	4b82      	ldr	r3, [pc, #520]	@ (800b608 <tcp_slowtmr+0x584>)
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b404:	6a1b      	ldr	r3, [r3, #32]
 800b406:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800b40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b410:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800b414:	4618      	mov	r0, r3
 800b416:	4b7f      	ldr	r3, [pc, #508]	@ (800b614 <tcp_slowtmr+0x590>)
 800b418:	fb00 f303 	mul.w	r3, r0, r3
 800b41c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b41e:	497c      	ldr	r1, [pc, #496]	@ (800b610 <tcp_slowtmr+0x58c>)
 800b420:	fba1 1303 	umull	r1, r3, r1, r3
 800b424:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b426:	429a      	cmp	r2, r3
 800b428:	d911      	bls.n	800b44e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b42a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b42c:	f004 ffd2 	bl	80103d4 <tcp_keepalive>
 800b430:	4603      	mov	r3, r0
 800b432:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800b436:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d107      	bne.n	800b44e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b440:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800b444:	3301      	adds	r3, #1
 800b446:	b2da      	uxtb	r2, r3
 800b448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b44a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800b44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b452:	2b00      	cmp	r3, #0
 800b454:	d011      	beq.n	800b47a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b456:	4b6c      	ldr	r3, [pc, #432]	@ (800b608 <tcp_slowtmr+0x584>)
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	1ad2      	subs	r2, r2, r3
 800b460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b462:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b466:	4619      	mov	r1, r3
 800b468:	460b      	mov	r3, r1
 800b46a:	005b      	lsls	r3, r3, #1
 800b46c:	440b      	add	r3, r1
 800b46e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b470:	429a      	cmp	r2, r3
 800b472:	d302      	bcc.n	800b47a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800b474:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b476:	f000 fe93 	bl	800c1a0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800b47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b47c:	7d1b      	ldrb	r3, [r3, #20]
 800b47e:	2b03      	cmp	r3, #3
 800b480:	d10b      	bne.n	800b49a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b482:	4b61      	ldr	r3, [pc, #388]	@ (800b608 <tcp_slowtmr+0x584>)
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b488:	6a1b      	ldr	r3, [r3, #32]
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	2b28      	cmp	r3, #40	@ 0x28
 800b48e:	d904      	bls.n	800b49a <tcp_slowtmr+0x416>
        ++pcb_remove;
 800b490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b494:	3301      	adds	r3, #1
 800b496:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800b49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49c:	7d1b      	ldrb	r3, [r3, #20]
 800b49e:	2b09      	cmp	r3, #9
 800b4a0:	d10b      	bne.n	800b4ba <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b4a2:	4b59      	ldr	r3, [pc, #356]	@ (800b608 <tcp_slowtmr+0x584>)
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a8:	6a1b      	ldr	r3, [r3, #32]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	2bf0      	cmp	r3, #240	@ 0xf0
 800b4ae:	d904      	bls.n	800b4ba <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800b4ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d060      	beq.n	800b584 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800b4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4c8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800b4ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b4cc:	f000 fcb4 	bl	800be38 <tcp_pcb_purge>
      if (prev != NULL) {
 800b4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d010      	beq.n	800b4f8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b4d6:	4b50      	ldr	r3, [pc, #320]	@ (800b618 <tcp_slowtmr+0x594>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d106      	bne.n	800b4ee <tcp_slowtmr+0x46a>
 800b4e0:	4b4e      	ldr	r3, [pc, #312]	@ (800b61c <tcp_slowtmr+0x598>)
 800b4e2:	f240 526d 	movw	r2, #1389	@ 0x56d
 800b4e6:	494e      	ldr	r1, [pc, #312]	@ (800b620 <tcp_slowtmr+0x59c>)
 800b4e8:	484e      	ldr	r0, [pc, #312]	@ (800b624 <tcp_slowtmr+0x5a0>)
 800b4ea:	f007 ffab 	bl	8013444 <iprintf>
        prev->next = pcb->next;
 800b4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f0:	68da      	ldr	r2, [r3, #12]
 800b4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f4:	60da      	str	r2, [r3, #12]
 800b4f6:	e00f      	b.n	800b518 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b4f8:	4b47      	ldr	r3, [pc, #284]	@ (800b618 <tcp_slowtmr+0x594>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d006      	beq.n	800b510 <tcp_slowtmr+0x48c>
 800b502:	4b46      	ldr	r3, [pc, #280]	@ (800b61c <tcp_slowtmr+0x598>)
 800b504:	f240 5271 	movw	r2, #1393	@ 0x571
 800b508:	4947      	ldr	r1, [pc, #284]	@ (800b628 <tcp_slowtmr+0x5a4>)
 800b50a:	4846      	ldr	r0, [pc, #280]	@ (800b624 <tcp_slowtmr+0x5a0>)
 800b50c:	f007 ff9a 	bl	8013444 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	4a40      	ldr	r2, [pc, #256]	@ (800b618 <tcp_slowtmr+0x594>)
 800b516:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800b518:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d013      	beq.n	800b548 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b522:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b526:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b528:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800b52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b52c:	3304      	adds	r3, #4
 800b52e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b530:	8ad2      	ldrh	r2, [r2, #22]
 800b532:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b534:	8b09      	ldrh	r1, [r1, #24]
 800b536:	9102      	str	r1, [sp, #8]
 800b538:	9201      	str	r2, [sp, #4]
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	462b      	mov	r3, r5
 800b53e:	4622      	mov	r2, r4
 800b540:	4601      	mov	r1, r0
 800b542:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b544:	f004 fe92 	bl	801026c <tcp_rst>
      err_arg = pcb->callback_arg;
 800b548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b550:	7d1b      	ldrb	r3, [r3, #20]
 800b552:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b556:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800b55e:	6838      	ldr	r0, [r7, #0]
 800b560:	f7fe fffc 	bl	800a55c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800b564:	4b31      	ldr	r3, [pc, #196]	@ (800b62c <tcp_slowtmr+0x5a8>)
 800b566:	2200      	movs	r2, #0
 800b568:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d004      	beq.n	800b57a <tcp_slowtmr+0x4f6>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f06f 010c 	mvn.w	r1, #12
 800b576:	68b8      	ldr	r0, [r7, #8]
 800b578:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b57a:	4b2c      	ldr	r3, [pc, #176]	@ (800b62c <tcp_slowtmr+0x5a8>)
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d037      	beq.n	800b5f2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b582:	e592      	b.n	800b0aa <tcp_slowtmr+0x26>
      prev = pcb;
 800b584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b586:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800b58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b590:	7f1b      	ldrb	r3, [r3, #28]
 800b592:	3301      	adds	r3, #1
 800b594:	b2da      	uxtb	r2, r3
 800b596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b598:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b59c:	7f1a      	ldrb	r2, [r3, #28]
 800b59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a0:	7f5b      	ldrb	r3, [r3, #29]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d325      	bcc.n	800b5f2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800b5ac:	4b1f      	ldr	r3, [pc, #124]	@ (800b62c <tcp_slowtmr+0x5a8>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00b      	beq.n	800b5d4 <tcp_slowtmr+0x550>
 800b5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5c4:	6912      	ldr	r2, [r2, #16]
 800b5c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b5c8:	4610      	mov	r0, r2
 800b5ca:	4798      	blx	r3
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800b5d2:	e002      	b.n	800b5da <tcp_slowtmr+0x556>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800b5da:	4b14      	ldr	r3, [pc, #80]	@ (800b62c <tcp_slowtmr+0x5a8>)
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f47f ad62 	bne.w	800b0a8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b5e4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d102      	bne.n	800b5f2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b5ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5ee:	f004 f889 	bl	800f704 <tcp_output>
  while (pcb != NULL) {
 800b5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f47f ad5e 	bne.w	800b0b6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800b5fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b630 <tcp_slowtmr+0x5ac>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b604:	e069      	b.n	800b6da <tcp_slowtmr+0x656>
 800b606:	bf00      	nop
 800b608:	240431fc 	.word	0x240431fc
 800b60c:	000a4cb8 	.word	0x000a4cb8
 800b610:	10624dd3 	.word	0x10624dd3
 800b614:	000124f8 	.word	0x000124f8
 800b618:	24043208 	.word	0x24043208
 800b61c:	0801558c 	.word	0x0801558c
 800b620:	080159c4 	.word	0x080159c4
 800b624:	080155d0 	.word	0x080155d0
 800b628:	080159f0 	.word	0x080159f0
 800b62c:	24043210 	.word	0x24043210
 800b630:	2404320c 	.word	0x2404320c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b636:	7d1b      	ldrb	r3, [r3, #20]
 800b638:	2b0a      	cmp	r3, #10
 800b63a:	d006      	beq.n	800b64a <tcp_slowtmr+0x5c6>
 800b63c:	4b2b      	ldr	r3, [pc, #172]	@ (800b6ec <tcp_slowtmr+0x668>)
 800b63e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800b642:	492b      	ldr	r1, [pc, #172]	@ (800b6f0 <tcp_slowtmr+0x66c>)
 800b644:	482b      	ldr	r0, [pc, #172]	@ (800b6f4 <tcp_slowtmr+0x670>)
 800b646:	f007 fefd 	bl	8013444 <iprintf>
    pcb_remove = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b650:	4b29      	ldr	r3, [pc, #164]	@ (800b6f8 <tcp_slowtmr+0x674>)
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b656:	6a1b      	ldr	r3, [r3, #32]
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	2bf0      	cmp	r3, #240	@ 0xf0
 800b65c:	d904      	bls.n	800b668 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800b65e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b662:	3301      	adds	r3, #1
 800b664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d02f      	beq.n	800b6d0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b670:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b672:	f000 fbe1 	bl	800be38 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d010      	beq.n	800b69e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b67c:	4b1f      	ldr	r3, [pc, #124]	@ (800b6fc <tcp_slowtmr+0x678>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b682:	429a      	cmp	r2, r3
 800b684:	d106      	bne.n	800b694 <tcp_slowtmr+0x610>
 800b686:	4b19      	ldr	r3, [pc, #100]	@ (800b6ec <tcp_slowtmr+0x668>)
 800b688:	f240 52af 	movw	r2, #1455	@ 0x5af
 800b68c:	491c      	ldr	r1, [pc, #112]	@ (800b700 <tcp_slowtmr+0x67c>)
 800b68e:	4819      	ldr	r0, [pc, #100]	@ (800b6f4 <tcp_slowtmr+0x670>)
 800b690:	f007 fed8 	bl	8013444 <iprintf>
        prev->next = pcb->next;
 800b694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b696:	68da      	ldr	r2, [r3, #12]
 800b698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69a:	60da      	str	r2, [r3, #12]
 800b69c:	e00f      	b.n	800b6be <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b69e:	4b17      	ldr	r3, [pc, #92]	@ (800b6fc <tcp_slowtmr+0x678>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d006      	beq.n	800b6b6 <tcp_slowtmr+0x632>
 800b6a8:	4b10      	ldr	r3, [pc, #64]	@ (800b6ec <tcp_slowtmr+0x668>)
 800b6aa:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800b6ae:	4915      	ldr	r1, [pc, #84]	@ (800b704 <tcp_slowtmr+0x680>)
 800b6b0:	4810      	ldr	r0, [pc, #64]	@ (800b6f4 <tcp_slowtmr+0x670>)
 800b6b2:	f007 fec7 	bl	8013444 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	4a10      	ldr	r2, [pc, #64]	@ (800b6fc <tcp_slowtmr+0x678>)
 800b6bc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6c0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800b6c8:	69f8      	ldr	r0, [r7, #28]
 800b6ca:	f7fe ff47 	bl	800a55c <tcp_free>
 800b6ce:	e004      	b.n	800b6da <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800b6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1a9      	bne.n	800b634 <tcp_slowtmr+0x5b0>
    }
  }
}
 800b6e0:	bf00      	nop
 800b6e2:	bf00      	nop
 800b6e4:	3730      	adds	r7, #48	@ 0x30
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bdb0      	pop	{r4, r5, r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	0801558c 	.word	0x0801558c
 800b6f0:	08015a1c 	.word	0x08015a1c
 800b6f4:	080155d0 	.word	0x080155d0
 800b6f8:	240431fc 	.word	0x240431fc
 800b6fc:	2404320c 	.word	0x2404320c
 800b700:	08015a4c 	.word	0x08015a4c
 800b704:	08015a74 	.word	0x08015a74

0800b708 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b70e:	4b2d      	ldr	r3, [pc, #180]	@ (800b7c4 <tcp_fasttmr+0xbc>)
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	3301      	adds	r3, #1
 800b714:	b2da      	uxtb	r2, r3
 800b716:	4b2b      	ldr	r3, [pc, #172]	@ (800b7c4 <tcp_fasttmr+0xbc>)
 800b718:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b71a:	4b2b      	ldr	r3, [pc, #172]	@ (800b7c8 <tcp_fasttmr+0xc0>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b720:	e048      	b.n	800b7b4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	7f9a      	ldrb	r2, [r3, #30]
 800b726:	4b27      	ldr	r3, [pc, #156]	@ (800b7c4 <tcp_fasttmr+0xbc>)
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d03f      	beq.n	800b7ae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b72e:	4b25      	ldr	r3, [pc, #148]	@ (800b7c4 <tcp_fasttmr+0xbc>)
 800b730:	781a      	ldrb	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	8b5b      	ldrh	r3, [r3, #26]
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d010      	beq.n	800b764 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	8b5b      	ldrh	r3, [r3, #26]
 800b746:	f043 0302 	orr.w	r3, r3, #2
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f003 ffd7 	bl	800f704 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	8b5b      	ldrh	r3, [r3, #26]
 800b75a:	f023 0303 	bic.w	r3, r3, #3
 800b75e:	b29a      	uxth	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	8b5b      	ldrh	r3, [r3, #26]
 800b768:	f003 0308 	and.w	r3, r3, #8
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d009      	beq.n	800b784 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	8b5b      	ldrh	r3, [r3, #26]
 800b774:	f023 0308 	bic.w	r3, r3, #8
 800b778:	b29a      	uxth	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f7ff f880 	bl	800a884 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00a      	beq.n	800b7a8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b792:	4b0e      	ldr	r3, [pc, #56]	@ (800b7cc <tcp_fasttmr+0xc4>)
 800b794:	2200      	movs	r2, #0
 800b796:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f819 	bl	800b7d0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b79e:	4b0b      	ldr	r3, [pc, #44]	@ (800b7cc <tcp_fasttmr+0xc4>)
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d000      	beq.n	800b7a8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b7a6:	e7b8      	b.n	800b71a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	607b      	str	r3, [r7, #4]
 800b7ac:	e002      	b.n	800b7b4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1b3      	bne.n	800b722 <tcp_fasttmr+0x1a>
    }
  }
}
 800b7ba:	bf00      	nop
 800b7bc:	bf00      	nop
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	24043212 	.word	0x24043212
 800b7c8:	24043208 	.word	0x24043208
 800b7cc:	24043210 	.word	0x24043210

0800b7d0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b7d0:	b590      	push	{r4, r7, lr}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d109      	bne.n	800b7f2 <tcp_process_refused_data+0x22>
 800b7de:	4b37      	ldr	r3, [pc, #220]	@ (800b8bc <tcp_process_refused_data+0xec>)
 800b7e0:	f240 6209 	movw	r2, #1545	@ 0x609
 800b7e4:	4936      	ldr	r1, [pc, #216]	@ (800b8c0 <tcp_process_refused_data+0xf0>)
 800b7e6:	4837      	ldr	r0, [pc, #220]	@ (800b8c4 <tcp_process_refused_data+0xf4>)
 800b7e8:	f007 fe2c 	bl	8013444 <iprintf>
 800b7ec:	f06f 030f 	mvn.w	r3, #15
 800b7f0:	e060      	b.n	800b8b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b7f6:	7b5b      	ldrb	r3, [r3, #13]
 800b7f8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b7fe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00b      	beq.n	800b828 <tcp_process_refused_data+0x58>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6918      	ldr	r0, [r3, #16]
 800b81a:	2300      	movs	r3, #0
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	6879      	ldr	r1, [r7, #4]
 800b820:	47a0      	blx	r4
 800b822:	4603      	mov	r3, r0
 800b824:	73fb      	strb	r3, [r7, #15]
 800b826:	e007      	b.n	800b838 <tcp_process_refused_data+0x68>
 800b828:	2300      	movs	r3, #0
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	6879      	ldr	r1, [r7, #4]
 800b82e:	2000      	movs	r0, #0
 800b830:	f000 f8a4 	bl	800b97c <tcp_recv_null>
 800b834:	4603      	mov	r3, r0
 800b836:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d12a      	bne.n	800b896 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b840:	7bbb      	ldrb	r3, [r7, #14]
 800b842:	f003 0320 	and.w	r3, r3, #32
 800b846:	2b00      	cmp	r3, #0
 800b848:	d033      	beq.n	800b8b2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b84e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b852:	d005      	beq.n	800b860 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b858:	3301      	adds	r3, #1
 800b85a:	b29a      	uxth	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00b      	beq.n	800b882 <tcp_process_refused_data+0xb2>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6918      	ldr	r0, [r3, #16]
 800b874:	2300      	movs	r3, #0
 800b876:	2200      	movs	r2, #0
 800b878:	6879      	ldr	r1, [r7, #4]
 800b87a:	47a0      	blx	r4
 800b87c:	4603      	mov	r3, r0
 800b87e:	73fb      	strb	r3, [r7, #15]
 800b880:	e001      	b.n	800b886 <tcp_process_refused_data+0xb6>
 800b882:	2300      	movs	r3, #0
 800b884:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b88a:	f113 0f0d 	cmn.w	r3, #13
 800b88e:	d110      	bne.n	800b8b2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b890:	f06f 030c 	mvn.w	r3, #12
 800b894:	e00e      	b.n	800b8b4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b89a:	f113 0f0d 	cmn.w	r3, #13
 800b89e:	d102      	bne.n	800b8a6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b8a0:	f06f 030c 	mvn.w	r3, #12
 800b8a4:	e006      	b.n	800b8b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800b8ac:	f06f 0304 	mvn.w	r3, #4
 800b8b0:	e000      	b.n	800b8b4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3714      	adds	r7, #20
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd90      	pop	{r4, r7, pc}
 800b8bc:	0801558c 	.word	0x0801558c
 800b8c0:	08015a9c 	.word	0x08015a9c
 800b8c4:	080155d0 	.word	0x080155d0

0800b8c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b8d0:	e007      	b.n	800b8e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 f80a 	bl	800b8f2 <tcp_seg_free>
    seg = next;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1f4      	bne.n	800b8d2 <tcp_segs_free+0xa>
  }
}
 800b8e8:	bf00      	nop
 800b8ea:	bf00      	nop
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b082      	sub	sp, #8
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00c      	beq.n	800b91a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d004      	beq.n	800b912 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fe fb21 	bl	8009f54 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	2003      	movs	r0, #3
 800b916:	f7fd fca9 	bl	800926c <memp_free>
  }
}
 800b91a:	bf00      	nop
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
	...

0800b924 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d106      	bne.n	800b940 <tcp_seg_copy+0x1c>
 800b932:	4b0f      	ldr	r3, [pc, #60]	@ (800b970 <tcp_seg_copy+0x4c>)
 800b934:	f240 6282 	movw	r2, #1666	@ 0x682
 800b938:	490e      	ldr	r1, [pc, #56]	@ (800b974 <tcp_seg_copy+0x50>)
 800b93a:	480f      	ldr	r0, [pc, #60]	@ (800b978 <tcp_seg_copy+0x54>)
 800b93c:	f007 fd82 	bl	8013444 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b940:	2003      	movs	r0, #3
 800b942:	f7fd fc23 	bl	800918c <memp_malloc>
 800b946:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d101      	bne.n	800b952 <tcp_seg_copy+0x2e>
    return NULL;
 800b94e:	2300      	movs	r3, #0
 800b950:	e00a      	b.n	800b968 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b952:	2210      	movs	r2, #16
 800b954:	6879      	ldr	r1, [r7, #4]
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f007 fe4f 	bl	80135fa <memcpy>
  pbuf_ref(cseg->p);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	4618      	mov	r0, r3
 800b962:	f7fe fb97 	bl	800a094 <pbuf_ref>
  return cseg;
 800b966:	68fb      	ldr	r3, [r7, #12]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	0801558c 	.word	0x0801558c
 800b974:	08015ae0 	.word	0x08015ae0
 800b978:	080155d0 	.word	0x080155d0

0800b97c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
 800b988:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d109      	bne.n	800b9a4 <tcp_recv_null+0x28>
 800b990:	4b12      	ldr	r3, [pc, #72]	@ (800b9dc <tcp_recv_null+0x60>)
 800b992:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b996:	4912      	ldr	r1, [pc, #72]	@ (800b9e0 <tcp_recv_null+0x64>)
 800b998:	4812      	ldr	r0, [pc, #72]	@ (800b9e4 <tcp_recv_null+0x68>)
 800b99a:	f007 fd53 	bl	8013444 <iprintf>
 800b99e:	f06f 030f 	mvn.w	r3, #15
 800b9a2:	e016      	b.n	800b9d2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d009      	beq.n	800b9be <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	891b      	ldrh	r3, [r3, #8]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	68b8      	ldr	r0, [r7, #8]
 800b9b2:	f7ff f9b9 	bl	800ad28 <tcp_recved>
    pbuf_free(p);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7fe facc 	bl	8009f54 <pbuf_free>
 800b9bc:	e008      	b.n	800b9d0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b9be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d104      	bne.n	800b9d0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b9c6:	68b8      	ldr	r0, [r7, #8]
 800b9c8:	f7fe ffc6 	bl	800a958 <tcp_close>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	e000      	b.n	800b9d2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	0801558c 	.word	0x0801558c
 800b9e0:	08015afc 	.word	0x08015afc
 800b9e4:	080155d0 	.word	0x080155d0

0800b9e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b9f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	db01      	blt.n	800b9fe <tcp_kill_prio+0x16>
 800b9fa:	79fb      	ldrb	r3, [r7, #7]
 800b9fc:	e000      	b.n	800ba00 <tcp_kill_prio+0x18>
 800b9fe:	237f      	movs	r3, #127	@ 0x7f
 800ba00:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ba02:	7afb      	ldrb	r3, [r7, #11]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d034      	beq.n	800ba72 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ba08:	7afb      	ldrb	r3, [r7, #11]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba16:	4b19      	ldr	r3, [pc, #100]	@ (800ba7c <tcp_kill_prio+0x94>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	617b      	str	r3, [r7, #20]
 800ba1c:	e01f      	b.n	800ba5e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	7d5b      	ldrb	r3, [r3, #21]
 800ba22:	7afa      	ldrb	r2, [r7, #11]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d80c      	bhi.n	800ba42 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ba2c:	7afa      	ldrb	r2, [r7, #11]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d112      	bne.n	800ba58 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ba32:	4b13      	ldr	r3, [pc, #76]	@ (800ba80 <tcp_kill_prio+0x98>)
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d80a      	bhi.n	800ba58 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ba42:	4b0f      	ldr	r3, [pc, #60]	@ (800ba80 <tcp_kill_prio+0x98>)
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	6a1b      	ldr	r3, [r3, #32]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	7d5b      	ldrb	r3, [r3, #21]
 800ba56:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	617b      	str	r3, [r7, #20]
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1dc      	bne.n	800ba1e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d004      	beq.n	800ba74 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ba6a:	6938      	ldr	r0, [r7, #16]
 800ba6c:	f7ff f85e 	bl	800ab2c <tcp_abort>
 800ba70:	e000      	b.n	800ba74 <tcp_kill_prio+0x8c>
    return;
 800ba72:	bf00      	nop
  }
}
 800ba74:	3718      	adds	r7, #24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	24043208 	.word	0x24043208
 800ba80:	240431fc 	.word	0x240431fc

0800ba84 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b086      	sub	sp, #24
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ba8e:	79fb      	ldrb	r3, [r7, #7]
 800ba90:	2b08      	cmp	r3, #8
 800ba92:	d009      	beq.n	800baa8 <tcp_kill_state+0x24>
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	2b09      	cmp	r3, #9
 800ba98:	d006      	beq.n	800baa8 <tcp_kill_state+0x24>
 800ba9a:	4b1a      	ldr	r3, [pc, #104]	@ (800bb04 <tcp_kill_state+0x80>)
 800ba9c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800baa0:	4919      	ldr	r1, [pc, #100]	@ (800bb08 <tcp_kill_state+0x84>)
 800baa2:	481a      	ldr	r0, [pc, #104]	@ (800bb0c <tcp_kill_state+0x88>)
 800baa4:	f007 fcce 	bl	8013444 <iprintf>

  inactivity = 0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800baac:	2300      	movs	r3, #0
 800baae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bab0:	4b17      	ldr	r3, [pc, #92]	@ (800bb10 <tcp_kill_state+0x8c>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	617b      	str	r3, [r7, #20]
 800bab6:	e017      	b.n	800bae8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	7d1b      	ldrb	r3, [r3, #20]
 800babc:	79fa      	ldrb	r2, [r7, #7]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d10f      	bne.n	800bae2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bac2:	4b14      	ldr	r3, [pc, #80]	@ (800bb14 <tcp_kill_state+0x90>)
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d807      	bhi.n	800bae2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bad2:	4b10      	ldr	r3, [pc, #64]	@ (800bb14 <tcp_kill_state+0x90>)
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d1e4      	bne.n	800bab8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d003      	beq.n	800bafc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800baf4:	2100      	movs	r1, #0
 800baf6:	6938      	ldr	r0, [r7, #16]
 800baf8:	f7fe ff5a 	bl	800a9b0 <tcp_abandon>
  }
}
 800bafc:	bf00      	nop
 800bafe:	3718      	adds	r7, #24
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	0801558c 	.word	0x0801558c
 800bb08:	08015b18 	.word	0x08015b18
 800bb0c:	080155d0 	.word	0x080155d0
 800bb10:	24043208 	.word	0x24043208
 800bb14:	240431fc 	.word	0x240431fc

0800bb18 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bb22:	2300      	movs	r3, #0
 800bb24:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb26:	4b12      	ldr	r3, [pc, #72]	@ (800bb70 <tcp_kill_timewait+0x58>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	60fb      	str	r3, [r7, #12]
 800bb2c:	e012      	b.n	800bb54 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bb2e:	4b11      	ldr	r3, [pc, #68]	@ (800bb74 <tcp_kill_timewait+0x5c>)
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6a1b      	ldr	r3, [r3, #32]
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d807      	bhi.n	800bb4e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bb3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb74 <tcp_kill_timewait+0x5c>)
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6a1b      	ldr	r3, [r3, #32]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	60fb      	str	r3, [r7, #12]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1e9      	bne.n	800bb2e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d002      	beq.n	800bb66 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bb60:	68b8      	ldr	r0, [r7, #8]
 800bb62:	f7fe ffe3 	bl	800ab2c <tcp_abort>
  }
}
 800bb66:	bf00      	nop
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	2404320c 	.word	0x2404320c
 800bb74:	240431fc 	.word	0x240431fc

0800bb78 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bb7e:	4b10      	ldr	r3, [pc, #64]	@ (800bbc0 <tcp_handle_closepend+0x48>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bb84:	e014      	b.n	800bbb0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	8b5b      	ldrh	r3, [r3, #26]
 800bb90:	f003 0308 	and.w	r3, r3, #8
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d009      	beq.n	800bbac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	8b5b      	ldrh	r3, [r3, #26]
 800bb9c:	f023 0308 	bic.w	r3, r3, #8
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7fe fe6c 	bl	800a884 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1e7      	bne.n	800bb86 <tcp_handle_closepend+0xe>
  }
}
 800bbb6:	bf00      	nop
 800bbb8:	bf00      	nop
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	24043208 	.word	0x24043208

0800bbc4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	4603      	mov	r3, r0
 800bbcc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbce:	2001      	movs	r0, #1
 800bbd0:	f7fd fadc 	bl	800918c <memp_malloc>
 800bbd4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d126      	bne.n	800bc2a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bbdc:	f7ff ffcc 	bl	800bb78 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bbe0:	f7ff ff9a 	bl	800bb18 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbe4:	2001      	movs	r0, #1
 800bbe6:	f7fd fad1 	bl	800918c <memp_malloc>
 800bbea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d11b      	bne.n	800bc2a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bbf2:	2009      	movs	r0, #9
 800bbf4:	f7ff ff46 	bl	800ba84 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbf8:	2001      	movs	r0, #1
 800bbfa:	f7fd fac7 	bl	800918c <memp_malloc>
 800bbfe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d111      	bne.n	800bc2a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bc06:	2008      	movs	r0, #8
 800bc08:	f7ff ff3c 	bl	800ba84 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc0c:	2001      	movs	r0, #1
 800bc0e:	f7fd fabd 	bl	800918c <memp_malloc>
 800bc12:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d107      	bne.n	800bc2a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bc1a:	79fb      	ldrb	r3, [r7, #7]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff fee3 	bl	800b9e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc22:	2001      	movs	r0, #1
 800bc24:	f7fd fab2 	bl	800918c <memp_malloc>
 800bc28:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d03f      	beq.n	800bcb0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bc30:	229c      	movs	r2, #156	@ 0x9c
 800bc32:	2100      	movs	r1, #0
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f007 fc6a 	bl	801350e <memset>
    pcb->prio = prio;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	79fa      	ldrb	r2, [r7, #7]
 800bc3e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800bc46:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800bc50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	22ff      	movs	r2, #255	@ 0xff
 800bc5e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800bc66:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2206      	movs	r2, #6
 800bc6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2206      	movs	r2, #6
 800bc74:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bc7c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2201      	movs	r2, #1
 800bc82:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800bc86:	4b0d      	ldr	r3, [pc, #52]	@ (800bcbc <tcp_alloc+0xf8>)
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bc8e:	4b0c      	ldr	r3, [pc, #48]	@ (800bcc0 <tcp_alloc+0xfc>)
 800bc90:	781a      	ldrb	r2, [r3, #0]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800bc9c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4a08      	ldr	r2, [pc, #32]	@ (800bcc4 <tcp_alloc+0x100>)
 800bca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	4a07      	ldr	r2, [pc, #28]	@ (800bcc8 <tcp_alloc+0x104>)
 800bcac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	240431fc 	.word	0x240431fc
 800bcc0:	24043212 	.word	0x24043212
 800bcc4:	0800b97d 	.word	0x0800b97d
 800bcc8:	006ddd00 	.word	0x006ddd00

0800bccc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800bcd6:	2040      	movs	r0, #64	@ 0x40
 800bcd8:	f7ff ff74 	bl	800bbc4 <tcp_alloc>
 800bcdc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800bcde:	68fb      	ldr	r3, [r7, #12]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d002      	beq.n	800bcfe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	611a      	str	r2, [r3, #16]
  }
}
 800bcfe:	bf00      	nop
 800bd00:	370c      	adds	r7, #12
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
	...

0800bd0c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00e      	beq.n	800bd3a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	7d1b      	ldrb	r3, [r3, #20]
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d106      	bne.n	800bd32 <tcp_recv+0x26>
 800bd24:	4b07      	ldr	r3, [pc, #28]	@ (800bd44 <tcp_recv+0x38>)
 800bd26:	f240 72df 	movw	r2, #2015	@ 0x7df
 800bd2a:	4907      	ldr	r1, [pc, #28]	@ (800bd48 <tcp_recv+0x3c>)
 800bd2c:	4807      	ldr	r0, [pc, #28]	@ (800bd4c <tcp_recv+0x40>)
 800bd2e:	f007 fb89 	bl	8013444 <iprintf>
    pcb->recv = recv;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800bd3a:	bf00      	nop
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	0801558c 	.word	0x0801558c
 800bd48:	08015b28 	.word	0x08015b28
 800bd4c:	080155d0 	.word	0x080155d0

0800bd50 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00e      	beq.n	800bd7e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	7d1b      	ldrb	r3, [r3, #20]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d106      	bne.n	800bd76 <tcp_sent+0x26>
 800bd68:	4b07      	ldr	r3, [pc, #28]	@ (800bd88 <tcp_sent+0x38>)
 800bd6a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800bd6e:	4907      	ldr	r1, [pc, #28]	@ (800bd8c <tcp_sent+0x3c>)
 800bd70:	4807      	ldr	r0, [pc, #28]	@ (800bd90 <tcp_sent+0x40>)
 800bd72:	f007 fb67 	bl	8013444 <iprintf>
    pcb->sent = sent;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800bd7e:	bf00      	nop
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	0801558c 	.word	0x0801558c
 800bd8c:	08015b50 	.word	0x08015b50
 800bd90:	080155d0 	.word	0x080155d0

0800bd94 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00e      	beq.n	800bdc2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	7d1b      	ldrb	r3, [r3, #20]
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d106      	bne.n	800bdba <tcp_err+0x26>
 800bdac:	4b07      	ldr	r3, [pc, #28]	@ (800bdcc <tcp_err+0x38>)
 800bdae:	f640 020d 	movw	r2, #2061	@ 0x80d
 800bdb2:	4907      	ldr	r1, [pc, #28]	@ (800bdd0 <tcp_err+0x3c>)
 800bdb4:	4807      	ldr	r0, [pc, #28]	@ (800bdd4 <tcp_err+0x40>)
 800bdb6:	f007 fb45 	bl	8013444 <iprintf>
    pcb->errf = err;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	683a      	ldr	r2, [r7, #0]
 800bdbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800bdc2:	bf00      	nop
 800bdc4:	3708      	adds	r7, #8
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	0801558c 	.word	0x0801558c
 800bdd0:	08015b78 	.word	0x08015b78
 800bdd4:	080155d0 	.word	0x080155d0

0800bdd8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	4613      	mov	r3, r2
 800bde4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d107      	bne.n	800bdfc <tcp_poll+0x24>
 800bdec:	4b0e      	ldr	r3, [pc, #56]	@ (800be28 <tcp_poll+0x50>)
 800bdee:	f640 023d 	movw	r2, #2109	@ 0x83d
 800bdf2:	490e      	ldr	r1, [pc, #56]	@ (800be2c <tcp_poll+0x54>)
 800bdf4:	480e      	ldr	r0, [pc, #56]	@ (800be30 <tcp_poll+0x58>)
 800bdf6:	f007 fb25 	bl	8013444 <iprintf>
 800bdfa:	e011      	b.n	800be20 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	7d1b      	ldrb	r3, [r3, #20]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d106      	bne.n	800be12 <tcp_poll+0x3a>
 800be04:	4b08      	ldr	r3, [pc, #32]	@ (800be28 <tcp_poll+0x50>)
 800be06:	f640 023e 	movw	r2, #2110	@ 0x83e
 800be0a:	490a      	ldr	r1, [pc, #40]	@ (800be34 <tcp_poll+0x5c>)
 800be0c:	4808      	ldr	r0, [pc, #32]	@ (800be30 <tcp_poll+0x58>)
 800be0e:	f007 fb19 	bl	8013444 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	79fa      	ldrb	r2, [r7, #7]
 800be1e:	775a      	strb	r2, [r3, #29]
}
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	0801558c 	.word	0x0801558c
 800be2c:	08015ba0 	.word	0x08015ba0
 800be30:	080155d0 	.word	0x080155d0
 800be34:	08015bb8 	.word	0x08015bb8

0800be38 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d107      	bne.n	800be56 <tcp_pcb_purge+0x1e>
 800be46:	4b21      	ldr	r3, [pc, #132]	@ (800becc <tcp_pcb_purge+0x94>)
 800be48:	f640 0251 	movw	r2, #2129	@ 0x851
 800be4c:	4920      	ldr	r1, [pc, #128]	@ (800bed0 <tcp_pcb_purge+0x98>)
 800be4e:	4821      	ldr	r0, [pc, #132]	@ (800bed4 <tcp_pcb_purge+0x9c>)
 800be50:	f007 faf8 	bl	8013444 <iprintf>
 800be54:	e037      	b.n	800bec6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	7d1b      	ldrb	r3, [r3, #20]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d033      	beq.n	800bec6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800be62:	2b0a      	cmp	r3, #10
 800be64:	d02f      	beq.n	800bec6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d02b      	beq.n	800bec6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be72:	2b00      	cmp	r3, #0
 800be74:	d007      	beq.n	800be86 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7fe f86a 	bl	8009f54 <pbuf_free>
      pcb->refused_data = NULL;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d002      	beq.n	800be94 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 f986 	bl	800c1a0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be9a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7ff fd11 	bl	800b8c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800beaa:	4618      	mov	r0, r3
 800beac:	f7ff fd0c 	bl	800b8c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	0801558c 	.word	0x0801558c
 800bed0:	08015bd8 	.word	0x08015bd8
 800bed4:	080155d0 	.word	0x080155d0

0800bed8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d106      	bne.n	800bef6 <tcp_pcb_remove+0x1e>
 800bee8:	4b3e      	ldr	r3, [pc, #248]	@ (800bfe4 <tcp_pcb_remove+0x10c>)
 800beea:	f640 0283 	movw	r2, #2179	@ 0x883
 800beee:	493e      	ldr	r1, [pc, #248]	@ (800bfe8 <tcp_pcb_remove+0x110>)
 800bef0:	483e      	ldr	r0, [pc, #248]	@ (800bfec <tcp_pcb_remove+0x114>)
 800bef2:	f007 faa7 	bl	8013444 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d106      	bne.n	800bf0a <tcp_pcb_remove+0x32>
 800befc:	4b39      	ldr	r3, [pc, #228]	@ (800bfe4 <tcp_pcb_remove+0x10c>)
 800befe:	f640 0284 	movw	r2, #2180	@ 0x884
 800bf02:	493b      	ldr	r1, [pc, #236]	@ (800bff0 <tcp_pcb_remove+0x118>)
 800bf04:	4839      	ldr	r0, [pc, #228]	@ (800bfec <tcp_pcb_remove+0x114>)
 800bf06:	f007 fa9d 	bl	8013444 <iprintf>

  TCP_RMV(pcblist, pcb);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d105      	bne.n	800bf20 <tcp_pcb_remove+0x48>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	68da      	ldr	r2, [r3, #12]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	601a      	str	r2, [r3, #0]
 800bf1e:	e013      	b.n	800bf48 <tcp_pcb_remove+0x70>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	60fb      	str	r3, [r7, #12]
 800bf26:	e00c      	b.n	800bf42 <tcp_pcb_remove+0x6a>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	683a      	ldr	r2, [r7, #0]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d104      	bne.n	800bf3c <tcp_pcb_remove+0x64>
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	68da      	ldr	r2, [r3, #12]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	60da      	str	r2, [r3, #12]
 800bf3a:	e005      	b.n	800bf48 <tcp_pcb_remove+0x70>
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	60fb      	str	r3, [r7, #12]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1ef      	bne.n	800bf28 <tcp_pcb_remove+0x50>
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bf4e:	6838      	ldr	r0, [r7, #0]
 800bf50:	f7ff ff72 	bl	800be38 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	7d1b      	ldrb	r3, [r3, #20]
 800bf58:	2b0a      	cmp	r3, #10
 800bf5a:	d013      	beq.n	800bf84 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d00f      	beq.n	800bf84 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	8b5b      	ldrh	r3, [r3, #26]
 800bf68:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d009      	beq.n	800bf84 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	8b5b      	ldrh	r3, [r3, #26]
 800bf74:	f043 0302 	orr.w	r3, r3, #2
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bf7e:	6838      	ldr	r0, [r7, #0]
 800bf80:	f003 fbc0 	bl	800f704 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	7d1b      	ldrb	r3, [r3, #20]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d020      	beq.n	800bfce <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d006      	beq.n	800bfa2 <tcp_pcb_remove+0xca>
 800bf94:	4b13      	ldr	r3, [pc, #76]	@ (800bfe4 <tcp_pcb_remove+0x10c>)
 800bf96:	f640 0293 	movw	r2, #2195	@ 0x893
 800bf9a:	4916      	ldr	r1, [pc, #88]	@ (800bff4 <tcp_pcb_remove+0x11c>)
 800bf9c:	4813      	ldr	r0, [pc, #76]	@ (800bfec <tcp_pcb_remove+0x114>)
 800bf9e:	f007 fa51 	bl	8013444 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d006      	beq.n	800bfb8 <tcp_pcb_remove+0xe0>
 800bfaa:	4b0e      	ldr	r3, [pc, #56]	@ (800bfe4 <tcp_pcb_remove+0x10c>)
 800bfac:	f640 0294 	movw	r2, #2196	@ 0x894
 800bfb0:	4911      	ldr	r1, [pc, #68]	@ (800bff8 <tcp_pcb_remove+0x120>)
 800bfb2:	480e      	ldr	r0, [pc, #56]	@ (800bfec <tcp_pcb_remove+0x114>)
 800bfb4:	f007 fa46 	bl	8013444 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d006      	beq.n	800bfce <tcp_pcb_remove+0xf6>
 800bfc0:	4b08      	ldr	r3, [pc, #32]	@ (800bfe4 <tcp_pcb_remove+0x10c>)
 800bfc2:	f640 0296 	movw	r2, #2198	@ 0x896
 800bfc6:	490d      	ldr	r1, [pc, #52]	@ (800bffc <tcp_pcb_remove+0x124>)
 800bfc8:	4808      	ldr	r0, [pc, #32]	@ (800bfec <tcp_pcb_remove+0x114>)
 800bfca:	f007 fa3b 	bl	8013444 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bfda:	bf00      	nop
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	0801558c 	.word	0x0801558c
 800bfe8:	08015bf4 	.word	0x08015bf4
 800bfec:	080155d0 	.word	0x080155d0
 800bff0:	08015c10 	.word	0x08015c10
 800bff4:	08015c30 	.word	0x08015c30
 800bff8:	08015c48 	.word	0x08015c48
 800bffc:	08015c64 	.word	0x08015c64

0800c000 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d106      	bne.n	800c01c <tcp_next_iss+0x1c>
 800c00e:	4b0a      	ldr	r3, [pc, #40]	@ (800c038 <tcp_next_iss+0x38>)
 800c010:	f640 02af 	movw	r2, #2223	@ 0x8af
 800c014:	4909      	ldr	r1, [pc, #36]	@ (800c03c <tcp_next_iss+0x3c>)
 800c016:	480a      	ldr	r0, [pc, #40]	@ (800c040 <tcp_next_iss+0x40>)
 800c018:	f007 fa14 	bl	8013444 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c01c:	4b09      	ldr	r3, [pc, #36]	@ (800c044 <tcp_next_iss+0x44>)
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	4b09      	ldr	r3, [pc, #36]	@ (800c048 <tcp_next_iss+0x48>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4413      	add	r3, r2
 800c026:	4a07      	ldr	r2, [pc, #28]	@ (800c044 <tcp_next_iss+0x44>)
 800c028:	6013      	str	r3, [r2, #0]
  return iss;
 800c02a:	4b06      	ldr	r3, [pc, #24]	@ (800c044 <tcp_next_iss+0x44>)
 800c02c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3708      	adds	r7, #8
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	0801558c 	.word	0x0801558c
 800c03c:	08015c7c 	.word	0x08015c7c
 800c040:	080155d0 	.word	0x080155d0
 800c044:	24000028 	.word	0x24000028
 800c048:	240431fc 	.word	0x240431fc

0800c04c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b086      	sub	sp, #24
 800c050:	af00      	add	r7, sp, #0
 800c052:	4603      	mov	r3, r0
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
 800c058:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d106      	bne.n	800c06e <tcp_eff_send_mss_netif+0x22>
 800c060:	4b14      	ldr	r3, [pc, #80]	@ (800c0b4 <tcp_eff_send_mss_netif+0x68>)
 800c062:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800c066:	4914      	ldr	r1, [pc, #80]	@ (800c0b8 <tcp_eff_send_mss_netif+0x6c>)
 800c068:	4814      	ldr	r0, [pc, #80]	@ (800c0bc <tcp_eff_send_mss_netif+0x70>)
 800c06a:	f007 f9eb 	bl	8013444 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c074:	89fb      	ldrh	r3, [r7, #14]
 800c076:	e019      	b.n	800c0ac <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c07c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c07e:	8afb      	ldrh	r3, [r7, #22]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d012      	beq.n	800c0aa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c084:	2328      	movs	r3, #40	@ 0x28
 800c086:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c088:	8afa      	ldrh	r2, [r7, #22]
 800c08a:	8abb      	ldrh	r3, [r7, #20]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d904      	bls.n	800c09a <tcp_eff_send_mss_netif+0x4e>
 800c090:	8afa      	ldrh	r2, [r7, #22]
 800c092:	8abb      	ldrh	r3, [r7, #20]
 800c094:	1ad3      	subs	r3, r2, r3
 800c096:	b29b      	uxth	r3, r3
 800c098:	e000      	b.n	800c09c <tcp_eff_send_mss_netif+0x50>
 800c09a:	2300      	movs	r3, #0
 800c09c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c09e:	8a7a      	ldrh	r2, [r7, #18]
 800c0a0:	89fb      	ldrh	r3, [r7, #14]
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	bf28      	it	cs
 800c0a6:	4613      	movcs	r3, r2
 800c0a8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c0aa:	89fb      	ldrh	r3, [r7, #14]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3718      	adds	r7, #24
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	0801558c 	.word	0x0801558c
 800c0b8:	08015c98 	.word	0x08015c98
 800c0bc:	080155d0 	.word	0x080155d0

0800c0c0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d119      	bne.n	800c108 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c0d4:	4b10      	ldr	r3, [pc, #64]	@ (800c118 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c0d6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800c0da:	4910      	ldr	r1, [pc, #64]	@ (800c11c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c0dc:	4810      	ldr	r0, [pc, #64]	@ (800c120 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c0de:	f007 f9b1 	bl	8013444 <iprintf>

  while (pcb != NULL) {
 800c0e2:	e011      	b.n	800c108 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d108      	bne.n	800c102 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f7fe fd18 	bl	800ab2c <tcp_abort>
      pcb = next;
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	60fb      	str	r3, [r7, #12]
 800c100:	e002      	b.n	800c108 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1ea      	bne.n	800c0e4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c10e:	bf00      	nop
 800c110:	bf00      	nop
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	0801558c 	.word	0x0801558c
 800c11c:	08015cc0 	.word	0x08015cc0
 800c120:	080155d0 	.word	0x080155d0

0800c124 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d02a      	beq.n	800c18a <tcp_netif_ip_addr_changed+0x66>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d026      	beq.n	800c18a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c13c:	4b15      	ldr	r3, [pc, #84]	@ (800c194 <tcp_netif_ip_addr_changed+0x70>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4619      	mov	r1, r3
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7ff ffbc 	bl	800c0c0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c148:	4b13      	ldr	r3, [pc, #76]	@ (800c198 <tcp_netif_ip_addr_changed+0x74>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff ffb6 	bl	800c0c0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d017      	beq.n	800c18a <tcp_netif_ip_addr_changed+0x66>
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d013      	beq.n	800c18a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c162:	4b0e      	ldr	r3, [pc, #56]	@ (800c19c <tcp_netif_ip_addr_changed+0x78>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	60fb      	str	r3, [r7, #12]
 800c168:	e00c      	b.n	800c184 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	429a      	cmp	r2, r3
 800c174:	d103      	bne.n	800c17e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	60fb      	str	r3, [r7, #12]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1ef      	bne.n	800c16a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c18a:	bf00      	nop
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	24043208 	.word	0x24043208
 800c198:	24043200 	.word	0x24043200
 800c19c:	24043204 	.word	0x24043204

0800c1a0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d007      	beq.n	800c1c0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff fb87 	bl	800b8c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c1c8:	b590      	push	{r4, r7, lr}
 800c1ca:	b08d      	sub	sp, #52	@ 0x34
 800c1cc:	af04      	add	r7, sp, #16
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d105      	bne.n	800c1e4 <tcp_input+0x1c>
 800c1d8:	4b9b      	ldr	r3, [pc, #620]	@ (800c448 <tcp_input+0x280>)
 800c1da:	2283      	movs	r2, #131	@ 0x83
 800c1dc:	499b      	ldr	r1, [pc, #620]	@ (800c44c <tcp_input+0x284>)
 800c1de:	489c      	ldr	r0, [pc, #624]	@ (800c450 <tcp_input+0x288>)
 800c1e0:	f007 f930 	bl	8013444 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	4a9a      	ldr	r2, [pc, #616]	@ (800c454 <tcp_input+0x28c>)
 800c1ea:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	895b      	ldrh	r3, [r3, #10]
 800c1f0:	2b13      	cmp	r3, #19
 800c1f2:	f240 83d1 	bls.w	800c998 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c1f6:	4b98      	ldr	r3, [pc, #608]	@ (800c458 <tcp_input+0x290>)
 800c1f8:	695b      	ldr	r3, [r3, #20]
 800c1fa:	4a97      	ldr	r2, [pc, #604]	@ (800c458 <tcp_input+0x290>)
 800c1fc:	6812      	ldr	r2, [r2, #0]
 800c1fe:	4611      	mov	r1, r2
 800c200:	4618      	mov	r0, r3
 800c202:	f006 f8c9 	bl	8012398 <ip4_addr_isbroadcast_u32>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f040 83c7 	bne.w	800c99c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c20e:	4b92      	ldr	r3, [pc, #584]	@ (800c458 <tcp_input+0x290>)
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c216:	2be0      	cmp	r3, #224	@ 0xe0
 800c218:	f000 83c0 	beq.w	800c99c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c21c:	4b8d      	ldr	r3, [pc, #564]	@ (800c454 <tcp_input+0x28c>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	899b      	ldrh	r3, [r3, #12]
 800c222:	b29b      	uxth	r3, r3
 800c224:	4618      	mov	r0, r3
 800c226:	f7fc fa77 	bl	8008718 <lwip_htons>
 800c22a:	4603      	mov	r3, r0
 800c22c:	0b1b      	lsrs	r3, r3, #12
 800c22e:	b29b      	uxth	r3, r3
 800c230:	b2db      	uxtb	r3, r3
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c236:	7cbb      	ldrb	r3, [r7, #18]
 800c238:	2b13      	cmp	r3, #19
 800c23a:	f240 83b1 	bls.w	800c9a0 <tcp_input+0x7d8>
 800c23e:	7cbb      	ldrb	r3, [r7, #18]
 800c240:	b29a      	uxth	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	891b      	ldrh	r3, [r3, #8]
 800c246:	429a      	cmp	r2, r3
 800c248:	f200 83aa 	bhi.w	800c9a0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c24c:	7cbb      	ldrb	r3, [r7, #18]
 800c24e:	b29b      	uxth	r3, r3
 800c250:	3b14      	subs	r3, #20
 800c252:	b29a      	uxth	r2, r3
 800c254:	4b81      	ldr	r3, [pc, #516]	@ (800c45c <tcp_input+0x294>)
 800c256:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c258:	4b81      	ldr	r3, [pc, #516]	@ (800c460 <tcp_input+0x298>)
 800c25a:	2200      	movs	r2, #0
 800c25c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	895a      	ldrh	r2, [r3, #10]
 800c262:	7cbb      	ldrb	r3, [r7, #18]
 800c264:	b29b      	uxth	r3, r3
 800c266:	429a      	cmp	r2, r3
 800c268:	d309      	bcc.n	800c27e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c26a:	4b7c      	ldr	r3, [pc, #496]	@ (800c45c <tcp_input+0x294>)
 800c26c:	881a      	ldrh	r2, [r3, #0]
 800c26e:	4b7d      	ldr	r3, [pc, #500]	@ (800c464 <tcp_input+0x29c>)
 800c270:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c272:	7cbb      	ldrb	r3, [r7, #18]
 800c274:	4619      	mov	r1, r3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f7fd fde6 	bl	8009e48 <pbuf_remove_header>
 800c27c:	e04e      	b.n	800c31c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d105      	bne.n	800c292 <tcp_input+0xca>
 800c286:	4b70      	ldr	r3, [pc, #448]	@ (800c448 <tcp_input+0x280>)
 800c288:	22c2      	movs	r2, #194	@ 0xc2
 800c28a:	4977      	ldr	r1, [pc, #476]	@ (800c468 <tcp_input+0x2a0>)
 800c28c:	4870      	ldr	r0, [pc, #448]	@ (800c450 <tcp_input+0x288>)
 800c28e:	f007 f8d9 	bl	8013444 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c292:	2114      	movs	r1, #20
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7fd fdd7 	bl	8009e48 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	895a      	ldrh	r2, [r3, #10]
 800c29e:	4b71      	ldr	r3, [pc, #452]	@ (800c464 <tcp_input+0x29c>)
 800c2a0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c2a2:	4b6e      	ldr	r3, [pc, #440]	@ (800c45c <tcp_input+0x294>)
 800c2a4:	881a      	ldrh	r2, [r3, #0]
 800c2a6:	4b6f      	ldr	r3, [pc, #444]	@ (800c464 <tcp_input+0x29c>)
 800c2a8:	881b      	ldrh	r3, [r3, #0]
 800c2aa:	1ad3      	subs	r3, r2, r3
 800c2ac:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c2ae:	4b6d      	ldr	r3, [pc, #436]	@ (800c464 <tcp_input+0x29c>)
 800c2b0:	881b      	ldrh	r3, [r3, #0]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7fd fdc7 	bl	8009e48 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	895b      	ldrh	r3, [r3, #10]
 800c2c0:	8a3a      	ldrh	r2, [r7, #16]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	f200 836e 	bhi.w	800c9a4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	4a64      	ldr	r2, [pc, #400]	@ (800c460 <tcp_input+0x298>)
 800c2d0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	8a3a      	ldrh	r2, [r7, #16]
 800c2d8:	4611      	mov	r1, r2
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fd fdb4 	bl	8009e48 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	891a      	ldrh	r2, [r3, #8]
 800c2e4:	8a3b      	ldrh	r3, [r7, #16]
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	895b      	ldrh	r3, [r3, #10]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d005      	beq.n	800c302 <tcp_input+0x13a>
 800c2f6:	4b54      	ldr	r3, [pc, #336]	@ (800c448 <tcp_input+0x280>)
 800c2f8:	22df      	movs	r2, #223	@ 0xdf
 800c2fa:	495c      	ldr	r1, [pc, #368]	@ (800c46c <tcp_input+0x2a4>)
 800c2fc:	4854      	ldr	r0, [pc, #336]	@ (800c450 <tcp_input+0x288>)
 800c2fe:	f007 f8a1 	bl	8013444 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	891a      	ldrh	r2, [r3, #8]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	891b      	ldrh	r3, [r3, #8]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d005      	beq.n	800c31c <tcp_input+0x154>
 800c310:	4b4d      	ldr	r3, [pc, #308]	@ (800c448 <tcp_input+0x280>)
 800c312:	22e0      	movs	r2, #224	@ 0xe0
 800c314:	4956      	ldr	r1, [pc, #344]	@ (800c470 <tcp_input+0x2a8>)
 800c316:	484e      	ldr	r0, [pc, #312]	@ (800c450 <tcp_input+0x288>)
 800c318:	f007 f894 	bl	8013444 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c31c:	4b4d      	ldr	r3, [pc, #308]	@ (800c454 <tcp_input+0x28c>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	881b      	ldrh	r3, [r3, #0]
 800c322:	b29b      	uxth	r3, r3
 800c324:	4a4b      	ldr	r2, [pc, #300]	@ (800c454 <tcp_input+0x28c>)
 800c326:	6814      	ldr	r4, [r2, #0]
 800c328:	4618      	mov	r0, r3
 800c32a:	f7fc f9f5 	bl	8008718 <lwip_htons>
 800c32e:	4603      	mov	r3, r0
 800c330:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c332:	4b48      	ldr	r3, [pc, #288]	@ (800c454 <tcp_input+0x28c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	885b      	ldrh	r3, [r3, #2]
 800c338:	b29b      	uxth	r3, r3
 800c33a:	4a46      	ldr	r2, [pc, #280]	@ (800c454 <tcp_input+0x28c>)
 800c33c:	6814      	ldr	r4, [r2, #0]
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fc f9ea 	bl	8008718 <lwip_htons>
 800c344:	4603      	mov	r3, r0
 800c346:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c348:	4b42      	ldr	r3, [pc, #264]	@ (800c454 <tcp_input+0x28c>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	4a41      	ldr	r2, [pc, #260]	@ (800c454 <tcp_input+0x28c>)
 800c350:	6814      	ldr	r4, [r2, #0]
 800c352:	4618      	mov	r0, r3
 800c354:	f7fc f9f6 	bl	8008744 <lwip_htonl>
 800c358:	4603      	mov	r3, r0
 800c35a:	6063      	str	r3, [r4, #4]
 800c35c:	6863      	ldr	r3, [r4, #4]
 800c35e:	4a45      	ldr	r2, [pc, #276]	@ (800c474 <tcp_input+0x2ac>)
 800c360:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c362:	4b3c      	ldr	r3, [pc, #240]	@ (800c454 <tcp_input+0x28c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	4a3a      	ldr	r2, [pc, #232]	@ (800c454 <tcp_input+0x28c>)
 800c36a:	6814      	ldr	r4, [r2, #0]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fc f9e9 	bl	8008744 <lwip_htonl>
 800c372:	4603      	mov	r3, r0
 800c374:	60a3      	str	r3, [r4, #8]
 800c376:	68a3      	ldr	r3, [r4, #8]
 800c378:	4a3f      	ldr	r2, [pc, #252]	@ (800c478 <tcp_input+0x2b0>)
 800c37a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c37c:	4b35      	ldr	r3, [pc, #212]	@ (800c454 <tcp_input+0x28c>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	89db      	ldrh	r3, [r3, #14]
 800c382:	b29b      	uxth	r3, r3
 800c384:	4a33      	ldr	r2, [pc, #204]	@ (800c454 <tcp_input+0x28c>)
 800c386:	6814      	ldr	r4, [r2, #0]
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fc f9c5 	bl	8008718 <lwip_htons>
 800c38e:	4603      	mov	r3, r0
 800c390:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c392:	4b30      	ldr	r3, [pc, #192]	@ (800c454 <tcp_input+0x28c>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	899b      	ldrh	r3, [r3, #12]
 800c398:	b29b      	uxth	r3, r3
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fc f9bc 	bl	8008718 <lwip_htons>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c3a8:	b2da      	uxtb	r2, r3
 800c3aa:	4b34      	ldr	r3, [pc, #208]	@ (800c47c <tcp_input+0x2b4>)
 800c3ac:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	891a      	ldrh	r2, [r3, #8]
 800c3b2:	4b33      	ldr	r3, [pc, #204]	@ (800c480 <tcp_input+0x2b8>)
 800c3b4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c3b6:	4b31      	ldr	r3, [pc, #196]	@ (800c47c <tcp_input+0x2b4>)
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	f003 0303 	and.w	r3, r3, #3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00c      	beq.n	800c3dc <tcp_input+0x214>
    tcplen++;
 800c3c2:	4b2f      	ldr	r3, [pc, #188]	@ (800c480 <tcp_input+0x2b8>)
 800c3c4:	881b      	ldrh	r3, [r3, #0]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	b29a      	uxth	r2, r3
 800c3ca:	4b2d      	ldr	r3, [pc, #180]	@ (800c480 <tcp_input+0x2b8>)
 800c3cc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	891a      	ldrh	r2, [r3, #8]
 800c3d2:	4b2b      	ldr	r3, [pc, #172]	@ (800c480 <tcp_input+0x2b8>)
 800c3d4:	881b      	ldrh	r3, [r3, #0]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	f200 82e6 	bhi.w	800c9a8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c3e0:	4b28      	ldr	r3, [pc, #160]	@ (800c484 <tcp_input+0x2bc>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	61fb      	str	r3, [r7, #28]
 800c3e6:	e09d      	b.n	800c524 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	7d1b      	ldrb	r3, [r3, #20]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d105      	bne.n	800c3fc <tcp_input+0x234>
 800c3f0:	4b15      	ldr	r3, [pc, #84]	@ (800c448 <tcp_input+0x280>)
 800c3f2:	22fb      	movs	r2, #251	@ 0xfb
 800c3f4:	4924      	ldr	r1, [pc, #144]	@ (800c488 <tcp_input+0x2c0>)
 800c3f6:	4816      	ldr	r0, [pc, #88]	@ (800c450 <tcp_input+0x288>)
 800c3f8:	f007 f824 	bl	8013444 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	7d1b      	ldrb	r3, [r3, #20]
 800c400:	2b0a      	cmp	r3, #10
 800c402:	d105      	bne.n	800c410 <tcp_input+0x248>
 800c404:	4b10      	ldr	r3, [pc, #64]	@ (800c448 <tcp_input+0x280>)
 800c406:	22fc      	movs	r2, #252	@ 0xfc
 800c408:	4920      	ldr	r1, [pc, #128]	@ (800c48c <tcp_input+0x2c4>)
 800c40a:	4811      	ldr	r0, [pc, #68]	@ (800c450 <tcp_input+0x288>)
 800c40c:	f007 f81a 	bl	8013444 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	7d1b      	ldrb	r3, [r3, #20]
 800c414:	2b01      	cmp	r3, #1
 800c416:	d105      	bne.n	800c424 <tcp_input+0x25c>
 800c418:	4b0b      	ldr	r3, [pc, #44]	@ (800c448 <tcp_input+0x280>)
 800c41a:	22fd      	movs	r2, #253	@ 0xfd
 800c41c:	491c      	ldr	r1, [pc, #112]	@ (800c490 <tcp_input+0x2c8>)
 800c41e:	480c      	ldr	r0, [pc, #48]	@ (800c450 <tcp_input+0x288>)
 800c420:	f007 f810 	bl	8013444 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	7a1b      	ldrb	r3, [r3, #8]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d033      	beq.n	800c494 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	7a1a      	ldrb	r2, [r3, #8]
 800c430:	4b09      	ldr	r3, [pc, #36]	@ (800c458 <tcp_input+0x290>)
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c438:	3301      	adds	r3, #1
 800c43a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d029      	beq.n	800c494 <tcp_input+0x2cc>
      prev = pcb;
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	61bb      	str	r3, [r7, #24]
      continue;
 800c444:	e06b      	b.n	800c51e <tcp_input+0x356>
 800c446:	bf00      	nop
 800c448:	08015cf4 	.word	0x08015cf4
 800c44c:	08015d28 	.word	0x08015d28
 800c450:	08015d40 	.word	0x08015d40
 800c454:	24043224 	.word	0x24043224
 800c458:	240402e0 	.word	0x240402e0
 800c45c:	24043228 	.word	0x24043228
 800c460:	2404322c 	.word	0x2404322c
 800c464:	2404322a 	.word	0x2404322a
 800c468:	08015d68 	.word	0x08015d68
 800c46c:	08015d78 	.word	0x08015d78
 800c470:	08015d84 	.word	0x08015d84
 800c474:	24043234 	.word	0x24043234
 800c478:	24043238 	.word	0x24043238
 800c47c:	24043240 	.word	0x24043240
 800c480:	2404323e 	.word	0x2404323e
 800c484:	24043208 	.word	0x24043208
 800c488:	08015da4 	.word	0x08015da4
 800c48c:	08015dcc 	.word	0x08015dcc
 800c490:	08015df8 	.word	0x08015df8
    }

    if (pcb->remote_port == tcphdr->src &&
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	8b1a      	ldrh	r2, [r3, #24]
 800c498:	4b72      	ldr	r3, [pc, #456]	@ (800c664 <tcp_input+0x49c>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	881b      	ldrh	r3, [r3, #0]
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d13a      	bne.n	800c51a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	8ada      	ldrh	r2, [r3, #22]
 800c4a8:	4b6e      	ldr	r3, [pc, #440]	@ (800c664 <tcp_input+0x49c>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	885b      	ldrh	r3, [r3, #2]
 800c4ae:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d132      	bne.n	800c51a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	4b6b      	ldr	r3, [pc, #428]	@ (800c668 <tcp_input+0x4a0>)
 800c4ba:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d12c      	bne.n	800c51a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	4b68      	ldr	r3, [pc, #416]	@ (800c668 <tcp_input+0x4a0>)
 800c4c6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d126      	bne.n	800c51a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	69fa      	ldr	r2, [r7, #28]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d106      	bne.n	800c4e4 <tcp_input+0x31c>
 800c4d6:	4b65      	ldr	r3, [pc, #404]	@ (800c66c <tcp_input+0x4a4>)
 800c4d8:	f240 120d 	movw	r2, #269	@ 0x10d
 800c4dc:	4964      	ldr	r1, [pc, #400]	@ (800c670 <tcp_input+0x4a8>)
 800c4de:	4865      	ldr	r0, [pc, #404]	@ (800c674 <tcp_input+0x4ac>)
 800c4e0:	f006 ffb0 	bl	8013444 <iprintf>
      if (prev != NULL) {
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00a      	beq.n	800c500 <tcp_input+0x338>
        prev->next = pcb->next;
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	68da      	ldr	r2, [r3, #12]
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c4f2:	4b61      	ldr	r3, [pc, #388]	@ (800c678 <tcp_input+0x4b0>)
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c4fa:	4a5f      	ldr	r2, [pc, #380]	@ (800c678 <tcp_input+0x4b0>)
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	69fa      	ldr	r2, [r7, #28]
 800c506:	429a      	cmp	r2, r3
 800c508:	d111      	bne.n	800c52e <tcp_input+0x366>
 800c50a:	4b58      	ldr	r3, [pc, #352]	@ (800c66c <tcp_input+0x4a4>)
 800c50c:	f240 1215 	movw	r2, #277	@ 0x115
 800c510:	495a      	ldr	r1, [pc, #360]	@ (800c67c <tcp_input+0x4b4>)
 800c512:	4858      	ldr	r0, [pc, #352]	@ (800c674 <tcp_input+0x4ac>)
 800c514:	f006 ff96 	bl	8013444 <iprintf>
      break;
 800c518:	e009      	b.n	800c52e <tcp_input+0x366>
    }
    prev = pcb;
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	61fb      	str	r3, [r7, #28]
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	2b00      	cmp	r3, #0
 800c528:	f47f af5e 	bne.w	800c3e8 <tcp_input+0x220>
 800c52c:	e000      	b.n	800c530 <tcp_input+0x368>
      break;
 800c52e:	bf00      	nop
  }

  if (pcb == NULL) {
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	2b00      	cmp	r3, #0
 800c534:	f040 80aa 	bne.w	800c68c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c538:	4b51      	ldr	r3, [pc, #324]	@ (800c680 <tcp_input+0x4b8>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	61fb      	str	r3, [r7, #28]
 800c53e:	e03f      	b.n	800c5c0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	7d1b      	ldrb	r3, [r3, #20]
 800c544:	2b0a      	cmp	r3, #10
 800c546:	d006      	beq.n	800c556 <tcp_input+0x38e>
 800c548:	4b48      	ldr	r3, [pc, #288]	@ (800c66c <tcp_input+0x4a4>)
 800c54a:	f240 121f 	movw	r2, #287	@ 0x11f
 800c54e:	494d      	ldr	r1, [pc, #308]	@ (800c684 <tcp_input+0x4bc>)
 800c550:	4848      	ldr	r0, [pc, #288]	@ (800c674 <tcp_input+0x4ac>)
 800c552:	f006 ff77 	bl	8013444 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	7a1b      	ldrb	r3, [r3, #8]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d009      	beq.n	800c572 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	7a1a      	ldrb	r2, [r3, #8]
 800c562:	4b41      	ldr	r3, [pc, #260]	@ (800c668 <tcp_input+0x4a0>)
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c56a:	3301      	adds	r3, #1
 800c56c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c56e:	429a      	cmp	r2, r3
 800c570:	d122      	bne.n	800c5b8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	8b1a      	ldrh	r2, [r3, #24]
 800c576:	4b3b      	ldr	r3, [pc, #236]	@ (800c664 <tcp_input+0x49c>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	881b      	ldrh	r3, [r3, #0]
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	429a      	cmp	r2, r3
 800c580:	d11b      	bne.n	800c5ba <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	8ada      	ldrh	r2, [r3, #22]
 800c586:	4b37      	ldr	r3, [pc, #220]	@ (800c664 <tcp_input+0x49c>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	885b      	ldrh	r3, [r3, #2]
 800c58c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c58e:	429a      	cmp	r2, r3
 800c590:	d113      	bne.n	800c5ba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	685a      	ldr	r2, [r3, #4]
 800c596:	4b34      	ldr	r3, [pc, #208]	@ (800c668 <tcp_input+0x4a0>)
 800c598:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d10d      	bne.n	800c5ba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	4b31      	ldr	r3, [pc, #196]	@ (800c668 <tcp_input+0x4a0>)
 800c5a4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d107      	bne.n	800c5ba <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c5aa:	69f8      	ldr	r0, [r7, #28]
 800c5ac:	f000 fb56 	bl	800cc5c <tcp_timewait_input>
        }
        pbuf_free(p);
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f7fd fccf 	bl	8009f54 <pbuf_free>
        return;
 800c5b6:	e1fd      	b.n	800c9b4 <tcp_input+0x7ec>
        continue;
 800c5b8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	61fb      	str	r3, [r7, #28]
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1bc      	bne.n	800c540 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c5ca:	4b2f      	ldr	r3, [pc, #188]	@ (800c688 <tcp_input+0x4c0>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	617b      	str	r3, [r7, #20]
 800c5d0:	e02a      	b.n	800c628 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	7a1b      	ldrb	r3, [r3, #8]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00c      	beq.n	800c5f4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	7a1a      	ldrb	r2, [r3, #8]
 800c5de:	4b22      	ldr	r3, [pc, #136]	@ (800c668 <tcp_input+0x4a0>)
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d002      	beq.n	800c5f4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	61bb      	str	r3, [r7, #24]
        continue;
 800c5f2:	e016      	b.n	800c622 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	8ada      	ldrh	r2, [r3, #22]
 800c5f8:	4b1a      	ldr	r3, [pc, #104]	@ (800c664 <tcp_input+0x49c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	885b      	ldrh	r3, [r3, #2]
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	429a      	cmp	r2, r3
 800c602:	d10c      	bne.n	800c61e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	4b17      	ldr	r3, [pc, #92]	@ (800c668 <tcp_input+0x4a0>)
 800c60a:	695b      	ldr	r3, [r3, #20]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d00f      	beq.n	800c630 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00d      	beq.n	800c632 <tcp_input+0x46a>
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d009      	beq.n	800c632 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	617b      	str	r3, [r7, #20]
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d1d1      	bne.n	800c5d2 <tcp_input+0x40a>
 800c62e:	e000      	b.n	800c632 <tcp_input+0x46a>
            break;
 800c630:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d029      	beq.n	800c68c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00a      	beq.n	800c654 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	68da      	ldr	r2, [r3, #12]
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c646:	4b10      	ldr	r3, [pc, #64]	@ (800c688 <tcp_input+0x4c0>)
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c64e:	4a0e      	ldr	r2, [pc, #56]	@ (800c688 <tcp_input+0x4c0>)
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c654:	6978      	ldr	r0, [r7, #20]
 800c656:	f000 fa03 	bl	800ca60 <tcp_listen_input>
      }
      pbuf_free(p);
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7fd fc7a 	bl	8009f54 <pbuf_free>
      return;
 800c660:	e1a8      	b.n	800c9b4 <tcp_input+0x7ec>
 800c662:	bf00      	nop
 800c664:	24043224 	.word	0x24043224
 800c668:	240402e0 	.word	0x240402e0
 800c66c:	08015cf4 	.word	0x08015cf4
 800c670:	08015e20 	.word	0x08015e20
 800c674:	08015d40 	.word	0x08015d40
 800c678:	24043208 	.word	0x24043208
 800c67c:	08015e4c 	.word	0x08015e4c
 800c680:	2404320c 	.word	0x2404320c
 800c684:	08015e78 	.word	0x08015e78
 800c688:	24043204 	.word	0x24043204
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f000 8158 	beq.w	800c944 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c694:	4b95      	ldr	r3, [pc, #596]	@ (800c8ec <tcp_input+0x724>)
 800c696:	2200      	movs	r2, #0
 800c698:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	891a      	ldrh	r2, [r3, #8]
 800c69e:	4b93      	ldr	r3, [pc, #588]	@ (800c8ec <tcp_input+0x724>)
 800c6a0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c6a2:	4a92      	ldr	r2, [pc, #584]	@ (800c8ec <tcp_input+0x724>)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c6a8:	4b91      	ldr	r3, [pc, #580]	@ (800c8f0 <tcp_input+0x728>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a8f      	ldr	r2, [pc, #572]	@ (800c8ec <tcp_input+0x724>)
 800c6ae:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c6b0:	4b90      	ldr	r3, [pc, #576]	@ (800c8f4 <tcp_input+0x72c>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c6b6:	4b90      	ldr	r3, [pc, #576]	@ (800c8f8 <tcp_input+0x730>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c6bc:	4b8f      	ldr	r3, [pc, #572]	@ (800c8fc <tcp_input+0x734>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c6c2:	4b8f      	ldr	r3, [pc, #572]	@ (800c900 <tcp_input+0x738>)
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	f003 0308 	and.w	r3, r3, #8
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d006      	beq.n	800c6dc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	7b5b      	ldrb	r3, [r3, #13]
 800c6d2:	f043 0301 	orr.w	r3, r3, #1
 800c6d6:	b2da      	uxtb	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d017      	beq.n	800c714 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c6e4:	69f8      	ldr	r0, [r7, #28]
 800c6e6:	f7ff f873 	bl	800b7d0 <tcp_process_refused_data>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	f113 0f0d 	cmn.w	r3, #13
 800c6f0:	d007      	beq.n	800c702 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00c      	beq.n	800c714 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c6fa:	4b82      	ldr	r3, [pc, #520]	@ (800c904 <tcp_input+0x73c>)
 800c6fc:	881b      	ldrh	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d008      	beq.n	800c714 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c706:	2b00      	cmp	r3, #0
 800c708:	f040 80e3 	bne.w	800c8d2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c70c:	69f8      	ldr	r0, [r7, #28]
 800c70e:	f003 fdff 	bl	8010310 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c712:	e0de      	b.n	800c8d2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c714:	4a7c      	ldr	r2, [pc, #496]	@ (800c908 <tcp_input+0x740>)
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c71a:	69f8      	ldr	r0, [r7, #28]
 800c71c:	f000 fb18 	bl	800cd50 <tcp_process>
 800c720:	4603      	mov	r3, r0
 800c722:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c724:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c728:	f113 0f0d 	cmn.w	r3, #13
 800c72c:	f000 80d3 	beq.w	800c8d6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c730:	4b71      	ldr	r3, [pc, #452]	@ (800c8f8 <tcp_input+0x730>)
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	f003 0308 	and.w	r3, r3, #8
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d015      	beq.n	800c768 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c742:	2b00      	cmp	r3, #0
 800c744:	d008      	beq.n	800c758 <tcp_input+0x590>
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c74c:	69fa      	ldr	r2, [r7, #28]
 800c74e:	6912      	ldr	r2, [r2, #16]
 800c750:	f06f 010d 	mvn.w	r1, #13
 800c754:	4610      	mov	r0, r2
 800c756:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c758:	69f9      	ldr	r1, [r7, #28]
 800c75a:	486c      	ldr	r0, [pc, #432]	@ (800c90c <tcp_input+0x744>)
 800c75c:	f7ff fbbc 	bl	800bed8 <tcp_pcb_remove>
        tcp_free(pcb);
 800c760:	69f8      	ldr	r0, [r7, #28]
 800c762:	f7fd fefb 	bl	800a55c <tcp_free>
 800c766:	e0da      	b.n	800c91e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c76c:	4b63      	ldr	r3, [pc, #396]	@ (800c8fc <tcp_input+0x734>)
 800c76e:	881b      	ldrh	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d01d      	beq.n	800c7b0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c774:	4b61      	ldr	r3, [pc, #388]	@ (800c8fc <tcp_input+0x734>)
 800c776:	881b      	ldrh	r3, [r3, #0]
 800c778:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c780:	2b00      	cmp	r3, #0
 800c782:	d00a      	beq.n	800c79a <tcp_input+0x5d2>
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c78a:	69fa      	ldr	r2, [r7, #28]
 800c78c:	6910      	ldr	r0, [r2, #16]
 800c78e:	89fa      	ldrh	r2, [r7, #14]
 800c790:	69f9      	ldr	r1, [r7, #28]
 800c792:	4798      	blx	r3
 800c794:	4603      	mov	r3, r0
 800c796:	74fb      	strb	r3, [r7, #19]
 800c798:	e001      	b.n	800c79e <tcp_input+0x5d6>
 800c79a:	2300      	movs	r3, #0
 800c79c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c79e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7a2:	f113 0f0d 	cmn.w	r3, #13
 800c7a6:	f000 8098 	beq.w	800c8da <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c7aa:	4b54      	ldr	r3, [pc, #336]	@ (800c8fc <tcp_input+0x734>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c7b0:	69f8      	ldr	r0, [r7, #28]
 800c7b2:	f000 f915 	bl	800c9e0 <tcp_input_delayed_close>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	f040 8090 	bne.w	800c8de <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c7be:	4b4d      	ldr	r3, [pc, #308]	@ (800c8f4 <tcp_input+0x72c>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d041      	beq.n	800c84a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d006      	beq.n	800c7dc <tcp_input+0x614>
 800c7ce:	4b50      	ldr	r3, [pc, #320]	@ (800c910 <tcp_input+0x748>)
 800c7d0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c7d4:	494f      	ldr	r1, [pc, #316]	@ (800c914 <tcp_input+0x74c>)
 800c7d6:	4850      	ldr	r0, [pc, #320]	@ (800c918 <tcp_input+0x750>)
 800c7d8:	f006 fe34 	bl	8013444 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	8b5b      	ldrh	r3, [r3, #26]
 800c7e0:	f003 0310 	and.w	r3, r3, #16
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d008      	beq.n	800c7fa <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c7e8:	4b42      	ldr	r3, [pc, #264]	@ (800c8f4 <tcp_input+0x72c>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fd fbb1 	bl	8009f54 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c7f2:	69f8      	ldr	r0, [r7, #28]
 800c7f4:	f7fe f99a 	bl	800ab2c <tcp_abort>
            goto aborted;
 800c7f8:	e091      	b.n	800c91e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00c      	beq.n	800c81e <tcp_input+0x656>
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	6918      	ldr	r0, [r3, #16]
 800c80e:	4b39      	ldr	r3, [pc, #228]	@ (800c8f4 <tcp_input+0x72c>)
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	2300      	movs	r3, #0
 800c814:	69f9      	ldr	r1, [r7, #28]
 800c816:	47a0      	blx	r4
 800c818:	4603      	mov	r3, r0
 800c81a:	74fb      	strb	r3, [r7, #19]
 800c81c:	e008      	b.n	800c830 <tcp_input+0x668>
 800c81e:	4b35      	ldr	r3, [pc, #212]	@ (800c8f4 <tcp_input+0x72c>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	2300      	movs	r3, #0
 800c824:	69f9      	ldr	r1, [r7, #28]
 800c826:	2000      	movs	r0, #0
 800c828:	f7ff f8a8 	bl	800b97c <tcp_recv_null>
 800c82c:	4603      	mov	r3, r0
 800c82e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c830:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c834:	f113 0f0d 	cmn.w	r3, #13
 800c838:	d053      	beq.n	800c8e2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c83a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d003      	beq.n	800c84a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c842:	4b2c      	ldr	r3, [pc, #176]	@ (800c8f4 <tcp_input+0x72c>)
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c84a:	4b2b      	ldr	r3, [pc, #172]	@ (800c8f8 <tcp_input+0x730>)
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	f003 0320 	and.w	r3, r3, #32
 800c852:	2b00      	cmp	r3, #0
 800c854:	d030      	beq.n	800c8b8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d009      	beq.n	800c872 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c85e:	69fb      	ldr	r3, [r7, #28]
 800c860:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c862:	7b5a      	ldrb	r2, [r3, #13]
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c868:	f042 0220 	orr.w	r2, r2, #32
 800c86c:	b2d2      	uxtb	r2, r2
 800c86e:	735a      	strb	r2, [r3, #13]
 800c870:	e022      	b.n	800c8b8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c876:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c87a:	d005      	beq.n	800c888 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c880:	3301      	adds	r3, #1
 800c882:	b29a      	uxth	r2, r3
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00b      	beq.n	800c8aa <tcp_input+0x6e2>
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	6918      	ldr	r0, [r3, #16]
 800c89c:	2300      	movs	r3, #0
 800c89e:	2200      	movs	r2, #0
 800c8a0:	69f9      	ldr	r1, [r7, #28]
 800c8a2:	47a0      	blx	r4
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	74fb      	strb	r3, [r7, #19]
 800c8a8:	e001      	b.n	800c8ae <tcp_input+0x6e6>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c8ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c8b2:	f113 0f0d 	cmn.w	r3, #13
 800c8b6:	d016      	beq.n	800c8e6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c8b8:	4b13      	ldr	r3, [pc, #76]	@ (800c908 <tcp_input+0x740>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c8be:	69f8      	ldr	r0, [r7, #28]
 800c8c0:	f000 f88e 	bl	800c9e0 <tcp_input_delayed_close>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d128      	bne.n	800c91c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c8ca:	69f8      	ldr	r0, [r7, #28]
 800c8cc:	f002 ff1a 	bl	800f704 <tcp_output>
 800c8d0:	e025      	b.n	800c91e <tcp_input+0x756>
        goto aborted;
 800c8d2:	bf00      	nop
 800c8d4:	e023      	b.n	800c91e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c8d6:	bf00      	nop
 800c8d8:	e021      	b.n	800c91e <tcp_input+0x756>
              goto aborted;
 800c8da:	bf00      	nop
 800c8dc:	e01f      	b.n	800c91e <tcp_input+0x756>
          goto aborted;
 800c8de:	bf00      	nop
 800c8e0:	e01d      	b.n	800c91e <tcp_input+0x756>
            goto aborted;
 800c8e2:	bf00      	nop
 800c8e4:	e01b      	b.n	800c91e <tcp_input+0x756>
              goto aborted;
 800c8e6:	bf00      	nop
 800c8e8:	e019      	b.n	800c91e <tcp_input+0x756>
 800c8ea:	bf00      	nop
 800c8ec:	24043214 	.word	0x24043214
 800c8f0:	24043224 	.word	0x24043224
 800c8f4:	24043244 	.word	0x24043244
 800c8f8:	24043241 	.word	0x24043241
 800c8fc:	2404323c 	.word	0x2404323c
 800c900:	24043240 	.word	0x24043240
 800c904:	2404323e 	.word	0x2404323e
 800c908:	24043248 	.word	0x24043248
 800c90c:	24043208 	.word	0x24043208
 800c910:	08015cf4 	.word	0x08015cf4
 800c914:	08015ea8 	.word	0x08015ea8
 800c918:	08015d40 	.word	0x08015d40
          goto aborted;
 800c91c:	bf00      	nop
    tcp_input_pcb = NULL;
 800c91e:	4b27      	ldr	r3, [pc, #156]	@ (800c9bc <tcp_input+0x7f4>)
 800c920:	2200      	movs	r2, #0
 800c922:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c924:	4b26      	ldr	r3, [pc, #152]	@ (800c9c0 <tcp_input+0x7f8>)
 800c926:	2200      	movs	r2, #0
 800c928:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c92a:	4b26      	ldr	r3, [pc, #152]	@ (800c9c4 <tcp_input+0x7fc>)
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d03f      	beq.n	800c9b2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c932:	4b24      	ldr	r3, [pc, #144]	@ (800c9c4 <tcp_input+0x7fc>)
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	4618      	mov	r0, r3
 800c938:	f7fd fb0c 	bl	8009f54 <pbuf_free>
      inseg.p = NULL;
 800c93c:	4b21      	ldr	r3, [pc, #132]	@ (800c9c4 <tcp_input+0x7fc>)
 800c93e:	2200      	movs	r2, #0
 800c940:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c942:	e036      	b.n	800c9b2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c944:	4b20      	ldr	r3, [pc, #128]	@ (800c9c8 <tcp_input+0x800>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	899b      	ldrh	r3, [r3, #12]
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7fb fee3 	bl	8008718 <lwip_htons>
 800c952:	4603      	mov	r3, r0
 800c954:	b2db      	uxtb	r3, r3
 800c956:	f003 0304 	and.w	r3, r3, #4
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d118      	bne.n	800c990 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c95e:	4b1b      	ldr	r3, [pc, #108]	@ (800c9cc <tcp_input+0x804>)
 800c960:	6819      	ldr	r1, [r3, #0]
 800c962:	4b1b      	ldr	r3, [pc, #108]	@ (800c9d0 <tcp_input+0x808>)
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	461a      	mov	r2, r3
 800c968:	4b1a      	ldr	r3, [pc, #104]	@ (800c9d4 <tcp_input+0x80c>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c96e:	4b16      	ldr	r3, [pc, #88]	@ (800c9c8 <tcp_input+0x800>)
 800c970:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c972:	885b      	ldrh	r3, [r3, #2]
 800c974:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c976:	4a14      	ldr	r2, [pc, #80]	@ (800c9c8 <tcp_input+0x800>)
 800c978:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c97a:	8812      	ldrh	r2, [r2, #0]
 800c97c:	b292      	uxth	r2, r2
 800c97e:	9202      	str	r2, [sp, #8]
 800c980:	9301      	str	r3, [sp, #4]
 800c982:	4b15      	ldr	r3, [pc, #84]	@ (800c9d8 <tcp_input+0x810>)
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	4b15      	ldr	r3, [pc, #84]	@ (800c9dc <tcp_input+0x814>)
 800c988:	4602      	mov	r2, r0
 800c98a:	2000      	movs	r0, #0
 800c98c:	f003 fc6e 	bl	801026c <tcp_rst>
    pbuf_free(p);
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7fd fadf 	bl	8009f54 <pbuf_free>
  return;
 800c996:	e00c      	b.n	800c9b2 <tcp_input+0x7ea>
    goto dropped;
 800c998:	bf00      	nop
 800c99a:	e006      	b.n	800c9aa <tcp_input+0x7e2>
    goto dropped;
 800c99c:	bf00      	nop
 800c99e:	e004      	b.n	800c9aa <tcp_input+0x7e2>
    goto dropped;
 800c9a0:	bf00      	nop
 800c9a2:	e002      	b.n	800c9aa <tcp_input+0x7e2>
      goto dropped;
 800c9a4:	bf00      	nop
 800c9a6:	e000      	b.n	800c9aa <tcp_input+0x7e2>
      goto dropped;
 800c9a8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7fd fad2 	bl	8009f54 <pbuf_free>
 800c9b0:	e000      	b.n	800c9b4 <tcp_input+0x7ec>
  return;
 800c9b2:	bf00      	nop
}
 800c9b4:	3724      	adds	r7, #36	@ 0x24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd90      	pop	{r4, r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	24043248 	.word	0x24043248
 800c9c0:	24043244 	.word	0x24043244
 800c9c4:	24043214 	.word	0x24043214
 800c9c8:	24043224 	.word	0x24043224
 800c9cc:	24043238 	.word	0x24043238
 800c9d0:	2404323e 	.word	0x2404323e
 800c9d4:	24043234 	.word	0x24043234
 800c9d8:	240402f0 	.word	0x240402f0
 800c9dc:	240402f4 	.word	0x240402f4

0800c9e0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d106      	bne.n	800c9fc <tcp_input_delayed_close+0x1c>
 800c9ee:	4b17      	ldr	r3, [pc, #92]	@ (800ca4c <tcp_input_delayed_close+0x6c>)
 800c9f0:	f240 225a 	movw	r2, #602	@ 0x25a
 800c9f4:	4916      	ldr	r1, [pc, #88]	@ (800ca50 <tcp_input_delayed_close+0x70>)
 800c9f6:	4817      	ldr	r0, [pc, #92]	@ (800ca54 <tcp_input_delayed_close+0x74>)
 800c9f8:	f006 fd24 	bl	8013444 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c9fc:	4b16      	ldr	r3, [pc, #88]	@ (800ca58 <tcp_input_delayed_close+0x78>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	f003 0310 	and.w	r3, r3, #16
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d01c      	beq.n	800ca42 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	8b5b      	ldrh	r3, [r3, #26]
 800ca0c:	f003 0310 	and.w	r3, r3, #16
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10d      	bne.n	800ca30 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d008      	beq.n	800ca30 <tcp_input_delayed_close+0x50>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	6912      	ldr	r2, [r2, #16]
 800ca28:	f06f 010e 	mvn.w	r1, #14
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ca30:	6879      	ldr	r1, [r7, #4]
 800ca32:	480a      	ldr	r0, [pc, #40]	@ (800ca5c <tcp_input_delayed_close+0x7c>)
 800ca34:	f7ff fa50 	bl	800bed8 <tcp_pcb_remove>
    tcp_free(pcb);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7fd fd8f 	bl	800a55c <tcp_free>
    return 1;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e000      	b.n	800ca44 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ca42:	2300      	movs	r3, #0
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	08015cf4 	.word	0x08015cf4
 800ca50:	08015ec4 	.word	0x08015ec4
 800ca54:	08015d40 	.word	0x08015d40
 800ca58:	24043241 	.word	0x24043241
 800ca5c:	24043208 	.word	0x24043208

0800ca60 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ca60:	b590      	push	{r4, r7, lr}
 800ca62:	b08b      	sub	sp, #44	@ 0x2c
 800ca64:	af04      	add	r7, sp, #16
 800ca66:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ca68:	4b6f      	ldr	r3, [pc, #444]	@ (800cc28 <tcp_listen_input+0x1c8>)
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	f003 0304 	and.w	r3, r3, #4
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f040 80d2 	bne.w	800cc1a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d106      	bne.n	800ca8a <tcp_listen_input+0x2a>
 800ca7c:	4b6b      	ldr	r3, [pc, #428]	@ (800cc2c <tcp_listen_input+0x1cc>)
 800ca7e:	f240 2281 	movw	r2, #641	@ 0x281
 800ca82:	496b      	ldr	r1, [pc, #428]	@ (800cc30 <tcp_listen_input+0x1d0>)
 800ca84:	486b      	ldr	r0, [pc, #428]	@ (800cc34 <tcp_listen_input+0x1d4>)
 800ca86:	f006 fcdd 	bl	8013444 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ca8a:	4b67      	ldr	r3, [pc, #412]	@ (800cc28 <tcp_listen_input+0x1c8>)
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	f003 0310 	and.w	r3, r3, #16
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d019      	beq.n	800caca <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ca96:	4b68      	ldr	r3, [pc, #416]	@ (800cc38 <tcp_listen_input+0x1d8>)
 800ca98:	6819      	ldr	r1, [r3, #0]
 800ca9a:	4b68      	ldr	r3, [pc, #416]	@ (800cc3c <tcp_listen_input+0x1dc>)
 800ca9c:	881b      	ldrh	r3, [r3, #0]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	4b67      	ldr	r3, [pc, #412]	@ (800cc40 <tcp_listen_input+0x1e0>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800caa6:	4b67      	ldr	r3, [pc, #412]	@ (800cc44 <tcp_listen_input+0x1e4>)
 800caa8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800caaa:	885b      	ldrh	r3, [r3, #2]
 800caac:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800caae:	4a65      	ldr	r2, [pc, #404]	@ (800cc44 <tcp_listen_input+0x1e4>)
 800cab0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cab2:	8812      	ldrh	r2, [r2, #0]
 800cab4:	b292      	uxth	r2, r2
 800cab6:	9202      	str	r2, [sp, #8]
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	4b63      	ldr	r3, [pc, #396]	@ (800cc48 <tcp_listen_input+0x1e8>)
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	4b63      	ldr	r3, [pc, #396]	@ (800cc4c <tcp_listen_input+0x1ec>)
 800cac0:	4602      	mov	r2, r0
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f003 fbd2 	bl	801026c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800cac8:	e0a9      	b.n	800cc1e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800caca:	4b57      	ldr	r3, [pc, #348]	@ (800cc28 <tcp_listen_input+0x1c8>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	f003 0302 	and.w	r3, r3, #2
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	f000 80a3 	beq.w	800cc1e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	7d5b      	ldrb	r3, [r3, #21]
 800cadc:	4618      	mov	r0, r3
 800cade:	f7ff f871 	bl	800bbc4 <tcp_alloc>
 800cae2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d111      	bne.n	800cb0e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00a      	beq.n	800cb08 <tcp_listen_input+0xa8>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	699b      	ldr	r3, [r3, #24]
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	6910      	ldr	r0, [r2, #16]
 800cafa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cafe:	2100      	movs	r1, #0
 800cb00:	4798      	blx	r3
 800cb02:	4603      	mov	r3, r0
 800cb04:	73bb      	strb	r3, [r7, #14]
      return;
 800cb06:	e08b      	b.n	800cc20 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cb08:	23f0      	movs	r3, #240	@ 0xf0
 800cb0a:	73bb      	strb	r3, [r7, #14]
      return;
 800cb0c:	e088      	b.n	800cc20 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cb0e:	4b50      	ldr	r3, [pc, #320]	@ (800cc50 <tcp_listen_input+0x1f0>)
 800cb10:	695a      	ldr	r2, [r3, #20]
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cb16:	4b4e      	ldr	r3, [pc, #312]	@ (800cc50 <tcp_listen_input+0x1f0>)
 800cb18:	691a      	ldr	r2, [r3, #16]
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	8ada      	ldrh	r2, [r3, #22]
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cb26:	4b47      	ldr	r3, [pc, #284]	@ (800cc44 <tcp_listen_input+0x1e4>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	881b      	ldrh	r3, [r3, #0]
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	2203      	movs	r2, #3
 800cb36:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cb38:	4b41      	ldr	r3, [pc, #260]	@ (800cc40 <tcp_listen_input+0x1e0>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	1c5a      	adds	r2, r3, #1
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800cb4a:	6978      	ldr	r0, [r7, #20]
 800cb4c:	f7ff fa58 	bl	800c000 <tcp_next_iss>
 800cb50:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	693a      	ldr	r2, [r7, #16]
 800cb5c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	693a      	ldr	r2, [r7, #16]
 800cb68:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cb6a:	4b35      	ldr	r3, [pc, #212]	@ (800cc40 <tcp_listen_input+0x1e0>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	1e5a      	subs	r2, r3, #1
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	691a      	ldr	r2, [r3, #16]
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	7a5b      	ldrb	r3, [r3, #9]
 800cb86:	f003 030c 	and.w	r3, r3, #12
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	7a1a      	ldrb	r2, [r3, #8]
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cb98:	4b2e      	ldr	r3, [pc, #184]	@ (800cc54 <tcp_listen_input+0x1f4>)
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	60da      	str	r2, [r3, #12]
 800cba0:	4a2c      	ldr	r2, [pc, #176]	@ (800cc54 <tcp_listen_input+0x1f4>)
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	6013      	str	r3, [r2, #0]
 800cba6:	f003 fd23 	bl	80105f0 <tcp_timer_needed>
 800cbaa:	4b2b      	ldr	r3, [pc, #172]	@ (800cc58 <tcp_listen_input+0x1f8>)
 800cbac:	2201      	movs	r2, #1
 800cbae:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cbb0:	6978      	ldr	r0, [r7, #20]
 800cbb2:	f001 fd8b 	bl	800e6cc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cbb6:	4b23      	ldr	r3, [pc, #140]	@ (800cc44 <tcp_listen_input+0x1e4>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	89db      	ldrh	r3, [r3, #14]
 800cbbc:	b29a      	uxth	r2, r3
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f005 f947 	bl	8011e6c <ip4_route>
 800cbde:	4601      	mov	r1, r0
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	3304      	adds	r3, #4
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f7ff fa30 	bl	800c04c <tcp_eff_send_mss_netif>
 800cbec:	4603      	mov	r3, r0
 800cbee:	461a      	mov	r2, r3
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cbf4:	2112      	movs	r1, #18
 800cbf6:	6978      	ldr	r0, [r7, #20]
 800cbf8:	f002 fc96 	bl	800f528 <tcp_enqueue_flags>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cc00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d004      	beq.n	800cc12 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800cc08:	2100      	movs	r1, #0
 800cc0a:	6978      	ldr	r0, [r7, #20]
 800cc0c:	f7fd fed0 	bl	800a9b0 <tcp_abandon>
      return;
 800cc10:	e006      	b.n	800cc20 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800cc12:	6978      	ldr	r0, [r7, #20]
 800cc14:	f002 fd76 	bl	800f704 <tcp_output>
  return;
 800cc18:	e001      	b.n	800cc1e <tcp_listen_input+0x1be>
    return;
 800cc1a:	bf00      	nop
 800cc1c:	e000      	b.n	800cc20 <tcp_listen_input+0x1c0>
  return;
 800cc1e:	bf00      	nop
}
 800cc20:	371c      	adds	r7, #28
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd90      	pop	{r4, r7, pc}
 800cc26:	bf00      	nop
 800cc28:	24043240 	.word	0x24043240
 800cc2c:	08015cf4 	.word	0x08015cf4
 800cc30:	08015eec 	.word	0x08015eec
 800cc34:	08015d40 	.word	0x08015d40
 800cc38:	24043238 	.word	0x24043238
 800cc3c:	2404323e 	.word	0x2404323e
 800cc40:	24043234 	.word	0x24043234
 800cc44:	24043224 	.word	0x24043224
 800cc48:	240402f0 	.word	0x240402f0
 800cc4c:	240402f4 	.word	0x240402f4
 800cc50:	240402e0 	.word	0x240402e0
 800cc54:	24043208 	.word	0x24043208
 800cc58:	24043210 	.word	0x24043210

0800cc5c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b086      	sub	sp, #24
 800cc60:	af04      	add	r7, sp, #16
 800cc62:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cc64:	4b2f      	ldr	r3, [pc, #188]	@ (800cd24 <tcp_timewait_input+0xc8>)
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	f003 0304 	and.w	r3, r3, #4
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d153      	bne.n	800cd18 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d106      	bne.n	800cc84 <tcp_timewait_input+0x28>
 800cc76:	4b2c      	ldr	r3, [pc, #176]	@ (800cd28 <tcp_timewait_input+0xcc>)
 800cc78:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800cc7c:	492b      	ldr	r1, [pc, #172]	@ (800cd2c <tcp_timewait_input+0xd0>)
 800cc7e:	482c      	ldr	r0, [pc, #176]	@ (800cd30 <tcp_timewait_input+0xd4>)
 800cc80:	f006 fbe0 	bl	8013444 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cc84:	4b27      	ldr	r3, [pc, #156]	@ (800cd24 <tcp_timewait_input+0xc8>)
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	f003 0302 	and.w	r3, r3, #2
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d02a      	beq.n	800cce6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cc90:	4b28      	ldr	r3, [pc, #160]	@ (800cd34 <tcp_timewait_input+0xd8>)
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	db2d      	blt.n	800ccfa <tcp_timewait_input+0x9e>
 800cc9e:	4b25      	ldr	r3, [pc, #148]	@ (800cd34 <tcp_timewait_input+0xd8>)
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cca6:	6879      	ldr	r1, [r7, #4]
 800cca8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ccaa:	440b      	add	r3, r1
 800ccac:	1ad3      	subs	r3, r2, r3
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	dc23      	bgt.n	800ccfa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccb2:	4b21      	ldr	r3, [pc, #132]	@ (800cd38 <tcp_timewait_input+0xdc>)
 800ccb4:	6819      	ldr	r1, [r3, #0]
 800ccb6:	4b21      	ldr	r3, [pc, #132]	@ (800cd3c <tcp_timewait_input+0xe0>)
 800ccb8:	881b      	ldrh	r3, [r3, #0]
 800ccba:	461a      	mov	r2, r3
 800ccbc:	4b1d      	ldr	r3, [pc, #116]	@ (800cd34 <tcp_timewait_input+0xd8>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ccc2:	4b1f      	ldr	r3, [pc, #124]	@ (800cd40 <tcp_timewait_input+0xe4>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccc6:	885b      	ldrh	r3, [r3, #2]
 800ccc8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ccca:	4a1d      	ldr	r2, [pc, #116]	@ (800cd40 <tcp_timewait_input+0xe4>)
 800cccc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccce:	8812      	ldrh	r2, [r2, #0]
 800ccd0:	b292      	uxth	r2, r2
 800ccd2:	9202      	str	r2, [sp, #8]
 800ccd4:	9301      	str	r3, [sp, #4]
 800ccd6:	4b1b      	ldr	r3, [pc, #108]	@ (800cd44 <tcp_timewait_input+0xe8>)
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	4b1b      	ldr	r3, [pc, #108]	@ (800cd48 <tcp_timewait_input+0xec>)
 800ccdc:	4602      	mov	r2, r0
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f003 fac4 	bl	801026c <tcp_rst>
      return;
 800cce4:	e01b      	b.n	800cd1e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cce6:	4b0f      	ldr	r3, [pc, #60]	@ (800cd24 <tcp_timewait_input+0xc8>)
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	f003 0301 	and.w	r3, r3, #1
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d003      	beq.n	800ccfa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ccf2:	4b16      	ldr	r3, [pc, #88]	@ (800cd4c <tcp_timewait_input+0xf0>)
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ccfa:	4b10      	ldr	r3, [pc, #64]	@ (800cd3c <tcp_timewait_input+0xe0>)
 800ccfc:	881b      	ldrh	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00c      	beq.n	800cd1c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	8b5b      	ldrh	r3, [r3, #26]
 800cd06:	f043 0302 	orr.w	r3, r3, #2
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f002 fcf7 	bl	800f704 <tcp_output>
  }
  return;
 800cd16:	e001      	b.n	800cd1c <tcp_timewait_input+0xc0>
    return;
 800cd18:	bf00      	nop
 800cd1a:	e000      	b.n	800cd1e <tcp_timewait_input+0xc2>
  return;
 800cd1c:	bf00      	nop
}
 800cd1e:	3708      	adds	r7, #8
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	24043240 	.word	0x24043240
 800cd28:	08015cf4 	.word	0x08015cf4
 800cd2c:	08015f0c 	.word	0x08015f0c
 800cd30:	08015d40 	.word	0x08015d40
 800cd34:	24043234 	.word	0x24043234
 800cd38:	24043238 	.word	0x24043238
 800cd3c:	2404323e 	.word	0x2404323e
 800cd40:	24043224 	.word	0x24043224
 800cd44:	240402f0 	.word	0x240402f0
 800cd48:	240402f4 	.word	0x240402f4
 800cd4c:	240431fc 	.word	0x240431fc

0800cd50 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cd50:	b590      	push	{r4, r7, lr}
 800cd52:	b08d      	sub	sp, #52	@ 0x34
 800cd54:	af04      	add	r7, sp, #16
 800cd56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d106      	bne.n	800cd74 <tcp_process+0x24>
 800cd66:	4b9d      	ldr	r3, [pc, #628]	@ (800cfdc <tcp_process+0x28c>)
 800cd68:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800cd6c:	499c      	ldr	r1, [pc, #624]	@ (800cfe0 <tcp_process+0x290>)
 800cd6e:	489d      	ldr	r0, [pc, #628]	@ (800cfe4 <tcp_process+0x294>)
 800cd70:	f006 fb68 	bl	8013444 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cd74:	4b9c      	ldr	r3, [pc, #624]	@ (800cfe8 <tcp_process+0x298>)
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	f003 0304 	and.w	r3, r3, #4
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d04e      	beq.n	800ce1e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	7d1b      	ldrb	r3, [r3, #20]
 800cd84:	2b02      	cmp	r3, #2
 800cd86:	d108      	bne.n	800cd9a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cd8c:	4b97      	ldr	r3, [pc, #604]	@ (800cfec <tcp_process+0x29c>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d123      	bne.n	800cddc <tcp_process+0x8c>
        acceptable = 1;
 800cd94:	2301      	movs	r3, #1
 800cd96:	76fb      	strb	r3, [r7, #27]
 800cd98:	e020      	b.n	800cddc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd9e:	4b94      	ldr	r3, [pc, #592]	@ (800cff0 <tcp_process+0x2a0>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d102      	bne.n	800cdac <tcp_process+0x5c>
        acceptable = 1;
 800cda6:	2301      	movs	r3, #1
 800cda8:	76fb      	strb	r3, [r7, #27]
 800cdaa:	e017      	b.n	800cddc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cdac:	4b90      	ldr	r3, [pc, #576]	@ (800cff0 <tcp_process+0x2a0>)
 800cdae:	681a      	ldr	r2, [r3, #0]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	db10      	blt.n	800cddc <tcp_process+0x8c>
 800cdba:	4b8d      	ldr	r3, [pc, #564]	@ (800cff0 <tcp_process+0x2a0>)
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdc2:	6879      	ldr	r1, [r7, #4]
 800cdc4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cdc6:	440b      	add	r3, r1
 800cdc8:	1ad3      	subs	r3, r2, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	dc06      	bgt.n	800cddc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	8b5b      	ldrh	r3, [r3, #26]
 800cdd2:	f043 0302 	orr.w	r3, r3, #2
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800cddc:	7efb      	ldrb	r3, [r7, #27]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d01b      	beq.n	800ce1a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	7d1b      	ldrb	r3, [r3, #20]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d106      	bne.n	800cdf8 <tcp_process+0xa8>
 800cdea:	4b7c      	ldr	r3, [pc, #496]	@ (800cfdc <tcp_process+0x28c>)
 800cdec:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800cdf0:	4980      	ldr	r1, [pc, #512]	@ (800cff4 <tcp_process+0x2a4>)
 800cdf2:	487c      	ldr	r0, [pc, #496]	@ (800cfe4 <tcp_process+0x294>)
 800cdf4:	f006 fb26 	bl	8013444 <iprintf>
      recv_flags |= TF_RESET;
 800cdf8:	4b7f      	ldr	r3, [pc, #508]	@ (800cff8 <tcp_process+0x2a8>)
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	f043 0308 	orr.w	r3, r3, #8
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	4b7d      	ldr	r3, [pc, #500]	@ (800cff8 <tcp_process+0x2a8>)
 800ce04:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	8b5b      	ldrh	r3, [r3, #26]
 800ce0a:	f023 0301 	bic.w	r3, r3, #1
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ce14:	f06f 030d 	mvn.w	r3, #13
 800ce18:	e37a      	b.n	800d510 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	e378      	b.n	800d510 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ce1e:	4b72      	ldr	r3, [pc, #456]	@ (800cfe8 <tcp_process+0x298>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	f003 0302 	and.w	r3, r3, #2
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d010      	beq.n	800ce4c <tcp_process+0xfc>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	7d1b      	ldrb	r3, [r3, #20]
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	d00c      	beq.n	800ce4c <tcp_process+0xfc>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	7d1b      	ldrb	r3, [r3, #20]
 800ce36:	2b03      	cmp	r3, #3
 800ce38:	d008      	beq.n	800ce4c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	8b5b      	ldrh	r3, [r3, #26]
 800ce3e:	f043 0302 	orr.w	r3, r3, #2
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	e361      	b.n	800d510 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	8b5b      	ldrh	r3, [r3, #26]
 800ce50:	f003 0310 	and.w	r3, r3, #16
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d103      	bne.n	800ce60 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ce58:	4b68      	ldr	r3, [pc, #416]	@ (800cffc <tcp_process+0x2ac>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f001 fc2b 	bl	800e6cc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	7d1b      	ldrb	r3, [r3, #20]
 800ce7a:	3b02      	subs	r3, #2
 800ce7c:	2b07      	cmp	r3, #7
 800ce7e:	f200 8337 	bhi.w	800d4f0 <tcp_process+0x7a0>
 800ce82:	a201      	add	r2, pc, #4	@ (adr r2, 800ce88 <tcp_process+0x138>)
 800ce84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce88:	0800cea9 	.word	0x0800cea9
 800ce8c:	0800d0d9 	.word	0x0800d0d9
 800ce90:	0800d251 	.word	0x0800d251
 800ce94:	0800d27b 	.word	0x0800d27b
 800ce98:	0800d39f 	.word	0x0800d39f
 800ce9c:	0800d251 	.word	0x0800d251
 800cea0:	0800d42b 	.word	0x0800d42b
 800cea4:	0800d4bb 	.word	0x0800d4bb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cea8:	4b4f      	ldr	r3, [pc, #316]	@ (800cfe8 <tcp_process+0x298>)
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	f003 0310 	and.w	r3, r3, #16
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f000 80e4 	beq.w	800d07e <tcp_process+0x32e>
 800ceb6:	4b4c      	ldr	r3, [pc, #304]	@ (800cfe8 <tcp_process+0x298>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	f003 0302 	and.w	r3, r3, #2
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f000 80dd 	beq.w	800d07e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cec8:	1c5a      	adds	r2, r3, #1
 800ceca:	4b48      	ldr	r3, [pc, #288]	@ (800cfec <tcp_process+0x29c>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	429a      	cmp	r2, r3
 800ced0:	f040 80d5 	bne.w	800d07e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ced4:	4b46      	ldr	r3, [pc, #280]	@ (800cff0 <tcp_process+0x2a0>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	1c5a      	adds	r2, r3, #1
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800cee6:	4b41      	ldr	r3, [pc, #260]	@ (800cfec <tcp_process+0x29c>)
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ceee:	4b44      	ldr	r3, [pc, #272]	@ (800d000 <tcp_process+0x2b0>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	89db      	ldrh	r3, [r3, #14]
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cf08:	4b39      	ldr	r3, [pc, #228]	@ (800cff0 <tcp_process+0x2a0>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	1e5a      	subs	r2, r3, #1
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2204      	movs	r2, #4
 800cf16:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	3304      	adds	r3, #4
 800cf20:	4618      	mov	r0, r3
 800cf22:	f004 ffa3 	bl	8011e6c <ip4_route>
 800cf26:	4601      	mov	r1, r0
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	3304      	adds	r3, #4
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f7ff f88c 	bl	800c04c <tcp_eff_send_mss_netif>
 800cf34:	4603      	mov	r3, r0
 800cf36:	461a      	mov	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cf40:	009a      	lsls	r2, r3, #2
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cf46:	005b      	lsls	r3, r3, #1
 800cf48:	f241 111c 	movw	r1, #4380	@ 0x111c
 800cf4c:	428b      	cmp	r3, r1
 800cf4e:	bf38      	it	cc
 800cf50:	460b      	movcc	r3, r1
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d204      	bcs.n	800cf60 <tcp_process+0x210>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	e00d      	b.n	800cf7c <tcp_process+0x22c>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cf64:	005b      	lsls	r3, r3, #1
 800cf66:	f241 121c 	movw	r2, #4380	@ 0x111c
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d904      	bls.n	800cf78 <tcp_process+0x228>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	e001      	b.n	800cf7c <tcp_process+0x22c>
 800cf78:	f241 131c 	movw	r3, #4380	@ 0x111c
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d106      	bne.n	800cf9a <tcp_process+0x24a>
 800cf8c:	4b13      	ldr	r3, [pc, #76]	@ (800cfdc <tcp_process+0x28c>)
 800cf8e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800cf92:	491c      	ldr	r1, [pc, #112]	@ (800d004 <tcp_process+0x2b4>)
 800cf94:	4813      	ldr	r0, [pc, #76]	@ (800cfe4 <tcp_process+0x294>)
 800cf96:	f006 fa55 	bl	8013444 <iprintf>
        --pcb->snd_queuelen;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfae:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d12a      	bne.n	800d00c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfba:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d106      	bne.n	800cfd0 <tcp_process+0x280>
 800cfc2:	4b06      	ldr	r3, [pc, #24]	@ (800cfdc <tcp_process+0x28c>)
 800cfc4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800cfc8:	490f      	ldr	r1, [pc, #60]	@ (800d008 <tcp_process+0x2b8>)
 800cfca:	4806      	ldr	r0, [pc, #24]	@ (800cfe4 <tcp_process+0x294>)
 800cfcc:	f006 fa3a 	bl	8013444 <iprintf>
          pcb->unsent = rseg->next;
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800cfd8:	e01c      	b.n	800d014 <tcp_process+0x2c4>
 800cfda:	bf00      	nop
 800cfdc:	08015cf4 	.word	0x08015cf4
 800cfe0:	08015f2c 	.word	0x08015f2c
 800cfe4:	08015d40 	.word	0x08015d40
 800cfe8:	24043240 	.word	0x24043240
 800cfec:	24043238 	.word	0x24043238
 800cff0:	24043234 	.word	0x24043234
 800cff4:	08015f48 	.word	0x08015f48
 800cff8:	24043241 	.word	0x24043241
 800cffc:	240431fc 	.word	0x240431fc
 800d000:	24043224 	.word	0x24043224
 800d004:	08015f68 	.word	0x08015f68
 800d008:	08015f80 	.word	0x08015f80
        } else {
          pcb->unacked = rseg->next;
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800d014:	69f8      	ldr	r0, [r7, #28]
 800d016:	f7fe fc6c 	bl	800b8f2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d104      	bne.n	800d02c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d028:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d02a:	e006      	b.n	800d03a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2200      	movs	r2, #0
 800d036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00a      	beq.n	800d05a <tcp_process+0x30a>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	6910      	ldr	r0, [r2, #16]
 800d04e:	2200      	movs	r2, #0
 800d050:	6879      	ldr	r1, [r7, #4]
 800d052:	4798      	blx	r3
 800d054:	4603      	mov	r3, r0
 800d056:	76bb      	strb	r3, [r7, #26]
 800d058:	e001      	b.n	800d05e <tcp_process+0x30e>
 800d05a:	2300      	movs	r3, #0
 800d05c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d05e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d062:	f113 0f0d 	cmn.w	r3, #13
 800d066:	d102      	bne.n	800d06e <tcp_process+0x31e>
          return ERR_ABRT;
 800d068:	f06f 030c 	mvn.w	r3, #12
 800d06c:	e250      	b.n	800d510 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	8b5b      	ldrh	r3, [r3, #26]
 800d072:	f043 0302 	orr.w	r3, r3, #2
 800d076:	b29a      	uxth	r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d07c:	e23a      	b.n	800d4f4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d07e:	4b98      	ldr	r3, [pc, #608]	@ (800d2e0 <tcp_process+0x590>)
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	f003 0310 	and.w	r3, r3, #16
 800d086:	2b00      	cmp	r3, #0
 800d088:	f000 8234 	beq.w	800d4f4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d08c:	4b95      	ldr	r3, [pc, #596]	@ (800d2e4 <tcp_process+0x594>)
 800d08e:	6819      	ldr	r1, [r3, #0]
 800d090:	4b95      	ldr	r3, [pc, #596]	@ (800d2e8 <tcp_process+0x598>)
 800d092:	881b      	ldrh	r3, [r3, #0]
 800d094:	461a      	mov	r2, r3
 800d096:	4b95      	ldr	r3, [pc, #596]	@ (800d2ec <tcp_process+0x59c>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d09c:	4b94      	ldr	r3, [pc, #592]	@ (800d2f0 <tcp_process+0x5a0>)
 800d09e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0a0:	885b      	ldrh	r3, [r3, #2]
 800d0a2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0a4:	4a92      	ldr	r2, [pc, #584]	@ (800d2f0 <tcp_process+0x5a0>)
 800d0a6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0a8:	8812      	ldrh	r2, [r2, #0]
 800d0aa:	b292      	uxth	r2, r2
 800d0ac:	9202      	str	r2, [sp, #8]
 800d0ae:	9301      	str	r3, [sp, #4]
 800d0b0:	4b90      	ldr	r3, [pc, #576]	@ (800d2f4 <tcp_process+0x5a4>)
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	4b90      	ldr	r3, [pc, #576]	@ (800d2f8 <tcp_process+0x5a8>)
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f003 f8d7 	bl	801026c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d0c4:	2b05      	cmp	r3, #5
 800d0c6:	f200 8215 	bhi.w	800d4f4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f002 fea3 	bl	800fe1c <tcp_rexmit_rto>
      break;
 800d0d6:	e20d      	b.n	800d4f4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d0d8:	4b81      	ldr	r3, [pc, #516]	@ (800d2e0 <tcp_process+0x590>)
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	f003 0310 	and.w	r3, r3, #16
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f000 80a1 	beq.w	800d228 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d0e6:	4b7f      	ldr	r3, [pc, #508]	@ (800d2e4 <tcp_process+0x594>)
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0ee:	1ad3      	subs	r3, r2, r3
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	db7e      	blt.n	800d1f4 <tcp_process+0x4a4>
 800d0f6:	4b7b      	ldr	r3, [pc, #492]	@ (800d2e4 <tcp_process+0x594>)
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0fe:	1ad3      	subs	r3, r2, r3
 800d100:	2b00      	cmp	r3, #0
 800d102:	dc77      	bgt.n	800d1f4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2204      	movs	r2, #4
 800d108:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d102      	bne.n	800d118 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d112:	23fa      	movs	r3, #250	@ 0xfa
 800d114:	76bb      	strb	r3, [r7, #26]
 800d116:	e01d      	b.n	800d154 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d106      	bne.n	800d130 <tcp_process+0x3e0>
 800d122:	4b76      	ldr	r3, [pc, #472]	@ (800d2fc <tcp_process+0x5ac>)
 800d124:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800d128:	4975      	ldr	r1, [pc, #468]	@ (800d300 <tcp_process+0x5b0>)
 800d12a:	4876      	ldr	r0, [pc, #472]	@ (800d304 <tcp_process+0x5b4>)
 800d12c:	f006 f98a 	bl	8013444 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d134:	699b      	ldr	r3, [r3, #24]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00a      	beq.n	800d150 <tcp_process+0x400>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d13e:	699b      	ldr	r3, [r3, #24]
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	6910      	ldr	r0, [r2, #16]
 800d144:	2200      	movs	r2, #0
 800d146:	6879      	ldr	r1, [r7, #4]
 800d148:	4798      	blx	r3
 800d14a:	4603      	mov	r3, r0
 800d14c:	76bb      	strb	r3, [r7, #26]
 800d14e:	e001      	b.n	800d154 <tcp_process+0x404>
 800d150:	23f0      	movs	r3, #240	@ 0xf0
 800d152:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d154:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00a      	beq.n	800d172 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d15c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d160:	f113 0f0d 	cmn.w	r3, #13
 800d164:	d002      	beq.n	800d16c <tcp_process+0x41c>
              tcp_abort(pcb);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7fd fce0 	bl	800ab2c <tcp_abort>
            }
            return ERR_ABRT;
 800d16c:	f06f 030c 	mvn.w	r3, #12
 800d170:	e1ce      	b.n	800d510 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 fae0 	bl	800d738 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d178:	4b63      	ldr	r3, [pc, #396]	@ (800d308 <tcp_process+0x5b8>)
 800d17a:	881b      	ldrh	r3, [r3, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d005      	beq.n	800d18c <tcp_process+0x43c>
            recv_acked--;
 800d180:	4b61      	ldr	r3, [pc, #388]	@ (800d308 <tcp_process+0x5b8>)
 800d182:	881b      	ldrh	r3, [r3, #0]
 800d184:	3b01      	subs	r3, #1
 800d186:	b29a      	uxth	r2, r3
 800d188:	4b5f      	ldr	r3, [pc, #380]	@ (800d308 <tcp_process+0x5b8>)
 800d18a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d190:	009a      	lsls	r2, r3, #2
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d196:	005b      	lsls	r3, r3, #1
 800d198:	f241 111c 	movw	r1, #4380	@ 0x111c
 800d19c:	428b      	cmp	r3, r1
 800d19e:	bf38      	it	cc
 800d1a0:	460b      	movcc	r3, r1
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d204      	bcs.n	800d1b0 <tcp_process+0x460>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	e00d      	b.n	800d1cc <tcp_process+0x47c>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d1b4:	005b      	lsls	r3, r3, #1
 800d1b6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d904      	bls.n	800d1c8 <tcp_process+0x478>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d1c2:	005b      	lsls	r3, r3, #1
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	e001      	b.n	800d1cc <tcp_process+0x47c>
 800d1c8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d1d2:	4b4e      	ldr	r3, [pc, #312]	@ (800d30c <tcp_process+0x5bc>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	f003 0320 	and.w	r3, r3, #32
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d037      	beq.n	800d24e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	8b5b      	ldrh	r3, [r3, #26]
 800d1e2:	f043 0302 	orr.w	r3, r3, #2
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2207      	movs	r2, #7
 800d1f0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d1f2:	e02c      	b.n	800d24e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d1f4:	4b3b      	ldr	r3, [pc, #236]	@ (800d2e4 <tcp_process+0x594>)
 800d1f6:	6819      	ldr	r1, [r3, #0]
 800d1f8:	4b3b      	ldr	r3, [pc, #236]	@ (800d2e8 <tcp_process+0x598>)
 800d1fa:	881b      	ldrh	r3, [r3, #0]
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	4b3b      	ldr	r3, [pc, #236]	@ (800d2ec <tcp_process+0x59c>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d204:	4b3a      	ldr	r3, [pc, #232]	@ (800d2f0 <tcp_process+0x5a0>)
 800d206:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d208:	885b      	ldrh	r3, [r3, #2]
 800d20a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d20c:	4a38      	ldr	r2, [pc, #224]	@ (800d2f0 <tcp_process+0x5a0>)
 800d20e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d210:	8812      	ldrh	r2, [r2, #0]
 800d212:	b292      	uxth	r2, r2
 800d214:	9202      	str	r2, [sp, #8]
 800d216:	9301      	str	r3, [sp, #4]
 800d218:	4b36      	ldr	r3, [pc, #216]	@ (800d2f4 <tcp_process+0x5a4>)
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	4b36      	ldr	r3, [pc, #216]	@ (800d2f8 <tcp_process+0x5a8>)
 800d21e:	4602      	mov	r2, r0
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f003 f823 	bl	801026c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d226:	e167      	b.n	800d4f8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d228:	4b2d      	ldr	r3, [pc, #180]	@ (800d2e0 <tcp_process+0x590>)
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	f003 0302 	and.w	r3, r3, #2
 800d230:	2b00      	cmp	r3, #0
 800d232:	f000 8161 	beq.w	800d4f8 <tcp_process+0x7a8>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d23a:	1e5a      	subs	r2, r3, #1
 800d23c:	4b2b      	ldr	r3, [pc, #172]	@ (800d2ec <tcp_process+0x59c>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	429a      	cmp	r2, r3
 800d242:	f040 8159 	bne.w	800d4f8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f002 fe0a 	bl	800fe60 <tcp_rexmit>
      break;
 800d24c:	e154      	b.n	800d4f8 <tcp_process+0x7a8>
 800d24e:	e153      	b.n	800d4f8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 fa71 	bl	800d738 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d256:	4b2d      	ldr	r3, [pc, #180]	@ (800d30c <tcp_process+0x5bc>)
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	f003 0320 	and.w	r3, r3, #32
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f000 814c 	beq.w	800d4fc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	8b5b      	ldrh	r3, [r3, #26]
 800d268:	f043 0302 	orr.w	r3, r3, #2
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2207      	movs	r2, #7
 800d276:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d278:	e140      	b.n	800d4fc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 fa5c 	bl	800d738 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d280:	4b22      	ldr	r3, [pc, #136]	@ (800d30c <tcp_process+0x5bc>)
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	f003 0320 	and.w	r3, r3, #32
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d071      	beq.n	800d370 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d28c:	4b14      	ldr	r3, [pc, #80]	@ (800d2e0 <tcp_process+0x590>)
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	f003 0310 	and.w	r3, r3, #16
 800d294:	2b00      	cmp	r3, #0
 800d296:	d060      	beq.n	800d35a <tcp_process+0x60a>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d29c:	4b11      	ldr	r3, [pc, #68]	@ (800d2e4 <tcp_process+0x594>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d15a      	bne.n	800d35a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d156      	bne.n	800d35a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	8b5b      	ldrh	r3, [r3, #26]
 800d2b0:	f043 0302 	orr.w	r3, r3, #2
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7fe fdbc 	bl	800be38 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d2c0:	4b13      	ldr	r3, [pc, #76]	@ (800d310 <tcp_process+0x5c0>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d105      	bne.n	800d2d6 <tcp_process+0x586>
 800d2ca:	4b11      	ldr	r3, [pc, #68]	@ (800d310 <tcp_process+0x5c0>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	4a0f      	ldr	r2, [pc, #60]	@ (800d310 <tcp_process+0x5c0>)
 800d2d2:	6013      	str	r3, [r2, #0]
 800d2d4:	e02e      	b.n	800d334 <tcp_process+0x5e4>
 800d2d6:	4b0e      	ldr	r3, [pc, #56]	@ (800d310 <tcp_process+0x5c0>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	617b      	str	r3, [r7, #20]
 800d2dc:	e027      	b.n	800d32e <tcp_process+0x5de>
 800d2de:	bf00      	nop
 800d2e0:	24043240 	.word	0x24043240
 800d2e4:	24043238 	.word	0x24043238
 800d2e8:	2404323e 	.word	0x2404323e
 800d2ec:	24043234 	.word	0x24043234
 800d2f0:	24043224 	.word	0x24043224
 800d2f4:	240402f0 	.word	0x240402f0
 800d2f8:	240402f4 	.word	0x240402f4
 800d2fc:	08015cf4 	.word	0x08015cf4
 800d300:	08015f94 	.word	0x08015f94
 800d304:	08015d40 	.word	0x08015d40
 800d308:	2404323c 	.word	0x2404323c
 800d30c:	24043241 	.word	0x24043241
 800d310:	24043208 	.word	0x24043208
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d104      	bne.n	800d328 <tcp_process+0x5d8>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	68da      	ldr	r2, [r3, #12]
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	60da      	str	r2, [r3, #12]
 800d326:	e005      	b.n	800d334 <tcp_process+0x5e4>
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	68db      	ldr	r3, [r3, #12]
 800d32c:	617b      	str	r3, [r7, #20]
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1ef      	bne.n	800d314 <tcp_process+0x5c4>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	60da      	str	r2, [r3, #12]
 800d33a:	4b77      	ldr	r3, [pc, #476]	@ (800d518 <tcp_process+0x7c8>)
 800d33c:	2201      	movs	r2, #1
 800d33e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	220a      	movs	r2, #10
 800d344:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d346:	4b75      	ldr	r3, [pc, #468]	@ (800d51c <tcp_process+0x7cc>)
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	60da      	str	r2, [r3, #12]
 800d34e:	4a73      	ldr	r2, [pc, #460]	@ (800d51c <tcp_process+0x7cc>)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6013      	str	r3, [r2, #0]
 800d354:	f003 f94c 	bl	80105f0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d358:	e0d2      	b.n	800d500 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	8b5b      	ldrh	r3, [r3, #26]
 800d35e:	f043 0302 	orr.w	r3, r3, #2
 800d362:	b29a      	uxth	r2, r3
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2208      	movs	r2, #8
 800d36c:	751a      	strb	r2, [r3, #20]
      break;
 800d36e:	e0c7      	b.n	800d500 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d370:	4b6b      	ldr	r3, [pc, #428]	@ (800d520 <tcp_process+0x7d0>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	f003 0310 	and.w	r3, r3, #16
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f000 80c1 	beq.w	800d500 <tcp_process+0x7b0>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d382:	4b68      	ldr	r3, [pc, #416]	@ (800d524 <tcp_process+0x7d4>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	429a      	cmp	r2, r3
 800d388:	f040 80ba 	bne.w	800d500 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d390:	2b00      	cmp	r3, #0
 800d392:	f040 80b5 	bne.w	800d500 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2206      	movs	r2, #6
 800d39a:	751a      	strb	r2, [r3, #20]
      break;
 800d39c:	e0b0      	b.n	800d500 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 f9ca 	bl	800d738 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d3a4:	4b60      	ldr	r3, [pc, #384]	@ (800d528 <tcp_process+0x7d8>)
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	f003 0320 	and.w	r3, r3, #32
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 80a9 	beq.w	800d504 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	8b5b      	ldrh	r3, [r3, #26]
 800d3b6:	f043 0302 	orr.w	r3, r3, #2
 800d3ba:	b29a      	uxth	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f7fe fd39 	bl	800be38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d3c6:	4b59      	ldr	r3, [pc, #356]	@ (800d52c <tcp_process+0x7dc>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d105      	bne.n	800d3dc <tcp_process+0x68c>
 800d3d0:	4b56      	ldr	r3, [pc, #344]	@ (800d52c <tcp_process+0x7dc>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	4a55      	ldr	r2, [pc, #340]	@ (800d52c <tcp_process+0x7dc>)
 800d3d8:	6013      	str	r3, [r2, #0]
 800d3da:	e013      	b.n	800d404 <tcp_process+0x6b4>
 800d3dc:	4b53      	ldr	r3, [pc, #332]	@ (800d52c <tcp_process+0x7dc>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	613b      	str	r3, [r7, #16]
 800d3e2:	e00c      	b.n	800d3fe <tcp_process+0x6ae>
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d104      	bne.n	800d3f8 <tcp_process+0x6a8>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	68da      	ldr	r2, [r3, #12]
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	60da      	str	r2, [r3, #12]
 800d3f6:	e005      	b.n	800d404 <tcp_process+0x6b4>
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	613b      	str	r3, [r7, #16]
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1ef      	bne.n	800d3e4 <tcp_process+0x694>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2200      	movs	r2, #0
 800d408:	60da      	str	r2, [r3, #12]
 800d40a:	4b43      	ldr	r3, [pc, #268]	@ (800d518 <tcp_process+0x7c8>)
 800d40c:	2201      	movs	r2, #1
 800d40e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	220a      	movs	r2, #10
 800d414:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d416:	4b41      	ldr	r3, [pc, #260]	@ (800d51c <tcp_process+0x7cc>)
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	60da      	str	r2, [r3, #12]
 800d41e:	4a3f      	ldr	r2, [pc, #252]	@ (800d51c <tcp_process+0x7cc>)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6013      	str	r3, [r2, #0]
 800d424:	f003 f8e4 	bl	80105f0 <tcp_timer_needed>
      }
      break;
 800d428:	e06c      	b.n	800d504 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f984 	bl	800d738 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d430:	4b3b      	ldr	r3, [pc, #236]	@ (800d520 <tcp_process+0x7d0>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	f003 0310 	and.w	r3, r3, #16
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d065      	beq.n	800d508 <tcp_process+0x7b8>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d440:	4b38      	ldr	r3, [pc, #224]	@ (800d524 <tcp_process+0x7d4>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	429a      	cmp	r2, r3
 800d446:	d15f      	bne.n	800d508 <tcp_process+0x7b8>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d15b      	bne.n	800d508 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f7fe fcf1 	bl	800be38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d456:	4b35      	ldr	r3, [pc, #212]	@ (800d52c <tcp_process+0x7dc>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	687a      	ldr	r2, [r7, #4]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d105      	bne.n	800d46c <tcp_process+0x71c>
 800d460:	4b32      	ldr	r3, [pc, #200]	@ (800d52c <tcp_process+0x7dc>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	4a31      	ldr	r2, [pc, #196]	@ (800d52c <tcp_process+0x7dc>)
 800d468:	6013      	str	r3, [r2, #0]
 800d46a:	e013      	b.n	800d494 <tcp_process+0x744>
 800d46c:	4b2f      	ldr	r3, [pc, #188]	@ (800d52c <tcp_process+0x7dc>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	60fb      	str	r3, [r7, #12]
 800d472:	e00c      	b.n	800d48e <tcp_process+0x73e>
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d104      	bne.n	800d488 <tcp_process+0x738>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	68da      	ldr	r2, [r3, #12]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	60da      	str	r2, [r3, #12]
 800d486:	e005      	b.n	800d494 <tcp_process+0x744>
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	60fb      	str	r3, [r7, #12]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d1ef      	bne.n	800d474 <tcp_process+0x724>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	60da      	str	r2, [r3, #12]
 800d49a:	4b1f      	ldr	r3, [pc, #124]	@ (800d518 <tcp_process+0x7c8>)
 800d49c:	2201      	movs	r2, #1
 800d49e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	220a      	movs	r2, #10
 800d4a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d4a6:	4b1d      	ldr	r3, [pc, #116]	@ (800d51c <tcp_process+0x7cc>)
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	60da      	str	r2, [r3, #12]
 800d4ae:	4a1b      	ldr	r2, [pc, #108]	@ (800d51c <tcp_process+0x7cc>)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6013      	str	r3, [r2, #0]
 800d4b4:	f003 f89c 	bl	80105f0 <tcp_timer_needed>
      }
      break;
 800d4b8:	e026      	b.n	800d508 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 f93c 	bl	800d738 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d4c0:	4b17      	ldr	r3, [pc, #92]	@ (800d520 <tcp_process+0x7d0>)
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	f003 0310 	and.w	r3, r3, #16
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d01f      	beq.n	800d50c <tcp_process+0x7bc>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d4d0:	4b14      	ldr	r3, [pc, #80]	@ (800d524 <tcp_process+0x7d4>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d119      	bne.n	800d50c <tcp_process+0x7bc>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d115      	bne.n	800d50c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d4e0:	4b11      	ldr	r3, [pc, #68]	@ (800d528 <tcp_process+0x7d8>)
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	f043 0310 	orr.w	r3, r3, #16
 800d4e8:	b2da      	uxtb	r2, r3
 800d4ea:	4b0f      	ldr	r3, [pc, #60]	@ (800d528 <tcp_process+0x7d8>)
 800d4ec:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d4ee:	e00d      	b.n	800d50c <tcp_process+0x7bc>
    default:
      break;
 800d4f0:	bf00      	nop
 800d4f2:	e00c      	b.n	800d50e <tcp_process+0x7be>
      break;
 800d4f4:	bf00      	nop
 800d4f6:	e00a      	b.n	800d50e <tcp_process+0x7be>
      break;
 800d4f8:	bf00      	nop
 800d4fa:	e008      	b.n	800d50e <tcp_process+0x7be>
      break;
 800d4fc:	bf00      	nop
 800d4fe:	e006      	b.n	800d50e <tcp_process+0x7be>
      break;
 800d500:	bf00      	nop
 800d502:	e004      	b.n	800d50e <tcp_process+0x7be>
      break;
 800d504:	bf00      	nop
 800d506:	e002      	b.n	800d50e <tcp_process+0x7be>
      break;
 800d508:	bf00      	nop
 800d50a:	e000      	b.n	800d50e <tcp_process+0x7be>
      break;
 800d50c:	bf00      	nop
  }
  return ERR_OK;
 800d50e:	2300      	movs	r3, #0
}
 800d510:	4618      	mov	r0, r3
 800d512:	3724      	adds	r7, #36	@ 0x24
 800d514:	46bd      	mov	sp, r7
 800d516:	bd90      	pop	{r4, r7, pc}
 800d518:	24043210 	.word	0x24043210
 800d51c:	2404320c 	.word	0x2404320c
 800d520:	24043240 	.word	0x24043240
 800d524:	24043238 	.word	0x24043238
 800d528:	24043241 	.word	0x24043241
 800d52c:	24043208 	.word	0x24043208

0800d530 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d530:	b590      	push	{r4, r7, lr}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d106      	bne.n	800d54e <tcp_oos_insert_segment+0x1e>
 800d540:	4b3b      	ldr	r3, [pc, #236]	@ (800d630 <tcp_oos_insert_segment+0x100>)
 800d542:	f240 421f 	movw	r2, #1055	@ 0x41f
 800d546:	493b      	ldr	r1, [pc, #236]	@ (800d634 <tcp_oos_insert_segment+0x104>)
 800d548:	483b      	ldr	r0, [pc, #236]	@ (800d638 <tcp_oos_insert_segment+0x108>)
 800d54a:	f005 ff7b 	bl	8013444 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	899b      	ldrh	r3, [r3, #12]
 800d554:	b29b      	uxth	r3, r3
 800d556:	4618      	mov	r0, r3
 800d558:	f7fb f8de 	bl	8008718 <lwip_htons>
 800d55c:	4603      	mov	r3, r0
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	f003 0301 	and.w	r3, r3, #1
 800d564:	2b00      	cmp	r3, #0
 800d566:	d028      	beq.n	800d5ba <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d568:	6838      	ldr	r0, [r7, #0]
 800d56a:	f7fe f9ad 	bl	800b8c8 <tcp_segs_free>
    next = NULL;
 800d56e:	2300      	movs	r3, #0
 800d570:	603b      	str	r3, [r7, #0]
 800d572:	e056      	b.n	800d622 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	899b      	ldrh	r3, [r3, #12]
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fb f8cb 	bl	8008718 <lwip_htons>
 800d582:	4603      	mov	r3, r0
 800d584:	b2db      	uxtb	r3, r3
 800d586:	f003 0301 	and.w	r3, r3, #1
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00d      	beq.n	800d5aa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	899b      	ldrh	r3, [r3, #12]
 800d594:	b29c      	uxth	r4, r3
 800d596:	2001      	movs	r0, #1
 800d598:	f7fb f8be 	bl	8008718 <lwip_htons>
 800d59c:	4603      	mov	r3, r0
 800d59e:	461a      	mov	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	4322      	orrs	r2, r4
 800d5a6:	b292      	uxth	r2, r2
 800d5a8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f7fe f99c 	bl	800b8f2 <tcp_seg_free>
    while (next &&
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d00e      	beq.n	800d5de <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	891b      	ldrh	r3, [r3, #8]
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	4b1d      	ldr	r3, [pc, #116]	@ (800d63c <tcp_oos_insert_segment+0x10c>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	441a      	add	r2, r3
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	6839      	ldr	r1, [r7, #0]
 800d5d4:	8909      	ldrh	r1, [r1, #8]
 800d5d6:	440b      	add	r3, r1
 800d5d8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	daca      	bge.n	800d574 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d01e      	beq.n	800d622 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	891b      	ldrh	r3, [r3, #8]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	4b14      	ldr	r3, [pc, #80]	@ (800d63c <tcp_oos_insert_segment+0x10c>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	441a      	add	r2, r3
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	dd12      	ble.n	800d622 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	68db      	ldr	r3, [r3, #12]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	b29a      	uxth	r2, r3
 800d604:	4b0d      	ldr	r3, [pc, #52]	@ (800d63c <tcp_oos_insert_segment+0x10c>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	b29b      	uxth	r3, r3
 800d60a:	1ad3      	subs	r3, r2, r3
 800d60c:	b29a      	uxth	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	891b      	ldrh	r3, [r3, #8]
 800d61a:	4619      	mov	r1, r3
 800d61c:	4610      	mov	r0, r2
 800d61e:	f7fc fb15 	bl	8009c4c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	683a      	ldr	r2, [r7, #0]
 800d626:	601a      	str	r2, [r3, #0]
}
 800d628:	bf00      	nop
 800d62a:	3714      	adds	r7, #20
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd90      	pop	{r4, r7, pc}
 800d630:	08015cf4 	.word	0x08015cf4
 800d634:	08015fb4 	.word	0x08015fb4
 800d638:	08015d40 	.word	0x08015d40
 800d63c:	24043234 	.word	0x24043234

0800d640 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d640:	b5b0      	push	{r4, r5, r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	607a      	str	r2, [r7, #4]
 800d64c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d64e:	e03e      	b.n	800d6ce <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fc fd00 	bl	800a064 <pbuf_clen>
 800d664:	4603      	mov	r3, r0
 800d666:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d66e:	8a7a      	ldrh	r2, [r7, #18]
 800d670:	429a      	cmp	r2, r3
 800d672:	d906      	bls.n	800d682 <tcp_free_acked_segments+0x42>
 800d674:	4b2a      	ldr	r3, [pc, #168]	@ (800d720 <tcp_free_acked_segments+0xe0>)
 800d676:	f240 4257 	movw	r2, #1111	@ 0x457
 800d67a:	492a      	ldr	r1, [pc, #168]	@ (800d724 <tcp_free_acked_segments+0xe4>)
 800d67c:	482a      	ldr	r0, [pc, #168]	@ (800d728 <tcp_free_acked_segments+0xe8>)
 800d67e:	f005 fee1 	bl	8013444 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800d688:	8a7b      	ldrh	r3, [r7, #18]
 800d68a:	1ad3      	subs	r3, r2, r3
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	891a      	ldrh	r2, [r3, #8]
 800d698:	4b24      	ldr	r3, [pc, #144]	@ (800d72c <tcp_free_acked_segments+0xec>)
 800d69a:	881b      	ldrh	r3, [r3, #0]
 800d69c:	4413      	add	r3, r2
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	4b22      	ldr	r3, [pc, #136]	@ (800d72c <tcp_free_acked_segments+0xec>)
 800d6a2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d6a4:	6978      	ldr	r0, [r7, #20]
 800d6a6:	f7fe f924 	bl	800b8f2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00c      	beq.n	800d6ce <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d109      	bne.n	800d6ce <tcp_free_acked_segments+0x8e>
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d106      	bne.n	800d6ce <tcp_free_acked_segments+0x8e>
 800d6c0:	4b17      	ldr	r3, [pc, #92]	@ (800d720 <tcp_free_acked_segments+0xe0>)
 800d6c2:	f240 4261 	movw	r2, #1121	@ 0x461
 800d6c6:	491a      	ldr	r1, [pc, #104]	@ (800d730 <tcp_free_acked_segments+0xf0>)
 800d6c8:	4817      	ldr	r0, [pc, #92]	@ (800d728 <tcp_free_acked_segments+0xe8>)
 800d6ca:	f005 febb 	bl	8013444 <iprintf>
  while (seg_list != NULL &&
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d020      	beq.n	800d716 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fb f832 	bl	8008744 <lwip_htonl>
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	891b      	ldrh	r3, [r3, #8]
 800d6e6:	461d      	mov	r5, r3
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	899b      	ldrh	r3, [r3, #12]
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fb f811 	bl	8008718 <lwip_htons>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	f003 0303 	and.w	r3, r3, #3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d001      	beq.n	800d706 <tcp_free_acked_segments+0xc6>
 800d702:	2301      	movs	r3, #1
 800d704:	e000      	b.n	800d708 <tcp_free_acked_segments+0xc8>
 800d706:	2300      	movs	r3, #0
 800d708:	442b      	add	r3, r5
 800d70a:	18e2      	adds	r2, r4, r3
 800d70c:	4b09      	ldr	r3, [pc, #36]	@ (800d734 <tcp_free_acked_segments+0xf4>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d712:	2b00      	cmp	r3, #0
 800d714:	dd9c      	ble.n	800d650 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d716:	68bb      	ldr	r3, [r7, #8]
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3718      	adds	r7, #24
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bdb0      	pop	{r4, r5, r7, pc}
 800d720:	08015cf4 	.word	0x08015cf4
 800d724:	08015fdc 	.word	0x08015fdc
 800d728:	08015d40 	.word	0x08015d40
 800d72c:	2404323c 	.word	0x2404323c
 800d730:	08016004 	.word	0x08016004
 800d734:	24043238 	.word	0x24043238

0800d738 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d738:	b5b0      	push	{r4, r5, r7, lr}
 800d73a:	b094      	sub	sp, #80	@ 0x50
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d740:	2300      	movs	r3, #0
 800d742:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d106      	bne.n	800d758 <tcp_receive+0x20>
 800d74a:	4b91      	ldr	r3, [pc, #580]	@ (800d990 <tcp_receive+0x258>)
 800d74c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800d750:	4990      	ldr	r1, [pc, #576]	@ (800d994 <tcp_receive+0x25c>)
 800d752:	4891      	ldr	r0, [pc, #580]	@ (800d998 <tcp_receive+0x260>)
 800d754:	f005 fe76 	bl	8013444 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	7d1b      	ldrb	r3, [r3, #20]
 800d75c:	2b03      	cmp	r3, #3
 800d75e:	d806      	bhi.n	800d76e <tcp_receive+0x36>
 800d760:	4b8b      	ldr	r3, [pc, #556]	@ (800d990 <tcp_receive+0x258>)
 800d762:	f240 427c 	movw	r2, #1148	@ 0x47c
 800d766:	498d      	ldr	r1, [pc, #564]	@ (800d99c <tcp_receive+0x264>)
 800d768:	488b      	ldr	r0, [pc, #556]	@ (800d998 <tcp_receive+0x260>)
 800d76a:	f005 fe6b 	bl	8013444 <iprintf>

  if (flags & TCP_ACK) {
 800d76e:	4b8c      	ldr	r3, [pc, #560]	@ (800d9a0 <tcp_receive+0x268>)
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	f003 0310 	and.w	r3, r3, #16
 800d776:	2b00      	cmp	r3, #0
 800d778:	f000 8264 	beq.w	800dc44 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d782:	461a      	mov	r2, r3
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d788:	4413      	add	r3, r2
 800d78a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d790:	4b84      	ldr	r3, [pc, #528]	@ (800d9a4 <tcp_receive+0x26c>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	1ad3      	subs	r3, r2, r3
 800d796:	2b00      	cmp	r3, #0
 800d798:	db1b      	blt.n	800d7d2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d79e:	4b81      	ldr	r3, [pc, #516]	@ (800d9a4 <tcp_receive+0x26c>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d106      	bne.n	800d7b4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d7aa:	4b7f      	ldr	r3, [pc, #508]	@ (800d9a8 <tcp_receive+0x270>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	1ad3      	subs	r3, r2, r3
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	db0e      	blt.n	800d7d2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d7b8:	4b7b      	ldr	r3, [pc, #492]	@ (800d9a8 <tcp_receive+0x270>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d125      	bne.n	800d80c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d7c0:	4b7a      	ldr	r3, [pc, #488]	@ (800d9ac <tcp_receive+0x274>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	89db      	ldrh	r3, [r3, #14]
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d91c      	bls.n	800d80c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d7d2:	4b76      	ldr	r3, [pc, #472]	@ (800d9ac <tcp_receive+0x274>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	89db      	ldrh	r3, [r3, #14]
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d205      	bcs.n	800d7fc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800d7fc:	4b69      	ldr	r3, [pc, #420]	@ (800d9a4 <tcp_receive+0x26c>)
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800d804:	4b68      	ldr	r3, [pc, #416]	@ (800d9a8 <tcp_receive+0x270>)
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d80c:	4b66      	ldr	r3, [pc, #408]	@ (800d9a8 <tcp_receive+0x270>)
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d814:	1ad3      	subs	r3, r2, r3
 800d816:	2b00      	cmp	r3, #0
 800d818:	dc58      	bgt.n	800d8cc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d81a:	4b65      	ldr	r3, [pc, #404]	@ (800d9b0 <tcp_receive+0x278>)
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d14b      	bne.n	800d8ba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800d82c:	4413      	add	r3, r2
 800d82e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d830:	429a      	cmp	r2, r3
 800d832:	d142      	bne.n	800d8ba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	db3d      	blt.n	800d8ba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d842:	4b59      	ldr	r3, [pc, #356]	@ (800d9a8 <tcp_receive+0x270>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	429a      	cmp	r2, r3
 800d848:	d137      	bne.n	800d8ba <tcp_receive+0x182>
              found_dupack = 1;
 800d84a:	2301      	movs	r3, #1
 800d84c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d854:	2bff      	cmp	r3, #255	@ 0xff
 800d856:	d007      	beq.n	800d868 <tcp_receive+0x130>
                ++pcb->dupacks;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d85e:	3301      	adds	r3, #1
 800d860:	b2da      	uxtb	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d86e:	2b03      	cmp	r3, #3
 800d870:	d91b      	bls.n	800d8aa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d87c:	4413      	add	r3, r2
 800d87e:	b29a      	uxth	r2, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d886:	429a      	cmp	r2, r3
 800d888:	d30a      	bcc.n	800d8a0 <tcp_receive+0x168>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d894:	4413      	add	r3, r2
 800d896:	b29a      	uxth	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d89e:	e004      	b.n	800d8aa <tcp_receive+0x172>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d8a6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d8b0:	2b02      	cmp	r3, #2
 800d8b2:	d902      	bls.n	800d8ba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f002 fb3f 	bl	800ff38 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d8ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f040 8161 	bne.w	800db84 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d8ca:	e15b      	b.n	800db84 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d8cc:	4b36      	ldr	r3, [pc, #216]	@ (800d9a8 <tcp_receive+0x270>)
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8d4:	1ad3      	subs	r3, r2, r3
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f2c0 814e 	blt.w	800db7a <tcp_receive+0x442>
 800d8de:	4b32      	ldr	r3, [pc, #200]	@ (800d9a8 <tcp_receive+0x270>)
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8e6:	1ad3      	subs	r3, r2, r3
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f300 8146 	bgt.w	800db7a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	8b5b      	ldrh	r3, [r3, #26]
 800d8f2:	f003 0304 	and.w	r3, r3, #4
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d010      	beq.n	800d91c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	8b5b      	ldrh	r3, [r3, #26]
 800d8fe:	f023 0304 	bic.w	r3, r3, #4
 800d902:	b29a      	uxth	r2, r3
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2200      	movs	r2, #0
 800d918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d92a:	10db      	asrs	r3, r3, #3
 800d92c:	b21b      	sxth	r3, r3
 800d92e:	b29a      	uxth	r2, r3
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d936:	b29b      	uxth	r3, r3
 800d938:	4413      	add	r3, r2
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	b21a      	sxth	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d944:	4b18      	ldr	r3, [pc, #96]	@ (800d9a8 <tcp_receive+0x270>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	b29a      	uxth	r2, r3
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d94e:	b29b      	uxth	r3, r3
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800d95c:	4b12      	ldr	r3, [pc, #72]	@ (800d9a8 <tcp_receive+0x270>)
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	7d1b      	ldrb	r3, [r3, #20]
 800d968:	2b03      	cmp	r3, #3
 800d96a:	f240 8097 	bls.w	800da9c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d245      	bcs.n	800da0a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	8b5b      	ldrh	r3, [r3, #26]
 800d982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d986:	2b00      	cmp	r3, #0
 800d988:	d014      	beq.n	800d9b4 <tcp_receive+0x27c>
 800d98a:	2301      	movs	r3, #1
 800d98c:	e013      	b.n	800d9b6 <tcp_receive+0x27e>
 800d98e:	bf00      	nop
 800d990:	08015cf4 	.word	0x08015cf4
 800d994:	08016024 	.word	0x08016024
 800d998:	08015d40 	.word	0x08015d40
 800d99c:	08016040 	.word	0x08016040
 800d9a0:	24043240 	.word	0x24043240
 800d9a4:	24043234 	.word	0x24043234
 800d9a8:	24043238 	.word	0x24043238
 800d9ac:	24043224 	.word	0x24043224
 800d9b0:	2404323e 	.word	0x2404323e
 800d9b4:	2302      	movs	r3, #2
 800d9b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d9ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d9be:	b29a      	uxth	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d9c4:	fb12 f303 	smulbb	r3, r2, r3
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	bf28      	it	cs
 800d9d0:	4613      	movcs	r3, r2
 800d9d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d9da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d9dc:	4413      	add	r3, r2
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d309      	bcc.n	800d9fe <tcp_receive+0x2c6>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d9f0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d9f2:	4413      	add	r3, r2
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d9fc:	e04e      	b.n	800da9c <tcp_receive+0x364>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da04:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800da08:	e048      	b.n	800da9c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800da10:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800da12:	4413      	add	r3, r2
 800da14:	b29a      	uxth	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d309      	bcc.n	800da34 <tcp_receive+0x2fc>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800da26:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800da28:	4413      	add	r3, r2
 800da2a:	b29a      	uxth	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800da32:	e004      	b.n	800da3e <tcp_receive+0x306>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d326      	bcc.n	800da9c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800da5a:	1ad3      	subs	r3, r2, r3
 800da5c:	b29a      	uxth	r2, r3
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da6e:	4413      	add	r3, r2
 800da70:	b29a      	uxth	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800da78:	429a      	cmp	r2, r3
 800da7a:	d30a      	bcc.n	800da92 <tcp_receive+0x35a>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da86:	4413      	add	r3, r2
 800da88:	b29a      	uxth	r2, r3
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800da90:	e004      	b.n	800da9c <tcp_receive+0x364>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da98:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800daa4:	4a98      	ldr	r2, [pc, #608]	@ (800dd08 <tcp_receive+0x5d0>)
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f7ff fdca 	bl	800d640 <tcp_free_acked_segments>
 800daac:	4602      	mov	r2, r0
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800daba:	4a94      	ldr	r2, [pc, #592]	@ (800dd0c <tcp_receive+0x5d4>)
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f7ff fdbf 	bl	800d640 <tcp_free_acked_segments>
 800dac2:	4602      	mov	r2, r0
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d104      	bne.n	800dada <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dad6:	861a      	strh	r2, [r3, #48]	@ 0x30
 800dad8:	e002      	b.n	800dae0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800daea:	2b00      	cmp	r3, #0
 800daec:	d103      	bne.n	800daf6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800dafc:	4b84      	ldr	r3, [pc, #528]	@ (800dd10 <tcp_receive+0x5d8>)
 800dafe:	881b      	ldrh	r3, [r3, #0]
 800db00:	4413      	add	r3, r2
 800db02:	b29a      	uxth	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	8b5b      	ldrh	r3, [r3, #26]
 800db0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800db12:	2b00      	cmp	r3, #0
 800db14:	d035      	beq.n	800db82 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d118      	bne.n	800db50 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db22:	2b00      	cmp	r3, #0
 800db24:	d00c      	beq.n	800db40 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	4618      	mov	r0, r3
 800db34:	f7fa fe06 	bl	8008744 <lwip_htonl>
 800db38:	4603      	mov	r3, r0
 800db3a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	dc20      	bgt.n	800db82 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	8b5b      	ldrh	r3, [r3, #26]
 800db44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800db48:	b29a      	uxth	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db4e:	e018      	b.n	800db82 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fa fdf1 	bl	8008744 <lwip_htonl>
 800db62:	4603      	mov	r3, r0
 800db64:	1ae3      	subs	r3, r4, r3
 800db66:	2b00      	cmp	r3, #0
 800db68:	dc0b      	bgt.n	800db82 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	8b5b      	ldrh	r3, [r3, #26]
 800db6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800db72:	b29a      	uxth	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db78:	e003      	b.n	800db82 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f002 fbc8 	bl	8010310 <tcp_send_empty_ack>
 800db80:	e000      	b.n	800db84 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db82:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d05b      	beq.n	800dc44 <tcp_receive+0x50c>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db90:	4b60      	ldr	r3, [pc, #384]	@ (800dd14 <tcp_receive+0x5dc>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	1ad3      	subs	r3, r2, r3
 800db96:	2b00      	cmp	r3, #0
 800db98:	da54      	bge.n	800dc44 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800db9a:	4b5f      	ldr	r3, [pc, #380]	@ (800dd18 <tcp_receive+0x5e0>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	b29a      	uxth	r2, r3
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	1ad3      	subs	r3, r2, r3
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800dbae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800dbb8:	10db      	asrs	r3, r3, #3
 800dbba:	b21b      	sxth	r3, r3
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800dbcc:	b29a      	uxth	r2, r3
 800dbce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800dbd2:	4413      	add	r3, r2
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	b21a      	sxth	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800dbdc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	da05      	bge.n	800dbf0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800dbe4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800dbe8:	425b      	negs	r3, r3
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800dbf0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800dbfa:	109b      	asrs	r3, r3, #2
 800dbfc:	b21b      	sxth	r3, r3
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800dc14:	4413      	add	r3, r2
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	b21a      	sxth	r2, r3
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800dc24:	10db      	asrs	r3, r3, #3
 800dc26:	b21b      	sxth	r3, r3
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	4413      	add	r3, r2
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	b21a      	sxth	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800dc44:	4b35      	ldr	r3, [pc, #212]	@ (800dd1c <tcp_receive+0x5e4>)
 800dc46:	881b      	ldrh	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f000 84df 	beq.w	800e60c <tcp_receive+0xed4>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	7d1b      	ldrb	r3, [r3, #20]
 800dc52:	2b06      	cmp	r3, #6
 800dc54:	f200 84da 	bhi.w	800e60c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc5c:	4b30      	ldr	r3, [pc, #192]	@ (800dd20 <tcp_receive+0x5e8>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	1ad3      	subs	r3, r2, r3
 800dc62:	3b01      	subs	r3, #1
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f2c0 808f 	blt.w	800dd88 <tcp_receive+0x650>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc6e:	4b2b      	ldr	r3, [pc, #172]	@ (800dd1c <tcp_receive+0x5e4>)
 800dc70:	881b      	ldrh	r3, [r3, #0]
 800dc72:	4619      	mov	r1, r3
 800dc74:	4b2a      	ldr	r3, [pc, #168]	@ (800dd20 <tcp_receive+0x5e8>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	440b      	add	r3, r1
 800dc7a:	1ad3      	subs	r3, r2, r3
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f300 8082 	bgt.w	800dd88 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800dc84:	4b27      	ldr	r3, [pc, #156]	@ (800dd24 <tcp_receive+0x5ec>)
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc8e:	4b24      	ldr	r3, [pc, #144]	@ (800dd20 <tcp_receive+0x5e8>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dc96:	4b23      	ldr	r3, [pc, #140]	@ (800dd24 <tcp_receive+0x5ec>)
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d106      	bne.n	800dcac <tcp_receive+0x574>
 800dc9e:	4b22      	ldr	r3, [pc, #136]	@ (800dd28 <tcp_receive+0x5f0>)
 800dca0:	f240 5294 	movw	r2, #1428	@ 0x594
 800dca4:	4921      	ldr	r1, [pc, #132]	@ (800dd2c <tcp_receive+0x5f4>)
 800dca6:	4822      	ldr	r0, [pc, #136]	@ (800dd30 <tcp_receive+0x5f8>)
 800dca8:	f005 fbcc 	bl	8013444 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d906      	bls.n	800dcc4 <tcp_receive+0x58c>
 800dcb6:	4b1c      	ldr	r3, [pc, #112]	@ (800dd28 <tcp_receive+0x5f0>)
 800dcb8:	f240 5295 	movw	r2, #1429	@ 0x595
 800dcbc:	491d      	ldr	r1, [pc, #116]	@ (800dd34 <tcp_receive+0x5fc>)
 800dcbe:	481c      	ldr	r0, [pc, #112]	@ (800dd30 <tcp_receive+0x5f8>)
 800dcc0:	f005 fbc0 	bl	8013444 <iprintf>
      off = (u16_t)off32;
 800dcc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800dcca:	4b16      	ldr	r3, [pc, #88]	@ (800dd24 <tcp_receive+0x5ec>)
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	891b      	ldrh	r3, [r3, #8]
 800dcd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d906      	bls.n	800dce6 <tcp_receive+0x5ae>
 800dcd8:	4b13      	ldr	r3, [pc, #76]	@ (800dd28 <tcp_receive+0x5f0>)
 800dcda:	f240 5297 	movw	r2, #1431	@ 0x597
 800dcde:	4916      	ldr	r1, [pc, #88]	@ (800dd38 <tcp_receive+0x600>)
 800dce0:	4813      	ldr	r0, [pc, #76]	@ (800dd30 <tcp_receive+0x5f8>)
 800dce2:	f005 fbaf 	bl	8013444 <iprintf>
      inseg.len -= off;
 800dce6:	4b0f      	ldr	r3, [pc, #60]	@ (800dd24 <tcp_receive+0x5ec>)
 800dce8:	891a      	ldrh	r2, [r3, #8]
 800dcea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	4b0c      	ldr	r3, [pc, #48]	@ (800dd24 <tcp_receive+0x5ec>)
 800dcf4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800dcf6:	4b0b      	ldr	r3, [pc, #44]	@ (800dd24 <tcp_receive+0x5ec>)
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	891a      	ldrh	r2, [r3, #8]
 800dcfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800dd04:	e02a      	b.n	800dd5c <tcp_receive+0x624>
 800dd06:	bf00      	nop
 800dd08:	0801605c 	.word	0x0801605c
 800dd0c:	08016064 	.word	0x08016064
 800dd10:	2404323c 	.word	0x2404323c
 800dd14:	24043238 	.word	0x24043238
 800dd18:	240431fc 	.word	0x240431fc
 800dd1c:	2404323e 	.word	0x2404323e
 800dd20:	24043234 	.word	0x24043234
 800dd24:	24043214 	.word	0x24043214
 800dd28:	08015cf4 	.word	0x08015cf4
 800dd2c:	0801606c 	.word	0x0801606c
 800dd30:	08015d40 	.word	0x08015d40
 800dd34:	0801607c 	.word	0x0801607c
 800dd38:	0801608c 	.word	0x0801608c
        off -= p->len;
 800dd3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd3e:	895b      	ldrh	r3, [r3, #10]
 800dd40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800dd4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd4c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dd4e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800dd50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd52:	2200      	movs	r2, #0
 800dd54:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800dd56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800dd5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd5e:	895b      	ldrh	r3, [r3, #10]
 800dd60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d8e9      	bhi.n	800dd3c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800dd68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800dd70:	f7fc f86a 	bl	8009e48 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd78:	4a90      	ldr	r2, [pc, #576]	@ (800dfbc <tcp_receive+0x884>)
 800dd7a:	6013      	str	r3, [r2, #0]
 800dd7c:	4b90      	ldr	r3, [pc, #576]	@ (800dfc0 <tcp_receive+0x888>)
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	4a8e      	ldr	r2, [pc, #568]	@ (800dfbc <tcp_receive+0x884>)
 800dd82:	6812      	ldr	r2, [r2, #0]
 800dd84:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dd86:	e00d      	b.n	800dda4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800dd88:	4b8c      	ldr	r3, [pc, #560]	@ (800dfbc <tcp_receive+0x884>)
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd90:	1ad3      	subs	r3, r2, r3
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	da06      	bge.n	800dda4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	8b5b      	ldrh	r3, [r3, #26]
 800dd9a:	f043 0302 	orr.w	r3, r3, #2
 800dd9e:	b29a      	uxth	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dda4:	4b85      	ldr	r3, [pc, #532]	@ (800dfbc <tcp_receive+0x884>)
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddac:	1ad3      	subs	r3, r2, r3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	f2c0 8427 	blt.w	800e602 <tcp_receive+0xeca>
 800ddb4:	4b81      	ldr	r3, [pc, #516]	@ (800dfbc <tcp_receive+0x884>)
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddbc:	6879      	ldr	r1, [r7, #4]
 800ddbe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ddc0:	440b      	add	r3, r1
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f300 841b 	bgt.w	800e602 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ddd0:	4b7a      	ldr	r3, [pc, #488]	@ (800dfbc <tcp_receive+0x884>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	f040 8298 	bne.w	800e30a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ddda:	4b79      	ldr	r3, [pc, #484]	@ (800dfc0 <tcp_receive+0x888>)
 800dddc:	891c      	ldrh	r4, [r3, #8]
 800ddde:	4b78      	ldr	r3, [pc, #480]	@ (800dfc0 <tcp_receive+0x888>)
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	899b      	ldrh	r3, [r3, #12]
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7fa fc96 	bl	8008718 <lwip_htons>
 800ddec:	4603      	mov	r3, r0
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	f003 0303 	and.w	r3, r3, #3
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d001      	beq.n	800ddfc <tcp_receive+0x6c4>
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	e000      	b.n	800ddfe <tcp_receive+0x6c6>
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	4423      	add	r3, r4
 800de00:	b29a      	uxth	r2, r3
 800de02:	4b70      	ldr	r3, [pc, #448]	@ (800dfc4 <tcp_receive+0x88c>)
 800de04:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800de0a:	4b6e      	ldr	r3, [pc, #440]	@ (800dfc4 <tcp_receive+0x88c>)
 800de0c:	881b      	ldrh	r3, [r3, #0]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d274      	bcs.n	800defc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800de12:	4b6b      	ldr	r3, [pc, #428]	@ (800dfc0 <tcp_receive+0x888>)
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	899b      	ldrh	r3, [r3, #12]
 800de18:	b29b      	uxth	r3, r3
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fa fc7c 	bl	8008718 <lwip_htons>
 800de20:	4603      	mov	r3, r0
 800de22:	b2db      	uxtb	r3, r3
 800de24:	f003 0301 	and.w	r3, r3, #1
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d01e      	beq.n	800de6a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800de2c:	4b64      	ldr	r3, [pc, #400]	@ (800dfc0 <tcp_receive+0x888>)
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	899b      	ldrh	r3, [r3, #12]
 800de32:	b29b      	uxth	r3, r3
 800de34:	b21b      	sxth	r3, r3
 800de36:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800de3a:	b21c      	sxth	r4, r3
 800de3c:	4b60      	ldr	r3, [pc, #384]	@ (800dfc0 <tcp_receive+0x888>)
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	899b      	ldrh	r3, [r3, #12]
 800de42:	b29b      	uxth	r3, r3
 800de44:	4618      	mov	r0, r3
 800de46:	f7fa fc67 	bl	8008718 <lwip_htons>
 800de4a:	4603      	mov	r3, r0
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800de52:	b29b      	uxth	r3, r3
 800de54:	4618      	mov	r0, r3
 800de56:	f7fa fc5f 	bl	8008718 <lwip_htons>
 800de5a:	4603      	mov	r3, r0
 800de5c:	b21b      	sxth	r3, r3
 800de5e:	4323      	orrs	r3, r4
 800de60:	b21a      	sxth	r2, r3
 800de62:	4b57      	ldr	r3, [pc, #348]	@ (800dfc0 <tcp_receive+0x888>)
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	b292      	uxth	r2, r2
 800de68:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800de6e:	4b54      	ldr	r3, [pc, #336]	@ (800dfc0 <tcp_receive+0x888>)
 800de70:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800de72:	4b53      	ldr	r3, [pc, #332]	@ (800dfc0 <tcp_receive+0x888>)
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	899b      	ldrh	r3, [r3, #12]
 800de78:	b29b      	uxth	r3, r3
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fa fc4c 	bl	8008718 <lwip_htons>
 800de80:	4603      	mov	r3, r0
 800de82:	b2db      	uxtb	r3, r3
 800de84:	f003 0302 	and.w	r3, r3, #2
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d005      	beq.n	800de98 <tcp_receive+0x760>
            inseg.len -= 1;
 800de8c:	4b4c      	ldr	r3, [pc, #304]	@ (800dfc0 <tcp_receive+0x888>)
 800de8e:	891b      	ldrh	r3, [r3, #8]
 800de90:	3b01      	subs	r3, #1
 800de92:	b29a      	uxth	r2, r3
 800de94:	4b4a      	ldr	r3, [pc, #296]	@ (800dfc0 <tcp_receive+0x888>)
 800de96:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800de98:	4b49      	ldr	r3, [pc, #292]	@ (800dfc0 <tcp_receive+0x888>)
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	4a48      	ldr	r2, [pc, #288]	@ (800dfc0 <tcp_receive+0x888>)
 800de9e:	8912      	ldrh	r2, [r2, #8]
 800dea0:	4611      	mov	r1, r2
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fb fed2 	bl	8009c4c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800dea8:	4b45      	ldr	r3, [pc, #276]	@ (800dfc0 <tcp_receive+0x888>)
 800deaa:	891c      	ldrh	r4, [r3, #8]
 800deac:	4b44      	ldr	r3, [pc, #272]	@ (800dfc0 <tcp_receive+0x888>)
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	899b      	ldrh	r3, [r3, #12]
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7fa fc2f 	bl	8008718 <lwip_htons>
 800deba:	4603      	mov	r3, r0
 800debc:	b2db      	uxtb	r3, r3
 800debe:	f003 0303 	and.w	r3, r3, #3
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d001      	beq.n	800deca <tcp_receive+0x792>
 800dec6:	2301      	movs	r3, #1
 800dec8:	e000      	b.n	800decc <tcp_receive+0x794>
 800deca:	2300      	movs	r3, #0
 800decc:	4423      	add	r3, r4
 800dece:	b29a      	uxth	r2, r3
 800ded0:	4b3c      	ldr	r3, [pc, #240]	@ (800dfc4 <tcp_receive+0x88c>)
 800ded2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ded4:	4b3b      	ldr	r3, [pc, #236]	@ (800dfc4 <tcp_receive+0x88c>)
 800ded6:	881b      	ldrh	r3, [r3, #0]
 800ded8:	461a      	mov	r2, r3
 800deda:	4b38      	ldr	r3, [pc, #224]	@ (800dfbc <tcp_receive+0x884>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	441a      	add	r2, r3
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dee4:	6879      	ldr	r1, [r7, #4]
 800dee6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dee8:	440b      	add	r3, r1
 800deea:	429a      	cmp	r2, r3
 800deec:	d006      	beq.n	800defc <tcp_receive+0x7c4>
 800deee:	4b36      	ldr	r3, [pc, #216]	@ (800dfc8 <tcp_receive+0x890>)
 800def0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800def4:	4935      	ldr	r1, [pc, #212]	@ (800dfcc <tcp_receive+0x894>)
 800def6:	4836      	ldr	r0, [pc, #216]	@ (800dfd0 <tcp_receive+0x898>)
 800def8:	f005 faa4 	bl	8013444 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df00:	2b00      	cmp	r3, #0
 800df02:	f000 80e6 	beq.w	800e0d2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800df06:	4b2e      	ldr	r3, [pc, #184]	@ (800dfc0 <tcp_receive+0x888>)
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	899b      	ldrh	r3, [r3, #12]
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fa fc02 	bl	8008718 <lwip_htons>
 800df14:	4603      	mov	r3, r0
 800df16:	b2db      	uxtb	r3, r3
 800df18:	f003 0301 	and.w	r3, r3, #1
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d010      	beq.n	800df42 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800df20:	e00a      	b.n	800df38 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df26:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f7fd fcdd 	bl	800b8f2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1f0      	bne.n	800df22 <tcp_receive+0x7ea>
 800df40:	e0c7      	b.n	800e0d2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df46:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800df48:	e051      	b.n	800dfee <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800df4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	899b      	ldrh	r3, [r3, #12]
 800df50:	b29b      	uxth	r3, r3
 800df52:	4618      	mov	r0, r3
 800df54:	f7fa fbe0 	bl	8008718 <lwip_htons>
 800df58:	4603      	mov	r3, r0
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	f003 0301 	and.w	r3, r3, #1
 800df60:	2b00      	cmp	r3, #0
 800df62:	d03c      	beq.n	800dfde <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800df64:	4b16      	ldr	r3, [pc, #88]	@ (800dfc0 <tcp_receive+0x888>)
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	899b      	ldrh	r3, [r3, #12]
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7fa fbd3 	bl	8008718 <lwip_htons>
 800df72:	4603      	mov	r3, r0
 800df74:	b2db      	uxtb	r3, r3
 800df76:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d12f      	bne.n	800dfde <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800df7e:	4b10      	ldr	r3, [pc, #64]	@ (800dfc0 <tcp_receive+0x888>)
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	899b      	ldrh	r3, [r3, #12]
 800df84:	b29c      	uxth	r4, r3
 800df86:	2001      	movs	r0, #1
 800df88:	f7fa fbc6 	bl	8008718 <lwip_htons>
 800df8c:	4603      	mov	r3, r0
 800df8e:	461a      	mov	r2, r3
 800df90:	4b0b      	ldr	r3, [pc, #44]	@ (800dfc0 <tcp_receive+0x888>)
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	4322      	orrs	r2, r4
 800df96:	b292      	uxth	r2, r2
 800df98:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800df9a:	4b09      	ldr	r3, [pc, #36]	@ (800dfc0 <tcp_receive+0x888>)
 800df9c:	891c      	ldrh	r4, [r3, #8]
 800df9e:	4b08      	ldr	r3, [pc, #32]	@ (800dfc0 <tcp_receive+0x888>)
 800dfa0:	68db      	ldr	r3, [r3, #12]
 800dfa2:	899b      	ldrh	r3, [r3, #12]
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fa fbb6 	bl	8008718 <lwip_htons>
 800dfac:	4603      	mov	r3, r0
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	f003 0303 	and.w	r3, r3, #3
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00d      	beq.n	800dfd4 <tcp_receive+0x89c>
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e00c      	b.n	800dfd6 <tcp_receive+0x89e>
 800dfbc:	24043234 	.word	0x24043234
 800dfc0:	24043214 	.word	0x24043214
 800dfc4:	2404323e 	.word	0x2404323e
 800dfc8:	08015cf4 	.word	0x08015cf4
 800dfcc:	0801609c 	.word	0x0801609c
 800dfd0:	08015d40 	.word	0x08015d40
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	4423      	add	r3, r4
 800dfd8:	b29a      	uxth	r2, r3
 800dfda:	4b98      	ldr	r3, [pc, #608]	@ (800e23c <tcp_receive+0xb04>)
 800dfdc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800dfde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfe0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800dfe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800dfe8:	6938      	ldr	r0, [r7, #16]
 800dfea:	f7fd fc82 	bl	800b8f2 <tcp_seg_free>
            while (next &&
 800dfee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d00e      	beq.n	800e012 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800dff4:	4b91      	ldr	r3, [pc, #580]	@ (800e23c <tcp_receive+0xb04>)
 800dff6:	881b      	ldrh	r3, [r3, #0]
 800dff8:	461a      	mov	r2, r3
 800dffa:	4b91      	ldr	r3, [pc, #580]	@ (800e240 <tcp_receive+0xb08>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	441a      	add	r2, r3
 800e000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e008:	8909      	ldrh	r1, [r1, #8]
 800e00a:	440b      	add	r3, r1
 800e00c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e00e:	2b00      	cmp	r3, #0
 800e010:	da9b      	bge.n	800df4a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e014:	2b00      	cmp	r3, #0
 800e016:	d059      	beq.n	800e0cc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e018:	4b88      	ldr	r3, [pc, #544]	@ (800e23c <tcp_receive+0xb04>)
 800e01a:	881b      	ldrh	r3, [r3, #0]
 800e01c:	461a      	mov	r2, r3
 800e01e:	4b88      	ldr	r3, [pc, #544]	@ (800e240 <tcp_receive+0xb08>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	441a      	add	r2, r3
 800e024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	dd4d      	ble.n	800e0cc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	b29a      	uxth	r2, r3
 800e038:	4b81      	ldr	r3, [pc, #516]	@ (800e240 <tcp_receive+0xb08>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	1ad3      	subs	r3, r2, r3
 800e040:	b29a      	uxth	r2, r3
 800e042:	4b80      	ldr	r3, [pc, #512]	@ (800e244 <tcp_receive+0xb0c>)
 800e044:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e046:	4b7f      	ldr	r3, [pc, #508]	@ (800e244 <tcp_receive+0xb0c>)
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	899b      	ldrh	r3, [r3, #12]
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fa fb62 	bl	8008718 <lwip_htons>
 800e054:	4603      	mov	r3, r0
 800e056:	b2db      	uxtb	r3, r3
 800e058:	f003 0302 	and.w	r3, r3, #2
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d005      	beq.n	800e06c <tcp_receive+0x934>
                inseg.len -= 1;
 800e060:	4b78      	ldr	r3, [pc, #480]	@ (800e244 <tcp_receive+0xb0c>)
 800e062:	891b      	ldrh	r3, [r3, #8]
 800e064:	3b01      	subs	r3, #1
 800e066:	b29a      	uxth	r2, r3
 800e068:	4b76      	ldr	r3, [pc, #472]	@ (800e244 <tcp_receive+0xb0c>)
 800e06a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e06c:	4b75      	ldr	r3, [pc, #468]	@ (800e244 <tcp_receive+0xb0c>)
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	4a74      	ldr	r2, [pc, #464]	@ (800e244 <tcp_receive+0xb0c>)
 800e072:	8912      	ldrh	r2, [r2, #8]
 800e074:	4611      	mov	r1, r2
 800e076:	4618      	mov	r0, r3
 800e078:	f7fb fde8 	bl	8009c4c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e07c:	4b71      	ldr	r3, [pc, #452]	@ (800e244 <tcp_receive+0xb0c>)
 800e07e:	891c      	ldrh	r4, [r3, #8]
 800e080:	4b70      	ldr	r3, [pc, #448]	@ (800e244 <tcp_receive+0xb0c>)
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	899b      	ldrh	r3, [r3, #12]
 800e086:	b29b      	uxth	r3, r3
 800e088:	4618      	mov	r0, r3
 800e08a:	f7fa fb45 	bl	8008718 <lwip_htons>
 800e08e:	4603      	mov	r3, r0
 800e090:	b2db      	uxtb	r3, r3
 800e092:	f003 0303 	and.w	r3, r3, #3
 800e096:	2b00      	cmp	r3, #0
 800e098:	d001      	beq.n	800e09e <tcp_receive+0x966>
 800e09a:	2301      	movs	r3, #1
 800e09c:	e000      	b.n	800e0a0 <tcp_receive+0x968>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	4423      	add	r3, r4
 800e0a2:	b29a      	uxth	r2, r3
 800e0a4:	4b65      	ldr	r3, [pc, #404]	@ (800e23c <tcp_receive+0xb04>)
 800e0a6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e0a8:	4b64      	ldr	r3, [pc, #400]	@ (800e23c <tcp_receive+0xb04>)
 800e0aa:	881b      	ldrh	r3, [r3, #0]
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	4b64      	ldr	r3, [pc, #400]	@ (800e240 <tcp_receive+0xb08>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	441a      	add	r2, r3
 800e0b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d006      	beq.n	800e0cc <tcp_receive+0x994>
 800e0be:	4b62      	ldr	r3, [pc, #392]	@ (800e248 <tcp_receive+0xb10>)
 800e0c0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800e0c4:	4961      	ldr	r1, [pc, #388]	@ (800e24c <tcp_receive+0xb14>)
 800e0c6:	4862      	ldr	r0, [pc, #392]	@ (800e250 <tcp_receive+0xb18>)
 800e0c8:	f005 f9bc 	bl	8013444 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e0d0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e0d2:	4b5a      	ldr	r3, [pc, #360]	@ (800e23c <tcp_receive+0xb04>)
 800e0d4:	881b      	ldrh	r3, [r3, #0]
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	4b59      	ldr	r3, [pc, #356]	@ (800e240 <tcp_receive+0xb08>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	441a      	add	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e0e6:	4b55      	ldr	r3, [pc, #340]	@ (800e23c <tcp_receive+0xb04>)
 800e0e8:	881b      	ldrh	r3, [r3, #0]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d206      	bcs.n	800e0fc <tcp_receive+0x9c4>
 800e0ee:	4b56      	ldr	r3, [pc, #344]	@ (800e248 <tcp_receive+0xb10>)
 800e0f0:	f240 6207 	movw	r2, #1543	@ 0x607
 800e0f4:	4957      	ldr	r1, [pc, #348]	@ (800e254 <tcp_receive+0xb1c>)
 800e0f6:	4856      	ldr	r0, [pc, #344]	@ (800e250 <tcp_receive+0xb18>)
 800e0f8:	f005 f9a4 	bl	8013444 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e100:	4b4e      	ldr	r3, [pc, #312]	@ (800e23c <tcp_receive+0xb04>)
 800e102:	881b      	ldrh	r3, [r3, #0]
 800e104:	1ad3      	subs	r3, r2, r3
 800e106:	b29a      	uxth	r2, r3
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7fc fdb1 	bl	800ac74 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e112:	4b4c      	ldr	r3, [pc, #304]	@ (800e244 <tcp_receive+0xb0c>)
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	891b      	ldrh	r3, [r3, #8]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d006      	beq.n	800e12a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e11c:	4b49      	ldr	r3, [pc, #292]	@ (800e244 <tcp_receive+0xb0c>)
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	4a4d      	ldr	r2, [pc, #308]	@ (800e258 <tcp_receive+0xb20>)
 800e122:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e124:	4b47      	ldr	r3, [pc, #284]	@ (800e244 <tcp_receive+0xb0c>)
 800e126:	2200      	movs	r2, #0
 800e128:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e12a:	4b46      	ldr	r3, [pc, #280]	@ (800e244 <tcp_receive+0xb0c>)
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	899b      	ldrh	r3, [r3, #12]
 800e130:	b29b      	uxth	r3, r3
 800e132:	4618      	mov	r0, r3
 800e134:	f7fa faf0 	bl	8008718 <lwip_htons>
 800e138:	4603      	mov	r3, r0
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	f003 0301 	and.w	r3, r3, #1
 800e140:	2b00      	cmp	r3, #0
 800e142:	f000 80b8 	beq.w	800e2b6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e146:	4b45      	ldr	r3, [pc, #276]	@ (800e25c <tcp_receive+0xb24>)
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	f043 0320 	orr.w	r3, r3, #32
 800e14e:	b2da      	uxtb	r2, r3
 800e150:	4b42      	ldr	r3, [pc, #264]	@ (800e25c <tcp_receive+0xb24>)
 800e152:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e154:	e0af      	b.n	800e2b6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e15a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	4a36      	ldr	r2, [pc, #216]	@ (800e240 <tcp_receive+0xb08>)
 800e166:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	891b      	ldrh	r3, [r3, #8]
 800e16c:	461c      	mov	r4, r3
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	899b      	ldrh	r3, [r3, #12]
 800e174:	b29b      	uxth	r3, r3
 800e176:	4618      	mov	r0, r3
 800e178:	f7fa face 	bl	8008718 <lwip_htons>
 800e17c:	4603      	mov	r3, r0
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	f003 0303 	and.w	r3, r3, #3
 800e184:	2b00      	cmp	r3, #0
 800e186:	d001      	beq.n	800e18c <tcp_receive+0xa54>
 800e188:	2301      	movs	r3, #1
 800e18a:	e000      	b.n	800e18e <tcp_receive+0xa56>
 800e18c:	2300      	movs	r3, #0
 800e18e:	191a      	adds	r2, r3, r4
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e194:	441a      	add	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e19e:	461c      	mov	r4, r3
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	891b      	ldrh	r3, [r3, #8]
 800e1a4:	461d      	mov	r5, r3
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	68db      	ldr	r3, [r3, #12]
 800e1aa:	899b      	ldrh	r3, [r3, #12]
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7fa fab2 	bl	8008718 <lwip_htons>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	f003 0303 	and.w	r3, r3, #3
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d001      	beq.n	800e1c4 <tcp_receive+0xa8c>
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e000      	b.n	800e1c6 <tcp_receive+0xa8e>
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	442b      	add	r3, r5
 800e1c8:	429c      	cmp	r4, r3
 800e1ca:	d206      	bcs.n	800e1da <tcp_receive+0xaa2>
 800e1cc:	4b1e      	ldr	r3, [pc, #120]	@ (800e248 <tcp_receive+0xb10>)
 800e1ce:	f240 622b 	movw	r2, #1579	@ 0x62b
 800e1d2:	4923      	ldr	r1, [pc, #140]	@ (800e260 <tcp_receive+0xb28>)
 800e1d4:	481e      	ldr	r0, [pc, #120]	@ (800e250 <tcp_receive+0xb18>)
 800e1d6:	f005 f935 	bl	8013444 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	891b      	ldrh	r3, [r3, #8]
 800e1de:	461c      	mov	r4, r3
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	899b      	ldrh	r3, [r3, #12]
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fa fa95 	bl	8008718 <lwip_htons>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	f003 0303 	and.w	r3, r3, #3
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d001      	beq.n	800e1fe <tcp_receive+0xac6>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	e000      	b.n	800e200 <tcp_receive+0xac8>
 800e1fe:	2300      	movs	r3, #0
 800e200:	1919      	adds	r1, r3, r4
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e206:	b28b      	uxth	r3, r1
 800e208:	1ad3      	subs	r3, r2, r3
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7fc fd2f 	bl	800ac74 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	891b      	ldrh	r3, [r3, #8]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d028      	beq.n	800e272 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e220:	4b0d      	ldr	r3, [pc, #52]	@ (800e258 <tcp_receive+0xb20>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d01d      	beq.n	800e264 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e228:	4b0b      	ldr	r3, [pc, #44]	@ (800e258 <tcp_receive+0xb20>)
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	4619      	mov	r1, r3
 800e232:	4610      	mov	r0, r2
 800e234:	f7fb ff50 	bl	800a0d8 <pbuf_cat>
 800e238:	e018      	b.n	800e26c <tcp_receive+0xb34>
 800e23a:	bf00      	nop
 800e23c:	2404323e 	.word	0x2404323e
 800e240:	24043234 	.word	0x24043234
 800e244:	24043214 	.word	0x24043214
 800e248:	08015cf4 	.word	0x08015cf4
 800e24c:	080160d4 	.word	0x080160d4
 800e250:	08015d40 	.word	0x08015d40
 800e254:	08016110 	.word	0x08016110
 800e258:	24043244 	.word	0x24043244
 800e25c:	24043241 	.word	0x24043241
 800e260:	08016130 	.word	0x08016130
            } else {
              recv_data = cseg->p;
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	4a70      	ldr	r2, [pc, #448]	@ (800e42c <tcp_receive+0xcf4>)
 800e26a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	2200      	movs	r2, #0
 800e270:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	899b      	ldrh	r3, [r3, #12]
 800e278:	b29b      	uxth	r3, r3
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fa fa4c 	bl	8008718 <lwip_htons>
 800e280:	4603      	mov	r3, r0
 800e282:	b2db      	uxtb	r3, r3
 800e284:	f003 0301 	and.w	r3, r3, #1
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00d      	beq.n	800e2a8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e28c:	4b68      	ldr	r3, [pc, #416]	@ (800e430 <tcp_receive+0xcf8>)
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	f043 0320 	orr.w	r3, r3, #32
 800e294:	b2da      	uxtb	r2, r3
 800e296:	4b66      	ldr	r3, [pc, #408]	@ (800e430 <tcp_receive+0xcf8>)
 800e298:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	7d1b      	ldrb	r3, [r3, #20]
 800e29e:	2b04      	cmp	r3, #4
 800e2a0:	d102      	bne.n	800e2a8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2207      	movs	r2, #7
 800e2a6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800e2b0:	68b8      	ldr	r0, [r7, #8]
 800e2b2:	f7fd fb1e 	bl	800b8f2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d008      	beq.n	800e2d0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	685a      	ldr	r2, [r3, #4]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	f43f af43 	beq.w	800e156 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	8b5b      	ldrh	r3, [r3, #26]
 800e2d4:	f003 0301 	and.w	r3, r3, #1
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00e      	beq.n	800e2fa <tcp_receive+0xbc2>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	8b5b      	ldrh	r3, [r3, #26]
 800e2e0:	f023 0301 	bic.w	r3, r3, #1
 800e2e4:	b29a      	uxth	r2, r3
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	835a      	strh	r2, [r3, #26]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	8b5b      	ldrh	r3, [r3, #26]
 800e2ee:	f043 0302 	orr.w	r3, r3, #2
 800e2f2:	b29a      	uxth	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e2f8:	e187      	b.n	800e60a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	8b5b      	ldrh	r3, [r3, #26]
 800e2fe:	f043 0301 	orr.w	r3, r3, #1
 800e302:	b29a      	uxth	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e308:	e17f      	b.n	800e60a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d106      	bne.n	800e320 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e312:	4848      	ldr	r0, [pc, #288]	@ (800e434 <tcp_receive+0xcfc>)
 800e314:	f7fd fb06 	bl	800b924 <tcp_seg_copy>
 800e318:	4602      	mov	r2, r0
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	675a      	str	r2, [r3, #116]	@ 0x74
 800e31e:	e16c      	b.n	800e5fa <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e320:	2300      	movs	r3, #0
 800e322:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e328:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e32a:	e156      	b.n	800e5da <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800e32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e32e:	68db      	ldr	r3, [r3, #12]
 800e330:	685a      	ldr	r2, [r3, #4]
 800e332:	4b41      	ldr	r3, [pc, #260]	@ (800e438 <tcp_receive+0xd00>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	429a      	cmp	r2, r3
 800e338:	d11d      	bne.n	800e376 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e33a:	4b3e      	ldr	r3, [pc, #248]	@ (800e434 <tcp_receive+0xcfc>)
 800e33c:	891a      	ldrh	r2, [r3, #8]
 800e33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e340:	891b      	ldrh	r3, [r3, #8]
 800e342:	429a      	cmp	r2, r3
 800e344:	f240 814e 	bls.w	800e5e4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e348:	483a      	ldr	r0, [pc, #232]	@ (800e434 <tcp_receive+0xcfc>)
 800e34a:	f7fd faeb 	bl	800b924 <tcp_seg_copy>
 800e34e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	2b00      	cmp	r3, #0
 800e354:	f000 8148 	beq.w	800e5e8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800e358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d003      	beq.n	800e366 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800e35e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e360:	697a      	ldr	r2, [r7, #20]
 800e362:	601a      	str	r2, [r3, #0]
 800e364:	e002      	b.n	800e36c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	697a      	ldr	r2, [r7, #20]
 800e36a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e36c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e36e:	6978      	ldr	r0, [r7, #20]
 800e370:	f7ff f8de 	bl	800d530 <tcp_oos_insert_segment>
                }
                break;
 800e374:	e138      	b.n	800e5e8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d117      	bne.n	800e3ac <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e37c:	4b2e      	ldr	r3, [pc, #184]	@ (800e438 <tcp_receive+0xd00>)
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	1ad3      	subs	r3, r2, r3
 800e388:	2b00      	cmp	r3, #0
 800e38a:	da57      	bge.n	800e43c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e38c:	4829      	ldr	r0, [pc, #164]	@ (800e434 <tcp_receive+0xcfc>)
 800e38e:	f7fd fac9 	bl	800b924 <tcp_seg_copy>
 800e392:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e394:	69bb      	ldr	r3, [r7, #24]
 800e396:	2b00      	cmp	r3, #0
 800e398:	f000 8128 	beq.w	800e5ec <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	69ba      	ldr	r2, [r7, #24]
 800e3a0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e3a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e3a4:	69b8      	ldr	r0, [r7, #24]
 800e3a6:	f7ff f8c3 	bl	800d530 <tcp_oos_insert_segment>
                  }
                  break;
 800e3aa:	e11f      	b.n	800e5ec <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e3ac:	4b22      	ldr	r3, [pc, #136]	@ (800e438 <tcp_receive+0xd00>)
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	1ad3      	subs	r3, r2, r3
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	db3e      	blt.n	800e43c <tcp_receive+0xd04>
 800e3be:	4b1e      	ldr	r3, [pc, #120]	@ (800e438 <tcp_receive+0xd00>)
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	1ad3      	subs	r3, r2, r3
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	dc35      	bgt.n	800e43c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e3d0:	4818      	ldr	r0, [pc, #96]	@ (800e434 <tcp_receive+0xcfc>)
 800e3d2:	f7fd faa7 	bl	800b924 <tcp_seg_copy>
 800e3d6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	f000 8108 	beq.w	800e5f0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3e8:	8912      	ldrh	r2, [r2, #8]
 800e3ea:	441a      	add	r2, r3
 800e3ec:	4b12      	ldr	r3, [pc, #72]	@ (800e438 <tcp_receive+0xd00>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	dd12      	ble.n	800e41c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e3f6:	4b10      	ldr	r3, [pc, #64]	@ (800e438 <tcp_receive+0xd00>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3fe:	68db      	ldr	r3, [r3, #12]
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	b29b      	uxth	r3, r3
 800e404:	1ad3      	subs	r3, r2, r3
 800e406:	b29a      	uxth	r2, r3
 800e408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e40a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e40c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e40e:	685a      	ldr	r2, [r3, #4]
 800e410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e412:	891b      	ldrh	r3, [r3, #8]
 800e414:	4619      	mov	r1, r3
 800e416:	4610      	mov	r0, r2
 800e418:	f7fb fc18 	bl	8009c4c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e41c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e41e:	69fa      	ldr	r2, [r7, #28]
 800e420:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e422:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e424:	69f8      	ldr	r0, [r7, #28]
 800e426:	f7ff f883 	bl	800d530 <tcp_oos_insert_segment>
                  }
                  break;
 800e42a:	e0e1      	b.n	800e5f0 <tcp_receive+0xeb8>
 800e42c:	24043244 	.word	0x24043244
 800e430:	24043241 	.word	0x24043241
 800e434:	24043214 	.word	0x24043214
 800e438:	24043234 	.word	0x24043234
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e43e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	f040 80c5 	bne.w	800e5d4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e44a:	4b7f      	ldr	r3, [pc, #508]	@ (800e648 <tcp_receive+0xf10>)
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e456:	2b00      	cmp	r3, #0
 800e458:	f340 80bc 	ble.w	800e5d4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e45e:	68db      	ldr	r3, [r3, #12]
 800e460:	899b      	ldrh	r3, [r3, #12]
 800e462:	b29b      	uxth	r3, r3
 800e464:	4618      	mov	r0, r3
 800e466:	f7fa f957 	bl	8008718 <lwip_htons>
 800e46a:	4603      	mov	r3, r0
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	f003 0301 	and.w	r3, r3, #1
 800e472:	2b00      	cmp	r3, #0
 800e474:	f040 80be 	bne.w	800e5f4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e478:	4874      	ldr	r0, [pc, #464]	@ (800e64c <tcp_receive+0xf14>)
 800e47a:	f7fd fa53 	bl	800b924 <tcp_seg_copy>
 800e47e:	4602      	mov	r2, r0
 800e480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e482:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f000 80b5 	beq.w	800e5f8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e496:	8912      	ldrh	r2, [r2, #8]
 800e498:	441a      	add	r2, r3
 800e49a:	4b6b      	ldr	r3, [pc, #428]	@ (800e648 <tcp_receive+0xf10>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	1ad3      	subs	r3, r2, r3
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	dd12      	ble.n	800e4ca <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e4a4:	4b68      	ldr	r3, [pc, #416]	@ (800e648 <tcp_receive+0xf10>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	1ad3      	subs	r3, r2, r3
 800e4b4:	b29a      	uxth	r2, r3
 800e4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4bc:	685a      	ldr	r2, [r3, #4]
 800e4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4c0:	891b      	ldrh	r3, [r3, #8]
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	4610      	mov	r0, r2
 800e4c6:	f7fb fbc1 	bl	8009c4c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e4ca:	4b61      	ldr	r3, [pc, #388]	@ (800e650 <tcp_receive+0xf18>)
 800e4cc:	881b      	ldrh	r3, [r3, #0]
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	4b5d      	ldr	r3, [pc, #372]	@ (800e648 <tcp_receive+0xf10>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	441a      	add	r2, r3
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4da:	6879      	ldr	r1, [r7, #4]
 800e4dc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e4de:	440b      	add	r3, r1
 800e4e0:	1ad3      	subs	r3, r2, r3
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f340 8088 	ble.w	800e5f8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	899b      	ldrh	r3, [r3, #12]
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fa f910 	bl	8008718 <lwip_htons>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	f003 0301 	and.w	r3, r3, #1
 800e500:	2b00      	cmp	r3, #0
 800e502:	d021      	beq.n	800e548 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	899b      	ldrh	r3, [r3, #12]
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	b21b      	sxth	r3, r3
 800e510:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e514:	b21c      	sxth	r4, r3
 800e516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	899b      	ldrh	r3, [r3, #12]
 800e51e:	b29b      	uxth	r3, r3
 800e520:	4618      	mov	r0, r3
 800e522:	f7fa f8f9 	bl	8008718 <lwip_htons>
 800e526:	4603      	mov	r3, r0
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800e52e:	b29b      	uxth	r3, r3
 800e530:	4618      	mov	r0, r3
 800e532:	f7fa f8f1 	bl	8008718 <lwip_htons>
 800e536:	4603      	mov	r3, r0
 800e538:	b21b      	sxth	r3, r3
 800e53a:	4323      	orrs	r3, r4
 800e53c:	b21a      	sxth	r2, r3
 800e53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	b292      	uxth	r2, r2
 800e546:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e54c:	b29a      	uxth	r2, r3
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e552:	4413      	add	r3, r2
 800e554:	b299      	uxth	r1, r3
 800e556:	4b3c      	ldr	r3, [pc, #240]	@ (800e648 <tcp_receive+0xf10>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	1a8a      	subs	r2, r1, r2
 800e562:	b292      	uxth	r2, r2
 800e564:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	685a      	ldr	r2, [r3, #4]
 800e56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	891b      	ldrh	r3, [r3, #8]
 800e572:	4619      	mov	r1, r3
 800e574:	4610      	mov	r0, r2
 800e576:	f7fb fb69 	bl	8009c4c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	891c      	ldrh	r4, [r3, #8]
 800e580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	899b      	ldrh	r3, [r3, #12]
 800e588:	b29b      	uxth	r3, r3
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fa f8c4 	bl	8008718 <lwip_htons>
 800e590:	4603      	mov	r3, r0
 800e592:	b2db      	uxtb	r3, r3
 800e594:	f003 0303 	and.w	r3, r3, #3
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d001      	beq.n	800e5a0 <tcp_receive+0xe68>
 800e59c:	2301      	movs	r3, #1
 800e59e:	e000      	b.n	800e5a2 <tcp_receive+0xe6a>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	4423      	add	r3, r4
 800e5a4:	b29a      	uxth	r2, r3
 800e5a6:	4b2a      	ldr	r3, [pc, #168]	@ (800e650 <tcp_receive+0xf18>)
 800e5a8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e5aa:	4b29      	ldr	r3, [pc, #164]	@ (800e650 <tcp_receive+0xf18>)
 800e5ac:	881b      	ldrh	r3, [r3, #0]
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	4b25      	ldr	r3, [pc, #148]	@ (800e648 <tcp_receive+0xf10>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	441a      	add	r2, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5ba:	6879      	ldr	r1, [r7, #4]
 800e5bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e5be:	440b      	add	r3, r1
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d019      	beq.n	800e5f8 <tcp_receive+0xec0>
 800e5c4:	4b23      	ldr	r3, [pc, #140]	@ (800e654 <tcp_receive+0xf1c>)
 800e5c6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800e5ca:	4923      	ldr	r1, [pc, #140]	@ (800e658 <tcp_receive+0xf20>)
 800e5cc:	4823      	ldr	r0, [pc, #140]	@ (800e65c <tcp_receive+0xf24>)
 800e5ce:	f004 ff39 	bl	8013444 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e5d2:	e011      	b.n	800e5f8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f47f aea5 	bne.w	800e32c <tcp_receive+0xbf4>
 800e5e2:	e00a      	b.n	800e5fa <tcp_receive+0xec2>
                break;
 800e5e4:	bf00      	nop
 800e5e6:	e008      	b.n	800e5fa <tcp_receive+0xec2>
                break;
 800e5e8:	bf00      	nop
 800e5ea:	e006      	b.n	800e5fa <tcp_receive+0xec2>
                  break;
 800e5ec:	bf00      	nop
 800e5ee:	e004      	b.n	800e5fa <tcp_receive+0xec2>
                  break;
 800e5f0:	bf00      	nop
 800e5f2:	e002      	b.n	800e5fa <tcp_receive+0xec2>
                  break;
 800e5f4:	bf00      	nop
 800e5f6:	e000      	b.n	800e5fa <tcp_receive+0xec2>
                break;
 800e5f8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f001 fe88 	bl	8010310 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e600:	e003      	b.n	800e60a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f001 fe84 	bl	8010310 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e608:	e01a      	b.n	800e640 <tcp_receive+0xf08>
 800e60a:	e019      	b.n	800e640 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e60c:	4b0e      	ldr	r3, [pc, #56]	@ (800e648 <tcp_receive+0xf10>)
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e614:	1ad3      	subs	r3, r2, r3
 800e616:	2b00      	cmp	r3, #0
 800e618:	db0a      	blt.n	800e630 <tcp_receive+0xef8>
 800e61a:	4b0b      	ldr	r3, [pc, #44]	@ (800e648 <tcp_receive+0xf10>)
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e622:	6879      	ldr	r1, [r7, #4]
 800e624:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e626:	440b      	add	r3, r1
 800e628:	1ad3      	subs	r3, r2, r3
 800e62a:	3301      	adds	r3, #1
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	dd07      	ble.n	800e640 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	8b5b      	ldrh	r3, [r3, #26]
 800e634:	f043 0302 	orr.w	r3, r3, #2
 800e638:	b29a      	uxth	r2, r3
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e63e:	e7ff      	b.n	800e640 <tcp_receive+0xf08>
 800e640:	bf00      	nop
 800e642:	3750      	adds	r7, #80	@ 0x50
 800e644:	46bd      	mov	sp, r7
 800e646:	bdb0      	pop	{r4, r5, r7, pc}
 800e648:	24043234 	.word	0x24043234
 800e64c:	24043214 	.word	0x24043214
 800e650:	2404323e 	.word	0x2404323e
 800e654:	08015cf4 	.word	0x08015cf4
 800e658:	0801609c 	.word	0x0801609c
 800e65c:	08015d40 	.word	0x08015d40

0800e660 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e660:	b480      	push	{r7}
 800e662:	b083      	sub	sp, #12
 800e664:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e666:	4b15      	ldr	r3, [pc, #84]	@ (800e6bc <tcp_get_next_optbyte+0x5c>)
 800e668:	881b      	ldrh	r3, [r3, #0]
 800e66a:	1c5a      	adds	r2, r3, #1
 800e66c:	b291      	uxth	r1, r2
 800e66e:	4a13      	ldr	r2, [pc, #76]	@ (800e6bc <tcp_get_next_optbyte+0x5c>)
 800e670:	8011      	strh	r1, [r2, #0]
 800e672:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e674:	4b12      	ldr	r3, [pc, #72]	@ (800e6c0 <tcp_get_next_optbyte+0x60>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d004      	beq.n	800e686 <tcp_get_next_optbyte+0x26>
 800e67c:	4b11      	ldr	r3, [pc, #68]	@ (800e6c4 <tcp_get_next_optbyte+0x64>)
 800e67e:	881b      	ldrh	r3, [r3, #0]
 800e680:	88fa      	ldrh	r2, [r7, #6]
 800e682:	429a      	cmp	r2, r3
 800e684:	d208      	bcs.n	800e698 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e686:	4b10      	ldr	r3, [pc, #64]	@ (800e6c8 <tcp_get_next_optbyte+0x68>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	3314      	adds	r3, #20
 800e68c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e68e:	88fb      	ldrh	r3, [r7, #6]
 800e690:	683a      	ldr	r2, [r7, #0]
 800e692:	4413      	add	r3, r2
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	e00b      	b.n	800e6b0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e698:	88fb      	ldrh	r3, [r7, #6]
 800e69a:	b2da      	uxtb	r2, r3
 800e69c:	4b09      	ldr	r3, [pc, #36]	@ (800e6c4 <tcp_get_next_optbyte+0x64>)
 800e69e:	881b      	ldrh	r3, [r3, #0]
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	1ad3      	subs	r3, r2, r3
 800e6a4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e6a6:	4b06      	ldr	r3, [pc, #24]	@ (800e6c0 <tcp_get_next_optbyte+0x60>)
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	797b      	ldrb	r3, [r7, #5]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr
 800e6bc:	24043230 	.word	0x24043230
 800e6c0:	2404322c 	.word	0x2404322c
 800e6c4:	2404322a 	.word	0x2404322a
 800e6c8:	24043224 	.word	0x24043224

0800e6cc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d106      	bne.n	800e6e8 <tcp_parseopt+0x1c>
 800e6da:	4b32      	ldr	r3, [pc, #200]	@ (800e7a4 <tcp_parseopt+0xd8>)
 800e6dc:	f240 727d 	movw	r2, #1917	@ 0x77d
 800e6e0:	4931      	ldr	r1, [pc, #196]	@ (800e7a8 <tcp_parseopt+0xdc>)
 800e6e2:	4832      	ldr	r0, [pc, #200]	@ (800e7ac <tcp_parseopt+0xe0>)
 800e6e4:	f004 feae 	bl	8013444 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e6e8:	4b31      	ldr	r3, [pc, #196]	@ (800e7b0 <tcp_parseopt+0xe4>)
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d056      	beq.n	800e79e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e6f0:	4b30      	ldr	r3, [pc, #192]	@ (800e7b4 <tcp_parseopt+0xe8>)
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	801a      	strh	r2, [r3, #0]
 800e6f6:	e046      	b.n	800e786 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800e6f8:	f7ff ffb2 	bl	800e660 <tcp_get_next_optbyte>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e700:	7bfb      	ldrb	r3, [r7, #15]
 800e702:	2b02      	cmp	r3, #2
 800e704:	d006      	beq.n	800e714 <tcp_parseopt+0x48>
 800e706:	2b02      	cmp	r3, #2
 800e708:	dc2a      	bgt.n	800e760 <tcp_parseopt+0x94>
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d042      	beq.n	800e794 <tcp_parseopt+0xc8>
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d038      	beq.n	800e784 <tcp_parseopt+0xb8>
 800e712:	e025      	b.n	800e760 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e714:	f7ff ffa4 	bl	800e660 <tcp_get_next_optbyte>
 800e718:	4603      	mov	r3, r0
 800e71a:	2b04      	cmp	r3, #4
 800e71c:	d13c      	bne.n	800e798 <tcp_parseopt+0xcc>
 800e71e:	4b25      	ldr	r3, [pc, #148]	@ (800e7b4 <tcp_parseopt+0xe8>)
 800e720:	881b      	ldrh	r3, [r3, #0]
 800e722:	3301      	adds	r3, #1
 800e724:	4a22      	ldr	r2, [pc, #136]	@ (800e7b0 <tcp_parseopt+0xe4>)
 800e726:	8812      	ldrh	r2, [r2, #0]
 800e728:	4293      	cmp	r3, r2
 800e72a:	da35      	bge.n	800e798 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e72c:	f7ff ff98 	bl	800e660 <tcp_get_next_optbyte>
 800e730:	4603      	mov	r3, r0
 800e732:	021b      	lsls	r3, r3, #8
 800e734:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e736:	f7ff ff93 	bl	800e660 <tcp_get_next_optbyte>
 800e73a:	4603      	mov	r3, r0
 800e73c:	461a      	mov	r2, r3
 800e73e:	89bb      	ldrh	r3, [r7, #12]
 800e740:	4313      	orrs	r3, r2
 800e742:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e744:	89bb      	ldrh	r3, [r7, #12]
 800e746:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e74a:	d804      	bhi.n	800e756 <tcp_parseopt+0x8a>
 800e74c:	89bb      	ldrh	r3, [r7, #12]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d001      	beq.n	800e756 <tcp_parseopt+0x8a>
 800e752:	89ba      	ldrh	r2, [r7, #12]
 800e754:	e001      	b.n	800e75a <tcp_parseopt+0x8e>
 800e756:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800e75e:	e012      	b.n	800e786 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e760:	f7ff ff7e 	bl	800e660 <tcp_get_next_optbyte>
 800e764:	4603      	mov	r3, r0
 800e766:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e768:	7afb      	ldrb	r3, [r7, #11]
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d916      	bls.n	800e79c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e76e:	7afb      	ldrb	r3, [r7, #11]
 800e770:	b29a      	uxth	r2, r3
 800e772:	4b10      	ldr	r3, [pc, #64]	@ (800e7b4 <tcp_parseopt+0xe8>)
 800e774:	881b      	ldrh	r3, [r3, #0]
 800e776:	4413      	add	r3, r2
 800e778:	b29b      	uxth	r3, r3
 800e77a:	3b02      	subs	r3, #2
 800e77c:	b29a      	uxth	r2, r3
 800e77e:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b4 <tcp_parseopt+0xe8>)
 800e780:	801a      	strh	r2, [r3, #0]
 800e782:	e000      	b.n	800e786 <tcp_parseopt+0xba>
          break;
 800e784:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e786:	4b0b      	ldr	r3, [pc, #44]	@ (800e7b4 <tcp_parseopt+0xe8>)
 800e788:	881a      	ldrh	r2, [r3, #0]
 800e78a:	4b09      	ldr	r3, [pc, #36]	@ (800e7b0 <tcp_parseopt+0xe4>)
 800e78c:	881b      	ldrh	r3, [r3, #0]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d3b2      	bcc.n	800e6f8 <tcp_parseopt+0x2c>
 800e792:	e004      	b.n	800e79e <tcp_parseopt+0xd2>
          return;
 800e794:	bf00      	nop
 800e796:	e002      	b.n	800e79e <tcp_parseopt+0xd2>
            return;
 800e798:	bf00      	nop
 800e79a:	e000      	b.n	800e79e <tcp_parseopt+0xd2>
            return;
 800e79c:	bf00      	nop
      }
    }
  }
}
 800e79e:	3710      	adds	r7, #16
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	08015cf4 	.word	0x08015cf4
 800e7a8:	08016158 	.word	0x08016158
 800e7ac:	08015d40 	.word	0x08015d40
 800e7b0:	24043228 	.word	0x24043228
 800e7b4:	24043230 	.word	0x24043230

0800e7b8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e7bc:	4b05      	ldr	r3, [pc, #20]	@ (800e7d4 <tcp_trigger_input_pcb_close+0x1c>)
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	f043 0310 	orr.w	r3, r3, #16
 800e7c4:	b2da      	uxtb	r2, r3
 800e7c6:	4b03      	ldr	r3, [pc, #12]	@ (800e7d4 <tcp_trigger_input_pcb_close+0x1c>)
 800e7c8:	701a      	strb	r2, [r3, #0]
}
 800e7ca:	bf00      	nop
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr
 800e7d4:	24043241 	.word	0x24043241

0800e7d8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00a      	beq.n	800e800 <tcp_route+0x28>
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	7a1b      	ldrb	r3, [r3, #8]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d006      	beq.n	800e800 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	7a1b      	ldrb	r3, [r3, #8]
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7fb f84e 	bl	8009898 <netif_get_by_index>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	e003      	b.n	800e808 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f003 fb33 	bl	8011e6c <ip4_route>
 800e806:	4603      	mov	r3, r0
  }
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e810:	b590      	push	{r4, r7, lr}
 800e812:	b087      	sub	sp, #28
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	603b      	str	r3, [r7, #0]
 800e81c:	4613      	mov	r3, r2
 800e81e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d105      	bne.n	800e832 <tcp_create_segment+0x22>
 800e826:	4b43      	ldr	r3, [pc, #268]	@ (800e934 <tcp_create_segment+0x124>)
 800e828:	22a3      	movs	r2, #163	@ 0xa3
 800e82a:	4943      	ldr	r1, [pc, #268]	@ (800e938 <tcp_create_segment+0x128>)
 800e82c:	4843      	ldr	r0, [pc, #268]	@ (800e93c <tcp_create_segment+0x12c>)
 800e82e:	f004 fe09 	bl	8013444 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d105      	bne.n	800e844 <tcp_create_segment+0x34>
 800e838:	4b3e      	ldr	r3, [pc, #248]	@ (800e934 <tcp_create_segment+0x124>)
 800e83a:	22a4      	movs	r2, #164	@ 0xa4
 800e83c:	4940      	ldr	r1, [pc, #256]	@ (800e940 <tcp_create_segment+0x130>)
 800e83e:	483f      	ldr	r0, [pc, #252]	@ (800e93c <tcp_create_segment+0x12c>)
 800e840:	f004 fe00 	bl	8013444 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e844:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e848:	009b      	lsls	r3, r3, #2
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	f003 0304 	and.w	r3, r3, #4
 800e850:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e852:	2003      	movs	r0, #3
 800e854:	f7fa fc9a 	bl	800918c <memp_malloc>
 800e858:	6138      	str	r0, [r7, #16]
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d104      	bne.n	800e86a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e860:	68b8      	ldr	r0, [r7, #8]
 800e862:	f7fb fb77 	bl	8009f54 <pbuf_free>
    return NULL;
 800e866:	2300      	movs	r3, #0
 800e868:	e060      	b.n	800e92c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e870:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	2200      	movs	r2, #0
 800e876:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	68ba      	ldr	r2, [r7, #8]
 800e87c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	891a      	ldrh	r2, [r3, #8]
 800e882:	7dfb      	ldrb	r3, [r7, #23]
 800e884:	b29b      	uxth	r3, r3
 800e886:	429a      	cmp	r2, r3
 800e888:	d205      	bcs.n	800e896 <tcp_create_segment+0x86>
 800e88a:	4b2a      	ldr	r3, [pc, #168]	@ (800e934 <tcp_create_segment+0x124>)
 800e88c:	22b0      	movs	r2, #176	@ 0xb0
 800e88e:	492d      	ldr	r1, [pc, #180]	@ (800e944 <tcp_create_segment+0x134>)
 800e890:	482a      	ldr	r0, [pc, #168]	@ (800e93c <tcp_create_segment+0x12c>)
 800e892:	f004 fdd7 	bl	8013444 <iprintf>
  seg->len = p->tot_len - optlen;
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	891a      	ldrh	r2, [r3, #8]
 800e89a:	7dfb      	ldrb	r3, [r7, #23]
 800e89c:	b29b      	uxth	r3, r3
 800e89e:	1ad3      	subs	r3, r2, r3
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e8a6:	2114      	movs	r1, #20
 800e8a8:	68b8      	ldr	r0, [r7, #8]
 800e8aa:	f7fb fabd 	bl	8009e28 <pbuf_add_header>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d004      	beq.n	800e8be <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e8b4:	6938      	ldr	r0, [r7, #16]
 800e8b6:	f7fd f81c 	bl	800b8f2 <tcp_seg_free>
    return NULL;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	e036      	b.n	800e92c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	685a      	ldr	r2, [r3, #4]
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	8ada      	ldrh	r2, [r3, #22]
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	68dc      	ldr	r4, [r3, #12]
 800e8d0:	4610      	mov	r0, r2
 800e8d2:	f7f9 ff21 	bl	8008718 <lwip_htons>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	8b1a      	ldrh	r2, [r3, #24]
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	68dc      	ldr	r4, [r3, #12]
 800e8e2:	4610      	mov	r0, r2
 800e8e4:	f7f9 ff18 	bl	8008718 <lwip_htons>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	68dc      	ldr	r4, [r3, #12]
 800e8f0:	6838      	ldr	r0, [r7, #0]
 800e8f2:	f7f9 ff27 	bl	8008744 <lwip_htonl>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e8fa:	7dfb      	ldrb	r3, [r7, #23]
 800e8fc:	089b      	lsrs	r3, r3, #2
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	3305      	adds	r3, #5
 800e902:	b29b      	uxth	r3, r3
 800e904:	031b      	lsls	r3, r3, #12
 800e906:	b29a      	uxth	r2, r3
 800e908:	79fb      	ldrb	r3, [r7, #7]
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	4313      	orrs	r3, r2
 800e90e:	b29a      	uxth	r2, r3
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	68dc      	ldr	r4, [r3, #12]
 800e914:	4610      	mov	r0, r2
 800e916:	f7f9 feff 	bl	8008718 <lwip_htons>
 800e91a:	4603      	mov	r3, r0
 800e91c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	2200      	movs	r2, #0
 800e924:	749a      	strb	r2, [r3, #18]
 800e926:	2200      	movs	r2, #0
 800e928:	74da      	strb	r2, [r3, #19]
  return seg;
 800e92a:	693b      	ldr	r3, [r7, #16]
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	371c      	adds	r7, #28
 800e930:	46bd      	mov	sp, r7
 800e932:	bd90      	pop	{r4, r7, pc}
 800e934:	08016174 	.word	0x08016174
 800e938:	080161a8 	.word	0x080161a8
 800e93c:	080161c8 	.word	0x080161c8
 800e940:	080161f0 	.word	0x080161f0
 800e944:	08016214 	.word	0x08016214

0800e948 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b086      	sub	sp, #24
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	607b      	str	r3, [r7, #4]
 800e950:	4603      	mov	r3, r0
 800e952:	73fb      	strb	r3, [r7, #15]
 800e954:	460b      	mov	r3, r1
 800e956:	81bb      	strh	r3, [r7, #12]
 800e958:	4613      	mov	r3, r2
 800e95a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800e95c:	89bb      	ldrh	r3, [r7, #12]
 800e95e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d105      	bne.n	800e972 <tcp_pbuf_prealloc+0x2a>
 800e966:	4b30      	ldr	r3, [pc, #192]	@ (800ea28 <tcp_pbuf_prealloc+0xe0>)
 800e968:	22e8      	movs	r2, #232	@ 0xe8
 800e96a:	4930      	ldr	r1, [pc, #192]	@ (800ea2c <tcp_pbuf_prealloc+0xe4>)
 800e96c:	4830      	ldr	r0, [pc, #192]	@ (800ea30 <tcp_pbuf_prealloc+0xe8>)
 800e96e:	f004 fd69 	bl	8013444 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800e972:	6a3b      	ldr	r3, [r7, #32]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d105      	bne.n	800e984 <tcp_pbuf_prealloc+0x3c>
 800e978:	4b2b      	ldr	r3, [pc, #172]	@ (800ea28 <tcp_pbuf_prealloc+0xe0>)
 800e97a:	22e9      	movs	r2, #233	@ 0xe9
 800e97c:	492d      	ldr	r1, [pc, #180]	@ (800ea34 <tcp_pbuf_prealloc+0xec>)
 800e97e:	482c      	ldr	r0, [pc, #176]	@ (800ea30 <tcp_pbuf_prealloc+0xe8>)
 800e980:	f004 fd60 	bl	8013444 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800e984:	89ba      	ldrh	r2, [r7, #12]
 800e986:	897b      	ldrh	r3, [r7, #10]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d221      	bcs.n	800e9d0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e98c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e990:	f003 0302 	and.w	r3, r3, #2
 800e994:	2b00      	cmp	r3, #0
 800e996:	d111      	bne.n	800e9bc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800e998:	6a3b      	ldr	r3, [r7, #32]
 800e99a:	8b5b      	ldrh	r3, [r3, #26]
 800e99c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d115      	bne.n	800e9d0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800e9a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d007      	beq.n	800e9bc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800e9ac:	6a3b      	ldr	r3, [r7, #32]
 800e9ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d103      	bne.n	800e9bc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800e9b4:	6a3b      	ldr	r3, [r7, #32]
 800e9b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d009      	beq.n	800e9d0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800e9bc:	89bb      	ldrh	r3, [r7, #12]
 800e9be:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800e9c2:	f023 0203 	bic.w	r2, r3, #3
 800e9c6:	897b      	ldrh	r3, [r7, #10]
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	bf28      	it	cs
 800e9cc:	4613      	movcs	r3, r2
 800e9ce:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800e9d0:	8af9      	ldrh	r1, [r7, #22]
 800e9d2:	7bfb      	ldrb	r3, [r7, #15]
 800e9d4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fa ffd9 	bl	8009990 <pbuf_alloc>
 800e9de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d101      	bne.n	800e9ea <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	e019      	b.n	800ea1e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d006      	beq.n	800ea00 <tcp_pbuf_prealloc+0xb8>
 800e9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800ea28 <tcp_pbuf_prealloc+0xe0>)
 800e9f4:	f240 120b 	movw	r2, #267	@ 0x10b
 800e9f8:	490f      	ldr	r1, [pc, #60]	@ (800ea38 <tcp_pbuf_prealloc+0xf0>)
 800e9fa:	480d      	ldr	r0, [pc, #52]	@ (800ea30 <tcp_pbuf_prealloc+0xe8>)
 800e9fc:	f004 fd22 	bl	8013444 <iprintf>
  *oversize = p->len - length;
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	895a      	ldrh	r2, [r3, #10]
 800ea04:	89bb      	ldrh	r3, [r7, #12]
 800ea06:	1ad3      	subs	r3, r2, r3
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	89ba      	ldrh	r2, [r7, #12]
 800ea12:	811a      	strh	r2, [r3, #8]
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	891a      	ldrh	r2, [r3, #8]
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	815a      	strh	r2, [r3, #10]
  return p;
 800ea1c:	693b      	ldr	r3, [r7, #16]
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3718      	adds	r7, #24
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	08016174 	.word	0x08016174
 800ea2c:	0801622c 	.word	0x0801622c
 800ea30:	080161c8 	.word	0x080161c8
 800ea34:	08016250 	.word	0x08016250
 800ea38:	08016270 	.word	0x08016270

0800ea3c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	460b      	mov	r3, r1
 800ea46:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d106      	bne.n	800ea5c <tcp_write_checks+0x20>
 800ea4e:	4b33      	ldr	r3, [pc, #204]	@ (800eb1c <tcp_write_checks+0xe0>)
 800ea50:	f240 1233 	movw	r2, #307	@ 0x133
 800ea54:	4932      	ldr	r1, [pc, #200]	@ (800eb20 <tcp_write_checks+0xe4>)
 800ea56:	4833      	ldr	r0, [pc, #204]	@ (800eb24 <tcp_write_checks+0xe8>)
 800ea58:	f004 fcf4 	bl	8013444 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	7d1b      	ldrb	r3, [r3, #20]
 800ea60:	2b04      	cmp	r3, #4
 800ea62:	d00e      	beq.n	800ea82 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ea68:	2b07      	cmp	r3, #7
 800ea6a:	d00a      	beq.n	800ea82 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ea70:	2b02      	cmp	r3, #2
 800ea72:	d006      	beq.n	800ea82 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ea78:	2b03      	cmp	r3, #3
 800ea7a:	d002      	beq.n	800ea82 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ea7c:	f06f 030a 	mvn.w	r3, #10
 800ea80:	e048      	b.n	800eb14 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ea82:	887b      	ldrh	r3, [r7, #2]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d101      	bne.n	800ea8c <tcp_write_checks+0x50>
    return ERR_OK;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	e043      	b.n	800eb14 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ea92:	887a      	ldrh	r2, [r7, #2]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d909      	bls.n	800eaac <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	8b5b      	ldrh	r3, [r3, #26]
 800ea9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eaa0:	b29a      	uxth	r2, r3
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800eaa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eaaa:	e033      	b.n	800eb14 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eab2:	2b08      	cmp	r3, #8
 800eab4:	d909      	bls.n	800eaca <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	8b5b      	ldrh	r3, [r3, #26]
 800eaba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eabe:	b29a      	uxth	r2, r3
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800eac4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eac8:	e024      	b.n	800eb14 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d00f      	beq.n	800eaf4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d11a      	bne.n	800eb12 <tcp_write_checks+0xd6>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d116      	bne.n	800eb12 <tcp_write_checks+0xd6>
 800eae4:	4b0d      	ldr	r3, [pc, #52]	@ (800eb1c <tcp_write_checks+0xe0>)
 800eae6:	f240 1255 	movw	r2, #341	@ 0x155
 800eaea:	490f      	ldr	r1, [pc, #60]	@ (800eb28 <tcp_write_checks+0xec>)
 800eaec:	480d      	ldr	r0, [pc, #52]	@ (800eb24 <tcp_write_checks+0xe8>)
 800eaee:	f004 fca9 	bl	8013444 <iprintf>
 800eaf2:	e00e      	b.n	800eb12 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d103      	bne.n	800eb04 <tcp_write_checks+0xc8>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d006      	beq.n	800eb12 <tcp_write_checks+0xd6>
 800eb04:	4b05      	ldr	r3, [pc, #20]	@ (800eb1c <tcp_write_checks+0xe0>)
 800eb06:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800eb0a:	4908      	ldr	r1, [pc, #32]	@ (800eb2c <tcp_write_checks+0xf0>)
 800eb0c:	4805      	ldr	r0, [pc, #20]	@ (800eb24 <tcp_write_checks+0xe8>)
 800eb0e:	f004 fc99 	bl	8013444 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800eb12:	2300      	movs	r3, #0
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	08016174 	.word	0x08016174
 800eb20:	08016284 	.word	0x08016284
 800eb24:	080161c8 	.word	0x080161c8
 800eb28:	080162a4 	.word	0x080162a4
 800eb2c:	080162e0 	.word	0x080162e0

0800eb30 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800eb30:	b590      	push	{r4, r7, lr}
 800eb32:	b09b      	sub	sp, #108	@ 0x6c
 800eb34:	af04      	add	r7, sp, #16
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	460b      	mov	r3, r1
 800eb40:	80fb      	strh	r3, [r7, #6]
 800eb42:	4613      	mov	r3, r2
 800eb44:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800eb46:	2300      	movs	r3, #0
 800eb48:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	653b      	str	r3, [r7, #80]	@ 0x50
 800eb4e:	2300      	movs	r3, #0
 800eb50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb52:	2300      	movs	r3, #0
 800eb54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb56:	2300      	movs	r3, #0
 800eb58:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800eb60:	2300      	movs	r3, #0
 800eb62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800eb66:	2300      	movs	r3, #0
 800eb68:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d109      	bne.n	800eb8c <tcp_write+0x5c>
 800eb78:	4ba4      	ldr	r3, [pc, #656]	@ (800ee0c <tcp_write+0x2dc>)
 800eb7a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800eb7e:	49a4      	ldr	r1, [pc, #656]	@ (800ee10 <tcp_write+0x2e0>)
 800eb80:	48a4      	ldr	r0, [pc, #656]	@ (800ee14 <tcp_write+0x2e4>)
 800eb82:	f004 fc5f 	bl	8013444 <iprintf>
 800eb86:	f06f 030f 	mvn.w	r3, #15
 800eb8a:	e32a      	b.n	800f1e2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800eb92:	085b      	lsrs	r3, r3, #1
 800eb94:	b29a      	uxth	r2, r3
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	bf28      	it	cs
 800eb9e:	4613      	movcs	r3, r2
 800eba0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800eba2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d102      	bne.n	800ebae <tcp_write+0x7e>
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ebac:	e000      	b.n	800ebb0 <tcp_write+0x80>
 800ebae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d109      	bne.n	800ebcc <tcp_write+0x9c>
 800ebb8:	4b94      	ldr	r3, [pc, #592]	@ (800ee0c <tcp_write+0x2dc>)
 800ebba:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800ebbe:	4996      	ldr	r1, [pc, #600]	@ (800ee18 <tcp_write+0x2e8>)
 800ebc0:	4894      	ldr	r0, [pc, #592]	@ (800ee14 <tcp_write+0x2e4>)
 800ebc2:	f004 fc3f 	bl	8013444 <iprintf>
 800ebc6:	f06f 030f 	mvn.w	r3, #15
 800ebca:	e30a      	b.n	800f1e2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ebcc:	88fb      	ldrh	r3, [r7, #6]
 800ebce:	4619      	mov	r1, r3
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f7ff ff33 	bl	800ea3c <tcp_write_checks>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800ebdc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d002      	beq.n	800ebea <tcp_write+0xba>
    return err;
 800ebe4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800ebe8:	e2fb      	b.n	800f1e2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ebf0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	f000 80f6 	beq.w	800edf0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec08:	653b      	str	r3, [r7, #80]	@ 0x50
 800ec0a:	e002      	b.n	800ec12 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800ec0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ec12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d1f8      	bne.n	800ec0c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ec1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec1c:	7a9b      	ldrb	r3, [r3, #10]
 800ec1e:	009b      	lsls	r3, r3, #2
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	f003 0304 	and.w	r3, r3, #4
 800ec26:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ec28:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ec2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec2c:	891b      	ldrh	r3, [r3, #8]
 800ec2e:	4619      	mov	r1, r3
 800ec30:	8c3b      	ldrh	r3, [r7, #32]
 800ec32:	440b      	add	r3, r1
 800ec34:	429a      	cmp	r2, r3
 800ec36:	da06      	bge.n	800ec46 <tcp_write+0x116>
 800ec38:	4b74      	ldr	r3, [pc, #464]	@ (800ee0c <tcp_write+0x2dc>)
 800ec3a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ec3e:	4977      	ldr	r1, [pc, #476]	@ (800ee1c <tcp_write+0x2ec>)
 800ec40:	4874      	ldr	r0, [pc, #464]	@ (800ee14 <tcp_write+0x2e4>)
 800ec42:	f004 fbff 	bl	8013444 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ec46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec48:	891a      	ldrh	r2, [r3, #8]
 800ec4a:	8c3b      	ldrh	r3, [r7, #32]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ec5c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ec5e:	8a7b      	ldrh	r3, [r7, #18]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d026      	beq.n	800ecb2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ec64:	8a7b      	ldrh	r3, [r7, #18]
 800ec66:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d206      	bcs.n	800ec7a <tcp_write+0x14a>
 800ec6c:	4b67      	ldr	r3, [pc, #412]	@ (800ee0c <tcp_write+0x2dc>)
 800ec6e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800ec72:	496b      	ldr	r1, [pc, #428]	@ (800ee20 <tcp_write+0x2f0>)
 800ec74:	4867      	ldr	r0, [pc, #412]	@ (800ee14 <tcp_write+0x2e4>)
 800ec76:	f004 fbe5 	bl	8013444 <iprintf>
      seg = last_unsent;
 800ec7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ec7e:	8a7b      	ldrh	r3, [r7, #18]
 800ec80:	88fa      	ldrh	r2, [r7, #6]
 800ec82:	4293      	cmp	r3, r2
 800ec84:	bf28      	it	cs
 800ec86:	4613      	movcs	r3, r2
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	bf28      	it	cs
 800ec90:	4613      	movcs	r3, r2
 800ec92:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800ec94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ec98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ec9a:	4413      	add	r3, r2
 800ec9c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800eca0:	8a7a      	ldrh	r2, [r7, #18]
 800eca2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800eca4:	1ad3      	subs	r3, r2, r3
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800ecaa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ecac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ecb2:	8a7b      	ldrh	r3, [r7, #18]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00b      	beq.n	800ecd0 <tcp_write+0x1a0>
 800ecb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ecbc:	88fb      	ldrh	r3, [r7, #6]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d006      	beq.n	800ecd0 <tcp_write+0x1a0>
 800ecc2:	4b52      	ldr	r3, [pc, #328]	@ (800ee0c <tcp_write+0x2dc>)
 800ecc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ecc8:	4956      	ldr	r1, [pc, #344]	@ (800ee24 <tcp_write+0x2f4>)
 800ecca:	4852      	ldr	r0, [pc, #328]	@ (800ee14 <tcp_write+0x2e4>)
 800eccc:	f004 fbba 	bl	8013444 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ecd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ecd4:	88fb      	ldrh	r3, [r7, #6]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	f080 8167 	bcs.w	800efaa <tcp_write+0x47a>
 800ecdc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	f000 8163 	beq.w	800efaa <tcp_write+0x47a>
 800ece4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ece6:	891b      	ldrh	r3, [r3, #8]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f000 815e 	beq.w	800efaa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ecee:	88fa      	ldrh	r2, [r7, #6]
 800ecf0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ecf4:	1ad2      	subs	r2, r2, r3
 800ecf6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	bfa8      	it	ge
 800ecfc:	4613      	movge	r3, r2
 800ecfe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ed00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed02:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ed04:	797b      	ldrb	r3, [r7, #5]
 800ed06:	f003 0301 	and.w	r3, r3, #1
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d027      	beq.n	800ed5e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ed0e:	f107 0012 	add.w	r0, r7, #18
 800ed12:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ed14:	8bf9      	ldrh	r1, [r7, #30]
 800ed16:	2301      	movs	r3, #1
 800ed18:	9302      	str	r3, [sp, #8]
 800ed1a:	797b      	ldrb	r3, [r7, #5]
 800ed1c:	9301      	str	r3, [sp, #4]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	9300      	str	r3, [sp, #0]
 800ed22:	4603      	mov	r3, r0
 800ed24:	2000      	movs	r0, #0
 800ed26:	f7ff fe0f 	bl	800e948 <tcp_pbuf_prealloc>
 800ed2a:	6578      	str	r0, [r7, #84]	@ 0x54
 800ed2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	f000 8225 	beq.w	800f17e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ed34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed36:	6858      	ldr	r0, [r3, #4]
 800ed38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ed3c:	68ba      	ldr	r2, [r7, #8]
 800ed3e:	4413      	add	r3, r2
 800ed40:	8bfa      	ldrh	r2, [r7, #30]
 800ed42:	4619      	mov	r1, r3
 800ed44:	f004 fc59 	bl	80135fa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ed48:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ed4a:	f7fb f98b 	bl	800a064 <pbuf_clen>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	461a      	mov	r2, r3
 800ed52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ed56:	4413      	add	r3, r2
 800ed58:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800ed5c:	e041      	b.n	800ede2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ed5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed64:	e002      	b.n	800ed6c <tcp_write+0x23c>
 800ed66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d1f8      	bne.n	800ed66 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ed74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed76:	7b1b      	ldrb	r3, [r3, #12]
 800ed78:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d115      	bne.n	800edac <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ed80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed86:	8952      	ldrh	r2, [r2, #10]
 800ed88:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ed8a:	68ba      	ldr	r2, [r7, #8]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d10d      	bne.n	800edac <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ed90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d006      	beq.n	800eda6 <tcp_write+0x276>
 800ed98:	4b1c      	ldr	r3, [pc, #112]	@ (800ee0c <tcp_write+0x2dc>)
 800ed9a:	f240 2231 	movw	r2, #561	@ 0x231
 800ed9e:	4922      	ldr	r1, [pc, #136]	@ (800ee28 <tcp_write+0x2f8>)
 800eda0:	481c      	ldr	r0, [pc, #112]	@ (800ee14 <tcp_write+0x2e4>)
 800eda2:	f004 fb4f 	bl	8013444 <iprintf>
          extendlen = seglen;
 800eda6:	8bfb      	ldrh	r3, [r7, #30]
 800eda8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800edaa:	e01a      	b.n	800ede2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800edac:	8bfb      	ldrh	r3, [r7, #30]
 800edae:	2201      	movs	r2, #1
 800edb0:	4619      	mov	r1, r3
 800edb2:	2000      	movs	r0, #0
 800edb4:	f7fa fdec 	bl	8009990 <pbuf_alloc>
 800edb8:	6578      	str	r0, [r7, #84]	@ 0x54
 800edba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f000 81e0 	beq.w	800f182 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800edc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800edc6:	68ba      	ldr	r2, [r7, #8]
 800edc8:	441a      	add	r2, r3
 800edca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edcc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800edce:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800edd0:	f7fb f948 	bl	800a064 <pbuf_clen>
 800edd4:	4603      	mov	r3, r0
 800edd6:	461a      	mov	r2, r3
 800edd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800eddc:	4413      	add	r3, r2
 800edde:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ede2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ede6:	8bfb      	ldrh	r3, [r7, #30]
 800ede8:	4413      	add	r3, r2
 800edea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800edee:	e0dc      	b.n	800efaa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f000 80d7 	beq.w	800efaa <tcp_write+0x47a>
 800edfc:	4b03      	ldr	r3, [pc, #12]	@ (800ee0c <tcp_write+0x2dc>)
 800edfe:	f240 224a 	movw	r2, #586	@ 0x24a
 800ee02:	490a      	ldr	r1, [pc, #40]	@ (800ee2c <tcp_write+0x2fc>)
 800ee04:	4803      	ldr	r0, [pc, #12]	@ (800ee14 <tcp_write+0x2e4>)
 800ee06:	f004 fb1d 	bl	8013444 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800ee0a:	e0ce      	b.n	800efaa <tcp_write+0x47a>
 800ee0c:	08016174 	.word	0x08016174
 800ee10:	08016314 	.word	0x08016314
 800ee14:	080161c8 	.word	0x080161c8
 800ee18:	0801632c 	.word	0x0801632c
 800ee1c:	08016360 	.word	0x08016360
 800ee20:	08016378 	.word	0x08016378
 800ee24:	08016398 	.word	0x08016398
 800ee28:	080163b8 	.word	0x080163b8
 800ee2c:	080163e4 	.word	0x080163e4
    struct pbuf *p;
    u16_t left = len - pos;
 800ee30:	88fa      	ldrh	r2, [r7, #6]
 800ee32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ee36:	1ad3      	subs	r3, r2, r3
 800ee38:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800ee3a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ee42:	1ad3      	subs	r3, r2, r3
 800ee44:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800ee46:	8b7a      	ldrh	r2, [r7, #26]
 800ee48:	8bbb      	ldrh	r3, [r7, #28]
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	bf28      	it	cs
 800ee4e:	4613      	movcs	r3, r2
 800ee50:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ee52:	797b      	ldrb	r3, [r7, #5]
 800ee54:	f003 0301 	and.w	r3, r3, #1
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d036      	beq.n	800eeca <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800ee5c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	8b3b      	ldrh	r3, [r7, #24]
 800ee64:	4413      	add	r3, r2
 800ee66:	b299      	uxth	r1, r3
 800ee68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	bf0c      	ite	eq
 800ee6e:	2301      	moveq	r3, #1
 800ee70:	2300      	movne	r3, #0
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	f107 0012 	add.w	r0, r7, #18
 800ee78:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ee7a:	9302      	str	r3, [sp, #8]
 800ee7c:	797b      	ldrb	r3, [r7, #5]
 800ee7e:	9301      	str	r3, [sp, #4]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	9300      	str	r3, [sp, #0]
 800ee84:	4603      	mov	r3, r0
 800ee86:	2036      	movs	r0, #54	@ 0x36
 800ee88:	f7ff fd5e 	bl	800e948 <tcp_pbuf_prealloc>
 800ee8c:	6338      	str	r0, [r7, #48]	@ 0x30
 800ee8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	f000 8178 	beq.w	800f186 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ee96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee98:	895b      	ldrh	r3, [r3, #10]
 800ee9a:	8b3a      	ldrh	r2, [r7, #24]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d906      	bls.n	800eeae <tcp_write+0x37e>
 800eea0:	4b8c      	ldr	r3, [pc, #560]	@ (800f0d4 <tcp_write+0x5a4>)
 800eea2:	f240 2266 	movw	r2, #614	@ 0x266
 800eea6:	498c      	ldr	r1, [pc, #560]	@ (800f0d8 <tcp_write+0x5a8>)
 800eea8:	488c      	ldr	r0, [pc, #560]	@ (800f0dc <tcp_write+0x5ac>)
 800eeaa:	f004 facb 	bl	8013444 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800eeae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeb0:	685a      	ldr	r2, [r3, #4]
 800eeb2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800eeb6:	18d0      	adds	r0, r2, r3
 800eeb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800eebc:	68ba      	ldr	r2, [r7, #8]
 800eebe:	4413      	add	r3, r2
 800eec0:	8b3a      	ldrh	r2, [r7, #24]
 800eec2:	4619      	mov	r1, r3
 800eec4:	f004 fb99 	bl	80135fa <memcpy>
 800eec8:	e02f      	b.n	800ef2a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800eeca:	8a7b      	ldrh	r3, [r7, #18]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d006      	beq.n	800eede <tcp_write+0x3ae>
 800eed0:	4b80      	ldr	r3, [pc, #512]	@ (800f0d4 <tcp_write+0x5a4>)
 800eed2:	f240 2271 	movw	r2, #625	@ 0x271
 800eed6:	4982      	ldr	r1, [pc, #520]	@ (800f0e0 <tcp_write+0x5b0>)
 800eed8:	4880      	ldr	r0, [pc, #512]	@ (800f0dc <tcp_write+0x5ac>)
 800eeda:	f004 fab3 	bl	8013444 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800eede:	8b3b      	ldrh	r3, [r7, #24]
 800eee0:	2201      	movs	r2, #1
 800eee2:	4619      	mov	r1, r3
 800eee4:	2036      	movs	r0, #54	@ 0x36
 800eee6:	f7fa fd53 	bl	8009990 <pbuf_alloc>
 800eeea:	6178      	str	r0, [r7, #20]
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	f000 814b 	beq.w	800f18a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800eef4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800eef8:	68ba      	ldr	r2, [r7, #8]
 800eefa:	441a      	add	r2, r3
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ef00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	2036      	movs	r0, #54	@ 0x36
 800ef0e:	f7fa fd3f 	bl	8009990 <pbuf_alloc>
 800ef12:	6338      	str	r0, [r7, #48]	@ 0x30
 800ef14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d103      	bne.n	800ef22 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800ef1a:	6978      	ldr	r0, [r7, #20]
 800ef1c:	f7fb f81a 	bl	8009f54 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800ef20:	e136      	b.n	800f190 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800ef22:	6979      	ldr	r1, [r7, #20]
 800ef24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef26:	f7fb f8d7 	bl	800a0d8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800ef2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef2c:	f7fb f89a 	bl	800a064 <pbuf_clen>
 800ef30:	4603      	mov	r3, r0
 800ef32:	461a      	mov	r2, r3
 800ef34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ef38:	4413      	add	r3, r2
 800ef3a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800ef3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ef42:	2b09      	cmp	r3, #9
 800ef44:	d903      	bls.n	800ef4e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800ef46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef48:	f7fb f804 	bl	8009f54 <pbuf_free>
      goto memerr;
 800ef4c:	e120      	b.n	800f190 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ef52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ef56:	441a      	add	r2, r3
 800ef58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	4613      	mov	r3, r2
 800ef60:	2200      	movs	r2, #0
 800ef62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ef64:	68f8      	ldr	r0, [r7, #12]
 800ef66:	f7ff fc53 	bl	800e810 <tcp_create_segment>
 800ef6a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800ef6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	f000 810d 	beq.w	800f18e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800ef74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d102      	bne.n	800ef80 <tcp_write+0x450>
      queue = seg;
 800ef7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef7e:	e00c      	b.n	800ef9a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ef80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d106      	bne.n	800ef94 <tcp_write+0x464>
 800ef86:	4b53      	ldr	r3, [pc, #332]	@ (800f0d4 <tcp_write+0x5a4>)
 800ef88:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ef8c:	4955      	ldr	r1, [pc, #340]	@ (800f0e4 <tcp_write+0x5b4>)
 800ef8e:	4853      	ldr	r0, [pc, #332]	@ (800f0dc <tcp_write+0x5ac>)
 800ef90:	f004 fa58 	bl	8013444 <iprintf>
      prev_seg->next = seg;
 800ef94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ef98:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800ef9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef9c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800ef9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800efa2:	8b3b      	ldrh	r3, [r7, #24]
 800efa4:	4413      	add	r3, r2
 800efa6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800efaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800efae:	88fb      	ldrh	r3, [r7, #6]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	f4ff af3d 	bcc.w	800ee30 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800efb6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d02c      	beq.n	800f016 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800efbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800efc2:	e01e      	b.n	800f002 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800efc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc6:	891a      	ldrh	r2, [r3, #8]
 800efc8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800efca:	4413      	add	r3, r2
 800efcc:	b29a      	uxth	r2, r3
 800efce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efd0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800efd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d110      	bne.n	800effc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800efda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800efe0:	8952      	ldrh	r2, [r2, #10]
 800efe2:	4413      	add	r3, r2
 800efe4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800efe6:	68b9      	ldr	r1, [r7, #8]
 800efe8:	4618      	mov	r0, r3
 800efea:	f004 fb06 	bl	80135fa <memcpy>
        p->len += oversize_used;
 800efee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eff0:	895a      	ldrh	r2, [r3, #10]
 800eff2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800eff4:	4413      	add	r3, r2
 800eff6:	b29a      	uxth	r2, r3
 800eff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800effa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800effc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f004:	2b00      	cmp	r3, #0
 800f006:	d1dd      	bne.n	800efc4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800f008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f00a:	891a      	ldrh	r2, [r3, #8]
 800f00c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f00e:	4413      	add	r3, r2
 800f010:	b29a      	uxth	r2, r3
 800f012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f014:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800f016:	8a7a      	ldrh	r2, [r7, #18]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800f01e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f020:	2b00      	cmp	r3, #0
 800f022:	d018      	beq.n	800f056 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800f024:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f026:	2b00      	cmp	r3, #0
 800f028:	d106      	bne.n	800f038 <tcp_write+0x508>
 800f02a:	4b2a      	ldr	r3, [pc, #168]	@ (800f0d4 <tcp_write+0x5a4>)
 800f02c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800f030:	492d      	ldr	r1, [pc, #180]	@ (800f0e8 <tcp_write+0x5b8>)
 800f032:	482a      	ldr	r0, [pc, #168]	@ (800f0dc <tcp_write+0x5ac>)
 800f034:	f004 fa06 	bl	8013444 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800f038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f03e:	4618      	mov	r0, r3
 800f040:	f7fb f84a 	bl	800a0d8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800f044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f046:	891a      	ldrh	r2, [r3, #8]
 800f048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f04a:	891b      	ldrh	r3, [r3, #8]
 800f04c:	4413      	add	r3, r2
 800f04e:	b29a      	uxth	r2, r3
 800f050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f052:	811a      	strh	r2, [r3, #8]
 800f054:	e037      	b.n	800f0c6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800f056:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d034      	beq.n	800f0c6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800f05c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d003      	beq.n	800f06a <tcp_write+0x53a>
 800f062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d106      	bne.n	800f078 <tcp_write+0x548>
 800f06a:	4b1a      	ldr	r3, [pc, #104]	@ (800f0d4 <tcp_write+0x5a4>)
 800f06c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800f070:	491e      	ldr	r1, [pc, #120]	@ (800f0ec <tcp_write+0x5bc>)
 800f072:	481a      	ldr	r0, [pc, #104]	@ (800f0dc <tcp_write+0x5ac>)
 800f074:	f004 f9e6 	bl	8013444 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f07e:	e009      	b.n	800f094 <tcp_write+0x564>
      p->tot_len += extendlen;
 800f080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f082:	891a      	ldrh	r2, [r3, #8]
 800f084:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f086:	4413      	add	r3, r2
 800f088:	b29a      	uxth	r2, r3
 800f08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f08c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d1f1      	bne.n	800f080 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800f09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09e:	891a      	ldrh	r2, [r3, #8]
 800f0a0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f0a2:	4413      	add	r3, r2
 800f0a4:	b29a      	uxth	r2, r3
 800f0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0a8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800f0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ac:	895a      	ldrh	r2, [r3, #10]
 800f0ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f0b0:	4413      	add	r3, r2
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0b6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800f0b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0ba:	891a      	ldrh	r2, [r3, #8]
 800f0bc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f0be:	4413      	add	r3, r2
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0c4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800f0c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d111      	bne.n	800f0f0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0d0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f0d2:	e010      	b.n	800f0f6 <tcp_write+0x5c6>
 800f0d4:	08016174 	.word	0x08016174
 800f0d8:	08016414 	.word	0x08016414
 800f0dc:	080161c8 	.word	0x080161c8
 800f0e0:	08016454 	.word	0x08016454
 800f0e4:	08016464 	.word	0x08016464
 800f0e8:	08016478 	.word	0x08016478
 800f0ec:	080164b0 	.word	0x080164b0
  } else {
    last_unsent->next = queue;
 800f0f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0f4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f0fa:	88fb      	ldrh	r3, [r7, #6]
 800f0fc:	441a      	add	r2, r3
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f108:	88fb      	ldrh	r3, [r7, #6]
 800f10a:	1ad3      	subs	r3, r2, r3
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800f11a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00e      	beq.n	800f146 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d10a      	bne.n	800f146 <tcp_write+0x616>
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f134:	2b00      	cmp	r3, #0
 800f136:	d106      	bne.n	800f146 <tcp_write+0x616>
 800f138:	4b2c      	ldr	r3, [pc, #176]	@ (800f1ec <tcp_write+0x6bc>)
 800f13a:	f240 3212 	movw	r2, #786	@ 0x312
 800f13e:	492c      	ldr	r1, [pc, #176]	@ (800f1f0 <tcp_write+0x6c0>)
 800f140:	482c      	ldr	r0, [pc, #176]	@ (800f1f4 <tcp_write+0x6c4>)
 800f142:	f004 f97f 	bl	8013444 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800f146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d016      	beq.n	800f17a <tcp_write+0x64a>
 800f14c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d012      	beq.n	800f17a <tcp_write+0x64a>
 800f154:	797b      	ldrb	r3, [r7, #5]
 800f156:	f003 0302 	and.w	r3, r3, #2
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d10d      	bne.n	800f17a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800f15e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	899b      	ldrh	r3, [r3, #12]
 800f164:	b29c      	uxth	r4, r3
 800f166:	2008      	movs	r0, #8
 800f168:	f7f9 fad6 	bl	8008718 <lwip_htons>
 800f16c:	4603      	mov	r3, r0
 800f16e:	461a      	mov	r2, r3
 800f170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f172:	68db      	ldr	r3, [r3, #12]
 800f174:	4322      	orrs	r2, r4
 800f176:	b292      	uxth	r2, r2
 800f178:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800f17a:	2300      	movs	r3, #0
 800f17c:	e031      	b.n	800f1e2 <tcp_write+0x6b2>
          goto memerr;
 800f17e:	bf00      	nop
 800f180:	e006      	b.n	800f190 <tcp_write+0x660>
            goto memerr;
 800f182:	bf00      	nop
 800f184:	e004      	b.n	800f190 <tcp_write+0x660>
        goto memerr;
 800f186:	bf00      	nop
 800f188:	e002      	b.n	800f190 <tcp_write+0x660>
        goto memerr;
 800f18a:	bf00      	nop
 800f18c:	e000      	b.n	800f190 <tcp_write+0x660>
      goto memerr;
 800f18e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	8b5b      	ldrh	r3, [r3, #26]
 800f194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f198:	b29a      	uxth	r2, r3
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800f19e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d002      	beq.n	800f1aa <tcp_write+0x67a>
    pbuf_free(concat_p);
 800f1a4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800f1a6:	f7fa fed5 	bl	8009f54 <pbuf_free>
  }
  if (queue != NULL) {
 800f1aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d002      	beq.n	800f1b6 <tcp_write+0x686>
    tcp_segs_free(queue);
 800f1b0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f1b2:	f7fc fb89 	bl	800b8c8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d00e      	beq.n	800f1de <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d10a      	bne.n	800f1de <tcp_write+0x6ae>
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d106      	bne.n	800f1de <tcp_write+0x6ae>
 800f1d0:	4b06      	ldr	r3, [pc, #24]	@ (800f1ec <tcp_write+0x6bc>)
 800f1d2:	f240 3227 	movw	r2, #807	@ 0x327
 800f1d6:	4906      	ldr	r1, [pc, #24]	@ (800f1f0 <tcp_write+0x6c0>)
 800f1d8:	4806      	ldr	r0, [pc, #24]	@ (800f1f4 <tcp_write+0x6c4>)
 800f1da:	f004 f933 	bl	8013444 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800f1de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	375c      	adds	r7, #92	@ 0x5c
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd90      	pop	{r4, r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	08016174 	.word	0x08016174
 800f1f0:	080164e8 	.word	0x080164e8
 800f1f4:	080161c8 	.word	0x080161c8

0800f1f8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f1f8:	b590      	push	{r4, r7, lr}
 800f1fa:	b08b      	sub	sp, #44	@ 0x2c
 800f1fc:	af02      	add	r7, sp, #8
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	460b      	mov	r3, r1
 800f202:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f204:	2300      	movs	r3, #0
 800f206:	61fb      	str	r3, [r7, #28]
 800f208:	2300      	movs	r3, #0
 800f20a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f20c:	2300      	movs	r3, #0
 800f20e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d106      	bne.n	800f224 <tcp_split_unsent_seg+0x2c>
 800f216:	4b95      	ldr	r3, [pc, #596]	@ (800f46c <tcp_split_unsent_seg+0x274>)
 800f218:	f240 324b 	movw	r2, #843	@ 0x34b
 800f21c:	4994      	ldr	r1, [pc, #592]	@ (800f470 <tcp_split_unsent_seg+0x278>)
 800f21e:	4895      	ldr	r0, [pc, #596]	@ (800f474 <tcp_split_unsent_seg+0x27c>)
 800f220:	f004 f910 	bl	8013444 <iprintf>

  useg = pcb->unsent;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f228:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d102      	bne.n	800f236 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f230:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f234:	e116      	b.n	800f464 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f236:	887b      	ldrh	r3, [r7, #2]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d109      	bne.n	800f250 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f23c:	4b8b      	ldr	r3, [pc, #556]	@ (800f46c <tcp_split_unsent_seg+0x274>)
 800f23e:	f240 3253 	movw	r2, #851	@ 0x353
 800f242:	498d      	ldr	r1, [pc, #564]	@ (800f478 <tcp_split_unsent_seg+0x280>)
 800f244:	488b      	ldr	r0, [pc, #556]	@ (800f474 <tcp_split_unsent_seg+0x27c>)
 800f246:	f004 f8fd 	bl	8013444 <iprintf>
    return ERR_VAL;
 800f24a:	f06f 0305 	mvn.w	r3, #5
 800f24e:	e109      	b.n	800f464 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	891b      	ldrh	r3, [r3, #8]
 800f254:	887a      	ldrh	r2, [r7, #2]
 800f256:	429a      	cmp	r2, r3
 800f258:	d301      	bcc.n	800f25e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f25a:	2300      	movs	r3, #0
 800f25c:	e102      	b.n	800f464 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f262:	887a      	ldrh	r2, [r7, #2]
 800f264:	429a      	cmp	r2, r3
 800f266:	d906      	bls.n	800f276 <tcp_split_unsent_seg+0x7e>
 800f268:	4b80      	ldr	r3, [pc, #512]	@ (800f46c <tcp_split_unsent_seg+0x274>)
 800f26a:	f240 325b 	movw	r2, #859	@ 0x35b
 800f26e:	4983      	ldr	r1, [pc, #524]	@ (800f47c <tcp_split_unsent_seg+0x284>)
 800f270:	4880      	ldr	r0, [pc, #512]	@ (800f474 <tcp_split_unsent_seg+0x27c>)
 800f272:	f004 f8e7 	bl	8013444 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	891b      	ldrh	r3, [r3, #8]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d106      	bne.n	800f28c <tcp_split_unsent_seg+0x94>
 800f27e:	4b7b      	ldr	r3, [pc, #492]	@ (800f46c <tcp_split_unsent_seg+0x274>)
 800f280:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800f284:	497e      	ldr	r1, [pc, #504]	@ (800f480 <tcp_split_unsent_seg+0x288>)
 800f286:	487b      	ldr	r0, [pc, #492]	@ (800f474 <tcp_split_unsent_seg+0x27c>)
 800f288:	f004 f8dc 	bl	8013444 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	7a9b      	ldrb	r3, [r3, #10]
 800f290:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f292:	7bfb      	ldrb	r3, [r7, #15]
 800f294:	009b      	lsls	r3, r3, #2
 800f296:	b2db      	uxtb	r3, r3
 800f298:	f003 0304 	and.w	r3, r3, #4
 800f29c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	891a      	ldrh	r2, [r3, #8]
 800f2a2:	887b      	ldrh	r3, [r7, #2]
 800f2a4:	1ad3      	subs	r3, r2, r3
 800f2a6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f2a8:	7bbb      	ldrb	r3, [r7, #14]
 800f2aa:	b29a      	uxth	r2, r3
 800f2ac:	89bb      	ldrh	r3, [r7, #12]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	2036      	movs	r0, #54	@ 0x36
 800f2ba:	f7fa fb69 	bl	8009990 <pbuf_alloc>
 800f2be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 80b7 	beq.w	800f436 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	891a      	ldrh	r2, [r3, #8]
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	891b      	ldrh	r3, [r3, #8]
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	887b      	ldrh	r3, [r7, #2]
 800f2d8:	4413      	add	r3, r2
 800f2da:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	6858      	ldr	r0, [r3, #4]
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	685a      	ldr	r2, [r3, #4]
 800f2e4:	7bbb      	ldrb	r3, [r7, #14]
 800f2e6:	18d1      	adds	r1, r2, r3
 800f2e8:	897b      	ldrh	r3, [r7, #10]
 800f2ea:	89ba      	ldrh	r2, [r7, #12]
 800f2ec:	f7fb f81c 	bl	800a328 <pbuf_copy_partial>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	89bb      	ldrh	r3, [r7, #12]
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	f040 809f 	bne.w	800f43a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	899b      	ldrh	r3, [r3, #12]
 800f302:	b29b      	uxth	r3, r3
 800f304:	4618      	mov	r0, r3
 800f306:	f7f9 fa07 	bl	8008718 <lwip_htons>
 800f30a:	4603      	mov	r3, r0
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f312:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f314:	2300      	movs	r3, #0
 800f316:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f318:	7efb      	ldrb	r3, [r7, #27]
 800f31a:	f003 0308 	and.w	r3, r3, #8
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d007      	beq.n	800f332 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f322:	7efb      	ldrb	r3, [r7, #27]
 800f324:	f023 0308 	bic.w	r3, r3, #8
 800f328:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f32a:	7ebb      	ldrb	r3, [r7, #26]
 800f32c:	f043 0308 	orr.w	r3, r3, #8
 800f330:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f332:	7efb      	ldrb	r3, [r7, #27]
 800f334:	f003 0301 	and.w	r3, r3, #1
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d007      	beq.n	800f34c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f33c:	7efb      	ldrb	r3, [r7, #27]
 800f33e:	f023 0301 	bic.w	r3, r3, #1
 800f342:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f344:	7ebb      	ldrb	r3, [r7, #26]
 800f346:	f043 0301 	orr.w	r3, r3, #1
 800f34a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	68db      	ldr	r3, [r3, #12]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	4618      	mov	r0, r3
 800f354:	f7f9 f9f6 	bl	8008744 <lwip_htonl>
 800f358:	4602      	mov	r2, r0
 800f35a:	887b      	ldrh	r3, [r7, #2]
 800f35c:	18d1      	adds	r1, r2, r3
 800f35e:	7eba      	ldrb	r2, [r7, #26]
 800f360:	7bfb      	ldrb	r3, [r7, #15]
 800f362:	9300      	str	r3, [sp, #0]
 800f364:	460b      	mov	r3, r1
 800f366:	6939      	ldr	r1, [r7, #16]
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f7ff fa51 	bl	800e810 <tcp_create_segment>
 800f36e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d063      	beq.n	800f43e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fa fe72 	bl	800a064 <pbuf_clen>
 800f380:	4603      	mov	r3, r0
 800f382:	461a      	mov	r2, r3
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f38a:	1a9b      	subs	r3, r3, r2
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	6858      	ldr	r0, [r3, #4]
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	891a      	ldrh	r2, [r3, #8]
 800f39e:	89bb      	ldrh	r3, [r7, #12]
 800f3a0:	1ad3      	subs	r3, r2, r3
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	f7fa fc51 	bl	8009c4c <pbuf_realloc>
  useg->len -= remainder;
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	891a      	ldrh	r2, [r3, #8]
 800f3ae:	89bb      	ldrh	r3, [r7, #12]
 800f3b0:	1ad3      	subs	r3, r2, r3
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	68db      	ldr	r3, [r3, #12]
 800f3bc:	899b      	ldrh	r3, [r3, #12]
 800f3be:	b29c      	uxth	r4, r3
 800f3c0:	7efb      	ldrb	r3, [r7, #27]
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7f9 f9a7 	bl	8008718 <lwip_htons>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	68db      	ldr	r3, [r3, #12]
 800f3d2:	4322      	orrs	r2, r4
 800f3d4:	b292      	uxth	r2, r2
 800f3d6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fa fe41 	bl	800a064 <pbuf_clen>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	461a      	mov	r2, r3
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f3ec:	4413      	add	r3, r2
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f3f6:	69fb      	ldr	r3, [r7, #28]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fa fe32 	bl	800a064 <pbuf_clen>
 800f400:	4603      	mov	r3, r0
 800f402:	461a      	mov	r2, r3
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f40a:	4413      	add	r3, r2
 800f40c:	b29a      	uxth	r2, r3
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	69fa      	ldr	r2, [r7, #28]
 800f420:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f422:	69fb      	ldr	r3, [r7, #28]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d103      	bne.n	800f432 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2200      	movs	r2, #0
 800f42e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f432:	2300      	movs	r3, #0
 800f434:	e016      	b.n	800f464 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f436:	bf00      	nop
 800f438:	e002      	b.n	800f440 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f43a:	bf00      	nop
 800f43c:	e000      	b.n	800f440 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f43e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f440:	69fb      	ldr	r3, [r7, #28]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d006      	beq.n	800f454 <tcp_split_unsent_seg+0x25c>
 800f446:	4b09      	ldr	r3, [pc, #36]	@ (800f46c <tcp_split_unsent_seg+0x274>)
 800f448:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800f44c:	490d      	ldr	r1, [pc, #52]	@ (800f484 <tcp_split_unsent_seg+0x28c>)
 800f44e:	4809      	ldr	r0, [pc, #36]	@ (800f474 <tcp_split_unsent_seg+0x27c>)
 800f450:	f003 fff8 	bl	8013444 <iprintf>
  if (p != NULL) {
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d002      	beq.n	800f460 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f45a:	6938      	ldr	r0, [r7, #16]
 800f45c:	f7fa fd7a 	bl	8009f54 <pbuf_free>
  }

  return ERR_MEM;
 800f460:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800f464:	4618      	mov	r0, r3
 800f466:	3724      	adds	r7, #36	@ 0x24
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd90      	pop	{r4, r7, pc}
 800f46c:	08016174 	.word	0x08016174
 800f470:	08016508 	.word	0x08016508
 800f474:	080161c8 	.word	0x080161c8
 800f478:	0801652c 	.word	0x0801652c
 800f47c:	08016550 	.word	0x08016550
 800f480:	08016560 	.word	0x08016560
 800f484:	08016570 	.word	0x08016570

0800f488 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f488:	b590      	push	{r4, r7, lr}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d106      	bne.n	800f4a4 <tcp_send_fin+0x1c>
 800f496:	4b21      	ldr	r3, [pc, #132]	@ (800f51c <tcp_send_fin+0x94>)
 800f498:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800f49c:	4920      	ldr	r1, [pc, #128]	@ (800f520 <tcp_send_fin+0x98>)
 800f49e:	4821      	ldr	r0, [pc, #132]	@ (800f524 <tcp_send_fin+0x9c>)
 800f4a0:	f003 ffd0 	bl	8013444 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d02e      	beq.n	800f50a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4b0:	60fb      	str	r3, [r7, #12]
 800f4b2:	e002      	b.n	800f4ba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d1f8      	bne.n	800f4b4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	899b      	ldrh	r3, [r3, #12]
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7f9 f924 	bl	8008718 <lwip_htons>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	f003 0307 	and.w	r3, r3, #7
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d116      	bne.n	800f50a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	899b      	ldrh	r3, [r3, #12]
 800f4e2:	b29c      	uxth	r4, r3
 800f4e4:	2001      	movs	r0, #1
 800f4e6:	f7f9 f917 	bl	8008718 <lwip_htons>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	68db      	ldr	r3, [r3, #12]
 800f4f2:	4322      	orrs	r2, r4
 800f4f4:	b292      	uxth	r2, r2
 800f4f6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	8b5b      	ldrh	r3, [r3, #26]
 800f4fc:	f043 0320 	orr.w	r3, r3, #32
 800f500:	b29a      	uxth	r2, r3
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f506:	2300      	movs	r3, #0
 800f508:	e004      	b.n	800f514 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f50a:	2101      	movs	r1, #1
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f80b 	bl	800f528 <tcp_enqueue_flags>
 800f512:	4603      	mov	r3, r0
}
 800f514:	4618      	mov	r0, r3
 800f516:	3714      	adds	r7, #20
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd90      	pop	{r4, r7, pc}
 800f51c:	08016174 	.word	0x08016174
 800f520:	0801657c 	.word	0x0801657c
 800f524:	080161c8 	.word	0x080161c8

0800f528 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b08a      	sub	sp, #40	@ 0x28
 800f52c:	af02      	add	r7, sp, #8
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	460b      	mov	r3, r1
 800f532:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f534:	2300      	movs	r3, #0
 800f536:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f538:	2300      	movs	r3, #0
 800f53a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f53c:	78fb      	ldrb	r3, [r7, #3]
 800f53e:	f003 0303 	and.w	r3, r3, #3
 800f542:	2b00      	cmp	r3, #0
 800f544:	d106      	bne.n	800f554 <tcp_enqueue_flags+0x2c>
 800f546:	4b67      	ldr	r3, [pc, #412]	@ (800f6e4 <tcp_enqueue_flags+0x1bc>)
 800f548:	f240 4211 	movw	r2, #1041	@ 0x411
 800f54c:	4966      	ldr	r1, [pc, #408]	@ (800f6e8 <tcp_enqueue_flags+0x1c0>)
 800f54e:	4867      	ldr	r0, [pc, #412]	@ (800f6ec <tcp_enqueue_flags+0x1c4>)
 800f550:	f003 ff78 	bl	8013444 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d106      	bne.n	800f568 <tcp_enqueue_flags+0x40>
 800f55a:	4b62      	ldr	r3, [pc, #392]	@ (800f6e4 <tcp_enqueue_flags+0x1bc>)
 800f55c:	f240 4213 	movw	r2, #1043	@ 0x413
 800f560:	4963      	ldr	r1, [pc, #396]	@ (800f6f0 <tcp_enqueue_flags+0x1c8>)
 800f562:	4862      	ldr	r0, [pc, #392]	@ (800f6ec <tcp_enqueue_flags+0x1c4>)
 800f564:	f003 ff6e 	bl	8013444 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f568:	78fb      	ldrb	r3, [r7, #3]
 800f56a:	f003 0302 	and.w	r3, r3, #2
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d001      	beq.n	800f576 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f572:	2301      	movs	r3, #1
 800f574:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f576:	7ffb      	ldrb	r3, [r7, #31]
 800f578:	009b      	lsls	r3, r3, #2
 800f57a:	b2db      	uxtb	r3, r3
 800f57c:	f003 0304 	and.w	r3, r3, #4
 800f580:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f582:	7dfb      	ldrb	r3, [r7, #23]
 800f584:	b29b      	uxth	r3, r3
 800f586:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f58a:	4619      	mov	r1, r3
 800f58c:	2036      	movs	r0, #54	@ 0x36
 800f58e:	f7fa f9ff 	bl	8009990 <pbuf_alloc>
 800f592:	6138      	str	r0, [r7, #16]
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d109      	bne.n	800f5ae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	8b5b      	ldrh	r3, [r3, #26]
 800f59e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5a2:	b29a      	uxth	r2, r3
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f5a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f5ac:	e095      	b.n	800f6da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	895a      	ldrh	r2, [r3, #10]
 800f5b2:	7dfb      	ldrb	r3, [r7, #23]
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d206      	bcs.n	800f5c8 <tcp_enqueue_flags+0xa0>
 800f5ba:	4b4a      	ldr	r3, [pc, #296]	@ (800f6e4 <tcp_enqueue_flags+0x1bc>)
 800f5bc:	f240 4239 	movw	r2, #1081	@ 0x439
 800f5c0:	494c      	ldr	r1, [pc, #304]	@ (800f6f4 <tcp_enqueue_flags+0x1cc>)
 800f5c2:	484a      	ldr	r0, [pc, #296]	@ (800f6ec <tcp_enqueue_flags+0x1c4>)
 800f5c4:	f003 ff3e 	bl	8013444 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800f5cc:	78fa      	ldrb	r2, [r7, #3]
 800f5ce:	7ffb      	ldrb	r3, [r7, #31]
 800f5d0:	9300      	str	r3, [sp, #0]
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	6939      	ldr	r1, [r7, #16]
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f7ff f91a 	bl	800e810 <tcp_create_segment>
 800f5dc:	60f8      	str	r0, [r7, #12]
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d109      	bne.n	800f5f8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	8b5b      	ldrh	r3, [r3, #26]
 800f5e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5ec:	b29a      	uxth	r2, r3
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f5f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f5f6:	e070      	b.n	800f6da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	f003 0303 	and.w	r3, r3, #3
 800f600:	2b00      	cmp	r3, #0
 800f602:	d006      	beq.n	800f612 <tcp_enqueue_flags+0xea>
 800f604:	4b37      	ldr	r3, [pc, #220]	@ (800f6e4 <tcp_enqueue_flags+0x1bc>)
 800f606:	f240 4242 	movw	r2, #1090	@ 0x442
 800f60a:	493b      	ldr	r1, [pc, #236]	@ (800f6f8 <tcp_enqueue_flags+0x1d0>)
 800f60c:	4837      	ldr	r0, [pc, #220]	@ (800f6ec <tcp_enqueue_flags+0x1c4>)
 800f60e:	f003 ff19 	bl	8013444 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	891b      	ldrh	r3, [r3, #8]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d006      	beq.n	800f628 <tcp_enqueue_flags+0x100>
 800f61a:	4b32      	ldr	r3, [pc, #200]	@ (800f6e4 <tcp_enqueue_flags+0x1bc>)
 800f61c:	f240 4243 	movw	r2, #1091	@ 0x443
 800f620:	4936      	ldr	r1, [pc, #216]	@ (800f6fc <tcp_enqueue_flags+0x1d4>)
 800f622:	4832      	ldr	r0, [pc, #200]	@ (800f6ec <tcp_enqueue_flags+0x1c4>)
 800f624:	f003 ff0e 	bl	8013444 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d103      	bne.n	800f638 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	68fa      	ldr	r2, [r7, #12]
 800f634:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f636:	e00d      	b.n	800f654 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f63c:	61bb      	str	r3, [r7, #24]
 800f63e:	e002      	b.n	800f646 <tcp_enqueue_flags+0x11e>
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	61bb      	str	r3, [r7, #24]
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d1f8      	bne.n	800f640 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	68fa      	ldr	r2, [r7, #12]
 800f652:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2200      	movs	r2, #0
 800f658:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f65c:	78fb      	ldrb	r3, [r7, #3]
 800f65e:	f003 0302 	and.w	r3, r3, #2
 800f662:	2b00      	cmp	r3, #0
 800f664:	d104      	bne.n	800f670 <tcp_enqueue_flags+0x148>
 800f666:	78fb      	ldrb	r3, [r7, #3]
 800f668:	f003 0301 	and.w	r3, r3, #1
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d004      	beq.n	800f67a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f674:	1c5a      	adds	r2, r3, #1
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f67a:	78fb      	ldrb	r3, [r7, #3]
 800f67c:	f003 0301 	and.w	r3, r3, #1
 800f680:	2b00      	cmp	r3, #0
 800f682:	d006      	beq.n	800f692 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	8b5b      	ldrh	r3, [r3, #26]
 800f688:	f043 0320 	orr.w	r3, r3, #32
 800f68c:	b29a      	uxth	r2, r3
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	685b      	ldr	r3, [r3, #4]
 800f696:	4618      	mov	r0, r3
 800f698:	f7fa fce4 	bl	800a064 <pbuf_clen>
 800f69c:	4603      	mov	r3, r0
 800f69e:	461a      	mov	r2, r3
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f6a6:	4413      	add	r3, r2
 800f6a8:	b29a      	uxth	r2, r3
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00e      	beq.n	800f6d8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d10a      	bne.n	800f6d8 <tcp_enqueue_flags+0x1b0>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d106      	bne.n	800f6d8 <tcp_enqueue_flags+0x1b0>
 800f6ca:	4b06      	ldr	r3, [pc, #24]	@ (800f6e4 <tcp_enqueue_flags+0x1bc>)
 800f6cc:	f240 4265 	movw	r2, #1125	@ 0x465
 800f6d0:	490b      	ldr	r1, [pc, #44]	@ (800f700 <tcp_enqueue_flags+0x1d8>)
 800f6d2:	4806      	ldr	r0, [pc, #24]	@ (800f6ec <tcp_enqueue_flags+0x1c4>)
 800f6d4:	f003 feb6 	bl	8013444 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f6d8:	2300      	movs	r3, #0
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3720      	adds	r7, #32
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	08016174 	.word	0x08016174
 800f6e8:	08016598 	.word	0x08016598
 800f6ec:	080161c8 	.word	0x080161c8
 800f6f0:	080165f0 	.word	0x080165f0
 800f6f4:	08016610 	.word	0x08016610
 800f6f8:	0801664c 	.word	0x0801664c
 800f6fc:	08016664 	.word	0x08016664
 800f700:	08016690 	.word	0x08016690

0800f704 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f704:	b5b0      	push	{r4, r5, r7, lr}
 800f706:	b08a      	sub	sp, #40	@ 0x28
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d106      	bne.n	800f720 <tcp_output+0x1c>
 800f712:	4b8a      	ldr	r3, [pc, #552]	@ (800f93c <tcp_output+0x238>)
 800f714:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800f718:	4989      	ldr	r1, [pc, #548]	@ (800f940 <tcp_output+0x23c>)
 800f71a:	488a      	ldr	r0, [pc, #552]	@ (800f944 <tcp_output+0x240>)
 800f71c:	f003 fe92 	bl	8013444 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	7d1b      	ldrb	r3, [r3, #20]
 800f724:	2b01      	cmp	r3, #1
 800f726:	d106      	bne.n	800f736 <tcp_output+0x32>
 800f728:	4b84      	ldr	r3, [pc, #528]	@ (800f93c <tcp_output+0x238>)
 800f72a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800f72e:	4986      	ldr	r1, [pc, #536]	@ (800f948 <tcp_output+0x244>)
 800f730:	4884      	ldr	r0, [pc, #528]	@ (800f944 <tcp_output+0x240>)
 800f732:	f003 fe87 	bl	8013444 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f736:	4b85      	ldr	r3, [pc, #532]	@ (800f94c <tcp_output+0x248>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	687a      	ldr	r2, [r7, #4]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d101      	bne.n	800f744 <tcp_output+0x40>
    return ERR_OK;
 800f740:	2300      	movs	r3, #0
 800f742:	e1ce      	b.n	800fae2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f750:	4293      	cmp	r3, r2
 800f752:	bf28      	it	cs
 800f754:	4613      	movcs	r3, r2
 800f756:	b29b      	uxth	r3, r3
 800f758:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f75e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800f760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f762:	2b00      	cmp	r3, #0
 800f764:	d10b      	bne.n	800f77e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	8b5b      	ldrh	r3, [r3, #26]
 800f76a:	f003 0302 	and.w	r3, r3, #2
 800f76e:	2b00      	cmp	r3, #0
 800f770:	f000 81aa 	beq.w	800fac8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 fdcb 	bl	8010310 <tcp_send_empty_ack>
 800f77a:	4603      	mov	r3, r0
 800f77c:	e1b1      	b.n	800fae2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f77e:	6879      	ldr	r1, [r7, #4]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	3304      	adds	r3, #4
 800f784:	461a      	mov	r2, r3
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f7ff f826 	bl	800e7d8 <tcp_route>
 800f78c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d102      	bne.n	800f79a <tcp_output+0x96>
    return ERR_RTE;
 800f794:	f06f 0303 	mvn.w	r3, #3
 800f798:	e1a3      	b.n	800fae2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d003      	beq.n	800f7a8 <tcp_output+0xa4>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d111      	bne.n	800f7cc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d002      	beq.n	800f7b4 <tcp_output+0xb0>
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	3304      	adds	r3, #4
 800f7b2:	e000      	b.n	800f7b6 <tcp_output+0xb2>
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d102      	bne.n	800f7c4 <tcp_output+0xc0>
      return ERR_RTE;
 800f7be:	f06f 0303 	mvn.w	r3, #3
 800f7c2:	e18e      	b.n	800fae2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7f8 ffb6 	bl	8008744 <lwip_htonl>
 800f7d8:	4602      	mov	r2, r0
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7de:	1ad3      	subs	r3, r2, r3
 800f7e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7e2:	8912      	ldrh	r2, [r2, #8]
 800f7e4:	4413      	add	r3, r2
 800f7e6:	69ba      	ldr	r2, [r7, #24]
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d227      	bcs.n	800f83c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	69bb      	ldr	r3, [r7, #24]
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d114      	bne.n	800f824 <tcp_output+0x120>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d110      	bne.n	800f824 <tcp_output+0x120>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d10b      	bne.n	800f824 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2200      	movs	r2, #0
 800f810:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2201      	movs	r2, #1
 800f818:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2200      	movs	r2, #0
 800f820:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	8b5b      	ldrh	r3, [r3, #26]
 800f828:	f003 0302 	and.w	r3, r3, #2
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	f000 814d 	beq.w	800facc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 fd6c 	bl	8010310 <tcp_send_empty_ack>
 800f838:	4603      	mov	r3, r0
 800f83a:	e152      	b.n	800fae2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2200      	movs	r2, #0
 800f840:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f848:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f84a:	6a3b      	ldr	r3, [r7, #32]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	f000 811c 	beq.w	800fa8a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f852:	e002      	b.n	800f85a <tcp_output+0x156>
 800f854:	6a3b      	ldr	r3, [r7, #32]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	623b      	str	r3, [r7, #32]
 800f85a:	6a3b      	ldr	r3, [r7, #32]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d1f8      	bne.n	800f854 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f862:	e112      	b.n	800fa8a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	899b      	ldrh	r3, [r3, #12]
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	4618      	mov	r0, r3
 800f86e:	f7f8 ff53 	bl	8008718 <lwip_htons>
 800f872:	4603      	mov	r3, r0
 800f874:	b2db      	uxtb	r3, r3
 800f876:	f003 0304 	and.w	r3, r3, #4
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d006      	beq.n	800f88c <tcp_output+0x188>
 800f87e:	4b2f      	ldr	r3, [pc, #188]	@ (800f93c <tcp_output+0x238>)
 800f880:	f240 5236 	movw	r2, #1334	@ 0x536
 800f884:	4932      	ldr	r1, [pc, #200]	@ (800f950 <tcp_output+0x24c>)
 800f886:	482f      	ldr	r0, [pc, #188]	@ (800f944 <tcp_output+0x240>)
 800f888:	f003 fddc 	bl	8013444 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f890:	2b00      	cmp	r3, #0
 800f892:	d01f      	beq.n	800f8d4 <tcp_output+0x1d0>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	8b5b      	ldrh	r3, [r3, #26]
 800f898:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d119      	bne.n	800f8d4 <tcp_output+0x1d0>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d00b      	beq.n	800f8c0 <tcp_output+0x1bc>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d110      	bne.n	800f8d4 <tcp_output+0x1d0>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8b6:	891a      	ldrh	r2, [r3, #8]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d209      	bcs.n	800f8d4 <tcp_output+0x1d0>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d004      	beq.n	800f8d4 <tcp_output+0x1d0>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f8d0:	2b08      	cmp	r3, #8
 800f8d2:	d901      	bls.n	800f8d8 <tcp_output+0x1d4>
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	e000      	b.n	800f8da <tcp_output+0x1d6>
 800f8d8:	2300      	movs	r3, #0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d106      	bne.n	800f8ec <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	8b5b      	ldrh	r3, [r3, #26]
 800f8e2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	f000 80e4 	beq.w	800fab4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	7d1b      	ldrb	r3, [r3, #20]
 800f8f0:	2b02      	cmp	r3, #2
 800f8f2:	d00d      	beq.n	800f910 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f6:	68db      	ldr	r3, [r3, #12]
 800f8f8:	899b      	ldrh	r3, [r3, #12]
 800f8fa:	b29c      	uxth	r4, r3
 800f8fc:	2010      	movs	r0, #16
 800f8fe:	f7f8 ff0b 	bl	8008718 <lwip_htons>
 800f902:	4603      	mov	r3, r0
 800f904:	461a      	mov	r2, r3
 800f906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	4322      	orrs	r2, r4
 800f90c:	b292      	uxth	r2, r2
 800f90e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f910:	697a      	ldr	r2, [r7, #20]
 800f912:	6879      	ldr	r1, [r7, #4]
 800f914:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f916:	f000 f909 	bl	800fb2c <tcp_output_segment>
 800f91a:	4603      	mov	r3, r0
 800f91c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f91e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d016      	beq.n	800f954 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	8b5b      	ldrh	r3, [r3, #26]
 800f92a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f92e:	b29a      	uxth	r2, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	835a      	strh	r2, [r3, #26]
      return err;
 800f934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f938:	e0d3      	b.n	800fae2 <tcp_output+0x3de>
 800f93a:	bf00      	nop
 800f93c:	08016174 	.word	0x08016174
 800f940:	080166b8 	.word	0x080166b8
 800f944:	080161c8 	.word	0x080161c8
 800f948:	080166d0 	.word	0x080166d0
 800f94c:	24043248 	.word	0x24043248
 800f950:	080166f8 	.word	0x080166f8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	7d1b      	ldrb	r3, [r3, #20]
 800f960:	2b02      	cmp	r3, #2
 800f962:	d006      	beq.n	800f972 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	8b5b      	ldrh	r3, [r3, #26]
 800f968:	f023 0303 	bic.w	r3, r3, #3
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f974:	68db      	ldr	r3, [r3, #12]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	4618      	mov	r0, r3
 800f97a:	f7f8 fee3 	bl	8008744 <lwip_htonl>
 800f97e:	4604      	mov	r4, r0
 800f980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f982:	891b      	ldrh	r3, [r3, #8]
 800f984:	461d      	mov	r5, r3
 800f986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f988:	68db      	ldr	r3, [r3, #12]
 800f98a:	899b      	ldrh	r3, [r3, #12]
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	4618      	mov	r0, r3
 800f990:	f7f8 fec2 	bl	8008718 <lwip_htons>
 800f994:	4603      	mov	r3, r0
 800f996:	b2db      	uxtb	r3, r3
 800f998:	f003 0303 	and.w	r3, r3, #3
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d001      	beq.n	800f9a4 <tcp_output+0x2a0>
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	e000      	b.n	800f9a6 <tcp_output+0x2a2>
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	442b      	add	r3, r5
 800f9a8:	4423      	add	r3, r4
 800f9aa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	1ad3      	subs	r3, r2, r3
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	da02      	bge.n	800f9be <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	68ba      	ldr	r2, [r7, #8]
 800f9bc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c0:	891b      	ldrh	r3, [r3, #8]
 800f9c2:	461c      	mov	r4, r3
 800f9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c6:	68db      	ldr	r3, [r3, #12]
 800f9c8:	899b      	ldrh	r3, [r3, #12]
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7f8 fea3 	bl	8008718 <lwip_htons>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	f003 0303 	and.w	r3, r3, #3
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d001      	beq.n	800f9e2 <tcp_output+0x2de>
 800f9de:	2301      	movs	r3, #1
 800f9e0:	e000      	b.n	800f9e4 <tcp_output+0x2e0>
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	4423      	add	r3, r4
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d049      	beq.n	800fa7e <tcp_output+0x37a>
      seg->next = NULL;
 800f9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d105      	bne.n	800fa04 <tcp_output+0x300>
        pcb->unacked = seg;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9fc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800f9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa00:	623b      	str	r3, [r7, #32]
 800fa02:	e03f      	b.n	800fa84 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fa04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7f8 fe9a 	bl	8008744 <lwip_htonl>
 800fa10:	4604      	mov	r4, r0
 800fa12:	6a3b      	ldr	r3, [r7, #32]
 800fa14:	68db      	ldr	r3, [r3, #12]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7f8 fe93 	bl	8008744 <lwip_htonl>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	1ae3      	subs	r3, r4, r3
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	da24      	bge.n	800fa70 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	3370      	adds	r3, #112	@ 0x70
 800fa2a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fa2c:	e002      	b.n	800fa34 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d011      	beq.n	800fa60 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fa3c:	69fb      	ldr	r3, [r7, #28]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7f8 fe7d 	bl	8008744 <lwip_htonl>
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7f8 fe76 	bl	8008744 <lwip_htonl>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	dbe6      	blt.n	800fa2e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa66:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa6c:	601a      	str	r2, [r3, #0]
 800fa6e:	e009      	b.n	800fa84 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fa70:	6a3b      	ldr	r3, [r7, #32]
 800fa72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa74:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fa76:	6a3b      	ldr	r3, [r7, #32]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	623b      	str	r3, [r7, #32]
 800fa7c:	e002      	b.n	800fa84 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fa7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fa80:	f7fb ff37 	bl	800b8f2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa88:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800fa8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d012      	beq.n	800fab6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7f8 fe54 	bl	8008744 <lwip_htonl>
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800faa2:	1ad3      	subs	r3, r2, r3
 800faa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800faa6:	8912      	ldrh	r2, [r2, #8]
 800faa8:	4413      	add	r3, r2
  while (seg != NULL &&
 800faaa:	69ba      	ldr	r2, [r7, #24]
 800faac:	429a      	cmp	r2, r3
 800faae:	f4bf aed9 	bcs.w	800f864 <tcp_output+0x160>
 800fab2:	e000      	b.n	800fab6 <tcp_output+0x3b2>
      break;
 800fab4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d108      	bne.n	800fad0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2200      	movs	r2, #0
 800fac2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800fac6:	e004      	b.n	800fad2 <tcp_output+0x3ce>
    goto output_done;
 800fac8:	bf00      	nop
 800faca:	e002      	b.n	800fad2 <tcp_output+0x3ce>
    goto output_done;
 800facc:	bf00      	nop
 800face:	e000      	b.n	800fad2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800fad0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	8b5b      	ldrh	r3, [r3, #26]
 800fad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fada:	b29a      	uxth	r2, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3728      	adds	r7, #40	@ 0x28
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bdb0      	pop	{r4, r5, r7, pc}
 800faea:	bf00      	nop

0800faec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d106      	bne.n	800fb08 <tcp_output_segment_busy+0x1c>
 800fafa:	4b09      	ldr	r3, [pc, #36]	@ (800fb20 <tcp_output_segment_busy+0x34>)
 800fafc:	f240 529a 	movw	r2, #1434	@ 0x59a
 800fb00:	4908      	ldr	r1, [pc, #32]	@ (800fb24 <tcp_output_segment_busy+0x38>)
 800fb02:	4809      	ldr	r0, [pc, #36]	@ (800fb28 <tcp_output_segment_busy+0x3c>)
 800fb04:	f003 fc9e 	bl	8013444 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	7b9b      	ldrb	r3, [r3, #14]
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d001      	beq.n	800fb16 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800fb12:	2301      	movs	r3, #1
 800fb14:	e000      	b.n	800fb18 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800fb16:	2300      	movs	r3, #0
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	08016174 	.word	0x08016174
 800fb24:	08016710 	.word	0x08016710
 800fb28:	080161c8 	.word	0x080161c8

0800fb2c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fb2c:	b5b0      	push	{r4, r5, r7, lr}
 800fb2e:	b08c      	sub	sp, #48	@ 0x30
 800fb30:	af04      	add	r7, sp, #16
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d106      	bne.n	800fb4c <tcp_output_segment+0x20>
 800fb3e:	4b64      	ldr	r3, [pc, #400]	@ (800fcd0 <tcp_output_segment+0x1a4>)
 800fb40:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800fb44:	4963      	ldr	r1, [pc, #396]	@ (800fcd4 <tcp_output_segment+0x1a8>)
 800fb46:	4864      	ldr	r0, [pc, #400]	@ (800fcd8 <tcp_output_segment+0x1ac>)
 800fb48:	f003 fc7c 	bl	8013444 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d106      	bne.n	800fb60 <tcp_output_segment+0x34>
 800fb52:	4b5f      	ldr	r3, [pc, #380]	@ (800fcd0 <tcp_output_segment+0x1a4>)
 800fb54:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800fb58:	4960      	ldr	r1, [pc, #384]	@ (800fcdc <tcp_output_segment+0x1b0>)
 800fb5a:	485f      	ldr	r0, [pc, #380]	@ (800fcd8 <tcp_output_segment+0x1ac>)
 800fb5c:	f003 fc72 	bl	8013444 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d106      	bne.n	800fb74 <tcp_output_segment+0x48>
 800fb66:	4b5a      	ldr	r3, [pc, #360]	@ (800fcd0 <tcp_output_segment+0x1a4>)
 800fb68:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800fb6c:	495c      	ldr	r1, [pc, #368]	@ (800fce0 <tcp_output_segment+0x1b4>)
 800fb6e:	485a      	ldr	r0, [pc, #360]	@ (800fcd8 <tcp_output_segment+0x1ac>)
 800fb70:	f003 fc68 	bl	8013444 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	f7ff ffb9 	bl	800faec <tcp_output_segment_busy>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d001      	beq.n	800fb84 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800fb80:	2300      	movs	r3, #0
 800fb82:	e0a1      	b.n	800fcc8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	68dc      	ldr	r4, [r3, #12]
 800fb8c:	4610      	mov	r0, r2
 800fb8e:	f7f8 fdd9 	bl	8008744 <lwip_htonl>
 800fb92:	4603      	mov	r3, r0
 800fb94:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	68dc      	ldr	r4, [r3, #12]
 800fb9e:	4610      	mov	r0, r2
 800fba0:	f7f8 fdba 	bl	8008718 <lwip_htons>
 800fba4:	4603      	mov	r3, r0
 800fba6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbac:	68ba      	ldr	r2, [r7, #8]
 800fbae:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800fbb0:	441a      	add	r2, r3
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	68db      	ldr	r3, [r3, #12]
 800fbba:	3314      	adds	r3, #20
 800fbbc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	7a9b      	ldrb	r3, [r3, #10]
 800fbc2:	f003 0301 	and.w	r3, r3, #1
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d015      	beq.n	800fbf6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	3304      	adds	r3, #4
 800fbce:	461a      	mov	r2, r3
 800fbd0:	6879      	ldr	r1, [r7, #4]
 800fbd2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800fbd6:	f7fc fa39 	bl	800c04c <tcp_eff_send_mss_netif>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fbde:	8b7b      	ldrh	r3, [r7, #26]
 800fbe0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7f8 fdad 	bl	8008744 <lwip_htonl>
 800fbea:	4602      	mov	r2, r0
 800fbec:	69fb      	ldr	r3, [r7, #28]
 800fbee:	601a      	str	r2, [r3, #0]
    opts += 1;
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	3304      	adds	r3, #4
 800fbf4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	da02      	bge.n	800fc06 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	2200      	movs	r2, #0
 800fc04:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d10c      	bne.n	800fc28 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800fc0e:	4b35      	ldr	r3, [pc, #212]	@ (800fce4 <tcp_output_segment+0x1b8>)
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	68db      	ldr	r3, [r3, #12]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7f8 fd91 	bl	8008744 <lwip_htonl>
 800fc22:	4602      	mov	r2, r0
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	68da      	ldr	r2, [r3, #12]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	685b      	ldr	r3, [r3, #4]
 800fc32:	1ad3      	subs	r3, r2, r3
 800fc34:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	8959      	ldrh	r1, [r3, #10]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	8b3a      	ldrh	r2, [r7, #24]
 800fc42:	1a8a      	subs	r2, r1, r2
 800fc44:	b292      	uxth	r2, r2
 800fc46:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	8919      	ldrh	r1, [r3, #8]
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	685b      	ldr	r3, [r3, #4]
 800fc52:	8b3a      	ldrh	r2, [r7, #24]
 800fc54:	1a8a      	subs	r2, r1, r2
 800fc56:	b292      	uxth	r2, r2
 800fc58:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	68d2      	ldr	r2, [r2, #12]
 800fc62:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	741a      	strb	r2, [r3, #16]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	68da      	ldr	r2, [r3, #12]
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	7a9b      	ldrb	r3, [r3, #10]
 800fc78:	f003 0301 	and.w	r3, r3, #1
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d001      	beq.n	800fc84 <tcp_output_segment+0x158>
 800fc80:	2318      	movs	r3, #24
 800fc82:	e000      	b.n	800fc86 <tcp_output_segment+0x15a>
 800fc84:	2314      	movs	r3, #20
 800fc86:	4413      	add	r3, r2
 800fc88:	69fa      	ldr	r2, [r7, #28]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d006      	beq.n	800fc9c <tcp_output_segment+0x170>
 800fc8e:	4b10      	ldr	r3, [pc, #64]	@ (800fcd0 <tcp_output_segment+0x1a4>)
 800fc90:	f240 621c 	movw	r2, #1564	@ 0x61c
 800fc94:	4914      	ldr	r1, [pc, #80]	@ (800fce8 <tcp_output_segment+0x1bc>)
 800fc96:	4810      	ldr	r0, [pc, #64]	@ (800fcd8 <tcp_output_segment+0x1ac>)
 800fc98:	f003 fbd4 	bl	8013444 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	6858      	ldr	r0, [r3, #4]
 800fca0:	68b9      	ldr	r1, [r7, #8]
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	1d1c      	adds	r4, r3, #4
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	7add      	ldrb	r5, [r3, #11]
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	7a9b      	ldrb	r3, [r3, #10]
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	9202      	str	r2, [sp, #8]
 800fcb2:	2206      	movs	r2, #6
 800fcb4:	9201      	str	r2, [sp, #4]
 800fcb6:	9300      	str	r3, [sp, #0]
 800fcb8:	462b      	mov	r3, r5
 800fcba:	4622      	mov	r2, r4
 800fcbc:	f002 fa94 	bl	80121e8 <ip4_output_if>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fcc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3720      	adds	r7, #32
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bdb0      	pop	{r4, r5, r7, pc}
 800fcd0:	08016174 	.word	0x08016174
 800fcd4:	08016738 	.word	0x08016738
 800fcd8:	080161c8 	.word	0x080161c8
 800fcdc:	08016758 	.word	0x08016758
 800fce0:	08016778 	.word	0x08016778
 800fce4:	240431fc 	.word	0x240431fc
 800fce8:	0801679c 	.word	0x0801679c

0800fcec <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fcec:	b5b0      	push	{r4, r5, r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d106      	bne.n	800fd08 <tcp_rexmit_rto_prepare+0x1c>
 800fcfa:	4b31      	ldr	r3, [pc, #196]	@ (800fdc0 <tcp_rexmit_rto_prepare+0xd4>)
 800fcfc:	f240 6263 	movw	r2, #1635	@ 0x663
 800fd00:	4930      	ldr	r1, [pc, #192]	@ (800fdc4 <tcp_rexmit_rto_prepare+0xd8>)
 800fd02:	4831      	ldr	r0, [pc, #196]	@ (800fdc8 <tcp_rexmit_rto_prepare+0xdc>)
 800fd04:	f003 fb9e 	bl	8013444 <iprintf>

  if (pcb->unacked == NULL) {
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d102      	bne.n	800fd16 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800fd10:	f06f 0305 	mvn.w	r3, #5
 800fd14:	e050      	b.n	800fdb8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd1a:	60fb      	str	r3, [r7, #12]
 800fd1c:	e00b      	b.n	800fd36 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fd1e:	68f8      	ldr	r0, [r7, #12]
 800fd20:	f7ff fee4 	bl	800faec <tcp_output_segment_busy>
 800fd24:	4603      	mov	r3, r0
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d002      	beq.n	800fd30 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fd2a:	f06f 0305 	mvn.w	r3, #5
 800fd2e:	e043      	b.n	800fdb8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	60fb      	str	r3, [r7, #12]
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d1ef      	bne.n	800fd1e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fd3e:	68f8      	ldr	r0, [r7, #12]
 800fd40:	f7ff fed4 	bl	800faec <tcp_output_segment_busy>
 800fd44:	4603      	mov	r3, r0
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d002      	beq.n	800fd50 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fd4a:	f06f 0305 	mvn.w	r3, #5
 800fd4e:	e033      	b.n	800fdb8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2200      	movs	r2, #0
 800fd64:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	8b5b      	ldrh	r3, [r3, #26]
 800fd6a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800fd6e:	b29a      	uxth	r2, r3
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7f8 fce2 	bl	8008744 <lwip_htonl>
 800fd80:	4604      	mov	r4, r0
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	891b      	ldrh	r3, [r3, #8]
 800fd86:	461d      	mov	r5, r3
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	68db      	ldr	r3, [r3, #12]
 800fd8c:	899b      	ldrh	r3, [r3, #12]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7f8 fcc1 	bl	8008718 <lwip_htons>
 800fd96:	4603      	mov	r3, r0
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	f003 0303 	and.w	r3, r3, #3
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d001      	beq.n	800fda6 <tcp_rexmit_rto_prepare+0xba>
 800fda2:	2301      	movs	r3, #1
 800fda4:	e000      	b.n	800fda8 <tcp_rexmit_rto_prepare+0xbc>
 800fda6:	2300      	movs	r3, #0
 800fda8:	442b      	add	r3, r5
 800fdaa:	18e2      	adds	r2, r4, r3
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800fdb6:	2300      	movs	r3, #0
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3710      	adds	r7, #16
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bdb0      	pop	{r4, r5, r7, pc}
 800fdc0:	08016174 	.word	0x08016174
 800fdc4:	080167b0 	.word	0x080167b0
 800fdc8:	080161c8 	.word	0x080161c8

0800fdcc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d106      	bne.n	800fde8 <tcp_rexmit_rto_commit+0x1c>
 800fdda:	4b0d      	ldr	r3, [pc, #52]	@ (800fe10 <tcp_rexmit_rto_commit+0x44>)
 800fddc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800fde0:	490c      	ldr	r1, [pc, #48]	@ (800fe14 <tcp_rexmit_rto_commit+0x48>)
 800fde2:	480d      	ldr	r0, [pc, #52]	@ (800fe18 <tcp_rexmit_rto_commit+0x4c>)
 800fde4:	f003 fb2e 	bl	8013444 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fdee:	2bff      	cmp	r3, #255	@ 0xff
 800fdf0:	d007      	beq.n	800fe02 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	b2da      	uxtb	r2, r3
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f7ff fc7e 	bl	800f704 <tcp_output>
}
 800fe08:	bf00      	nop
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	08016174 	.word	0x08016174
 800fe14:	080167d4 	.word	0x080167d4
 800fe18:	080161c8 	.word	0x080161c8

0800fe1c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d106      	bne.n	800fe38 <tcp_rexmit_rto+0x1c>
 800fe2a:	4b0a      	ldr	r3, [pc, #40]	@ (800fe54 <tcp_rexmit_rto+0x38>)
 800fe2c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800fe30:	4909      	ldr	r1, [pc, #36]	@ (800fe58 <tcp_rexmit_rto+0x3c>)
 800fe32:	480a      	ldr	r0, [pc, #40]	@ (800fe5c <tcp_rexmit_rto+0x40>)
 800fe34:	f003 fb06 	bl	8013444 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f7ff ff57 	bl	800fcec <tcp_rexmit_rto_prepare>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d102      	bne.n	800fe4a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f7ff ffc1 	bl	800fdcc <tcp_rexmit_rto_commit>
  }
}
 800fe4a:	bf00      	nop
 800fe4c:	3708      	adds	r7, #8
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}
 800fe52:	bf00      	nop
 800fe54:	08016174 	.word	0x08016174
 800fe58:	080167f8 	.word	0x080167f8
 800fe5c:	080161c8 	.word	0x080161c8

0800fe60 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fe60:	b590      	push	{r4, r7, lr}
 800fe62:	b085      	sub	sp, #20
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d106      	bne.n	800fe7c <tcp_rexmit+0x1c>
 800fe6e:	4b2f      	ldr	r3, [pc, #188]	@ (800ff2c <tcp_rexmit+0xcc>)
 800fe70:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800fe74:	492e      	ldr	r1, [pc, #184]	@ (800ff30 <tcp_rexmit+0xd0>)
 800fe76:	482f      	ldr	r0, [pc, #188]	@ (800ff34 <tcp_rexmit+0xd4>)
 800fe78:	f003 fae4 	bl	8013444 <iprintf>

  if (pcb->unacked == NULL) {
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d102      	bne.n	800fe8a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fe84:	f06f 0305 	mvn.w	r3, #5
 800fe88:	e04c      	b.n	800ff24 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe8e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800fe90:	68b8      	ldr	r0, [r7, #8]
 800fe92:	f7ff fe2b 	bl	800faec <tcp_output_segment_busy>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d002      	beq.n	800fea2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800fe9c:	f06f 0305 	mvn.w	r3, #5
 800fea0:	e040      	b.n	800ff24 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	336c      	adds	r3, #108	@ 0x6c
 800feae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800feb0:	e002      	b.n	800feb8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d011      	beq.n	800fee4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	4618      	mov	r0, r3
 800feca:	f7f8 fc3b 	bl	8008744 <lwip_htonl>
 800fece:	4604      	mov	r4, r0
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7f8 fc34 	bl	8008744 <lwip_htonl>
 800fedc:	4603      	mov	r3, r0
 800fede:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	dbe6      	blt.n	800feb2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681a      	ldr	r2, [r3, #0]
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	68ba      	ldr	r2, [r7, #8]
 800fef0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d103      	bne.n	800ff02 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2200      	movs	r2, #0
 800fefe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ff08:	2bff      	cmp	r3, #255	@ 0xff
 800ff0a:	d007      	beq.n	800ff1c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ff12:	3301      	adds	r3, #1
 800ff14:	b2da      	uxtb	r2, r3
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ff22:	2300      	movs	r3, #0
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	3714      	adds	r7, #20
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd90      	pop	{r4, r7, pc}
 800ff2c:	08016174 	.word	0x08016174
 800ff30:	08016814 	.word	0x08016814
 800ff34:	080161c8 	.word	0x080161c8

0800ff38 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d106      	bne.n	800ff54 <tcp_rexmit_fast+0x1c>
 800ff46:	4b2a      	ldr	r3, [pc, #168]	@ (800fff0 <tcp_rexmit_fast+0xb8>)
 800ff48:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800ff4c:	4929      	ldr	r1, [pc, #164]	@ (800fff4 <tcp_rexmit_fast+0xbc>)
 800ff4e:	482a      	ldr	r0, [pc, #168]	@ (800fff8 <tcp_rexmit_fast+0xc0>)
 800ff50:	f003 fa78 	bl	8013444 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d045      	beq.n	800ffe8 <tcp_rexmit_fast+0xb0>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	8b5b      	ldrh	r3, [r3, #26]
 800ff60:	f003 0304 	and.w	r3, r3, #4
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d13f      	bne.n	800ffe8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f7ff ff79 	bl	800fe60 <tcp_rexmit>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d139      	bne.n	800ffe8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ff80:	4293      	cmp	r3, r2
 800ff82:	bf28      	it	cs
 800ff84:	4613      	movcs	r3, r2
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	da00      	bge.n	800ff8e <tcp_rexmit_fast+0x56>
 800ff8c:	3301      	adds	r3, #1
 800ff8e:	105b      	asrs	r3, r3, #1
 800ff90:	b29a      	uxth	r2, r3
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffa4:	005b      	lsls	r3, r3, #1
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d206      	bcs.n	800ffb8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffae:	005b      	lsls	r3, r3, #1
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	0049      	lsls	r1, r1, #1
 800ffc6:	440b      	add	r3, r1
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	4413      	add	r3, r2
 800ffcc:	b29a      	uxth	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	8b5b      	ldrh	r3, [r3, #26]
 800ffd8:	f043 0304 	orr.w	r3, r3, #4
 800ffdc:	b29a      	uxth	r2, r3
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800ffe8:	bf00      	nop
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	08016174 	.word	0x08016174
 800fff4:	0801682c 	.word	0x0801682c
 800fff8:	080161c8 	.word	0x080161c8

0800fffc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b086      	sub	sp, #24
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	607b      	str	r3, [r7, #4]
 8010006:	460b      	mov	r3, r1
 8010008:	817b      	strh	r3, [r7, #10]
 801000a:	4613      	mov	r3, r2
 801000c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801000e:	897a      	ldrh	r2, [r7, #10]
 8010010:	893b      	ldrh	r3, [r7, #8]
 8010012:	4413      	add	r3, r2
 8010014:	b29b      	uxth	r3, r3
 8010016:	3314      	adds	r3, #20
 8010018:	b29b      	uxth	r3, r3
 801001a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801001e:	4619      	mov	r1, r3
 8010020:	2022      	movs	r0, #34	@ 0x22
 8010022:	f7f9 fcb5 	bl	8009990 <pbuf_alloc>
 8010026:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d04d      	beq.n	80100ca <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801002e:	897b      	ldrh	r3, [r7, #10]
 8010030:	3313      	adds	r3, #19
 8010032:	697a      	ldr	r2, [r7, #20]
 8010034:	8952      	ldrh	r2, [r2, #10]
 8010036:	4293      	cmp	r3, r2
 8010038:	db06      	blt.n	8010048 <tcp_output_alloc_header_common+0x4c>
 801003a:	4b26      	ldr	r3, [pc, #152]	@ (80100d4 <tcp_output_alloc_header_common+0xd8>)
 801003c:	f240 7223 	movw	r2, #1827	@ 0x723
 8010040:	4925      	ldr	r1, [pc, #148]	@ (80100d8 <tcp_output_alloc_header_common+0xdc>)
 8010042:	4826      	ldr	r0, [pc, #152]	@ (80100dc <tcp_output_alloc_header_common+0xe0>)
 8010044:	f003 f9fe 	bl	8013444 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801004e:	8c3b      	ldrh	r3, [r7, #32]
 8010050:	4618      	mov	r0, r3
 8010052:	f7f8 fb61 	bl	8008718 <lwip_htons>
 8010056:	4603      	mov	r3, r0
 8010058:	461a      	mov	r2, r3
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801005e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010060:	4618      	mov	r0, r3
 8010062:	f7f8 fb59 	bl	8008718 <lwip_htons>
 8010066:	4603      	mov	r3, r0
 8010068:	461a      	mov	r2, r3
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010074:	68f8      	ldr	r0, [r7, #12]
 8010076:	f7f8 fb65 	bl	8008744 <lwip_htonl>
 801007a:	4602      	mov	r2, r0
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010080:	897b      	ldrh	r3, [r7, #10]
 8010082:	089b      	lsrs	r3, r3, #2
 8010084:	b29b      	uxth	r3, r3
 8010086:	3305      	adds	r3, #5
 8010088:	b29b      	uxth	r3, r3
 801008a:	031b      	lsls	r3, r3, #12
 801008c:	b29a      	uxth	r2, r3
 801008e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010092:	b29b      	uxth	r3, r3
 8010094:	4313      	orrs	r3, r2
 8010096:	b29b      	uxth	r3, r3
 8010098:	4618      	mov	r0, r3
 801009a:	f7f8 fb3d 	bl	8008718 <lwip_htons>
 801009e:	4603      	mov	r3, r0
 80100a0:	461a      	mov	r2, r3
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80100a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7f8 fb35 	bl	8008718 <lwip_htons>
 80100ae:	4603      	mov	r3, r0
 80100b0:	461a      	mov	r2, r3
 80100b2:	693b      	ldr	r3, [r7, #16]
 80100b4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	2200      	movs	r2, #0
 80100ba:	741a      	strb	r2, [r3, #16]
 80100bc:	2200      	movs	r2, #0
 80100be:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	2200      	movs	r2, #0
 80100c4:	749a      	strb	r2, [r3, #18]
 80100c6:	2200      	movs	r2, #0
 80100c8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80100ca:	697b      	ldr	r3, [r7, #20]
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3718      	adds	r7, #24
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}
 80100d4:	08016174 	.word	0x08016174
 80100d8:	0801684c 	.word	0x0801684c
 80100dc:	080161c8 	.word	0x080161c8

080100e0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80100e0:	b5b0      	push	{r4, r5, r7, lr}
 80100e2:	b08a      	sub	sp, #40	@ 0x28
 80100e4:	af04      	add	r7, sp, #16
 80100e6:	60f8      	str	r0, [r7, #12]
 80100e8:	607b      	str	r3, [r7, #4]
 80100ea:	460b      	mov	r3, r1
 80100ec:	817b      	strh	r3, [r7, #10]
 80100ee:	4613      	mov	r3, r2
 80100f0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d106      	bne.n	8010106 <tcp_output_alloc_header+0x26>
 80100f8:	4b15      	ldr	r3, [pc, #84]	@ (8010150 <tcp_output_alloc_header+0x70>)
 80100fa:	f240 7242 	movw	r2, #1858	@ 0x742
 80100fe:	4915      	ldr	r1, [pc, #84]	@ (8010154 <tcp_output_alloc_header+0x74>)
 8010100:	4815      	ldr	r0, [pc, #84]	@ (8010158 <tcp_output_alloc_header+0x78>)
 8010102:	f003 f99f 	bl	8013444 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	8adb      	ldrh	r3, [r3, #22]
 801010e:	68fa      	ldr	r2, [r7, #12]
 8010110:	8b12      	ldrh	r2, [r2, #24]
 8010112:	68f9      	ldr	r1, [r7, #12]
 8010114:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8010116:	893d      	ldrh	r5, [r7, #8]
 8010118:	897c      	ldrh	r4, [r7, #10]
 801011a:	9103      	str	r1, [sp, #12]
 801011c:	2110      	movs	r1, #16
 801011e:	9102      	str	r1, [sp, #8]
 8010120:	9201      	str	r2, [sp, #4]
 8010122:	9300      	str	r3, [sp, #0]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	462a      	mov	r2, r5
 8010128:	4621      	mov	r1, r4
 801012a:	f7ff ff67 	bl	800fffc <tcp_output_alloc_header_common>
 801012e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d006      	beq.n	8010144 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801013a:	68fa      	ldr	r2, [r7, #12]
 801013c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801013e:	441a      	add	r2, r3
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8010144:	697b      	ldr	r3, [r7, #20]
}
 8010146:	4618      	mov	r0, r3
 8010148:	3718      	adds	r7, #24
 801014a:	46bd      	mov	sp, r7
 801014c:	bdb0      	pop	{r4, r5, r7, pc}
 801014e:	bf00      	nop
 8010150:	08016174 	.word	0x08016174
 8010154:	0801687c 	.word	0x0801687c
 8010158:	080161c8 	.word	0x080161c8

0801015c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b088      	sub	sp, #32
 8010160:	af00      	add	r7, sp, #0
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	60b9      	str	r1, [r7, #8]
 8010166:	4611      	mov	r1, r2
 8010168:	461a      	mov	r2, r3
 801016a:	460b      	mov	r3, r1
 801016c:	71fb      	strb	r3, [r7, #7]
 801016e:	4613      	mov	r3, r2
 8010170:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010172:	2300      	movs	r3, #0
 8010174:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d106      	bne.n	801018a <tcp_output_fill_options+0x2e>
 801017c:	4b12      	ldr	r3, [pc, #72]	@ (80101c8 <tcp_output_fill_options+0x6c>)
 801017e:	f240 7256 	movw	r2, #1878	@ 0x756
 8010182:	4912      	ldr	r1, [pc, #72]	@ (80101cc <tcp_output_fill_options+0x70>)
 8010184:	4812      	ldr	r0, [pc, #72]	@ (80101d0 <tcp_output_fill_options+0x74>)
 8010186:	f003 f95d 	bl	8013444 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010190:	69bb      	ldr	r3, [r7, #24]
 8010192:	3314      	adds	r3, #20
 8010194:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010196:	8bfb      	ldrh	r3, [r7, #30]
 8010198:	009b      	lsls	r3, r3, #2
 801019a:	461a      	mov	r2, r3
 801019c:	79fb      	ldrb	r3, [r7, #7]
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	f003 0304 	and.w	r3, r3, #4
 80101a4:	4413      	add	r3, r2
 80101a6:	3314      	adds	r3, #20
 80101a8:	69ba      	ldr	r2, [r7, #24]
 80101aa:	4413      	add	r3, r2
 80101ac:	697a      	ldr	r2, [r7, #20]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d006      	beq.n	80101c0 <tcp_output_fill_options+0x64>
 80101b2:	4b05      	ldr	r3, [pc, #20]	@ (80101c8 <tcp_output_fill_options+0x6c>)
 80101b4:	f240 7275 	movw	r2, #1909	@ 0x775
 80101b8:	4906      	ldr	r1, [pc, #24]	@ (80101d4 <tcp_output_fill_options+0x78>)
 80101ba:	4805      	ldr	r0, [pc, #20]	@ (80101d0 <tcp_output_fill_options+0x74>)
 80101bc:	f003 f942 	bl	8013444 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80101c0:	bf00      	nop
 80101c2:	3720      	adds	r7, #32
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	08016174 	.word	0x08016174
 80101cc:	080168a4 	.word	0x080168a4
 80101d0:	080161c8 	.word	0x080161c8
 80101d4:	0801679c 	.word	0x0801679c

080101d8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b08a      	sub	sp, #40	@ 0x28
 80101dc:	af04      	add	r7, sp, #16
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	607a      	str	r2, [r7, #4]
 80101e4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d106      	bne.n	80101fa <tcp_output_control_segment+0x22>
 80101ec:	4b1c      	ldr	r3, [pc, #112]	@ (8010260 <tcp_output_control_segment+0x88>)
 80101ee:	f240 7287 	movw	r2, #1927	@ 0x787
 80101f2:	491c      	ldr	r1, [pc, #112]	@ (8010264 <tcp_output_control_segment+0x8c>)
 80101f4:	481c      	ldr	r0, [pc, #112]	@ (8010268 <tcp_output_control_segment+0x90>)
 80101f6:	f003 f925 	bl	8013444 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80101fa:	683a      	ldr	r2, [r7, #0]
 80101fc:	6879      	ldr	r1, [r7, #4]
 80101fe:	68f8      	ldr	r0, [r7, #12]
 8010200:	f7fe faea 	bl	800e7d8 <tcp_route>
 8010204:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d102      	bne.n	8010212 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801020c:	23fc      	movs	r3, #252	@ 0xfc
 801020e:	75fb      	strb	r3, [r7, #23]
 8010210:	e01c      	b.n	801024c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d006      	beq.n	8010226 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	7adb      	ldrb	r3, [r3, #11]
 801021c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	7a9b      	ldrb	r3, [r3, #10]
 8010222:	757b      	strb	r3, [r7, #21]
 8010224:	e003      	b.n	801022e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010226:	23ff      	movs	r3, #255	@ 0xff
 8010228:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801022a:	2300      	movs	r3, #0
 801022c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801022e:	7dba      	ldrb	r2, [r7, #22]
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	9302      	str	r3, [sp, #8]
 8010234:	2306      	movs	r3, #6
 8010236:	9301      	str	r3, [sp, #4]
 8010238:	7d7b      	ldrb	r3, [r7, #21]
 801023a:	9300      	str	r3, [sp, #0]
 801023c:	4613      	mov	r3, r2
 801023e:	683a      	ldr	r2, [r7, #0]
 8010240:	6879      	ldr	r1, [r7, #4]
 8010242:	68b8      	ldr	r0, [r7, #8]
 8010244:	f001 ffd0 	bl	80121e8 <ip4_output_if>
 8010248:	4603      	mov	r3, r0
 801024a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801024c:	68b8      	ldr	r0, [r7, #8]
 801024e:	f7f9 fe81 	bl	8009f54 <pbuf_free>
  return err;
 8010252:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010256:	4618      	mov	r0, r3
 8010258:	3718      	adds	r7, #24
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	08016174 	.word	0x08016174
 8010264:	080168cc 	.word	0x080168cc
 8010268:	080161c8 	.word	0x080161c8

0801026c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801026c:	b590      	push	{r4, r7, lr}
 801026e:	b08b      	sub	sp, #44	@ 0x2c
 8010270:	af04      	add	r7, sp, #16
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	607a      	str	r2, [r7, #4]
 8010278:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d106      	bne.n	801028e <tcp_rst+0x22>
 8010280:	4b1f      	ldr	r3, [pc, #124]	@ (8010300 <tcp_rst+0x94>)
 8010282:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8010286:	491f      	ldr	r1, [pc, #124]	@ (8010304 <tcp_rst+0x98>)
 8010288:	481f      	ldr	r0, [pc, #124]	@ (8010308 <tcp_rst+0x9c>)
 801028a:	f003 f8db 	bl	8013444 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801028e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010290:	2b00      	cmp	r3, #0
 8010292:	d106      	bne.n	80102a2 <tcp_rst+0x36>
 8010294:	4b1a      	ldr	r3, [pc, #104]	@ (8010300 <tcp_rst+0x94>)
 8010296:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801029a:	491c      	ldr	r1, [pc, #112]	@ (801030c <tcp_rst+0xa0>)
 801029c:	481a      	ldr	r0, [pc, #104]	@ (8010308 <tcp_rst+0x9c>)
 801029e:	f003 f8d1 	bl	8013444 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80102a2:	2300      	movs	r3, #0
 80102a4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80102a6:	f246 0308 	movw	r3, #24584	@ 0x6008
 80102aa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80102ac:	7dfb      	ldrb	r3, [r7, #23]
 80102ae:	b29c      	uxth	r4, r3
 80102b0:	68b8      	ldr	r0, [r7, #8]
 80102b2:	f7f8 fa47 	bl	8008744 <lwip_htonl>
 80102b6:	4602      	mov	r2, r0
 80102b8:	8abb      	ldrh	r3, [r7, #20]
 80102ba:	9303      	str	r3, [sp, #12]
 80102bc:	2314      	movs	r3, #20
 80102be:	9302      	str	r3, [sp, #8]
 80102c0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80102c2:	9301      	str	r3, [sp, #4]
 80102c4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	4613      	mov	r3, r2
 80102ca:	2200      	movs	r2, #0
 80102cc:	4621      	mov	r1, r4
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f7ff fe94 	bl	800fffc <tcp_output_alloc_header_common>
 80102d4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d00c      	beq.n	80102f6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80102dc:	7dfb      	ldrb	r3, [r7, #23]
 80102de:	2200      	movs	r2, #0
 80102e0:	6939      	ldr	r1, [r7, #16]
 80102e2:	68f8      	ldr	r0, [r7, #12]
 80102e4:	f7ff ff3a 	bl	801015c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80102e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102ea:	683a      	ldr	r2, [r7, #0]
 80102ec:	6939      	ldr	r1, [r7, #16]
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f7ff ff72 	bl	80101d8 <tcp_output_control_segment>
 80102f4:	e000      	b.n	80102f8 <tcp_rst+0x8c>
    return;
 80102f6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80102f8:	371c      	adds	r7, #28
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd90      	pop	{r4, r7, pc}
 80102fe:	bf00      	nop
 8010300:	08016174 	.word	0x08016174
 8010304:	080168f8 	.word	0x080168f8
 8010308:	080161c8 	.word	0x080161c8
 801030c:	08016914 	.word	0x08016914

08010310 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010310:	b590      	push	{r4, r7, lr}
 8010312:	b087      	sub	sp, #28
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010318:	2300      	movs	r3, #0
 801031a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801031c:	2300      	movs	r3, #0
 801031e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d106      	bne.n	8010334 <tcp_send_empty_ack+0x24>
 8010326:	4b28      	ldr	r3, [pc, #160]	@ (80103c8 <tcp_send_empty_ack+0xb8>)
 8010328:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801032c:	4927      	ldr	r1, [pc, #156]	@ (80103cc <tcp_send_empty_ack+0xbc>)
 801032e:	4828      	ldr	r0, [pc, #160]	@ (80103d0 <tcp_send_empty_ack+0xc0>)
 8010330:	f003 f888 	bl	8013444 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010334:	7dfb      	ldrb	r3, [r7, #23]
 8010336:	009b      	lsls	r3, r3, #2
 8010338:	b2db      	uxtb	r3, r3
 801033a:	f003 0304 	and.w	r3, r3, #4
 801033e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010340:	7d7b      	ldrb	r3, [r7, #21]
 8010342:	b29c      	uxth	r4, r3
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010348:	4618      	mov	r0, r3
 801034a:	f7f8 f9fb 	bl	8008744 <lwip_htonl>
 801034e:	4603      	mov	r3, r0
 8010350:	2200      	movs	r2, #0
 8010352:	4621      	mov	r1, r4
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f7ff fec3 	bl	80100e0 <tcp_output_alloc_header>
 801035a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d109      	bne.n	8010376 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	8b5b      	ldrh	r3, [r3, #26]
 8010366:	f043 0303 	orr.w	r3, r3, #3
 801036a:	b29a      	uxth	r2, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010370:	f06f 0301 	mvn.w	r3, #1
 8010374:	e023      	b.n	80103be <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010376:	7dbb      	ldrb	r3, [r7, #22]
 8010378:	7dfa      	ldrb	r2, [r7, #23]
 801037a:	6939      	ldr	r1, [r7, #16]
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f7ff feed 	bl	801015c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	3304      	adds	r3, #4
 8010388:	6939      	ldr	r1, [r7, #16]
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f7ff ff24 	bl	80101d8 <tcp_output_control_segment>
 8010390:	4603      	mov	r3, r0
 8010392:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d007      	beq.n	80103ac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	8b5b      	ldrh	r3, [r3, #26]
 80103a0:	f043 0303 	orr.w	r3, r3, #3
 80103a4:	b29a      	uxth	r2, r3
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	835a      	strh	r2, [r3, #26]
 80103aa:	e006      	b.n	80103ba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	8b5b      	ldrh	r3, [r3, #26]
 80103b0:	f023 0303 	bic.w	r3, r3, #3
 80103b4:	b29a      	uxth	r2, r3
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80103ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80103be:	4618      	mov	r0, r3
 80103c0:	371c      	adds	r7, #28
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd90      	pop	{r4, r7, pc}
 80103c6:	bf00      	nop
 80103c8:	08016174 	.word	0x08016174
 80103cc:	08016930 	.word	0x08016930
 80103d0:	080161c8 	.word	0x080161c8

080103d4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80103d4:	b590      	push	{r4, r7, lr}
 80103d6:	b087      	sub	sp, #28
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80103dc:	2300      	movs	r3, #0
 80103de:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d106      	bne.n	80103f4 <tcp_keepalive+0x20>
 80103e6:	4b18      	ldr	r3, [pc, #96]	@ (8010448 <tcp_keepalive+0x74>)
 80103e8:	f640 0224 	movw	r2, #2084	@ 0x824
 80103ec:	4917      	ldr	r1, [pc, #92]	@ (801044c <tcp_keepalive+0x78>)
 80103ee:	4818      	ldr	r0, [pc, #96]	@ (8010450 <tcp_keepalive+0x7c>)
 80103f0:	f003 f828 	bl	8013444 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80103f4:	7dfb      	ldrb	r3, [r7, #23]
 80103f6:	b29c      	uxth	r4, r3
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103fc:	3b01      	subs	r3, #1
 80103fe:	4618      	mov	r0, r3
 8010400:	f7f8 f9a0 	bl	8008744 <lwip_htonl>
 8010404:	4603      	mov	r3, r0
 8010406:	2200      	movs	r2, #0
 8010408:	4621      	mov	r1, r4
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f7ff fe68 	bl	80100e0 <tcp_output_alloc_header>
 8010410:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d102      	bne.n	801041e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010418:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801041c:	e010      	b.n	8010440 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801041e:	7dfb      	ldrb	r3, [r7, #23]
 8010420:	2200      	movs	r2, #0
 8010422:	6939      	ldr	r1, [r7, #16]
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f7ff fe99 	bl	801015c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	3304      	adds	r3, #4
 8010430:	6939      	ldr	r1, [r7, #16]
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7ff fed0 	bl	80101d8 <tcp_output_control_segment>
 8010438:	4603      	mov	r3, r0
 801043a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801043c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010440:	4618      	mov	r0, r3
 8010442:	371c      	adds	r7, #28
 8010444:	46bd      	mov	sp, r7
 8010446:	bd90      	pop	{r4, r7, pc}
 8010448:	08016174 	.word	0x08016174
 801044c:	08016950 	.word	0x08016950
 8010450:	080161c8 	.word	0x080161c8

08010454 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010454:	b590      	push	{r4, r7, lr}
 8010456:	b08b      	sub	sp, #44	@ 0x2c
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801045c:	2300      	movs	r3, #0
 801045e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d106      	bne.n	8010476 <tcp_zero_window_probe+0x22>
 8010468:	4b4c      	ldr	r3, [pc, #304]	@ (801059c <tcp_zero_window_probe+0x148>)
 801046a:	f640 024f 	movw	r2, #2127	@ 0x84f
 801046e:	494c      	ldr	r1, [pc, #304]	@ (80105a0 <tcp_zero_window_probe+0x14c>)
 8010470:	484c      	ldr	r0, [pc, #304]	@ (80105a4 <tcp_zero_window_probe+0x150>)
 8010472:	f002 ffe7 	bl	8013444 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801047a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801047c:	6a3b      	ldr	r3, [r7, #32]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d101      	bne.n	8010486 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010482:	2300      	movs	r3, #0
 8010484:	e086      	b.n	8010594 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801048c:	2bff      	cmp	r3, #255	@ 0xff
 801048e:	d007      	beq.n	80104a0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010496:	3301      	adds	r3, #1
 8010498:	b2da      	uxtb	r2, r3
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80104a0:	6a3b      	ldr	r3, [r7, #32]
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	899b      	ldrh	r3, [r3, #12]
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7f8 f935 	bl	8008718 <lwip_htons>
 80104ae:	4603      	mov	r3, r0
 80104b0:	b2db      	uxtb	r3, r3
 80104b2:	f003 0301 	and.w	r3, r3, #1
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d005      	beq.n	80104c6 <tcp_zero_window_probe+0x72>
 80104ba:	6a3b      	ldr	r3, [r7, #32]
 80104bc:	891b      	ldrh	r3, [r3, #8]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d101      	bne.n	80104c6 <tcp_zero_window_probe+0x72>
 80104c2:	2301      	movs	r3, #1
 80104c4:	e000      	b.n	80104c8 <tcp_zero_window_probe+0x74>
 80104c6:	2300      	movs	r3, #0
 80104c8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80104ca:	7ffb      	ldrb	r3, [r7, #31]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	bf0c      	ite	eq
 80104d0:	2301      	moveq	r3, #1
 80104d2:	2300      	movne	r3, #0
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80104d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104dc:	b299      	uxth	r1, r3
 80104de:	6a3b      	ldr	r3, [r7, #32]
 80104e0:	68db      	ldr	r3, [r3, #12]
 80104e2:	685b      	ldr	r3, [r3, #4]
 80104e4:	8bba      	ldrh	r2, [r7, #28]
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f7ff fdfa 	bl	80100e0 <tcp_output_alloc_header>
 80104ec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d102      	bne.n	80104fa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80104f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80104f8:	e04c      	b.n	8010594 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010500:	7ffb      	ldrb	r3, [r7, #31]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d011      	beq.n	801052a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	899b      	ldrh	r3, [r3, #12]
 801050a:	b29b      	uxth	r3, r3
 801050c:	b21b      	sxth	r3, r3
 801050e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010512:	b21c      	sxth	r4, r3
 8010514:	2011      	movs	r0, #17
 8010516:	f7f8 f8ff 	bl	8008718 <lwip_htons>
 801051a:	4603      	mov	r3, r0
 801051c:	b21b      	sxth	r3, r3
 801051e:	4323      	orrs	r3, r4
 8010520:	b21b      	sxth	r3, r3
 8010522:	b29a      	uxth	r2, r3
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	819a      	strh	r2, [r3, #12]
 8010528:	e010      	b.n	801054c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801052a:	69bb      	ldr	r3, [r7, #24]
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	3314      	adds	r3, #20
 8010530:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010532:	6a3b      	ldr	r3, [r7, #32]
 8010534:	6858      	ldr	r0, [r3, #4]
 8010536:	6a3b      	ldr	r3, [r7, #32]
 8010538:	685b      	ldr	r3, [r3, #4]
 801053a:	891a      	ldrh	r2, [r3, #8]
 801053c:	6a3b      	ldr	r3, [r7, #32]
 801053e:	891b      	ldrh	r3, [r3, #8]
 8010540:	1ad3      	subs	r3, r2, r3
 8010542:	b29b      	uxth	r3, r3
 8010544:	2201      	movs	r2, #1
 8010546:	6939      	ldr	r1, [r7, #16]
 8010548:	f7f9 feee 	bl	800a328 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801054c:	6a3b      	ldr	r3, [r7, #32]
 801054e:	68db      	ldr	r3, [r3, #12]
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	4618      	mov	r0, r3
 8010554:	f7f8 f8f6 	bl	8008744 <lwip_htonl>
 8010558:	4603      	mov	r3, r0
 801055a:	3301      	adds	r3, #1
 801055c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	1ad3      	subs	r3, r2, r3
 8010566:	2b00      	cmp	r3, #0
 8010568:	da02      	bge.n	8010570 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010574:	2200      	movs	r2, #0
 8010576:	69b9      	ldr	r1, [r7, #24]
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f7ff fdef 	bl	801015c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	3304      	adds	r3, #4
 8010584:	69b9      	ldr	r1, [r7, #24]
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f7ff fe26 	bl	80101d8 <tcp_output_control_segment>
 801058c:	4603      	mov	r3, r0
 801058e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010590:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010594:	4618      	mov	r0, r3
 8010596:	372c      	adds	r7, #44	@ 0x2c
 8010598:	46bd      	mov	sp, r7
 801059a:	bd90      	pop	{r4, r7, pc}
 801059c:	08016174 	.word	0x08016174
 80105a0:	0801696c 	.word	0x0801696c
 80105a4:	080161c8 	.word	0x080161c8

080105a8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80105b0:	f7fa f80c 	bl	800a5cc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80105b4:	4b0a      	ldr	r3, [pc, #40]	@ (80105e0 <tcpip_tcp_timer+0x38>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d103      	bne.n	80105c4 <tcpip_tcp_timer+0x1c>
 80105bc:	4b09      	ldr	r3, [pc, #36]	@ (80105e4 <tcpip_tcp_timer+0x3c>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d005      	beq.n	80105d0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80105c4:	2200      	movs	r2, #0
 80105c6:	4908      	ldr	r1, [pc, #32]	@ (80105e8 <tcpip_tcp_timer+0x40>)
 80105c8:	20fa      	movs	r0, #250	@ 0xfa
 80105ca:	f000 f8f3 	bl	80107b4 <sys_timeout>
 80105ce:	e003      	b.n	80105d8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80105d0:	4b06      	ldr	r3, [pc, #24]	@ (80105ec <tcpip_tcp_timer+0x44>)
 80105d2:	2200      	movs	r2, #0
 80105d4:	601a      	str	r2, [r3, #0]
  }
}
 80105d6:	bf00      	nop
 80105d8:	bf00      	nop
 80105da:	3708      	adds	r7, #8
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}
 80105e0:	24043208 	.word	0x24043208
 80105e4:	2404320c 	.word	0x2404320c
 80105e8:	080105a9 	.word	0x080105a9
 80105ec:	24043254 	.word	0x24043254

080105f0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80105f4:	4b0a      	ldr	r3, [pc, #40]	@ (8010620 <tcp_timer_needed+0x30>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d10f      	bne.n	801061c <tcp_timer_needed+0x2c>
 80105fc:	4b09      	ldr	r3, [pc, #36]	@ (8010624 <tcp_timer_needed+0x34>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d103      	bne.n	801060c <tcp_timer_needed+0x1c>
 8010604:	4b08      	ldr	r3, [pc, #32]	@ (8010628 <tcp_timer_needed+0x38>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d007      	beq.n	801061c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801060c:	4b04      	ldr	r3, [pc, #16]	@ (8010620 <tcp_timer_needed+0x30>)
 801060e:	2201      	movs	r2, #1
 8010610:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010612:	2200      	movs	r2, #0
 8010614:	4905      	ldr	r1, [pc, #20]	@ (801062c <tcp_timer_needed+0x3c>)
 8010616:	20fa      	movs	r0, #250	@ 0xfa
 8010618:	f000 f8cc 	bl	80107b4 <sys_timeout>
  }
}
 801061c:	bf00      	nop
 801061e:	bd80      	pop	{r7, pc}
 8010620:	24043254 	.word	0x24043254
 8010624:	24043208 	.word	0x24043208
 8010628:	2404320c 	.word	0x2404320c
 801062c:	080105a9 	.word	0x080105a9

08010630 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b086      	sub	sp, #24
 8010634:	af00      	add	r7, sp, #0
 8010636:	60f8      	str	r0, [r7, #12]
 8010638:	60b9      	str	r1, [r7, #8]
 801063a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801063c:	2006      	movs	r0, #6
 801063e:	f7f8 fda5 	bl	800918c <memp_malloc>
 8010642:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d109      	bne.n	801065e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d151      	bne.n	80106f4 <sys_timeout_abs+0xc4>
 8010650:	4b2a      	ldr	r3, [pc, #168]	@ (80106fc <sys_timeout_abs+0xcc>)
 8010652:	22be      	movs	r2, #190	@ 0xbe
 8010654:	492a      	ldr	r1, [pc, #168]	@ (8010700 <sys_timeout_abs+0xd0>)
 8010656:	482b      	ldr	r0, [pc, #172]	@ (8010704 <sys_timeout_abs+0xd4>)
 8010658:	f002 fef4 	bl	8013444 <iprintf>
    return;
 801065c:	e04a      	b.n	80106f4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	2200      	movs	r2, #0
 8010662:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	68ba      	ldr	r2, [r7, #8]
 8010668:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	68fa      	ldr	r2, [r7, #12]
 8010674:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010676:	4b24      	ldr	r3, [pc, #144]	@ (8010708 <sys_timeout_abs+0xd8>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d103      	bne.n	8010686 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801067e:	4a22      	ldr	r2, [pc, #136]	@ (8010708 <sys_timeout_abs+0xd8>)
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	6013      	str	r3, [r2, #0]
    return;
 8010684:	e037      	b.n	80106f6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	685a      	ldr	r2, [r3, #4]
 801068a:	4b1f      	ldr	r3, [pc, #124]	@ (8010708 <sys_timeout_abs+0xd8>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	1ad3      	subs	r3, r2, r3
 8010692:	0fdb      	lsrs	r3, r3, #31
 8010694:	f003 0301 	and.w	r3, r3, #1
 8010698:	b2db      	uxtb	r3, r3
 801069a:	2b00      	cmp	r3, #0
 801069c:	d007      	beq.n	80106ae <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801069e:	4b1a      	ldr	r3, [pc, #104]	@ (8010708 <sys_timeout_abs+0xd8>)
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80106a6:	4a18      	ldr	r2, [pc, #96]	@ (8010708 <sys_timeout_abs+0xd8>)
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	6013      	str	r3, [r2, #0]
 80106ac:	e023      	b.n	80106f6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80106ae:	4b16      	ldr	r3, [pc, #88]	@ (8010708 <sys_timeout_abs+0xd8>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	617b      	str	r3, [r7, #20]
 80106b4:	e01a      	b.n	80106ec <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d00b      	beq.n	80106d6 <sys_timeout_abs+0xa6>
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	685a      	ldr	r2, [r3, #4]
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	1ad3      	subs	r3, r2, r3
 80106ca:	0fdb      	lsrs	r3, r3, #31
 80106cc:	f003 0301 	and.w	r3, r3, #1
 80106d0:	b2db      	uxtb	r3, r3
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d007      	beq.n	80106e6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	693a      	ldr	r2, [r7, #16]
 80106e2:	601a      	str	r2, [r3, #0]
        break;
 80106e4:	e007      	b.n	80106f6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	617b      	str	r3, [r7, #20]
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d1e1      	bne.n	80106b6 <sys_timeout_abs+0x86>
 80106f2:	e000      	b.n	80106f6 <sys_timeout_abs+0xc6>
    return;
 80106f4:	bf00      	nop
      }
    }
  }
}
 80106f6:	3718      	adds	r7, #24
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	08016990 	.word	0x08016990
 8010700:	080169c4 	.word	0x080169c4
 8010704:	08016a04 	.word	0x08016a04
 8010708:	2404324c 	.word	0x2404324c

0801070c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b086      	sub	sp, #24
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	4798      	blx	r3

  now = sys_now();
 801071e:	f7f6 f96d 	bl	80069fc <sys_now>
 8010722:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	681a      	ldr	r2, [r3, #0]
 8010728:	4b0f      	ldr	r3, [pc, #60]	@ (8010768 <lwip_cyclic_timer+0x5c>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4413      	add	r3, r2
 801072e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010730:	68fa      	ldr	r2, [r7, #12]
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	1ad3      	subs	r3, r2, r3
 8010736:	0fdb      	lsrs	r3, r3, #31
 8010738:	f003 0301 	and.w	r3, r3, #1
 801073c:	b2db      	uxtb	r3, r3
 801073e:	2b00      	cmp	r3, #0
 8010740:	d009      	beq.n	8010756 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	681a      	ldr	r2, [r3, #0]
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	4413      	add	r3, r2
 801074a:	687a      	ldr	r2, [r7, #4]
 801074c:	4907      	ldr	r1, [pc, #28]	@ (801076c <lwip_cyclic_timer+0x60>)
 801074e:	4618      	mov	r0, r3
 8010750:	f7ff ff6e 	bl	8010630 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010754:	e004      	b.n	8010760 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	4904      	ldr	r1, [pc, #16]	@ (801076c <lwip_cyclic_timer+0x60>)
 801075a:	68f8      	ldr	r0, [r7, #12]
 801075c:	f7ff ff68 	bl	8010630 <sys_timeout_abs>
}
 8010760:	bf00      	nop
 8010762:	3718      	adds	r7, #24
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	24043250 	.word	0x24043250
 801076c:	0801070d 	.word	0x0801070d

08010770 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b082      	sub	sp, #8
 8010774:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010776:	2301      	movs	r3, #1
 8010778:	607b      	str	r3, [r7, #4]
 801077a:	e00e      	b.n	801079a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801077c:	4a0b      	ldr	r2, [pc, #44]	@ (80107ac <sys_timeouts_init+0x3c>)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	00db      	lsls	r3, r3, #3
 8010788:	4a08      	ldr	r2, [pc, #32]	@ (80107ac <sys_timeouts_init+0x3c>)
 801078a:	4413      	add	r3, r2
 801078c:	461a      	mov	r2, r3
 801078e:	4908      	ldr	r1, [pc, #32]	@ (80107b0 <sys_timeouts_init+0x40>)
 8010790:	f000 f810 	bl	80107b4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	3301      	adds	r3, #1
 8010798:	607b      	str	r3, [r7, #4]
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2b02      	cmp	r3, #2
 801079e:	d9ed      	bls.n	801077c <sys_timeouts_init+0xc>
  }
}
 80107a0:	bf00      	nop
 80107a2:	bf00      	nop
 80107a4:	3708      	adds	r7, #8
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}
 80107aa:	bf00      	nop
 80107ac:	08017584 	.word	0x08017584
 80107b0:	0801070d 	.word	0x0801070d

080107b4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b086      	sub	sp, #24
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80107c6:	d306      	bcc.n	80107d6 <sys_timeout+0x22>
 80107c8:	4b0a      	ldr	r3, [pc, #40]	@ (80107f4 <sys_timeout+0x40>)
 80107ca:	f240 1229 	movw	r2, #297	@ 0x129
 80107ce:	490a      	ldr	r1, [pc, #40]	@ (80107f8 <sys_timeout+0x44>)
 80107d0:	480a      	ldr	r0, [pc, #40]	@ (80107fc <sys_timeout+0x48>)
 80107d2:	f002 fe37 	bl	8013444 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80107d6:	f7f6 f911 	bl	80069fc <sys_now>
 80107da:	4602      	mov	r2, r0
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	4413      	add	r3, r2
 80107e0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80107e2:	687a      	ldr	r2, [r7, #4]
 80107e4:	68b9      	ldr	r1, [r7, #8]
 80107e6:	6978      	ldr	r0, [r7, #20]
 80107e8:	f7ff ff22 	bl	8010630 <sys_timeout_abs>
#endif
}
 80107ec:	bf00      	nop
 80107ee:	3718      	adds	r7, #24
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	08016990 	.word	0x08016990
 80107f8:	08016a2c 	.word	0x08016a2c
 80107fc:	08016a04 	.word	0x08016a04

08010800 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801080a:	4b19      	ldr	r3, [pc, #100]	@ (8010870 <sys_untimeout+0x70>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d029      	beq.n	8010866 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8010812:	4b17      	ldr	r3, [pc, #92]	@ (8010870 <sys_untimeout+0x70>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	60bb      	str	r3, [r7, #8]
 8010818:	2300      	movs	r3, #0
 801081a:	60fb      	str	r3, [r7, #12]
 801081c:	e01f      	b.n	801085e <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	689b      	ldr	r3, [r3, #8]
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	429a      	cmp	r2, r3
 8010826:	d115      	bne.n	8010854 <sys_untimeout+0x54>
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	683a      	ldr	r2, [r7, #0]
 801082e:	429a      	cmp	r2, r3
 8010830:	d110      	bne.n	8010854 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d104      	bne.n	8010842 <sys_untimeout+0x42>
        next_timeout = t->next;
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	4a0c      	ldr	r2, [pc, #48]	@ (8010870 <sys_untimeout+0x70>)
 801083e:	6013      	str	r3, [r2, #0]
 8010840:	e003      	b.n	801084a <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801084a:	68b9      	ldr	r1, [r7, #8]
 801084c:	2006      	movs	r0, #6
 801084e:	f7f8 fd0d 	bl	800926c <memp_free>
      return;
 8010852:	e009      	b.n	8010868 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	60fb      	str	r3, [r7, #12]
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	60bb      	str	r3, [r7, #8]
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d1dc      	bne.n	801081e <sys_untimeout+0x1e>
    }
  }
  return;
 8010864:	e000      	b.n	8010868 <sys_untimeout+0x68>
    return;
 8010866:	bf00      	nop
}
 8010868:	3710      	adds	r7, #16
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	2404324c 	.word	0x2404324c

08010874 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b084      	sub	sp, #16
 8010878:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801087a:	f7f6 f8bf 	bl	80069fc <sys_now>
 801087e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010880:	4b1a      	ldr	r3, [pc, #104]	@ (80108ec <sys_check_timeouts+0x78>)
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	b2db      	uxtb	r3, r3
 8010886:	2b00      	cmp	r3, #0
 8010888:	d001      	beq.n	801088e <sys_check_timeouts+0x1a>
 801088a:	f7f9 f82b 	bl	80098e4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801088e:	4b18      	ldr	r3, [pc, #96]	@ (80108f0 <sys_check_timeouts+0x7c>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d022      	beq.n	80108e0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	68fa      	ldr	r2, [r7, #12]
 80108a0:	1ad3      	subs	r3, r2, r3
 80108a2:	0fdb      	lsrs	r3, r3, #31
 80108a4:	f003 0301 	and.w	r3, r3, #1
 80108a8:	b2db      	uxtb	r3, r3
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d11a      	bne.n	80108e4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	4a0f      	ldr	r2, [pc, #60]	@ (80108f0 <sys_check_timeouts+0x7c>)
 80108b4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	689b      	ldr	r3, [r3, #8]
 80108ba:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	68db      	ldr	r3, [r3, #12]
 80108c0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	4a0b      	ldr	r2, [pc, #44]	@ (80108f4 <sys_check_timeouts+0x80>)
 80108c8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80108ca:	68b9      	ldr	r1, [r7, #8]
 80108cc:	2006      	movs	r0, #6
 80108ce:	f7f8 fccd 	bl	800926c <memp_free>
    if (handler != NULL) {
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d0d3      	beq.n	8010880 <sys_check_timeouts+0xc>
      handler(arg);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6838      	ldr	r0, [r7, #0]
 80108dc:	4798      	blx	r3
  do {
 80108de:	e7cf      	b.n	8010880 <sys_check_timeouts+0xc>
      return;
 80108e0:	bf00      	nop
 80108e2:	e000      	b.n	80108e6 <sys_check_timeouts+0x72>
      return;
 80108e4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80108e6:	3710      	adds	r7, #16
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	240431f9 	.word	0x240431f9
 80108f0:	2404324c 	.word	0x2404324c
 80108f4:	24043250 	.word	0x24043250

080108f8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80108fc:	f002 fca2 	bl	8013244 <rand>
 8010900:	4603      	mov	r3, r0
 8010902:	b29b      	uxth	r3, r3
 8010904:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010908:	b29b      	uxth	r3, r3
 801090a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801090e:	b29a      	uxth	r2, r3
 8010910:	4b01      	ldr	r3, [pc, #4]	@ (8010918 <udp_init+0x20>)
 8010912:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010914:	bf00      	nop
 8010916:	bd80      	pop	{r7, pc}
 8010918:	2400002c 	.word	0x2400002c

0801091c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b084      	sub	sp, #16
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	4613      	mov	r3, r2
 8010928:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d105      	bne.n	801093c <udp_input_local_match+0x20>
 8010930:	4b27      	ldr	r3, [pc, #156]	@ (80109d0 <udp_input_local_match+0xb4>)
 8010932:	2287      	movs	r2, #135	@ 0x87
 8010934:	4927      	ldr	r1, [pc, #156]	@ (80109d4 <udp_input_local_match+0xb8>)
 8010936:	4828      	ldr	r0, [pc, #160]	@ (80109d8 <udp_input_local_match+0xbc>)
 8010938:	f002 fd84 	bl	8013444 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d105      	bne.n	801094e <udp_input_local_match+0x32>
 8010942:	4b23      	ldr	r3, [pc, #140]	@ (80109d0 <udp_input_local_match+0xb4>)
 8010944:	2288      	movs	r2, #136	@ 0x88
 8010946:	4925      	ldr	r1, [pc, #148]	@ (80109dc <udp_input_local_match+0xc0>)
 8010948:	4823      	ldr	r0, [pc, #140]	@ (80109d8 <udp_input_local_match+0xbc>)
 801094a:	f002 fd7b 	bl	8013444 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	7a1b      	ldrb	r3, [r3, #8]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d00b      	beq.n	801096e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	7a1a      	ldrb	r2, [r3, #8]
 801095a:	4b21      	ldr	r3, [pc, #132]	@ (80109e0 <udp_input_local_match+0xc4>)
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010962:	3301      	adds	r3, #1
 8010964:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010966:	429a      	cmp	r2, r3
 8010968:	d001      	beq.n	801096e <udp_input_local_match+0x52>
    return 0;
 801096a:	2300      	movs	r3, #0
 801096c:	e02b      	b.n	80109c6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801096e:	79fb      	ldrb	r3, [r7, #7]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d018      	beq.n	80109a6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d013      	beq.n	80109a2 <udp_input_local_match+0x86>
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d00f      	beq.n	80109a2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010982:	4b17      	ldr	r3, [pc, #92]	@ (80109e0 <udp_input_local_match+0xc4>)
 8010984:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010986:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801098a:	d00a      	beq.n	80109a2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	4b13      	ldr	r3, [pc, #76]	@ (80109e0 <udp_input_local_match+0xc4>)
 8010992:	695b      	ldr	r3, [r3, #20]
 8010994:	405a      	eors	r2, r3
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	3308      	adds	r3, #8
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d110      	bne.n	80109c4 <udp_input_local_match+0xa8>
          return 1;
 80109a2:	2301      	movs	r3, #1
 80109a4:	e00f      	b.n	80109c6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d009      	beq.n	80109c0 <udp_input_local_match+0xa4>
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d005      	beq.n	80109c0 <udp_input_local_match+0xa4>
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	4b09      	ldr	r3, [pc, #36]	@ (80109e0 <udp_input_local_match+0xc4>)
 80109ba:	695b      	ldr	r3, [r3, #20]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d101      	bne.n	80109c4 <udp_input_local_match+0xa8>
        return 1;
 80109c0:	2301      	movs	r3, #1
 80109c2:	e000      	b.n	80109c6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80109c4:	2300      	movs	r3, #0
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3710      	adds	r7, #16
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	08016a78 	.word	0x08016a78
 80109d4:	08016aa8 	.word	0x08016aa8
 80109d8:	08016acc 	.word	0x08016acc
 80109dc:	08016af4 	.word	0x08016af4
 80109e0:	240402e0 	.word	0x240402e0

080109e4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80109e4:	b590      	push	{r4, r7, lr}
 80109e6:	b08d      	sub	sp, #52	@ 0x34
 80109e8:	af02      	add	r7, sp, #8
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80109ee:	2300      	movs	r3, #0
 80109f0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d105      	bne.n	8010a04 <udp_input+0x20>
 80109f8:	4b7c      	ldr	r3, [pc, #496]	@ (8010bec <udp_input+0x208>)
 80109fa:	22cf      	movs	r2, #207	@ 0xcf
 80109fc:	497c      	ldr	r1, [pc, #496]	@ (8010bf0 <udp_input+0x20c>)
 80109fe:	487d      	ldr	r0, [pc, #500]	@ (8010bf4 <udp_input+0x210>)
 8010a00:	f002 fd20 	bl	8013444 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d105      	bne.n	8010a16 <udp_input+0x32>
 8010a0a:	4b78      	ldr	r3, [pc, #480]	@ (8010bec <udp_input+0x208>)
 8010a0c:	22d0      	movs	r2, #208	@ 0xd0
 8010a0e:	497a      	ldr	r1, [pc, #488]	@ (8010bf8 <udp_input+0x214>)
 8010a10:	4878      	ldr	r0, [pc, #480]	@ (8010bf4 <udp_input+0x210>)
 8010a12:	f002 fd17 	bl	8013444 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	895b      	ldrh	r3, [r3, #10]
 8010a1a:	2b07      	cmp	r3, #7
 8010a1c:	d803      	bhi.n	8010a26 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7f9 fa98 	bl	8009f54 <pbuf_free>
    goto end;
 8010a24:	e0de      	b.n	8010be4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010a2c:	4b73      	ldr	r3, [pc, #460]	@ (8010bfc <udp_input+0x218>)
 8010a2e:	695b      	ldr	r3, [r3, #20]
 8010a30:	4a72      	ldr	r2, [pc, #456]	@ (8010bfc <udp_input+0x218>)
 8010a32:	6812      	ldr	r2, [r2, #0]
 8010a34:	4611      	mov	r1, r2
 8010a36:	4618      	mov	r0, r3
 8010a38:	f001 fcae 	bl	8012398 <ip4_addr_isbroadcast_u32>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7f7 fe66 	bl	8008718 <lwip_htons>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	885b      	ldrh	r3, [r3, #2]
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7f7 fe5e 	bl	8008718 <lwip_htons>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010a60:	2300      	movs	r3, #0
 8010a62:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8010a64:	2300      	movs	r3, #0
 8010a66:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a6c:	4b64      	ldr	r3, [pc, #400]	@ (8010c00 <udp_input+0x21c>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a72:	e054      	b.n	8010b1e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a76:	8a5b      	ldrh	r3, [r3, #18]
 8010a78:	89fa      	ldrh	r2, [r7, #14]
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d14a      	bne.n	8010b14 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010a7e:	7cfb      	ldrb	r3, [r7, #19]
 8010a80:	461a      	mov	r2, r3
 8010a82:	6839      	ldr	r1, [r7, #0]
 8010a84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010a86:	f7ff ff49 	bl	801091c <udp_input_local_match>
 8010a8a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d041      	beq.n	8010b14 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a92:	7c1b      	ldrb	r3, [r3, #16]
 8010a94:	f003 0304 	and.w	r3, r3, #4
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d11d      	bne.n	8010ad8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d102      	bne.n	8010aa8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aa4:	61fb      	str	r3, [r7, #28]
 8010aa6:	e017      	b.n	8010ad8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010aa8:	7cfb      	ldrb	r3, [r7, #19]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d014      	beq.n	8010ad8 <udp_input+0xf4>
 8010aae:	4b53      	ldr	r3, [pc, #332]	@ (8010bfc <udp_input+0x218>)
 8010ab0:	695b      	ldr	r3, [r3, #20]
 8010ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010ab6:	d10f      	bne.n	8010ad8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010ab8:	69fb      	ldr	r3, [r7, #28]
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	3304      	adds	r3, #4
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d008      	beq.n	8010ad8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac8:	681a      	ldr	r2, [r3, #0]
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	3304      	adds	r3, #4
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d101      	bne.n	8010ad8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ad6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ada:	8a9b      	ldrh	r3, [r3, #20]
 8010adc:	8a3a      	ldrh	r2, [r7, #16]
 8010ade:	429a      	cmp	r2, r3
 8010ae0:	d118      	bne.n	8010b14 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ae4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d005      	beq.n	8010af6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aec:	685a      	ldr	r2, [r3, #4]
 8010aee:	4b43      	ldr	r3, [pc, #268]	@ (8010bfc <udp_input+0x218>)
 8010af0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d10e      	bne.n	8010b14 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010af6:	6a3b      	ldr	r3, [r7, #32]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d014      	beq.n	8010b26 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010afe:	68da      	ldr	r2, [r3, #12]
 8010b00:	6a3b      	ldr	r3, [r7, #32]
 8010b02:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010b04:	4b3e      	ldr	r3, [pc, #248]	@ (8010c00 <udp_input+0x21c>)
 8010b06:	681a      	ldr	r2, [r3, #0]
 8010b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b0a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010b0c:	4a3c      	ldr	r2, [pc, #240]	@ (8010c00 <udp_input+0x21c>)
 8010b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b10:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010b12:	e008      	b.n	8010b26 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b16:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b1a:	68db      	ldr	r3, [r3, #12]
 8010b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d1a7      	bne.n	8010a74 <udp_input+0x90>
 8010b24:	e000      	b.n	8010b28 <udp_input+0x144>
        break;
 8010b26:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d101      	bne.n	8010b32 <udp_input+0x14e>
    pcb = uncon_pcb;
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d002      	beq.n	8010b3e <udp_input+0x15a>
    for_us = 1;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	76fb      	strb	r3, [r7, #27]
 8010b3c:	e00a      	b.n	8010b54 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	3304      	adds	r3, #4
 8010b42:	681a      	ldr	r2, [r3, #0]
 8010b44:	4b2d      	ldr	r3, [pc, #180]	@ (8010bfc <udp_input+0x218>)
 8010b46:	695b      	ldr	r3, [r3, #20]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	bf0c      	ite	eq
 8010b4c:	2301      	moveq	r3, #1
 8010b4e:	2300      	movne	r3, #0
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010b54:	7efb      	ldrb	r3, [r7, #27]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d041      	beq.n	8010bde <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010b5a:	2108      	movs	r1, #8
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f7f9 f973 	bl	8009e48 <pbuf_remove_header>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d00a      	beq.n	8010b7e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010b68:	4b20      	ldr	r3, [pc, #128]	@ (8010bec <udp_input+0x208>)
 8010b6a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8010b6e:	4925      	ldr	r1, [pc, #148]	@ (8010c04 <udp_input+0x220>)
 8010b70:	4820      	ldr	r0, [pc, #128]	@ (8010bf4 <udp_input+0x210>)
 8010b72:	f002 fc67 	bl	8013444 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f7f9 f9ec 	bl	8009f54 <pbuf_free>
      goto end;
 8010b7c:	e032      	b.n	8010be4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d012      	beq.n	8010baa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b86:	699b      	ldr	r3, [r3, #24]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d00a      	beq.n	8010ba2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b8e:	699c      	ldr	r4, [r3, #24]
 8010b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b92:	69d8      	ldr	r0, [r3, #28]
 8010b94:	8a3b      	ldrh	r3, [r7, #16]
 8010b96:	9300      	str	r3, [sp, #0]
 8010b98:	4b1b      	ldr	r3, [pc, #108]	@ (8010c08 <udp_input+0x224>)
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b9e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010ba0:	e021      	b.n	8010be6 <udp_input+0x202>
        pbuf_free(p);
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f7f9 f9d6 	bl	8009f54 <pbuf_free>
        goto end;
 8010ba8:	e01c      	b.n	8010be4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010baa:	7cfb      	ldrb	r3, [r7, #19]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d112      	bne.n	8010bd6 <udp_input+0x1f2>
 8010bb0:	4b12      	ldr	r3, [pc, #72]	@ (8010bfc <udp_input+0x218>)
 8010bb2:	695b      	ldr	r3, [r3, #20]
 8010bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010bb8:	2be0      	cmp	r3, #224	@ 0xe0
 8010bba:	d00c      	beq.n	8010bd6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8010bfc <udp_input+0x218>)
 8010bbe:	899b      	ldrh	r3, [r3, #12]
 8010bc0:	3308      	adds	r3, #8
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	b21b      	sxth	r3, r3
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f7f9 f9b0 	bl	8009f2e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010bce:	2103      	movs	r1, #3
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f001 f8b7 	bl	8011d44 <icmp_dest_unreach>
      pbuf_free(p);
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f7f9 f9bc 	bl	8009f54 <pbuf_free>
  return;
 8010bdc:	e003      	b.n	8010be6 <udp_input+0x202>
    pbuf_free(p);
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f7f9 f9b8 	bl	8009f54 <pbuf_free>
  return;
 8010be4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010be6:	372c      	adds	r7, #44	@ 0x2c
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd90      	pop	{r4, r7, pc}
 8010bec:	08016a78 	.word	0x08016a78
 8010bf0:	08016b1c 	.word	0x08016b1c
 8010bf4:	08016acc 	.word	0x08016acc
 8010bf8:	08016b34 	.word	0x08016b34
 8010bfc:	240402e0 	.word	0x240402e0
 8010c00:	24043258 	.word	0x24043258
 8010c04:	08016b50 	.word	0x08016b50
 8010c08:	240402f0 	.word	0x240402f0

08010c0c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	b085      	sub	sp, #20
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d01e      	beq.n	8010c5a <udp_netif_ip_addr_changed+0x4e>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d01a      	beq.n	8010c5a <udp_netif_ip_addr_changed+0x4e>
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d017      	beq.n	8010c5a <udp_netif_ip_addr_changed+0x4e>
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d013      	beq.n	8010c5a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010c32:	4b0d      	ldr	r3, [pc, #52]	@ (8010c68 <udp_netif_ip_addr_changed+0x5c>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	60fb      	str	r3, [r7, #12]
 8010c38:	e00c      	b.n	8010c54 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d103      	bne.n	8010c4e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	681a      	ldr	r2, [r3, #0]
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	68db      	ldr	r3, [r3, #12]
 8010c52:	60fb      	str	r3, [r7, #12]
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d1ef      	bne.n	8010c3a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010c5a:	bf00      	nop
 8010c5c:	3714      	adds	r7, #20
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop
 8010c68:	24043258 	.word	0x24043258

08010c6c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010c74:	4915      	ldr	r1, [pc, #84]	@ (8010ccc <etharp_free_entry+0x60>)
 8010c76:	687a      	ldr	r2, [r7, #4]
 8010c78:	4613      	mov	r3, r2
 8010c7a:	005b      	lsls	r3, r3, #1
 8010c7c:	4413      	add	r3, r2
 8010c7e:	00db      	lsls	r3, r3, #3
 8010c80:	440b      	add	r3, r1
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d013      	beq.n	8010cb0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010c88:	4910      	ldr	r1, [pc, #64]	@ (8010ccc <etharp_free_entry+0x60>)
 8010c8a:	687a      	ldr	r2, [r7, #4]
 8010c8c:	4613      	mov	r3, r2
 8010c8e:	005b      	lsls	r3, r3, #1
 8010c90:	4413      	add	r3, r2
 8010c92:	00db      	lsls	r3, r3, #3
 8010c94:	440b      	add	r3, r1
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7f9 f95b 	bl	8009f54 <pbuf_free>
    arp_table[i].q = NULL;
 8010c9e:	490b      	ldr	r1, [pc, #44]	@ (8010ccc <etharp_free_entry+0x60>)
 8010ca0:	687a      	ldr	r2, [r7, #4]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	005b      	lsls	r3, r3, #1
 8010ca6:	4413      	add	r3, r2
 8010ca8:	00db      	lsls	r3, r3, #3
 8010caa:	440b      	add	r3, r1
 8010cac:	2200      	movs	r2, #0
 8010cae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010cb0:	4906      	ldr	r1, [pc, #24]	@ (8010ccc <etharp_free_entry+0x60>)
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	4613      	mov	r3, r2
 8010cb6:	005b      	lsls	r3, r3, #1
 8010cb8:	4413      	add	r3, r2
 8010cba:	00db      	lsls	r3, r3, #3
 8010cbc:	440b      	add	r3, r1
 8010cbe:	3314      	adds	r3, #20
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010cc4:	bf00      	nop
 8010cc6:	3708      	adds	r7, #8
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}
 8010ccc:	2404325c 	.word	0x2404325c

08010cd0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	607b      	str	r3, [r7, #4]
 8010cda:	e096      	b.n	8010e0a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010cdc:	494f      	ldr	r1, [pc, #316]	@ (8010e1c <etharp_tmr+0x14c>)
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	4613      	mov	r3, r2
 8010ce2:	005b      	lsls	r3, r3, #1
 8010ce4:	4413      	add	r3, r2
 8010ce6:	00db      	lsls	r3, r3, #3
 8010ce8:	440b      	add	r3, r1
 8010cea:	3314      	adds	r3, #20
 8010cec:	781b      	ldrb	r3, [r3, #0]
 8010cee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010cf0:	78fb      	ldrb	r3, [r7, #3]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	f000 8086 	beq.w	8010e04 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010cf8:	4948      	ldr	r1, [pc, #288]	@ (8010e1c <etharp_tmr+0x14c>)
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	4613      	mov	r3, r2
 8010cfe:	005b      	lsls	r3, r3, #1
 8010d00:	4413      	add	r3, r2
 8010d02:	00db      	lsls	r3, r3, #3
 8010d04:	440b      	add	r3, r1
 8010d06:	3312      	adds	r3, #18
 8010d08:	881b      	ldrh	r3, [r3, #0]
 8010d0a:	3301      	adds	r3, #1
 8010d0c:	b298      	uxth	r0, r3
 8010d0e:	4943      	ldr	r1, [pc, #268]	@ (8010e1c <etharp_tmr+0x14c>)
 8010d10:	687a      	ldr	r2, [r7, #4]
 8010d12:	4613      	mov	r3, r2
 8010d14:	005b      	lsls	r3, r3, #1
 8010d16:	4413      	add	r3, r2
 8010d18:	00db      	lsls	r3, r3, #3
 8010d1a:	440b      	add	r3, r1
 8010d1c:	3312      	adds	r3, #18
 8010d1e:	4602      	mov	r2, r0
 8010d20:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010d22:	493e      	ldr	r1, [pc, #248]	@ (8010e1c <etharp_tmr+0x14c>)
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	4613      	mov	r3, r2
 8010d28:	005b      	lsls	r3, r3, #1
 8010d2a:	4413      	add	r3, r2
 8010d2c:	00db      	lsls	r3, r3, #3
 8010d2e:	440b      	add	r3, r1
 8010d30:	3312      	adds	r3, #18
 8010d32:	881b      	ldrh	r3, [r3, #0]
 8010d34:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8010d38:	d215      	bcs.n	8010d66 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010d3a:	4938      	ldr	r1, [pc, #224]	@ (8010e1c <etharp_tmr+0x14c>)
 8010d3c:	687a      	ldr	r2, [r7, #4]
 8010d3e:	4613      	mov	r3, r2
 8010d40:	005b      	lsls	r3, r3, #1
 8010d42:	4413      	add	r3, r2
 8010d44:	00db      	lsls	r3, r3, #3
 8010d46:	440b      	add	r3, r1
 8010d48:	3314      	adds	r3, #20
 8010d4a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	d10e      	bne.n	8010d6e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010d50:	4932      	ldr	r1, [pc, #200]	@ (8010e1c <etharp_tmr+0x14c>)
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	4613      	mov	r3, r2
 8010d56:	005b      	lsls	r3, r3, #1
 8010d58:	4413      	add	r3, r2
 8010d5a:	00db      	lsls	r3, r3, #3
 8010d5c:	440b      	add	r3, r1
 8010d5e:	3312      	adds	r3, #18
 8010d60:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010d62:	2b04      	cmp	r3, #4
 8010d64:	d903      	bls.n	8010d6e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f7ff ff80 	bl	8010c6c <etharp_free_entry>
 8010d6c:	e04a      	b.n	8010e04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010d6e:	492b      	ldr	r1, [pc, #172]	@ (8010e1c <etharp_tmr+0x14c>)
 8010d70:	687a      	ldr	r2, [r7, #4]
 8010d72:	4613      	mov	r3, r2
 8010d74:	005b      	lsls	r3, r3, #1
 8010d76:	4413      	add	r3, r2
 8010d78:	00db      	lsls	r3, r3, #3
 8010d7a:	440b      	add	r3, r1
 8010d7c:	3314      	adds	r3, #20
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	2b03      	cmp	r3, #3
 8010d82:	d10a      	bne.n	8010d9a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010d84:	4925      	ldr	r1, [pc, #148]	@ (8010e1c <etharp_tmr+0x14c>)
 8010d86:	687a      	ldr	r2, [r7, #4]
 8010d88:	4613      	mov	r3, r2
 8010d8a:	005b      	lsls	r3, r3, #1
 8010d8c:	4413      	add	r3, r2
 8010d8e:	00db      	lsls	r3, r3, #3
 8010d90:	440b      	add	r3, r1
 8010d92:	3314      	adds	r3, #20
 8010d94:	2204      	movs	r2, #4
 8010d96:	701a      	strb	r2, [r3, #0]
 8010d98:	e034      	b.n	8010e04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010d9a:	4920      	ldr	r1, [pc, #128]	@ (8010e1c <etharp_tmr+0x14c>)
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	4613      	mov	r3, r2
 8010da0:	005b      	lsls	r3, r3, #1
 8010da2:	4413      	add	r3, r2
 8010da4:	00db      	lsls	r3, r3, #3
 8010da6:	440b      	add	r3, r1
 8010da8:	3314      	adds	r3, #20
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	2b04      	cmp	r3, #4
 8010dae:	d10a      	bne.n	8010dc6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010db0:	491a      	ldr	r1, [pc, #104]	@ (8010e1c <etharp_tmr+0x14c>)
 8010db2:	687a      	ldr	r2, [r7, #4]
 8010db4:	4613      	mov	r3, r2
 8010db6:	005b      	lsls	r3, r3, #1
 8010db8:	4413      	add	r3, r2
 8010dba:	00db      	lsls	r3, r3, #3
 8010dbc:	440b      	add	r3, r1
 8010dbe:	3314      	adds	r3, #20
 8010dc0:	2202      	movs	r2, #2
 8010dc2:	701a      	strb	r2, [r3, #0]
 8010dc4:	e01e      	b.n	8010e04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010dc6:	4915      	ldr	r1, [pc, #84]	@ (8010e1c <etharp_tmr+0x14c>)
 8010dc8:	687a      	ldr	r2, [r7, #4]
 8010dca:	4613      	mov	r3, r2
 8010dcc:	005b      	lsls	r3, r3, #1
 8010dce:	4413      	add	r3, r2
 8010dd0:	00db      	lsls	r3, r3, #3
 8010dd2:	440b      	add	r3, r1
 8010dd4:	3314      	adds	r3, #20
 8010dd6:	781b      	ldrb	r3, [r3, #0]
 8010dd8:	2b01      	cmp	r3, #1
 8010dda:	d113      	bne.n	8010e04 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010ddc:	490f      	ldr	r1, [pc, #60]	@ (8010e1c <etharp_tmr+0x14c>)
 8010dde:	687a      	ldr	r2, [r7, #4]
 8010de0:	4613      	mov	r3, r2
 8010de2:	005b      	lsls	r3, r3, #1
 8010de4:	4413      	add	r3, r2
 8010de6:	00db      	lsls	r3, r3, #3
 8010de8:	440b      	add	r3, r1
 8010dea:	3308      	adds	r3, #8
 8010dec:	6818      	ldr	r0, [r3, #0]
 8010dee:	687a      	ldr	r2, [r7, #4]
 8010df0:	4613      	mov	r3, r2
 8010df2:	005b      	lsls	r3, r3, #1
 8010df4:	4413      	add	r3, r2
 8010df6:	00db      	lsls	r3, r3, #3
 8010df8:	4a08      	ldr	r2, [pc, #32]	@ (8010e1c <etharp_tmr+0x14c>)
 8010dfa:	4413      	add	r3, r2
 8010dfc:	3304      	adds	r3, #4
 8010dfe:	4619      	mov	r1, r3
 8010e00:	f000 fe6e 	bl	8011ae0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	3301      	adds	r3, #1
 8010e08:	607b      	str	r3, [r7, #4]
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2b09      	cmp	r3, #9
 8010e0e:	f77f af65 	ble.w	8010cdc <etharp_tmr+0xc>
      }
    }
  }
}
 8010e12:	bf00      	nop
 8010e14:	bf00      	nop
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	2404325c 	.word	0x2404325c

08010e20 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b08a      	sub	sp, #40	@ 0x28
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	60f8      	str	r0, [r7, #12]
 8010e28:	460b      	mov	r3, r1
 8010e2a:	607a      	str	r2, [r7, #4]
 8010e2c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010e2e:	230a      	movs	r3, #10
 8010e30:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010e32:	230a      	movs	r3, #10
 8010e34:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010e36:	230a      	movs	r3, #10
 8010e38:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010e3e:	230a      	movs	r3, #10
 8010e40:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010e42:	2300      	movs	r3, #0
 8010e44:	83bb      	strh	r3, [r7, #28]
 8010e46:	2300      	movs	r3, #0
 8010e48:	837b      	strh	r3, [r7, #26]
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e4e:	2300      	movs	r3, #0
 8010e50:	843b      	strh	r3, [r7, #32]
 8010e52:	e0ae      	b.n	8010fb2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010e54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e58:	49a6      	ldr	r1, [pc, #664]	@ (80110f4 <etharp_find_entry+0x2d4>)
 8010e5a:	4613      	mov	r3, r2
 8010e5c:	005b      	lsls	r3, r3, #1
 8010e5e:	4413      	add	r3, r2
 8010e60:	00db      	lsls	r3, r3, #3
 8010e62:	440b      	add	r3, r1
 8010e64:	3314      	adds	r3, #20
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010e6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010e6e:	2b0a      	cmp	r3, #10
 8010e70:	d105      	bne.n	8010e7e <etharp_find_entry+0x5e>
 8010e72:	7dfb      	ldrb	r3, [r7, #23]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d102      	bne.n	8010e7e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010e78:	8c3b      	ldrh	r3, [r7, #32]
 8010e7a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010e7c:	e095      	b.n	8010faa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010e7e:	7dfb      	ldrb	r3, [r7, #23]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f000 8092 	beq.w	8010faa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010e86:	7dfb      	ldrb	r3, [r7, #23]
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	d009      	beq.n	8010ea0 <etharp_find_entry+0x80>
 8010e8c:	7dfb      	ldrb	r3, [r7, #23]
 8010e8e:	2b01      	cmp	r3, #1
 8010e90:	d806      	bhi.n	8010ea0 <etharp_find_entry+0x80>
 8010e92:	4b99      	ldr	r3, [pc, #612]	@ (80110f8 <etharp_find_entry+0x2d8>)
 8010e94:	f240 1223 	movw	r2, #291	@ 0x123
 8010e98:	4998      	ldr	r1, [pc, #608]	@ (80110fc <etharp_find_entry+0x2dc>)
 8010e9a:	4899      	ldr	r0, [pc, #612]	@ (8011100 <etharp_find_entry+0x2e0>)
 8010e9c:	f002 fad2 	bl	8013444 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d020      	beq.n	8010ee8 <etharp_find_entry+0xc8>
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	6819      	ldr	r1, [r3, #0]
 8010eaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010eae:	4891      	ldr	r0, [pc, #580]	@ (80110f4 <etharp_find_entry+0x2d4>)
 8010eb0:	4613      	mov	r3, r2
 8010eb2:	005b      	lsls	r3, r3, #1
 8010eb4:	4413      	add	r3, r2
 8010eb6:	00db      	lsls	r3, r3, #3
 8010eb8:	4403      	add	r3, r0
 8010eba:	3304      	adds	r3, #4
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4299      	cmp	r1, r3
 8010ec0:	d112      	bne.n	8010ee8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d00c      	beq.n	8010ee2 <etharp_find_entry+0xc2>
 8010ec8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ecc:	4989      	ldr	r1, [pc, #548]	@ (80110f4 <etharp_find_entry+0x2d4>)
 8010ece:	4613      	mov	r3, r2
 8010ed0:	005b      	lsls	r3, r3, #1
 8010ed2:	4413      	add	r3, r2
 8010ed4:	00db      	lsls	r3, r3, #3
 8010ed6:	440b      	add	r3, r1
 8010ed8:	3308      	adds	r3, #8
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d102      	bne.n	8010ee8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010ee2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ee6:	e100      	b.n	80110ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010ee8:	7dfb      	ldrb	r3, [r7, #23]
 8010eea:	2b01      	cmp	r3, #1
 8010eec:	d140      	bne.n	8010f70 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010eee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ef2:	4980      	ldr	r1, [pc, #512]	@ (80110f4 <etharp_find_entry+0x2d4>)
 8010ef4:	4613      	mov	r3, r2
 8010ef6:	005b      	lsls	r3, r3, #1
 8010ef8:	4413      	add	r3, r2
 8010efa:	00db      	lsls	r3, r3, #3
 8010efc:	440b      	add	r3, r1
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d01a      	beq.n	8010f3a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010f04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f08:	497a      	ldr	r1, [pc, #488]	@ (80110f4 <etharp_find_entry+0x2d4>)
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	005b      	lsls	r3, r3, #1
 8010f0e:	4413      	add	r3, r2
 8010f10:	00db      	lsls	r3, r3, #3
 8010f12:	440b      	add	r3, r1
 8010f14:	3312      	adds	r3, #18
 8010f16:	881b      	ldrh	r3, [r3, #0]
 8010f18:	8bba      	ldrh	r2, [r7, #28]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d845      	bhi.n	8010faa <etharp_find_entry+0x18a>
            old_queue = i;
 8010f1e:	8c3b      	ldrh	r3, [r7, #32]
 8010f20:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010f22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f26:	4973      	ldr	r1, [pc, #460]	@ (80110f4 <etharp_find_entry+0x2d4>)
 8010f28:	4613      	mov	r3, r2
 8010f2a:	005b      	lsls	r3, r3, #1
 8010f2c:	4413      	add	r3, r2
 8010f2e:	00db      	lsls	r3, r3, #3
 8010f30:	440b      	add	r3, r1
 8010f32:	3312      	adds	r3, #18
 8010f34:	881b      	ldrh	r3, [r3, #0]
 8010f36:	83bb      	strh	r3, [r7, #28]
 8010f38:	e037      	b.n	8010faa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010f3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f3e:	496d      	ldr	r1, [pc, #436]	@ (80110f4 <etharp_find_entry+0x2d4>)
 8010f40:	4613      	mov	r3, r2
 8010f42:	005b      	lsls	r3, r3, #1
 8010f44:	4413      	add	r3, r2
 8010f46:	00db      	lsls	r3, r3, #3
 8010f48:	440b      	add	r3, r1
 8010f4a:	3312      	adds	r3, #18
 8010f4c:	881b      	ldrh	r3, [r3, #0]
 8010f4e:	8b7a      	ldrh	r2, [r7, #26]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d82a      	bhi.n	8010faa <etharp_find_entry+0x18a>
            old_pending = i;
 8010f54:	8c3b      	ldrh	r3, [r7, #32]
 8010f56:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8010f58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f5c:	4965      	ldr	r1, [pc, #404]	@ (80110f4 <etharp_find_entry+0x2d4>)
 8010f5e:	4613      	mov	r3, r2
 8010f60:	005b      	lsls	r3, r3, #1
 8010f62:	4413      	add	r3, r2
 8010f64:	00db      	lsls	r3, r3, #3
 8010f66:	440b      	add	r3, r1
 8010f68:	3312      	adds	r3, #18
 8010f6a:	881b      	ldrh	r3, [r3, #0]
 8010f6c:	837b      	strh	r3, [r7, #26]
 8010f6e:	e01c      	b.n	8010faa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010f70:	7dfb      	ldrb	r3, [r7, #23]
 8010f72:	2b01      	cmp	r3, #1
 8010f74:	d919      	bls.n	8010faa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010f76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f7a:	495e      	ldr	r1, [pc, #376]	@ (80110f4 <etharp_find_entry+0x2d4>)
 8010f7c:	4613      	mov	r3, r2
 8010f7e:	005b      	lsls	r3, r3, #1
 8010f80:	4413      	add	r3, r2
 8010f82:	00db      	lsls	r3, r3, #3
 8010f84:	440b      	add	r3, r1
 8010f86:	3312      	adds	r3, #18
 8010f88:	881b      	ldrh	r3, [r3, #0]
 8010f8a:	8b3a      	ldrh	r2, [r7, #24]
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d80c      	bhi.n	8010faa <etharp_find_entry+0x18a>
            old_stable = i;
 8010f90:	8c3b      	ldrh	r3, [r7, #32]
 8010f92:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8010f94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f98:	4956      	ldr	r1, [pc, #344]	@ (80110f4 <etharp_find_entry+0x2d4>)
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	005b      	lsls	r3, r3, #1
 8010f9e:	4413      	add	r3, r2
 8010fa0:	00db      	lsls	r3, r3, #3
 8010fa2:	440b      	add	r3, r1
 8010fa4:	3312      	adds	r3, #18
 8010fa6:	881b      	ldrh	r3, [r3, #0]
 8010fa8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010faa:	8c3b      	ldrh	r3, [r7, #32]
 8010fac:	3301      	adds	r3, #1
 8010fae:	b29b      	uxth	r3, r3
 8010fb0:	843b      	strh	r3, [r7, #32]
 8010fb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010fb6:	2b09      	cmp	r3, #9
 8010fb8:	f77f af4c 	ble.w	8010e54 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010fbc:	7afb      	ldrb	r3, [r7, #11]
 8010fbe:	f003 0302 	and.w	r3, r3, #2
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d108      	bne.n	8010fd8 <etharp_find_entry+0x1b8>
 8010fc6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010fca:	2b0a      	cmp	r3, #10
 8010fcc:	d107      	bne.n	8010fde <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010fce:	7afb      	ldrb	r3, [r7, #11]
 8010fd0:	f003 0301 	and.w	r3, r3, #1
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d102      	bne.n	8010fde <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010fdc:	e085      	b.n	80110ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010fde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010fe2:	2b09      	cmp	r3, #9
 8010fe4:	dc02      	bgt.n	8010fec <etharp_find_entry+0x1cc>
    i = empty;
 8010fe6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010fe8:	843b      	strh	r3, [r7, #32]
 8010fea:	e039      	b.n	8011060 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010fec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8010ff0:	2b09      	cmp	r3, #9
 8010ff2:	dc14      	bgt.n	801101e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010ff4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ff6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010ff8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ffc:	493d      	ldr	r1, [pc, #244]	@ (80110f4 <etharp_find_entry+0x2d4>)
 8010ffe:	4613      	mov	r3, r2
 8011000:	005b      	lsls	r3, r3, #1
 8011002:	4413      	add	r3, r2
 8011004:	00db      	lsls	r3, r3, #3
 8011006:	440b      	add	r3, r1
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d018      	beq.n	8011040 <etharp_find_entry+0x220>
 801100e:	4b3a      	ldr	r3, [pc, #232]	@ (80110f8 <etharp_find_entry+0x2d8>)
 8011010:	f240 126d 	movw	r2, #365	@ 0x16d
 8011014:	493b      	ldr	r1, [pc, #236]	@ (8011104 <etharp_find_entry+0x2e4>)
 8011016:	483a      	ldr	r0, [pc, #232]	@ (8011100 <etharp_find_entry+0x2e0>)
 8011018:	f002 fa14 	bl	8013444 <iprintf>
 801101c:	e010      	b.n	8011040 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801101e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011022:	2b09      	cmp	r3, #9
 8011024:	dc02      	bgt.n	801102c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011026:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011028:	843b      	strh	r3, [r7, #32]
 801102a:	e009      	b.n	8011040 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801102c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011030:	2b09      	cmp	r3, #9
 8011032:	dc02      	bgt.n	801103a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011034:	8bfb      	ldrh	r3, [r7, #30]
 8011036:	843b      	strh	r3, [r7, #32]
 8011038:	e002      	b.n	8011040 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801103a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801103e:	e054      	b.n	80110ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011040:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011044:	2b09      	cmp	r3, #9
 8011046:	dd06      	ble.n	8011056 <etharp_find_entry+0x236>
 8011048:	4b2b      	ldr	r3, [pc, #172]	@ (80110f8 <etharp_find_entry+0x2d8>)
 801104a:	f240 127f 	movw	r2, #383	@ 0x17f
 801104e:	492e      	ldr	r1, [pc, #184]	@ (8011108 <etharp_find_entry+0x2e8>)
 8011050:	482b      	ldr	r0, [pc, #172]	@ (8011100 <etharp_find_entry+0x2e0>)
 8011052:	f002 f9f7 	bl	8013444 <iprintf>
    etharp_free_entry(i);
 8011056:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801105a:	4618      	mov	r0, r3
 801105c:	f7ff fe06 	bl	8010c6c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011060:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011064:	2b09      	cmp	r3, #9
 8011066:	dd06      	ble.n	8011076 <etharp_find_entry+0x256>
 8011068:	4b23      	ldr	r3, [pc, #140]	@ (80110f8 <etharp_find_entry+0x2d8>)
 801106a:	f240 1283 	movw	r2, #387	@ 0x183
 801106e:	4926      	ldr	r1, [pc, #152]	@ (8011108 <etharp_find_entry+0x2e8>)
 8011070:	4823      	ldr	r0, [pc, #140]	@ (8011100 <etharp_find_entry+0x2e0>)
 8011072:	f002 f9e7 	bl	8013444 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011076:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801107a:	491e      	ldr	r1, [pc, #120]	@ (80110f4 <etharp_find_entry+0x2d4>)
 801107c:	4613      	mov	r3, r2
 801107e:	005b      	lsls	r3, r3, #1
 8011080:	4413      	add	r3, r2
 8011082:	00db      	lsls	r3, r3, #3
 8011084:	440b      	add	r3, r1
 8011086:	3314      	adds	r3, #20
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d006      	beq.n	801109c <etharp_find_entry+0x27c>
 801108e:	4b1a      	ldr	r3, [pc, #104]	@ (80110f8 <etharp_find_entry+0x2d8>)
 8011090:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8011094:	491d      	ldr	r1, [pc, #116]	@ (801110c <etharp_find_entry+0x2ec>)
 8011096:	481a      	ldr	r0, [pc, #104]	@ (8011100 <etharp_find_entry+0x2e0>)
 8011098:	f002 f9d4 	bl	8013444 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00b      	beq.n	80110ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80110a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	6819      	ldr	r1, [r3, #0]
 80110aa:	4812      	ldr	r0, [pc, #72]	@ (80110f4 <etharp_find_entry+0x2d4>)
 80110ac:	4613      	mov	r3, r2
 80110ae:	005b      	lsls	r3, r3, #1
 80110b0:	4413      	add	r3, r2
 80110b2:	00db      	lsls	r3, r3, #3
 80110b4:	4403      	add	r3, r0
 80110b6:	3304      	adds	r3, #4
 80110b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80110ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110be:	490d      	ldr	r1, [pc, #52]	@ (80110f4 <etharp_find_entry+0x2d4>)
 80110c0:	4613      	mov	r3, r2
 80110c2:	005b      	lsls	r3, r3, #1
 80110c4:	4413      	add	r3, r2
 80110c6:	00db      	lsls	r3, r3, #3
 80110c8:	440b      	add	r3, r1
 80110ca:	3312      	adds	r3, #18
 80110cc:	2200      	movs	r2, #0
 80110ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80110d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110d4:	4907      	ldr	r1, [pc, #28]	@ (80110f4 <etharp_find_entry+0x2d4>)
 80110d6:	4613      	mov	r3, r2
 80110d8:	005b      	lsls	r3, r3, #1
 80110da:	4413      	add	r3, r2
 80110dc:	00db      	lsls	r3, r3, #3
 80110de:	440b      	add	r3, r1
 80110e0:	3308      	adds	r3, #8
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80110e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	3728      	adds	r7, #40	@ 0x28
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	2404325c 	.word	0x2404325c
 80110f8:	08016ddc 	.word	0x08016ddc
 80110fc:	08016e14 	.word	0x08016e14
 8011100:	08016e54 	.word	0x08016e54
 8011104:	08016e7c 	.word	0x08016e7c
 8011108:	08016e94 	.word	0x08016e94
 801110c:	08016ea8 	.word	0x08016ea8

08011110 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b088      	sub	sp, #32
 8011114:	af02      	add	r7, sp, #8
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	60b9      	str	r1, [r7, #8]
 801111a:	607a      	str	r2, [r7, #4]
 801111c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011124:	2b06      	cmp	r3, #6
 8011126:	d006      	beq.n	8011136 <etharp_update_arp_entry+0x26>
 8011128:	4b48      	ldr	r3, [pc, #288]	@ (801124c <etharp_update_arp_entry+0x13c>)
 801112a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801112e:	4948      	ldr	r1, [pc, #288]	@ (8011250 <etharp_update_arp_entry+0x140>)
 8011130:	4848      	ldr	r0, [pc, #288]	@ (8011254 <etharp_update_arp_entry+0x144>)
 8011132:	f002 f987 	bl	8013444 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d012      	beq.n	8011162 <etharp_update_arp_entry+0x52>
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d00e      	beq.n	8011162 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	68f9      	ldr	r1, [r7, #12]
 801114a:	4618      	mov	r0, r3
 801114c:	f001 f924 	bl	8012398 <ip4_addr_isbroadcast_u32>
 8011150:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011152:	2b00      	cmp	r3, #0
 8011154:	d105      	bne.n	8011162 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801115e:	2be0      	cmp	r3, #224	@ 0xe0
 8011160:	d102      	bne.n	8011168 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011162:	f06f 030f 	mvn.w	r3, #15
 8011166:	e06c      	b.n	8011242 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011168:	78fb      	ldrb	r3, [r7, #3]
 801116a:	68fa      	ldr	r2, [r7, #12]
 801116c:	4619      	mov	r1, r3
 801116e:	68b8      	ldr	r0, [r7, #8]
 8011170:	f7ff fe56 	bl	8010e20 <etharp_find_entry>
 8011174:	4603      	mov	r3, r0
 8011176:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011178:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801117c:	2b00      	cmp	r3, #0
 801117e:	da02      	bge.n	8011186 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011180:	8afb      	ldrh	r3, [r7, #22]
 8011182:	b25b      	sxtb	r3, r3
 8011184:	e05d      	b.n	8011242 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011186:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801118a:	4933      	ldr	r1, [pc, #204]	@ (8011258 <etharp_update_arp_entry+0x148>)
 801118c:	4613      	mov	r3, r2
 801118e:	005b      	lsls	r3, r3, #1
 8011190:	4413      	add	r3, r2
 8011192:	00db      	lsls	r3, r3, #3
 8011194:	440b      	add	r3, r1
 8011196:	3314      	adds	r3, #20
 8011198:	2202      	movs	r2, #2
 801119a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801119c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80111a0:	492d      	ldr	r1, [pc, #180]	@ (8011258 <etharp_update_arp_entry+0x148>)
 80111a2:	4613      	mov	r3, r2
 80111a4:	005b      	lsls	r3, r3, #1
 80111a6:	4413      	add	r3, r2
 80111a8:	00db      	lsls	r3, r3, #3
 80111aa:	440b      	add	r3, r1
 80111ac:	3308      	adds	r3, #8
 80111ae:	68fa      	ldr	r2, [r7, #12]
 80111b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80111b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80111b6:	4613      	mov	r3, r2
 80111b8:	005b      	lsls	r3, r3, #1
 80111ba:	4413      	add	r3, r2
 80111bc:	00db      	lsls	r3, r3, #3
 80111be:	3308      	adds	r3, #8
 80111c0:	4a25      	ldr	r2, [pc, #148]	@ (8011258 <etharp_update_arp_entry+0x148>)
 80111c2:	4413      	add	r3, r2
 80111c4:	3304      	adds	r3, #4
 80111c6:	2206      	movs	r2, #6
 80111c8:	6879      	ldr	r1, [r7, #4]
 80111ca:	4618      	mov	r0, r3
 80111cc:	f002 fa15 	bl	80135fa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80111d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80111d4:	4920      	ldr	r1, [pc, #128]	@ (8011258 <etharp_update_arp_entry+0x148>)
 80111d6:	4613      	mov	r3, r2
 80111d8:	005b      	lsls	r3, r3, #1
 80111da:	4413      	add	r3, r2
 80111dc:	00db      	lsls	r3, r3, #3
 80111de:	440b      	add	r3, r1
 80111e0:	3312      	adds	r3, #18
 80111e2:	2200      	movs	r2, #0
 80111e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80111e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80111ea:	491b      	ldr	r1, [pc, #108]	@ (8011258 <etharp_update_arp_entry+0x148>)
 80111ec:	4613      	mov	r3, r2
 80111ee:	005b      	lsls	r3, r3, #1
 80111f0:	4413      	add	r3, r2
 80111f2:	00db      	lsls	r3, r3, #3
 80111f4:	440b      	add	r3, r1
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d021      	beq.n	8011240 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80111fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011200:	4915      	ldr	r1, [pc, #84]	@ (8011258 <etharp_update_arp_entry+0x148>)
 8011202:	4613      	mov	r3, r2
 8011204:	005b      	lsls	r3, r3, #1
 8011206:	4413      	add	r3, r2
 8011208:	00db      	lsls	r3, r3, #3
 801120a:	440b      	add	r3, r1
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011210:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011214:	4910      	ldr	r1, [pc, #64]	@ (8011258 <etharp_update_arp_entry+0x148>)
 8011216:	4613      	mov	r3, r2
 8011218:	005b      	lsls	r3, r3, #1
 801121a:	4413      	add	r3, r2
 801121c:	00db      	lsls	r3, r3, #3
 801121e:	440b      	add	r3, r1
 8011220:	2200      	movs	r2, #0
 8011222:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801122a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801122e:	9300      	str	r3, [sp, #0]
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6939      	ldr	r1, [r7, #16]
 8011234:	68f8      	ldr	r0, [r7, #12]
 8011236:	f001 ffbd 	bl	80131b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801123a:	6938      	ldr	r0, [r7, #16]
 801123c:	f7f8 fe8a 	bl	8009f54 <pbuf_free>
  }
  return ERR_OK;
 8011240:	2300      	movs	r3, #0
}
 8011242:	4618      	mov	r0, r3
 8011244:	3718      	adds	r7, #24
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
 801124a:	bf00      	nop
 801124c:	08016ddc 	.word	0x08016ddc
 8011250:	08016ed4 	.word	0x08016ed4
 8011254:	08016e54 	.word	0x08016e54
 8011258:	2404325c 	.word	0x2404325c

0801125c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b084      	sub	sp, #16
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011264:	2300      	movs	r3, #0
 8011266:	60fb      	str	r3, [r7, #12]
 8011268:	e01e      	b.n	80112a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801126a:	4913      	ldr	r1, [pc, #76]	@ (80112b8 <etharp_cleanup_netif+0x5c>)
 801126c:	68fa      	ldr	r2, [r7, #12]
 801126e:	4613      	mov	r3, r2
 8011270:	005b      	lsls	r3, r3, #1
 8011272:	4413      	add	r3, r2
 8011274:	00db      	lsls	r3, r3, #3
 8011276:	440b      	add	r3, r1
 8011278:	3314      	adds	r3, #20
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801127e:	7afb      	ldrb	r3, [r7, #11]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d00e      	beq.n	80112a2 <etharp_cleanup_netif+0x46>
 8011284:	490c      	ldr	r1, [pc, #48]	@ (80112b8 <etharp_cleanup_netif+0x5c>)
 8011286:	68fa      	ldr	r2, [r7, #12]
 8011288:	4613      	mov	r3, r2
 801128a:	005b      	lsls	r3, r3, #1
 801128c:	4413      	add	r3, r2
 801128e:	00db      	lsls	r3, r3, #3
 8011290:	440b      	add	r3, r1
 8011292:	3308      	adds	r3, #8
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	687a      	ldr	r2, [r7, #4]
 8011298:	429a      	cmp	r2, r3
 801129a:	d102      	bne.n	80112a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801129c:	68f8      	ldr	r0, [r7, #12]
 801129e:	f7ff fce5 	bl	8010c6c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	3301      	adds	r3, #1
 80112a6:	60fb      	str	r3, [r7, #12]
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	2b09      	cmp	r3, #9
 80112ac:	dddd      	ble.n	801126a <etharp_cleanup_netif+0xe>
    }
  }
}
 80112ae:	bf00      	nop
 80112b0:	bf00      	nop
 80112b2:	3710      	adds	r7, #16
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	2404325c 	.word	0x2404325c

080112bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80112bc:	b5b0      	push	{r4, r5, r7, lr}
 80112be:	b08a      	sub	sp, #40	@ 0x28
 80112c0:	af04      	add	r7, sp, #16
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d107      	bne.n	80112dc <etharp_input+0x20>
 80112cc:	4b3d      	ldr	r3, [pc, #244]	@ (80113c4 <etharp_input+0x108>)
 80112ce:	f240 228a 	movw	r2, #650	@ 0x28a
 80112d2:	493d      	ldr	r1, [pc, #244]	@ (80113c8 <etharp_input+0x10c>)
 80112d4:	483d      	ldr	r0, [pc, #244]	@ (80113cc <etharp_input+0x110>)
 80112d6:	f002 f8b5 	bl	8013444 <iprintf>
 80112da:	e06f      	b.n	80113bc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	685b      	ldr	r3, [r3, #4]
 80112e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	881b      	ldrh	r3, [r3, #0]
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80112ec:	d10c      	bne.n	8011308 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80112f2:	2b06      	cmp	r3, #6
 80112f4:	d108      	bne.n	8011308 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80112fa:	2b04      	cmp	r3, #4
 80112fc:	d104      	bne.n	8011308 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	885b      	ldrh	r3, [r3, #2]
 8011302:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011304:	2b08      	cmp	r3, #8
 8011306:	d003      	beq.n	8011310 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f7f8 fe23 	bl	8009f54 <pbuf_free>
    return;
 801130e:	e055      	b.n	80113bc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	330e      	adds	r3, #14
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	3318      	adds	r3, #24
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	3304      	adds	r3, #4
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d102      	bne.n	8011330 <etharp_input+0x74>
    for_us = 0;
 801132a:	2300      	movs	r3, #0
 801132c:	75fb      	strb	r3, [r7, #23]
 801132e:	e009      	b.n	8011344 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011330:	68ba      	ldr	r2, [r7, #8]
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	3304      	adds	r3, #4
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	429a      	cmp	r2, r3
 801133a:	bf0c      	ite	eq
 801133c:	2301      	moveq	r3, #1
 801133e:	2300      	movne	r3, #0
 8011340:	b2db      	uxtb	r3, r3
 8011342:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	f103 0208 	add.w	r2, r3, #8
 801134a:	7dfb      	ldrb	r3, [r7, #23]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d001      	beq.n	8011354 <etharp_input+0x98>
 8011350:	2301      	movs	r3, #1
 8011352:	e000      	b.n	8011356 <etharp_input+0x9a>
 8011354:	2302      	movs	r3, #2
 8011356:	f107 010c 	add.w	r1, r7, #12
 801135a:	6838      	ldr	r0, [r7, #0]
 801135c:	f7ff fed8 	bl	8011110 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	88db      	ldrh	r3, [r3, #6]
 8011364:	b29b      	uxth	r3, r3
 8011366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801136a:	d003      	beq.n	8011374 <etharp_input+0xb8>
 801136c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011370:	d01e      	beq.n	80113b0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011372:	e020      	b.n	80113b6 <etharp_input+0xfa>
      if (for_us) {
 8011374:	7dfb      	ldrb	r3, [r7, #23]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d01c      	beq.n	80113b4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011390:	693a      	ldr	r2, [r7, #16]
 8011392:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011394:	2102      	movs	r1, #2
 8011396:	9103      	str	r1, [sp, #12]
 8011398:	f107 010c 	add.w	r1, r7, #12
 801139c:	9102      	str	r1, [sp, #8]
 801139e:	9201      	str	r2, [sp, #4]
 80113a0:	9300      	str	r3, [sp, #0]
 80113a2:	462b      	mov	r3, r5
 80113a4:	4622      	mov	r2, r4
 80113a6:	4601      	mov	r1, r0
 80113a8:	6838      	ldr	r0, [r7, #0]
 80113aa:	f000 faeb 	bl	8011984 <etharp_raw>
      break;
 80113ae:	e001      	b.n	80113b4 <etharp_input+0xf8>
      break;
 80113b0:	bf00      	nop
 80113b2:	e000      	b.n	80113b6 <etharp_input+0xfa>
      break;
 80113b4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f7f8 fdcc 	bl	8009f54 <pbuf_free>
}
 80113bc:	3718      	adds	r7, #24
 80113be:	46bd      	mov	sp, r7
 80113c0:	bdb0      	pop	{r4, r5, r7, pc}
 80113c2:	bf00      	nop
 80113c4:	08016ddc 	.word	0x08016ddc
 80113c8:	08016f2c 	.word	0x08016f2c
 80113cc:	08016e54 	.word	0x08016e54

080113d0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b086      	sub	sp, #24
 80113d4:	af02      	add	r7, sp, #8
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	60b9      	str	r1, [r7, #8]
 80113da:	4613      	mov	r3, r2
 80113dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80113de:	79fa      	ldrb	r2, [r7, #7]
 80113e0:	4944      	ldr	r1, [pc, #272]	@ (80114f4 <etharp_output_to_arp_index+0x124>)
 80113e2:	4613      	mov	r3, r2
 80113e4:	005b      	lsls	r3, r3, #1
 80113e6:	4413      	add	r3, r2
 80113e8:	00db      	lsls	r3, r3, #3
 80113ea:	440b      	add	r3, r1
 80113ec:	3314      	adds	r3, #20
 80113ee:	781b      	ldrb	r3, [r3, #0]
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	d806      	bhi.n	8011402 <etharp_output_to_arp_index+0x32>
 80113f4:	4b40      	ldr	r3, [pc, #256]	@ (80114f8 <etharp_output_to_arp_index+0x128>)
 80113f6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80113fa:	4940      	ldr	r1, [pc, #256]	@ (80114fc <etharp_output_to_arp_index+0x12c>)
 80113fc:	4840      	ldr	r0, [pc, #256]	@ (8011500 <etharp_output_to_arp_index+0x130>)
 80113fe:	f002 f821 	bl	8013444 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011402:	79fa      	ldrb	r2, [r7, #7]
 8011404:	493b      	ldr	r1, [pc, #236]	@ (80114f4 <etharp_output_to_arp_index+0x124>)
 8011406:	4613      	mov	r3, r2
 8011408:	005b      	lsls	r3, r3, #1
 801140a:	4413      	add	r3, r2
 801140c:	00db      	lsls	r3, r3, #3
 801140e:	440b      	add	r3, r1
 8011410:	3314      	adds	r3, #20
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	2b02      	cmp	r3, #2
 8011416:	d153      	bne.n	80114c0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011418:	79fa      	ldrb	r2, [r7, #7]
 801141a:	4936      	ldr	r1, [pc, #216]	@ (80114f4 <etharp_output_to_arp_index+0x124>)
 801141c:	4613      	mov	r3, r2
 801141e:	005b      	lsls	r3, r3, #1
 8011420:	4413      	add	r3, r2
 8011422:	00db      	lsls	r3, r3, #3
 8011424:	440b      	add	r3, r1
 8011426:	3312      	adds	r3, #18
 8011428:	881b      	ldrh	r3, [r3, #0]
 801142a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801142e:	d919      	bls.n	8011464 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011430:	79fa      	ldrb	r2, [r7, #7]
 8011432:	4613      	mov	r3, r2
 8011434:	005b      	lsls	r3, r3, #1
 8011436:	4413      	add	r3, r2
 8011438:	00db      	lsls	r3, r3, #3
 801143a:	4a2e      	ldr	r2, [pc, #184]	@ (80114f4 <etharp_output_to_arp_index+0x124>)
 801143c:	4413      	add	r3, r2
 801143e:	3304      	adds	r3, #4
 8011440:	4619      	mov	r1, r3
 8011442:	68f8      	ldr	r0, [r7, #12]
 8011444:	f000 fb4c 	bl	8011ae0 <etharp_request>
 8011448:	4603      	mov	r3, r0
 801144a:	2b00      	cmp	r3, #0
 801144c:	d138      	bne.n	80114c0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801144e:	79fa      	ldrb	r2, [r7, #7]
 8011450:	4928      	ldr	r1, [pc, #160]	@ (80114f4 <etharp_output_to_arp_index+0x124>)
 8011452:	4613      	mov	r3, r2
 8011454:	005b      	lsls	r3, r3, #1
 8011456:	4413      	add	r3, r2
 8011458:	00db      	lsls	r3, r3, #3
 801145a:	440b      	add	r3, r1
 801145c:	3314      	adds	r3, #20
 801145e:	2203      	movs	r2, #3
 8011460:	701a      	strb	r2, [r3, #0]
 8011462:	e02d      	b.n	80114c0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011464:	79fa      	ldrb	r2, [r7, #7]
 8011466:	4923      	ldr	r1, [pc, #140]	@ (80114f4 <etharp_output_to_arp_index+0x124>)
 8011468:	4613      	mov	r3, r2
 801146a:	005b      	lsls	r3, r3, #1
 801146c:	4413      	add	r3, r2
 801146e:	00db      	lsls	r3, r3, #3
 8011470:	440b      	add	r3, r1
 8011472:	3312      	adds	r3, #18
 8011474:	881b      	ldrh	r3, [r3, #0]
 8011476:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801147a:	d321      	bcc.n	80114c0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801147c:	79fa      	ldrb	r2, [r7, #7]
 801147e:	4613      	mov	r3, r2
 8011480:	005b      	lsls	r3, r3, #1
 8011482:	4413      	add	r3, r2
 8011484:	00db      	lsls	r3, r3, #3
 8011486:	4a1b      	ldr	r2, [pc, #108]	@ (80114f4 <etharp_output_to_arp_index+0x124>)
 8011488:	4413      	add	r3, r2
 801148a:	1d19      	adds	r1, r3, #4
 801148c:	79fa      	ldrb	r2, [r7, #7]
 801148e:	4613      	mov	r3, r2
 8011490:	005b      	lsls	r3, r3, #1
 8011492:	4413      	add	r3, r2
 8011494:	00db      	lsls	r3, r3, #3
 8011496:	3308      	adds	r3, #8
 8011498:	4a16      	ldr	r2, [pc, #88]	@ (80114f4 <etharp_output_to_arp_index+0x124>)
 801149a:	4413      	add	r3, r2
 801149c:	3304      	adds	r3, #4
 801149e:	461a      	mov	r2, r3
 80114a0:	68f8      	ldr	r0, [r7, #12]
 80114a2:	f000 fafb 	bl	8011a9c <etharp_request_dst>
 80114a6:	4603      	mov	r3, r0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d109      	bne.n	80114c0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80114ac:	79fa      	ldrb	r2, [r7, #7]
 80114ae:	4911      	ldr	r1, [pc, #68]	@ (80114f4 <etharp_output_to_arp_index+0x124>)
 80114b0:	4613      	mov	r3, r2
 80114b2:	005b      	lsls	r3, r3, #1
 80114b4:	4413      	add	r3, r2
 80114b6:	00db      	lsls	r3, r3, #3
 80114b8:	440b      	add	r3, r1
 80114ba:	3314      	adds	r3, #20
 80114bc:	2203      	movs	r2, #3
 80114be:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80114c6:	79fa      	ldrb	r2, [r7, #7]
 80114c8:	4613      	mov	r3, r2
 80114ca:	005b      	lsls	r3, r3, #1
 80114cc:	4413      	add	r3, r2
 80114ce:	00db      	lsls	r3, r3, #3
 80114d0:	3308      	adds	r3, #8
 80114d2:	4a08      	ldr	r2, [pc, #32]	@ (80114f4 <etharp_output_to_arp_index+0x124>)
 80114d4:	4413      	add	r3, r2
 80114d6:	3304      	adds	r3, #4
 80114d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80114dc:	9200      	str	r2, [sp, #0]
 80114de:	460a      	mov	r2, r1
 80114e0:	68b9      	ldr	r1, [r7, #8]
 80114e2:	68f8      	ldr	r0, [r7, #12]
 80114e4:	f001 fe66 	bl	80131b4 <ethernet_output>
 80114e8:	4603      	mov	r3, r0
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3710      	adds	r7, #16
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	2404325c 	.word	0x2404325c
 80114f8:	08016ddc 	.word	0x08016ddc
 80114fc:	08016f4c 	.word	0x08016f4c
 8011500:	08016e54 	.word	0x08016e54

08011504 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b08a      	sub	sp, #40	@ 0x28
 8011508:	af02      	add	r7, sp, #8
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d106      	bne.n	8011528 <etharp_output+0x24>
 801151a:	4b73      	ldr	r3, [pc, #460]	@ (80116e8 <etharp_output+0x1e4>)
 801151c:	f240 321e 	movw	r2, #798	@ 0x31e
 8011520:	4972      	ldr	r1, [pc, #456]	@ (80116ec <etharp_output+0x1e8>)
 8011522:	4873      	ldr	r0, [pc, #460]	@ (80116f0 <etharp_output+0x1ec>)
 8011524:	f001 ff8e 	bl	8013444 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d106      	bne.n	801153c <etharp_output+0x38>
 801152e:	4b6e      	ldr	r3, [pc, #440]	@ (80116e8 <etharp_output+0x1e4>)
 8011530:	f240 321f 	movw	r2, #799	@ 0x31f
 8011534:	496f      	ldr	r1, [pc, #444]	@ (80116f4 <etharp_output+0x1f0>)
 8011536:	486e      	ldr	r0, [pc, #440]	@ (80116f0 <etharp_output+0x1ec>)
 8011538:	f001 ff84 	bl	8013444 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d106      	bne.n	8011550 <etharp_output+0x4c>
 8011542:	4b69      	ldr	r3, [pc, #420]	@ (80116e8 <etharp_output+0x1e4>)
 8011544:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8011548:	496b      	ldr	r1, [pc, #428]	@ (80116f8 <etharp_output+0x1f4>)
 801154a:	4869      	ldr	r0, [pc, #420]	@ (80116f0 <etharp_output+0x1ec>)
 801154c:	f001 ff7a 	bl	8013444 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	68f9      	ldr	r1, [r7, #12]
 8011556:	4618      	mov	r0, r3
 8011558:	f000 ff1e 	bl	8012398 <ip4_addr_isbroadcast_u32>
 801155c:	4603      	mov	r3, r0
 801155e:	2b00      	cmp	r3, #0
 8011560:	d002      	beq.n	8011568 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011562:	4b66      	ldr	r3, [pc, #408]	@ (80116fc <etharp_output+0x1f8>)
 8011564:	61fb      	str	r3, [r7, #28]
 8011566:	e0af      	b.n	80116c8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011570:	2be0      	cmp	r3, #224	@ 0xe0
 8011572:	d118      	bne.n	80115a6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011574:	2301      	movs	r3, #1
 8011576:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011578:	2300      	movs	r3, #0
 801157a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801157c:	235e      	movs	r3, #94	@ 0x5e
 801157e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	3301      	adds	r3, #1
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801158a:	b2db      	uxtb	r3, r3
 801158c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	3302      	adds	r3, #2
 8011592:	781b      	ldrb	r3, [r3, #0]
 8011594:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	3303      	adds	r3, #3
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801159e:	f107 0310 	add.w	r3, r7, #16
 80115a2:	61fb      	str	r3, [r7, #28]
 80115a4:	e090      	b.n	80116c8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	3304      	adds	r3, #4
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	405a      	eors	r2, r3
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	3308      	adds	r3, #8
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	4013      	ands	r3, r2
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d012      	beq.n	80115e4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80115c4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d00b      	beq.n	80115e4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	330c      	adds	r3, #12
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d003      	beq.n	80115de <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	330c      	adds	r3, #12
 80115da:	61bb      	str	r3, [r7, #24]
 80115dc:	e002      	b.n	80115e4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80115de:	f06f 0303 	mvn.w	r3, #3
 80115e2:	e07d      	b.n	80116e0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80115e4:	4b46      	ldr	r3, [pc, #280]	@ (8011700 <etharp_output+0x1fc>)
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	4619      	mov	r1, r3
 80115ea:	4a46      	ldr	r2, [pc, #280]	@ (8011704 <etharp_output+0x200>)
 80115ec:	460b      	mov	r3, r1
 80115ee:	005b      	lsls	r3, r3, #1
 80115f0:	440b      	add	r3, r1
 80115f2:	00db      	lsls	r3, r3, #3
 80115f4:	4413      	add	r3, r2
 80115f6:	3314      	adds	r3, #20
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d925      	bls.n	801164a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80115fe:	4b40      	ldr	r3, [pc, #256]	@ (8011700 <etharp_output+0x1fc>)
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	4619      	mov	r1, r3
 8011604:	4a3f      	ldr	r2, [pc, #252]	@ (8011704 <etharp_output+0x200>)
 8011606:	460b      	mov	r3, r1
 8011608:	005b      	lsls	r3, r3, #1
 801160a:	440b      	add	r3, r1
 801160c:	00db      	lsls	r3, r3, #3
 801160e:	4413      	add	r3, r2
 8011610:	3308      	adds	r3, #8
 8011612:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011614:	68fa      	ldr	r2, [r7, #12]
 8011616:	429a      	cmp	r2, r3
 8011618:	d117      	bne.n	801164a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801161a:	69bb      	ldr	r3, [r7, #24]
 801161c:	681a      	ldr	r2, [r3, #0]
 801161e:	4b38      	ldr	r3, [pc, #224]	@ (8011700 <etharp_output+0x1fc>)
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	4618      	mov	r0, r3
 8011624:	4937      	ldr	r1, [pc, #220]	@ (8011704 <etharp_output+0x200>)
 8011626:	4603      	mov	r3, r0
 8011628:	005b      	lsls	r3, r3, #1
 801162a:	4403      	add	r3, r0
 801162c:	00db      	lsls	r3, r3, #3
 801162e:	440b      	add	r3, r1
 8011630:	3304      	adds	r3, #4
 8011632:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011634:	429a      	cmp	r2, r3
 8011636:	d108      	bne.n	801164a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011638:	4b31      	ldr	r3, [pc, #196]	@ (8011700 <etharp_output+0x1fc>)
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	461a      	mov	r2, r3
 801163e:	68b9      	ldr	r1, [r7, #8]
 8011640:	68f8      	ldr	r0, [r7, #12]
 8011642:	f7ff fec5 	bl	80113d0 <etharp_output_to_arp_index>
 8011646:	4603      	mov	r3, r0
 8011648:	e04a      	b.n	80116e0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801164a:	2300      	movs	r3, #0
 801164c:	75fb      	strb	r3, [r7, #23]
 801164e:	e031      	b.n	80116b4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011650:	7dfa      	ldrb	r2, [r7, #23]
 8011652:	492c      	ldr	r1, [pc, #176]	@ (8011704 <etharp_output+0x200>)
 8011654:	4613      	mov	r3, r2
 8011656:	005b      	lsls	r3, r3, #1
 8011658:	4413      	add	r3, r2
 801165a:	00db      	lsls	r3, r3, #3
 801165c:	440b      	add	r3, r1
 801165e:	3314      	adds	r3, #20
 8011660:	781b      	ldrb	r3, [r3, #0]
 8011662:	2b01      	cmp	r3, #1
 8011664:	d923      	bls.n	80116ae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011666:	7dfa      	ldrb	r2, [r7, #23]
 8011668:	4926      	ldr	r1, [pc, #152]	@ (8011704 <etharp_output+0x200>)
 801166a:	4613      	mov	r3, r2
 801166c:	005b      	lsls	r3, r3, #1
 801166e:	4413      	add	r3, r2
 8011670:	00db      	lsls	r3, r3, #3
 8011672:	440b      	add	r3, r1
 8011674:	3308      	adds	r3, #8
 8011676:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011678:	68fa      	ldr	r2, [r7, #12]
 801167a:	429a      	cmp	r2, r3
 801167c:	d117      	bne.n	80116ae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801167e:	69bb      	ldr	r3, [r7, #24]
 8011680:	6819      	ldr	r1, [r3, #0]
 8011682:	7dfa      	ldrb	r2, [r7, #23]
 8011684:	481f      	ldr	r0, [pc, #124]	@ (8011704 <etharp_output+0x200>)
 8011686:	4613      	mov	r3, r2
 8011688:	005b      	lsls	r3, r3, #1
 801168a:	4413      	add	r3, r2
 801168c:	00db      	lsls	r3, r3, #3
 801168e:	4403      	add	r3, r0
 8011690:	3304      	adds	r3, #4
 8011692:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011694:	4299      	cmp	r1, r3
 8011696:	d10a      	bne.n	80116ae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011698:	4a19      	ldr	r2, [pc, #100]	@ (8011700 <etharp_output+0x1fc>)
 801169a:	7dfb      	ldrb	r3, [r7, #23]
 801169c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801169e:	7dfb      	ldrb	r3, [r7, #23]
 80116a0:	461a      	mov	r2, r3
 80116a2:	68b9      	ldr	r1, [r7, #8]
 80116a4:	68f8      	ldr	r0, [r7, #12]
 80116a6:	f7ff fe93 	bl	80113d0 <etharp_output_to_arp_index>
 80116aa:	4603      	mov	r3, r0
 80116ac:	e018      	b.n	80116e0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80116ae:	7dfb      	ldrb	r3, [r7, #23]
 80116b0:	3301      	adds	r3, #1
 80116b2:	75fb      	strb	r3, [r7, #23]
 80116b4:	7dfb      	ldrb	r3, [r7, #23]
 80116b6:	2b09      	cmp	r3, #9
 80116b8:	d9ca      	bls.n	8011650 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80116ba:	68ba      	ldr	r2, [r7, #8]
 80116bc:	69b9      	ldr	r1, [r7, #24]
 80116be:	68f8      	ldr	r0, [r7, #12]
 80116c0:	f000 f822 	bl	8011708 <etharp_query>
 80116c4:	4603      	mov	r3, r0
 80116c6:	e00b      	b.n	80116e0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80116ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80116d2:	9300      	str	r3, [sp, #0]
 80116d4:	69fb      	ldr	r3, [r7, #28]
 80116d6:	68b9      	ldr	r1, [r7, #8]
 80116d8:	68f8      	ldr	r0, [r7, #12]
 80116da:	f001 fd6b 	bl	80131b4 <ethernet_output>
 80116de:	4603      	mov	r3, r0
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3720      	adds	r7, #32
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	08016ddc 	.word	0x08016ddc
 80116ec:	08016f2c 	.word	0x08016f2c
 80116f0:	08016e54 	.word	0x08016e54
 80116f4:	08016f7c 	.word	0x08016f7c
 80116f8:	08016f1c 	.word	0x08016f1c
 80116fc:	080175a0 	.word	0x080175a0
 8011700:	2404334c 	.word	0x2404334c
 8011704:	2404325c 	.word	0x2404325c

08011708 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b08c      	sub	sp, #48	@ 0x30
 801170c:	af02      	add	r7, sp, #8
 801170e:	60f8      	str	r0, [r7, #12]
 8011710:	60b9      	str	r1, [r7, #8]
 8011712:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	3326      	adds	r3, #38	@ 0x26
 8011718:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801171a:	23ff      	movs	r3, #255	@ 0xff
 801171c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8011720:	2300      	movs	r3, #0
 8011722:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	68f9      	ldr	r1, [r7, #12]
 801172a:	4618      	mov	r0, r3
 801172c:	f000 fe34 	bl	8012398 <ip4_addr_isbroadcast_u32>
 8011730:	4603      	mov	r3, r0
 8011732:	2b00      	cmp	r3, #0
 8011734:	d10c      	bne.n	8011750 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801173e:	2be0      	cmp	r3, #224	@ 0xe0
 8011740:	d006      	beq.n	8011750 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d003      	beq.n	8011750 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d102      	bne.n	8011756 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011750:	f06f 030f 	mvn.w	r3, #15
 8011754:	e101      	b.n	801195a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011756:	68fa      	ldr	r2, [r7, #12]
 8011758:	2101      	movs	r1, #1
 801175a:	68b8      	ldr	r0, [r7, #8]
 801175c:	f7ff fb60 	bl	8010e20 <etharp_find_entry>
 8011760:	4603      	mov	r3, r0
 8011762:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011764:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011768:	2b00      	cmp	r3, #0
 801176a:	da02      	bge.n	8011772 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801176c:	8a7b      	ldrh	r3, [r7, #18]
 801176e:	b25b      	sxtb	r3, r3
 8011770:	e0f3      	b.n	801195a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011772:	8a7b      	ldrh	r3, [r7, #18]
 8011774:	2b7e      	cmp	r3, #126	@ 0x7e
 8011776:	d906      	bls.n	8011786 <etharp_query+0x7e>
 8011778:	4b7a      	ldr	r3, [pc, #488]	@ (8011964 <etharp_query+0x25c>)
 801177a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801177e:	497a      	ldr	r1, [pc, #488]	@ (8011968 <etharp_query+0x260>)
 8011780:	487a      	ldr	r0, [pc, #488]	@ (801196c <etharp_query+0x264>)
 8011782:	f001 fe5f 	bl	8013444 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011786:	8a7b      	ldrh	r3, [r7, #18]
 8011788:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801178a:	7c7a      	ldrb	r2, [r7, #17]
 801178c:	4978      	ldr	r1, [pc, #480]	@ (8011970 <etharp_query+0x268>)
 801178e:	4613      	mov	r3, r2
 8011790:	005b      	lsls	r3, r3, #1
 8011792:	4413      	add	r3, r2
 8011794:	00db      	lsls	r3, r3, #3
 8011796:	440b      	add	r3, r1
 8011798:	3314      	adds	r3, #20
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d115      	bne.n	80117cc <etharp_query+0xc4>
    is_new_entry = 1;
 80117a0:	2301      	movs	r3, #1
 80117a2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80117a4:	7c7a      	ldrb	r2, [r7, #17]
 80117a6:	4972      	ldr	r1, [pc, #456]	@ (8011970 <etharp_query+0x268>)
 80117a8:	4613      	mov	r3, r2
 80117aa:	005b      	lsls	r3, r3, #1
 80117ac:	4413      	add	r3, r2
 80117ae:	00db      	lsls	r3, r3, #3
 80117b0:	440b      	add	r3, r1
 80117b2:	3314      	adds	r3, #20
 80117b4:	2201      	movs	r2, #1
 80117b6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80117b8:	7c7a      	ldrb	r2, [r7, #17]
 80117ba:	496d      	ldr	r1, [pc, #436]	@ (8011970 <etharp_query+0x268>)
 80117bc:	4613      	mov	r3, r2
 80117be:	005b      	lsls	r3, r3, #1
 80117c0:	4413      	add	r3, r2
 80117c2:	00db      	lsls	r3, r3, #3
 80117c4:	440b      	add	r3, r1
 80117c6:	3308      	adds	r3, #8
 80117c8:	68fa      	ldr	r2, [r7, #12]
 80117ca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80117cc:	7c7a      	ldrb	r2, [r7, #17]
 80117ce:	4968      	ldr	r1, [pc, #416]	@ (8011970 <etharp_query+0x268>)
 80117d0:	4613      	mov	r3, r2
 80117d2:	005b      	lsls	r3, r3, #1
 80117d4:	4413      	add	r3, r2
 80117d6:	00db      	lsls	r3, r3, #3
 80117d8:	440b      	add	r3, r1
 80117da:	3314      	adds	r3, #20
 80117dc:	781b      	ldrb	r3, [r3, #0]
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d011      	beq.n	8011806 <etharp_query+0xfe>
 80117e2:	7c7a      	ldrb	r2, [r7, #17]
 80117e4:	4962      	ldr	r1, [pc, #392]	@ (8011970 <etharp_query+0x268>)
 80117e6:	4613      	mov	r3, r2
 80117e8:	005b      	lsls	r3, r3, #1
 80117ea:	4413      	add	r3, r2
 80117ec:	00db      	lsls	r3, r3, #3
 80117ee:	440b      	add	r3, r1
 80117f0:	3314      	adds	r3, #20
 80117f2:	781b      	ldrb	r3, [r3, #0]
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	d806      	bhi.n	8011806 <etharp_query+0xfe>
 80117f8:	4b5a      	ldr	r3, [pc, #360]	@ (8011964 <etharp_query+0x25c>)
 80117fa:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80117fe:	495d      	ldr	r1, [pc, #372]	@ (8011974 <etharp_query+0x26c>)
 8011800:	485a      	ldr	r0, [pc, #360]	@ (801196c <etharp_query+0x264>)
 8011802:	f001 fe1f 	bl	8013444 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011806:	6a3b      	ldr	r3, [r7, #32]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d102      	bne.n	8011812 <etharp_query+0x10a>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d10c      	bne.n	801182c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011812:	68b9      	ldr	r1, [r7, #8]
 8011814:	68f8      	ldr	r0, [r7, #12]
 8011816:	f000 f963 	bl	8011ae0 <etharp_request>
 801181a:	4603      	mov	r3, r0
 801181c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d102      	bne.n	801182c <etharp_query+0x124>
      return result;
 8011826:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801182a:	e096      	b.n	801195a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d106      	bne.n	8011840 <etharp_query+0x138>
 8011832:	4b4c      	ldr	r3, [pc, #304]	@ (8011964 <etharp_query+0x25c>)
 8011834:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8011838:	494f      	ldr	r1, [pc, #316]	@ (8011978 <etharp_query+0x270>)
 801183a:	484c      	ldr	r0, [pc, #304]	@ (801196c <etharp_query+0x264>)
 801183c:	f001 fe02 	bl	8013444 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011840:	7c7a      	ldrb	r2, [r7, #17]
 8011842:	494b      	ldr	r1, [pc, #300]	@ (8011970 <etharp_query+0x268>)
 8011844:	4613      	mov	r3, r2
 8011846:	005b      	lsls	r3, r3, #1
 8011848:	4413      	add	r3, r2
 801184a:	00db      	lsls	r3, r3, #3
 801184c:	440b      	add	r3, r1
 801184e:	3314      	adds	r3, #20
 8011850:	781b      	ldrb	r3, [r3, #0]
 8011852:	2b01      	cmp	r3, #1
 8011854:	d917      	bls.n	8011886 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011856:	4a49      	ldr	r2, [pc, #292]	@ (801197c <etharp_query+0x274>)
 8011858:	7c7b      	ldrb	r3, [r7, #17]
 801185a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801185c:	7c7a      	ldrb	r2, [r7, #17]
 801185e:	4613      	mov	r3, r2
 8011860:	005b      	lsls	r3, r3, #1
 8011862:	4413      	add	r3, r2
 8011864:	00db      	lsls	r3, r3, #3
 8011866:	3308      	adds	r3, #8
 8011868:	4a41      	ldr	r2, [pc, #260]	@ (8011970 <etharp_query+0x268>)
 801186a:	4413      	add	r3, r2
 801186c:	3304      	adds	r3, #4
 801186e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011872:	9200      	str	r2, [sp, #0]
 8011874:	697a      	ldr	r2, [r7, #20]
 8011876:	6879      	ldr	r1, [r7, #4]
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f001 fc9b 	bl	80131b4 <ethernet_output>
 801187e:	4603      	mov	r3, r0
 8011880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011884:	e067      	b.n	8011956 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011886:	7c7a      	ldrb	r2, [r7, #17]
 8011888:	4939      	ldr	r1, [pc, #228]	@ (8011970 <etharp_query+0x268>)
 801188a:	4613      	mov	r3, r2
 801188c:	005b      	lsls	r3, r3, #1
 801188e:	4413      	add	r3, r2
 8011890:	00db      	lsls	r3, r3, #3
 8011892:	440b      	add	r3, r1
 8011894:	3314      	adds	r3, #20
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	2b01      	cmp	r3, #1
 801189a:	d15c      	bne.n	8011956 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801189c:	2300      	movs	r3, #0
 801189e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80118a4:	e01c      	b.n	80118e0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80118a6:	69fb      	ldr	r3, [r7, #28]
 80118a8:	895a      	ldrh	r2, [r3, #10]
 80118aa:	69fb      	ldr	r3, [r7, #28]
 80118ac:	891b      	ldrh	r3, [r3, #8]
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d10a      	bne.n	80118c8 <etharp_query+0x1c0>
 80118b2:	69fb      	ldr	r3, [r7, #28]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d006      	beq.n	80118c8 <etharp_query+0x1c0>
 80118ba:	4b2a      	ldr	r3, [pc, #168]	@ (8011964 <etharp_query+0x25c>)
 80118bc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80118c0:	492f      	ldr	r1, [pc, #188]	@ (8011980 <etharp_query+0x278>)
 80118c2:	482a      	ldr	r0, [pc, #168]	@ (801196c <etharp_query+0x264>)
 80118c4:	f001 fdbe 	bl	8013444 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80118c8:	69fb      	ldr	r3, [r7, #28]
 80118ca:	7b1b      	ldrb	r3, [r3, #12]
 80118cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d002      	beq.n	80118da <etharp_query+0x1d2>
        copy_needed = 1;
 80118d4:	2301      	movs	r3, #1
 80118d6:	61bb      	str	r3, [r7, #24]
        break;
 80118d8:	e005      	b.n	80118e6 <etharp_query+0x1de>
      }
      p = p->next;
 80118da:	69fb      	ldr	r3, [r7, #28]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	61fb      	str	r3, [r7, #28]
    while (p) {
 80118e0:	69fb      	ldr	r3, [r7, #28]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d1df      	bne.n	80118a6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80118e6:	69bb      	ldr	r3, [r7, #24]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d007      	beq.n	80118fc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80118ec:	687a      	ldr	r2, [r7, #4]
 80118ee:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80118f2:	200e      	movs	r0, #14
 80118f4:	f7f8 fdb4 	bl	800a460 <pbuf_clone>
 80118f8:	61f8      	str	r0, [r7, #28]
 80118fa:	e004      	b.n	8011906 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011900:	69f8      	ldr	r0, [r7, #28]
 8011902:	f7f8 fbc7 	bl	800a094 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011906:	69fb      	ldr	r3, [r7, #28]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d021      	beq.n	8011950 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801190c:	7c7a      	ldrb	r2, [r7, #17]
 801190e:	4918      	ldr	r1, [pc, #96]	@ (8011970 <etharp_query+0x268>)
 8011910:	4613      	mov	r3, r2
 8011912:	005b      	lsls	r3, r3, #1
 8011914:	4413      	add	r3, r2
 8011916:	00db      	lsls	r3, r3, #3
 8011918:	440b      	add	r3, r1
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00a      	beq.n	8011936 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011920:	7c7a      	ldrb	r2, [r7, #17]
 8011922:	4913      	ldr	r1, [pc, #76]	@ (8011970 <etharp_query+0x268>)
 8011924:	4613      	mov	r3, r2
 8011926:	005b      	lsls	r3, r3, #1
 8011928:	4413      	add	r3, r2
 801192a:	00db      	lsls	r3, r3, #3
 801192c:	440b      	add	r3, r1
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	4618      	mov	r0, r3
 8011932:	f7f8 fb0f 	bl	8009f54 <pbuf_free>
      }
      arp_table[i].q = p;
 8011936:	7c7a      	ldrb	r2, [r7, #17]
 8011938:	490d      	ldr	r1, [pc, #52]	@ (8011970 <etharp_query+0x268>)
 801193a:	4613      	mov	r3, r2
 801193c:	005b      	lsls	r3, r3, #1
 801193e:	4413      	add	r3, r2
 8011940:	00db      	lsls	r3, r3, #3
 8011942:	440b      	add	r3, r1
 8011944:	69fa      	ldr	r2, [r7, #28]
 8011946:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011948:	2300      	movs	r3, #0
 801194a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801194e:	e002      	b.n	8011956 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011950:	23ff      	movs	r3, #255	@ 0xff
 8011952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8011956:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801195a:	4618      	mov	r0, r3
 801195c:	3728      	adds	r7, #40	@ 0x28
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}
 8011962:	bf00      	nop
 8011964:	08016ddc 	.word	0x08016ddc
 8011968:	08016f88 	.word	0x08016f88
 801196c:	08016e54 	.word	0x08016e54
 8011970:	2404325c 	.word	0x2404325c
 8011974:	08016f98 	.word	0x08016f98
 8011978:	08016f7c 	.word	0x08016f7c
 801197c:	2404334c 	.word	0x2404334c
 8011980:	08016fc0 	.word	0x08016fc0

08011984 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b08a      	sub	sp, #40	@ 0x28
 8011988:	af02      	add	r7, sp, #8
 801198a:	60f8      	str	r0, [r7, #12]
 801198c:	60b9      	str	r1, [r7, #8]
 801198e:	607a      	str	r2, [r7, #4]
 8011990:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011992:	2300      	movs	r3, #0
 8011994:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d106      	bne.n	80119aa <etharp_raw+0x26>
 801199c:	4b3a      	ldr	r3, [pc, #232]	@ (8011a88 <etharp_raw+0x104>)
 801199e:	f240 4257 	movw	r2, #1111	@ 0x457
 80119a2:	493a      	ldr	r1, [pc, #232]	@ (8011a8c <etharp_raw+0x108>)
 80119a4:	483a      	ldr	r0, [pc, #232]	@ (8011a90 <etharp_raw+0x10c>)
 80119a6:	f001 fd4d 	bl	8013444 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80119aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80119ae:	211c      	movs	r1, #28
 80119b0:	200e      	movs	r0, #14
 80119b2:	f7f7 ffed 	bl	8009990 <pbuf_alloc>
 80119b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80119b8:	69bb      	ldr	r3, [r7, #24]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d102      	bne.n	80119c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80119be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80119c2:	e05d      	b.n	8011a80 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80119c4:	69bb      	ldr	r3, [r7, #24]
 80119c6:	895b      	ldrh	r3, [r3, #10]
 80119c8:	2b1b      	cmp	r3, #27
 80119ca:	d806      	bhi.n	80119da <etharp_raw+0x56>
 80119cc:	4b2e      	ldr	r3, [pc, #184]	@ (8011a88 <etharp_raw+0x104>)
 80119ce:	f240 4262 	movw	r2, #1122	@ 0x462
 80119d2:	4930      	ldr	r1, [pc, #192]	@ (8011a94 <etharp_raw+0x110>)
 80119d4:	482e      	ldr	r0, [pc, #184]	@ (8011a90 <etharp_raw+0x10c>)
 80119d6:	f001 fd35 	bl	8013444 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80119da:	69bb      	ldr	r3, [r7, #24]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80119e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7f6 fe98 	bl	8008718 <lwip_htons>
 80119e8:	4603      	mov	r3, r0
 80119ea:	461a      	mov	r2, r3
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80119f6:	2b06      	cmp	r3, #6
 80119f8:	d006      	beq.n	8011a08 <etharp_raw+0x84>
 80119fa:	4b23      	ldr	r3, [pc, #140]	@ (8011a88 <etharp_raw+0x104>)
 80119fc:	f240 4269 	movw	r2, #1129	@ 0x469
 8011a00:	4925      	ldr	r1, [pc, #148]	@ (8011a98 <etharp_raw+0x114>)
 8011a02:	4823      	ldr	r0, [pc, #140]	@ (8011a90 <etharp_raw+0x10c>)
 8011a04:	f001 fd1e 	bl	8013444 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	3308      	adds	r3, #8
 8011a0c:	2206      	movs	r2, #6
 8011a0e:	6839      	ldr	r1, [r7, #0]
 8011a10:	4618      	mov	r0, r3
 8011a12:	f001 fdf2 	bl	80135fa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	3312      	adds	r3, #18
 8011a1a:	2206      	movs	r2, #6
 8011a1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f001 fdeb 	bl	80135fa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	330e      	adds	r3, #14
 8011a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a2a:	6812      	ldr	r2, [r2, #0]
 8011a2c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	3318      	adds	r3, #24
 8011a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a34:	6812      	ldr	r2, [r2, #0]
 8011a36:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	701a      	strb	r2, [r3, #0]
 8011a3e:	2200      	movs	r2, #0
 8011a40:	f042 0201 	orr.w	r2, r2, #1
 8011a44:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	2200      	movs	r2, #0
 8011a4a:	f042 0208 	orr.w	r2, r2, #8
 8011a4e:	709a      	strb	r2, [r3, #2]
 8011a50:	2200      	movs	r2, #0
 8011a52:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	2206      	movs	r2, #6
 8011a58:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	2204      	movs	r2, #4
 8011a5e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011a60:	f640 0306 	movw	r3, #2054	@ 0x806
 8011a64:	9300      	str	r3, [sp, #0]
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	68ba      	ldr	r2, [r7, #8]
 8011a6a:	69b9      	ldr	r1, [r7, #24]
 8011a6c:	68f8      	ldr	r0, [r7, #12]
 8011a6e:	f001 fba1 	bl	80131b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011a72:	69b8      	ldr	r0, [r7, #24]
 8011a74:	f7f8 fa6e 	bl	8009f54 <pbuf_free>
  p = NULL;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011a7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3720      	adds	r7, #32
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	08016ddc 	.word	0x08016ddc
 8011a8c:	08016f2c 	.word	0x08016f2c
 8011a90:	08016e54 	.word	0x08016e54
 8011a94:	08016fdc 	.word	0x08016fdc
 8011a98:	08017010 	.word	0x08017010

08011a9c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b088      	sub	sp, #32
 8011aa0:	af04      	add	r7, sp, #16
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	60b9      	str	r1, [r7, #8]
 8011aa6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011ab8:	2201      	movs	r2, #1
 8011aba:	9203      	str	r2, [sp, #12]
 8011abc:	68ba      	ldr	r2, [r7, #8]
 8011abe:	9202      	str	r2, [sp, #8]
 8011ac0:	4a06      	ldr	r2, [pc, #24]	@ (8011adc <etharp_request_dst+0x40>)
 8011ac2:	9201      	str	r2, [sp, #4]
 8011ac4:	9300      	str	r3, [sp, #0]
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	687a      	ldr	r2, [r7, #4]
 8011aca:	68f8      	ldr	r0, [r7, #12]
 8011acc:	f7ff ff5a 	bl	8011984 <etharp_raw>
 8011ad0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3710      	adds	r7, #16
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
 8011ada:	bf00      	nop
 8011adc:	080175a8 	.word	0x080175a8

08011ae0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011aea:	4a05      	ldr	r2, [pc, #20]	@ (8011b00 <etharp_request+0x20>)
 8011aec:	6839      	ldr	r1, [r7, #0]
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f7ff ffd4 	bl	8011a9c <etharp_request_dst>
 8011af4:	4603      	mov	r3, r0
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3708      	adds	r7, #8
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	080175a0 	.word	0x080175a0

08011b04 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b08e      	sub	sp, #56	@ 0x38
 8011b08:	af04      	add	r7, sp, #16
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011b0e:	4b87      	ldr	r3, [pc, #540]	@ (8011d2c <icmp_input+0x228>)
 8011b10:	689b      	ldr	r3, [r3, #8]
 8011b12:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	f003 030f 	and.w	r3, r3, #15
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	009b      	lsls	r3, r3, #2
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8011b24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011b26:	2b13      	cmp	r3, #19
 8011b28:	f240 80e8 	bls.w	8011cfc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	895b      	ldrh	r3, [r3, #10]
 8011b30:	2b03      	cmp	r3, #3
 8011b32:	f240 80e5 	bls.w	8011d00 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011b40:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	f000 80d2 	beq.w	8011cee <icmp_input+0x1ea>
 8011b4a:	2b08      	cmp	r3, #8
 8011b4c:	f040 80d2 	bne.w	8011cf4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011b50:	4b77      	ldr	r3, [pc, #476]	@ (8011d30 <icmp_input+0x22c>)
 8011b52:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011b54:	4b75      	ldr	r3, [pc, #468]	@ (8011d2c <icmp_input+0x228>)
 8011b56:	695b      	ldr	r3, [r3, #20]
 8011b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011b5c:	2be0      	cmp	r3, #224	@ 0xe0
 8011b5e:	f000 80d6 	beq.w	8011d0e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011b62:	4b72      	ldr	r3, [pc, #456]	@ (8011d2c <icmp_input+0x228>)
 8011b64:	695b      	ldr	r3, [r3, #20]
 8011b66:	4a71      	ldr	r2, [pc, #452]	@ (8011d2c <icmp_input+0x228>)
 8011b68:	6812      	ldr	r2, [r2, #0]
 8011b6a:	4611      	mov	r1, r2
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f000 fc13 	bl	8012398 <ip4_addr_isbroadcast_u32>
 8011b72:	4603      	mov	r3, r0
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	f040 80cc 	bne.w	8011d12 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	891b      	ldrh	r3, [r3, #8]
 8011b7e:	2b07      	cmp	r3, #7
 8011b80:	f240 80c0 	bls.w	8011d04 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f7f6 fe65 	bl	8008854 <inet_chksum_pbuf>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d003      	beq.n	8011b98 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f7f8 f9df 	bl	8009f54 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8011b96:	e0c5      	b.n	8011d24 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011b98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011b9a:	330e      	adds	r3, #14
 8011b9c:	4619      	mov	r1, r3
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f7f8 f942 	bl	8009e28 <pbuf_add_header>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d04b      	beq.n	8011c42 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	891a      	ldrh	r2, [r3, #8]
 8011bae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011bb0:	4413      	add	r3, r2
 8011bb2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	891b      	ldrh	r3, [r3, #8]
 8011bb8:	8b7a      	ldrh	r2, [r7, #26]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	f0c0 80ab 	bcc.w	8011d16 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011bc0:	8b7b      	ldrh	r3, [r7, #26]
 8011bc2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	200e      	movs	r0, #14
 8011bca:	f7f7 fee1 	bl	8009990 <pbuf_alloc>
 8011bce:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	f000 80a1 	beq.w	8011d1a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	895b      	ldrh	r3, [r3, #10]
 8011bdc:	461a      	mov	r2, r3
 8011bde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011be0:	3308      	adds	r3, #8
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d203      	bcs.n	8011bee <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011be6:	6978      	ldr	r0, [r7, #20]
 8011be8:	f7f8 f9b4 	bl	8009f54 <pbuf_free>
          goto icmperr;
 8011bec:	e096      	b.n	8011d1c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	685b      	ldr	r3, [r3, #4]
 8011bf2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011bf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f001 fcff 	bl	80135fa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011bfc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011bfe:	4619      	mov	r1, r3
 8011c00:	6978      	ldr	r0, [r7, #20]
 8011c02:	f7f8 f921 	bl	8009e48 <pbuf_remove_header>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d009      	beq.n	8011c20 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011c0c:	4b49      	ldr	r3, [pc, #292]	@ (8011d34 <icmp_input+0x230>)
 8011c0e:	22b6      	movs	r2, #182	@ 0xb6
 8011c10:	4949      	ldr	r1, [pc, #292]	@ (8011d38 <icmp_input+0x234>)
 8011c12:	484a      	ldr	r0, [pc, #296]	@ (8011d3c <icmp_input+0x238>)
 8011c14:	f001 fc16 	bl	8013444 <iprintf>
          pbuf_free(r);
 8011c18:	6978      	ldr	r0, [r7, #20]
 8011c1a:	f7f8 f99b 	bl	8009f54 <pbuf_free>
          goto icmperr;
 8011c1e:	e07d      	b.n	8011d1c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011c20:	6879      	ldr	r1, [r7, #4]
 8011c22:	6978      	ldr	r0, [r7, #20]
 8011c24:	f7f8 faae 	bl	800a184 <pbuf_copy>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d003      	beq.n	8011c36 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011c2e:	6978      	ldr	r0, [r7, #20]
 8011c30:	f7f8 f990 	bl	8009f54 <pbuf_free>
          goto icmperr;
 8011c34:	e072      	b.n	8011d1c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7f8 f98c 	bl	8009f54 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	607b      	str	r3, [r7, #4]
 8011c40:	e00f      	b.n	8011c62 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011c42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011c44:	330e      	adds	r3, #14
 8011c46:	4619      	mov	r1, r3
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f7f8 f8fd 	bl	8009e48 <pbuf_remove_header>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d006      	beq.n	8011c62 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011c54:	4b37      	ldr	r3, [pc, #220]	@ (8011d34 <icmp_input+0x230>)
 8011c56:	22c7      	movs	r2, #199	@ 0xc7
 8011c58:	4939      	ldr	r1, [pc, #228]	@ (8011d40 <icmp_input+0x23c>)
 8011c5a:	4838      	ldr	r0, [pc, #224]	@ (8011d3c <icmp_input+0x238>)
 8011c5c:	f001 fbf2 	bl	8013444 <iprintf>
          goto icmperr;
 8011c60:	e05c      	b.n	8011d1c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011c68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f7f8 f8db 	bl	8009e28 <pbuf_add_header>
 8011c72:	4603      	mov	r3, r0
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d13c      	bne.n	8011cf2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011c7e:	69fb      	ldr	r3, [r7, #28]
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011c86:	4b29      	ldr	r3, [pc, #164]	@ (8011d2c <icmp_input+0x228>)
 8011c88:	691a      	ldr	r2, [r3, #16]
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	2200      	movs	r2, #0
 8011c92:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	885b      	ldrh	r3, [r3, #2]
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8011c9e:	4293      	cmp	r3, r2
 8011ca0:	d907      	bls.n	8011cb2 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	885b      	ldrh	r3, [r3, #2]
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	3309      	adds	r3, #9
 8011caa:	b29a      	uxth	r2, r3
 8011cac:	693b      	ldr	r3, [r7, #16]
 8011cae:	805a      	strh	r2, [r3, #2]
 8011cb0:	e006      	b.n	8011cc0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	885b      	ldrh	r3, [r3, #2]
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	3308      	adds	r3, #8
 8011cba:	b29a      	uxth	r2, r3
 8011cbc:	693b      	ldr	r3, [r7, #16]
 8011cbe:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	22ff      	movs	r2, #255	@ 0xff
 8011cc4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	729a      	strb	r2, [r3, #10]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	9302      	str	r3, [sp, #8]
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	9301      	str	r3, [sp, #4]
 8011cd8:	2300      	movs	r3, #0
 8011cda:	9300      	str	r3, [sp, #0]
 8011cdc:	23ff      	movs	r3, #255	@ 0xff
 8011cde:	2200      	movs	r2, #0
 8011ce0:	69f9      	ldr	r1, [r7, #28]
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f000 fa80 	bl	80121e8 <ip4_output_if>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011cec:	e001      	b.n	8011cf2 <icmp_input+0x1ee>
      break;
 8011cee:	bf00      	nop
 8011cf0:	e000      	b.n	8011cf4 <icmp_input+0x1f0>
      break;
 8011cf2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7f8 f92d 	bl	8009f54 <pbuf_free>
  return;
 8011cfa:	e013      	b.n	8011d24 <icmp_input+0x220>
    goto lenerr;
 8011cfc:	bf00      	nop
 8011cfe:	e002      	b.n	8011d06 <icmp_input+0x202>
    goto lenerr;
 8011d00:	bf00      	nop
 8011d02:	e000      	b.n	8011d06 <icmp_input+0x202>
        goto lenerr;
 8011d04:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f7f8 f924 	bl	8009f54 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011d0c:	e00a      	b.n	8011d24 <icmp_input+0x220>
        goto icmperr;
 8011d0e:	bf00      	nop
 8011d10:	e004      	b.n	8011d1c <icmp_input+0x218>
        goto icmperr;
 8011d12:	bf00      	nop
 8011d14:	e002      	b.n	8011d1c <icmp_input+0x218>
          goto icmperr;
 8011d16:	bf00      	nop
 8011d18:	e000      	b.n	8011d1c <icmp_input+0x218>
          goto icmperr;
 8011d1a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f7f8 f919 	bl	8009f54 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011d22:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011d24:	3728      	adds	r7, #40	@ 0x28
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
 8011d2a:	bf00      	nop
 8011d2c:	240402e0 	.word	0x240402e0
 8011d30:	240402f4 	.word	0x240402f4
 8011d34:	08017054 	.word	0x08017054
 8011d38:	0801708c 	.word	0x0801708c
 8011d3c:	080170c4 	.word	0x080170c4
 8011d40:	080170ec 	.word	0x080170ec

08011d44 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	460b      	mov	r3, r1
 8011d4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011d50:	78fb      	ldrb	r3, [r7, #3]
 8011d52:	461a      	mov	r2, r3
 8011d54:	2103      	movs	r1, #3
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 f814 	bl	8011d84 <icmp_send_response>
}
 8011d5c:	bf00      	nop
 8011d5e:	3708      	adds	r7, #8
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}

08011d64 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011d70:	78fb      	ldrb	r3, [r7, #3]
 8011d72:	461a      	mov	r2, r3
 8011d74:	210b      	movs	r1, #11
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f000 f804 	bl	8011d84 <icmp_send_response>
}
 8011d7c:	bf00      	nop
 8011d7e:	3708      	adds	r7, #8
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b08c      	sub	sp, #48	@ 0x30
 8011d88:	af04      	add	r7, sp, #16
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	460b      	mov	r3, r1
 8011d8e:	70fb      	strb	r3, [r7, #3]
 8011d90:	4613      	mov	r3, r2
 8011d92:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011d94:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011d98:	2124      	movs	r1, #36	@ 0x24
 8011d9a:	2022      	movs	r0, #34	@ 0x22
 8011d9c:	f7f7 fdf8 	bl	8009990 <pbuf_alloc>
 8011da0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011da2:	69fb      	ldr	r3, [r7, #28]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d056      	beq.n	8011e56 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011da8:	69fb      	ldr	r3, [r7, #28]
 8011daa:	895b      	ldrh	r3, [r3, #10]
 8011dac:	2b23      	cmp	r3, #35	@ 0x23
 8011dae:	d806      	bhi.n	8011dbe <icmp_send_response+0x3a>
 8011db0:	4b2b      	ldr	r3, [pc, #172]	@ (8011e60 <icmp_send_response+0xdc>)
 8011db2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8011db6:	492b      	ldr	r1, [pc, #172]	@ (8011e64 <icmp_send_response+0xe0>)
 8011db8:	482b      	ldr	r0, [pc, #172]	@ (8011e68 <icmp_send_response+0xe4>)
 8011dba:	f001 fb43 	bl	8013444 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011dc4:	69fb      	ldr	r3, [r7, #28]
 8011dc6:	685b      	ldr	r3, [r3, #4]
 8011dc8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	78fa      	ldrb	r2, [r7, #3]
 8011dce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	78ba      	ldrb	r2, [r7, #2]
 8011dd4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	2200      	movs	r2, #0
 8011dda:	711a      	strb	r2, [r3, #4]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	2200      	movs	r2, #0
 8011de4:	719a      	strb	r2, [r3, #6]
 8011de6:	2200      	movs	r2, #0
 8011de8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011dea:	69fb      	ldr	r3, [r7, #28]
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	f103 0008 	add.w	r0, r3, #8
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	221c      	movs	r2, #28
 8011df8:	4619      	mov	r1, r3
 8011dfa:	f001 fbfe 	bl	80135fa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	68db      	ldr	r3, [r3, #12]
 8011e02:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011e04:	f107 030c 	add.w	r3, r7, #12
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f000 f82f 	bl	8011e6c <ip4_route>
 8011e0e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d01b      	beq.n	8011e4e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	2200      	movs	r2, #0
 8011e1a:	709a      	strb	r2, [r3, #2]
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011e20:	69fb      	ldr	r3, [r7, #28]
 8011e22:	895b      	ldrh	r3, [r3, #10]
 8011e24:	4619      	mov	r1, r3
 8011e26:	6978      	ldr	r0, [r7, #20]
 8011e28:	f7f6 fd02 	bl	8008830 <inet_chksum>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	461a      	mov	r2, r3
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011e34:	f107 020c 	add.w	r2, r7, #12
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	9302      	str	r3, [sp, #8]
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	9301      	str	r3, [sp, #4]
 8011e40:	2300      	movs	r3, #0
 8011e42:	9300      	str	r3, [sp, #0]
 8011e44:	23ff      	movs	r3, #255	@ 0xff
 8011e46:	2100      	movs	r1, #0
 8011e48:	69f8      	ldr	r0, [r7, #28]
 8011e4a:	f000 f9cd 	bl	80121e8 <ip4_output_if>
  }
  pbuf_free(q);
 8011e4e:	69f8      	ldr	r0, [r7, #28]
 8011e50:	f7f8 f880 	bl	8009f54 <pbuf_free>
 8011e54:	e000      	b.n	8011e58 <icmp_send_response+0xd4>
    return;
 8011e56:	bf00      	nop
}
 8011e58:	3720      	adds	r7, #32
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	08017054 	.word	0x08017054
 8011e64:	08017120 	.word	0x08017120
 8011e68:	080170c4 	.word	0x080170c4

08011e6c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b085      	sub	sp, #20
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011e74:	4b33      	ldr	r3, [pc, #204]	@ (8011f44 <ip4_route+0xd8>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	60fb      	str	r3, [r7, #12]
 8011e7a:	e036      	b.n	8011eea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011e82:	f003 0301 	and.w	r3, r3, #1
 8011e86:	b2db      	uxtb	r3, r3
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d02b      	beq.n	8011ee4 <ip4_route+0x78>
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011e92:	089b      	lsrs	r3, r3, #2
 8011e94:	f003 0301 	and.w	r3, r3, #1
 8011e98:	b2db      	uxtb	r3, r3
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d022      	beq.n	8011ee4 <ip4_route+0x78>
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	3304      	adds	r3, #4
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d01d      	beq.n	8011ee4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	3304      	adds	r3, #4
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	405a      	eors	r2, r3
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	3308      	adds	r3, #8
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	4013      	ands	r3, r2
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d101      	bne.n	8011ec4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	e038      	b.n	8011f36 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011eca:	f003 0302 	and.w	r3, r3, #2
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d108      	bne.n	8011ee4 <ip4_route+0x78>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681a      	ldr	r2, [r3, #0]
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	330c      	adds	r3, #12
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d101      	bne.n	8011ee4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	e028      	b.n	8011f36 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	60fb      	str	r3, [r7, #12]
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d1c5      	bne.n	8011e7c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011ef0:	4b15      	ldr	r3, [pc, #84]	@ (8011f48 <ip4_route+0xdc>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d01a      	beq.n	8011f2e <ip4_route+0xc2>
 8011ef8:	4b13      	ldr	r3, [pc, #76]	@ (8011f48 <ip4_route+0xdc>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011f00:	f003 0301 	and.w	r3, r3, #1
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d012      	beq.n	8011f2e <ip4_route+0xc2>
 8011f08:	4b0f      	ldr	r3, [pc, #60]	@ (8011f48 <ip4_route+0xdc>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011f10:	f003 0304 	and.w	r3, r3, #4
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d00a      	beq.n	8011f2e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011f18:	4b0b      	ldr	r3, [pc, #44]	@ (8011f48 <ip4_route+0xdc>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	3304      	adds	r3, #4
 8011f1e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d004      	beq.n	8011f2e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8011f2c:	d101      	bne.n	8011f32 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	e001      	b.n	8011f36 <ip4_route+0xca>
  }

  return netif_default;
 8011f32:	4b05      	ldr	r3, [pc, #20]	@ (8011f48 <ip4_route+0xdc>)
 8011f34:	681b      	ldr	r3, [r3, #0]
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3714      	adds	r7, #20
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr
 8011f42:	bf00      	nop
 8011f44:	240431f0 	.word	0x240431f0
 8011f48:	240431f4 	.word	0x240431f4

08011f4c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011f5a:	f003 0301 	and.w	r3, r3, #1
 8011f5e:	b2db      	uxtb	r3, r3
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d016      	beq.n	8011f92 <ip4_input_accept+0x46>
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	3304      	adds	r3, #4
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d011      	beq.n	8011f92 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8011f9c <ip4_input_accept+0x50>)
 8011f70:	695a      	ldr	r2, [r3, #20]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	3304      	adds	r3, #4
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d008      	beq.n	8011f8e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011f7c:	4b07      	ldr	r3, [pc, #28]	@ (8011f9c <ip4_input_accept+0x50>)
 8011f7e:	695b      	ldr	r3, [r3, #20]
 8011f80:	6879      	ldr	r1, [r7, #4]
 8011f82:	4618      	mov	r0, r3
 8011f84:	f000 fa08 	bl	8012398 <ip4_addr_isbroadcast_u32>
 8011f88:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d001      	beq.n	8011f92 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011f8e:	2301      	movs	r3, #1
 8011f90:	e000      	b.n	8011f94 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011f92:	2300      	movs	r3, #0
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3708      	adds	r7, #8
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	240402e0 	.word	0x240402e0

08011fa0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b086      	sub	sp, #24
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	091b      	lsrs	r3, r3, #4
 8011fb6:	b2db      	uxtb	r3, r3
 8011fb8:	2b04      	cmp	r3, #4
 8011fba:	d004      	beq.n	8011fc6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f7f7 ffc9 	bl	8009f54 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	e107      	b.n	80121d6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	f003 030f 	and.w	r3, r3, #15
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	009b      	lsls	r3, r3, #2
 8011fd2:	b2db      	uxtb	r3, r3
 8011fd4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	885b      	ldrh	r3, [r3, #2]
 8011fda:	b29b      	uxth	r3, r3
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7f6 fb9b 	bl	8008718 <lwip_htons>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	891b      	ldrh	r3, [r3, #8]
 8011fea:	89ba      	ldrh	r2, [r7, #12]
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d204      	bcs.n	8011ffa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011ff0:	89bb      	ldrh	r3, [r7, #12]
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f7f7 fe29 	bl	8009c4c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	895b      	ldrh	r3, [r3, #10]
 8011ffe:	89fa      	ldrh	r2, [r7, #14]
 8012000:	429a      	cmp	r2, r3
 8012002:	d807      	bhi.n	8012014 <ip4_input+0x74>
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	891b      	ldrh	r3, [r3, #8]
 8012008:	89ba      	ldrh	r2, [r7, #12]
 801200a:	429a      	cmp	r2, r3
 801200c:	d802      	bhi.n	8012014 <ip4_input+0x74>
 801200e:	89fb      	ldrh	r3, [r7, #14]
 8012010:	2b13      	cmp	r3, #19
 8012012:	d804      	bhi.n	801201e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f7f7 ff9d 	bl	8009f54 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801201a:	2300      	movs	r3, #0
 801201c:	e0db      	b.n	80121d6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	691b      	ldr	r3, [r3, #16]
 8012022:	4a6f      	ldr	r2, [pc, #444]	@ (80121e0 <ip4_input+0x240>)
 8012024:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	68db      	ldr	r3, [r3, #12]
 801202a:	4a6d      	ldr	r2, [pc, #436]	@ (80121e0 <ip4_input+0x240>)
 801202c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801202e:	4b6c      	ldr	r3, [pc, #432]	@ (80121e0 <ip4_input+0x240>)
 8012030:	695b      	ldr	r3, [r3, #20]
 8012032:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012036:	2be0      	cmp	r3, #224	@ 0xe0
 8012038:	d112      	bne.n	8012060 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012040:	f003 0301 	and.w	r3, r3, #1
 8012044:	b2db      	uxtb	r3, r3
 8012046:	2b00      	cmp	r3, #0
 8012048:	d007      	beq.n	801205a <ip4_input+0xba>
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	3304      	adds	r3, #4
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d002      	beq.n	801205a <ip4_input+0xba>
      netif = inp;
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	613b      	str	r3, [r7, #16]
 8012058:	e02a      	b.n	80120b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801205a:	2300      	movs	r3, #0
 801205c:	613b      	str	r3, [r7, #16]
 801205e:	e027      	b.n	80120b0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012060:	6838      	ldr	r0, [r7, #0]
 8012062:	f7ff ff73 	bl	8011f4c <ip4_input_accept>
 8012066:	4603      	mov	r3, r0
 8012068:	2b00      	cmp	r3, #0
 801206a:	d002      	beq.n	8012072 <ip4_input+0xd2>
      netif = inp;
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	613b      	str	r3, [r7, #16]
 8012070:	e01e      	b.n	80120b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012072:	2300      	movs	r3, #0
 8012074:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012076:	4b5a      	ldr	r3, [pc, #360]	@ (80121e0 <ip4_input+0x240>)
 8012078:	695b      	ldr	r3, [r3, #20]
 801207a:	b2db      	uxtb	r3, r3
 801207c:	2b7f      	cmp	r3, #127	@ 0x7f
 801207e:	d017      	beq.n	80120b0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012080:	4b58      	ldr	r3, [pc, #352]	@ (80121e4 <ip4_input+0x244>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	613b      	str	r3, [r7, #16]
 8012086:	e00e      	b.n	80120a6 <ip4_input+0x106>
          if (netif == inp) {
 8012088:	693a      	ldr	r2, [r7, #16]
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	429a      	cmp	r2, r3
 801208e:	d006      	beq.n	801209e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012090:	6938      	ldr	r0, [r7, #16]
 8012092:	f7ff ff5b 	bl	8011f4c <ip4_input_accept>
 8012096:	4603      	mov	r3, r0
 8012098:	2b00      	cmp	r3, #0
 801209a:	d108      	bne.n	80120ae <ip4_input+0x10e>
 801209c:	e000      	b.n	80120a0 <ip4_input+0x100>
            continue;
 801209e:	bf00      	nop
        NETIF_FOREACH(netif) {
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	613b      	str	r3, [r7, #16]
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d1ed      	bne.n	8012088 <ip4_input+0xe8>
 80120ac:	e000      	b.n	80120b0 <ip4_input+0x110>
            break;
 80120ae:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80120b0:	4b4b      	ldr	r3, [pc, #300]	@ (80121e0 <ip4_input+0x240>)
 80120b2:	691b      	ldr	r3, [r3, #16]
 80120b4:	6839      	ldr	r1, [r7, #0]
 80120b6:	4618      	mov	r0, r3
 80120b8:	f000 f96e 	bl	8012398 <ip4_addr_isbroadcast_u32>
 80120bc:	4603      	mov	r3, r0
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d105      	bne.n	80120ce <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80120c2:	4b47      	ldr	r3, [pc, #284]	@ (80121e0 <ip4_input+0x240>)
 80120c4:	691b      	ldr	r3, [r3, #16]
 80120c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80120ca:	2be0      	cmp	r3, #224	@ 0xe0
 80120cc:	d104      	bne.n	80120d8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f7f7 ff40 	bl	8009f54 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80120d4:	2300      	movs	r3, #0
 80120d6:	e07e      	b.n	80121d6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d104      	bne.n	80120e8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f7f7 ff38 	bl	8009f54 <pbuf_free>
    return ERR_OK;
 80120e4:	2300      	movs	r3, #0
 80120e6:	e076      	b.n	80121d6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80120e8:	697b      	ldr	r3, [r7, #20]
 80120ea:	88db      	ldrh	r3, [r3, #6]
 80120ec:	b29b      	uxth	r3, r3
 80120ee:	461a      	mov	r2, r3
 80120f0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80120f4:	4013      	ands	r3, r2
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d00b      	beq.n	8012112 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f000 fc92 	bl	8012a24 <ip4_reass>
 8012100:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d101      	bne.n	801210c <ip4_input+0x16c>
      return ERR_OK;
 8012108:	2300      	movs	r3, #0
 801210a:	e064      	b.n	80121d6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012112:	4a33      	ldr	r2, [pc, #204]	@ (80121e0 <ip4_input+0x240>)
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012118:	4a31      	ldr	r2, [pc, #196]	@ (80121e0 <ip4_input+0x240>)
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801211e:	4a30      	ldr	r2, [pc, #192]	@ (80121e0 <ip4_input+0x240>)
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	f003 030f 	and.w	r3, r3, #15
 801212c:	b2db      	uxtb	r3, r3
 801212e:	009b      	lsls	r3, r3, #2
 8012130:	b2db      	uxtb	r3, r3
 8012132:	461a      	mov	r2, r3
 8012134:	4b2a      	ldr	r3, [pc, #168]	@ (80121e0 <ip4_input+0x240>)
 8012136:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012138:	89fb      	ldrh	r3, [r7, #14]
 801213a:	4619      	mov	r1, r3
 801213c:	6878      	ldr	r0, [r7, #4]
 801213e:	f7f7 fe83 	bl	8009e48 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	7a5b      	ldrb	r3, [r3, #9]
 8012146:	2b11      	cmp	r3, #17
 8012148:	d006      	beq.n	8012158 <ip4_input+0x1b8>
 801214a:	2b11      	cmp	r3, #17
 801214c:	dc13      	bgt.n	8012176 <ip4_input+0x1d6>
 801214e:	2b01      	cmp	r3, #1
 8012150:	d00c      	beq.n	801216c <ip4_input+0x1cc>
 8012152:	2b06      	cmp	r3, #6
 8012154:	d005      	beq.n	8012162 <ip4_input+0x1c2>
 8012156:	e00e      	b.n	8012176 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012158:	6839      	ldr	r1, [r7, #0]
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f7fe fc42 	bl	80109e4 <udp_input>
        break;
 8012160:	e026      	b.n	80121b0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012162:	6839      	ldr	r1, [r7, #0]
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f7fa f82f 	bl	800c1c8 <tcp_input>
        break;
 801216a:	e021      	b.n	80121b0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801216c:	6839      	ldr	r1, [r7, #0]
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f7ff fcc8 	bl	8011b04 <icmp_input>
        break;
 8012174:	e01c      	b.n	80121b0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012176:	4b1a      	ldr	r3, [pc, #104]	@ (80121e0 <ip4_input+0x240>)
 8012178:	695b      	ldr	r3, [r3, #20]
 801217a:	6939      	ldr	r1, [r7, #16]
 801217c:	4618      	mov	r0, r3
 801217e:	f000 f90b 	bl	8012398 <ip4_addr_isbroadcast_u32>
 8012182:	4603      	mov	r3, r0
 8012184:	2b00      	cmp	r3, #0
 8012186:	d10f      	bne.n	80121a8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012188:	4b15      	ldr	r3, [pc, #84]	@ (80121e0 <ip4_input+0x240>)
 801218a:	695b      	ldr	r3, [r3, #20]
 801218c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012190:	2be0      	cmp	r3, #224	@ 0xe0
 8012192:	d009      	beq.n	80121a8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012194:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012198:	4619      	mov	r1, r3
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f7f7 fec7 	bl	8009f2e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80121a0:	2102      	movs	r1, #2
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f7ff fdce 	bl	8011d44 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f7f7 fed3 	bl	8009f54 <pbuf_free>
        break;
 80121ae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80121b0:	4b0b      	ldr	r3, [pc, #44]	@ (80121e0 <ip4_input+0x240>)
 80121b2:	2200      	movs	r2, #0
 80121b4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80121b6:	4b0a      	ldr	r3, [pc, #40]	@ (80121e0 <ip4_input+0x240>)
 80121b8:	2200      	movs	r2, #0
 80121ba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80121bc:	4b08      	ldr	r3, [pc, #32]	@ (80121e0 <ip4_input+0x240>)
 80121be:	2200      	movs	r2, #0
 80121c0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80121c2:	4b07      	ldr	r3, [pc, #28]	@ (80121e0 <ip4_input+0x240>)
 80121c4:	2200      	movs	r2, #0
 80121c6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80121c8:	4b05      	ldr	r3, [pc, #20]	@ (80121e0 <ip4_input+0x240>)
 80121ca:	2200      	movs	r2, #0
 80121cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80121ce:	4b04      	ldr	r3, [pc, #16]	@ (80121e0 <ip4_input+0x240>)
 80121d0:	2200      	movs	r2, #0
 80121d2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80121d4:	2300      	movs	r3, #0
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3718      	adds	r7, #24
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	240402e0 	.word	0x240402e0
 80121e4:	240431f0 	.word	0x240431f0

080121e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b08a      	sub	sp, #40	@ 0x28
 80121ec:	af04      	add	r7, sp, #16
 80121ee:	60f8      	str	r0, [r7, #12]
 80121f0:	60b9      	str	r1, [r7, #8]
 80121f2:	607a      	str	r2, [r7, #4]
 80121f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d009      	beq.n	8012214 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d003      	beq.n	801220e <ip4_output_if+0x26>
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d102      	bne.n	8012214 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801220e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012210:	3304      	adds	r3, #4
 8012212:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012214:	78fa      	ldrb	r2, [r7, #3]
 8012216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012218:	9302      	str	r3, [sp, #8]
 801221a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801221e:	9301      	str	r3, [sp, #4]
 8012220:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012224:	9300      	str	r3, [sp, #0]
 8012226:	4613      	mov	r3, r2
 8012228:	687a      	ldr	r2, [r7, #4]
 801222a:	6979      	ldr	r1, [r7, #20]
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f000 f805 	bl	801223c <ip4_output_if_src>
 8012232:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012234:	4618      	mov	r0, r3
 8012236:	3718      	adds	r7, #24
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}

0801223c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b088      	sub	sp, #32
 8012240:	af00      	add	r7, sp, #0
 8012242:	60f8      	str	r0, [r7, #12]
 8012244:	60b9      	str	r1, [r7, #8]
 8012246:	607a      	str	r2, [r7, #4]
 8012248:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	7b9b      	ldrb	r3, [r3, #14]
 801224e:	2b01      	cmp	r3, #1
 8012250:	d006      	beq.n	8012260 <ip4_output_if_src+0x24>
 8012252:	4b4b      	ldr	r3, [pc, #300]	@ (8012380 <ip4_output_if_src+0x144>)
 8012254:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8012258:	494a      	ldr	r1, [pc, #296]	@ (8012384 <ip4_output_if_src+0x148>)
 801225a:	484b      	ldr	r0, [pc, #300]	@ (8012388 <ip4_output_if_src+0x14c>)
 801225c:	f001 f8f2 	bl	8013444 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d060      	beq.n	8012328 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012266:	2314      	movs	r3, #20
 8012268:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801226a:	2114      	movs	r1, #20
 801226c:	68f8      	ldr	r0, [r7, #12]
 801226e:	f7f7 fddb 	bl	8009e28 <pbuf_add_header>
 8012272:	4603      	mov	r3, r0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d002      	beq.n	801227e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012278:	f06f 0301 	mvn.w	r3, #1
 801227c:	e07c      	b.n	8012378 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	895b      	ldrh	r3, [r3, #10]
 8012288:	2b13      	cmp	r3, #19
 801228a:	d806      	bhi.n	801229a <ip4_output_if_src+0x5e>
 801228c:	4b3c      	ldr	r3, [pc, #240]	@ (8012380 <ip4_output_if_src+0x144>)
 801228e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8012292:	493e      	ldr	r1, [pc, #248]	@ (801238c <ip4_output_if_src+0x150>)
 8012294:	483c      	ldr	r0, [pc, #240]	@ (8012388 <ip4_output_if_src+0x14c>)
 8012296:	f001 f8d5 	bl	8013444 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801229a:	69fb      	ldr	r3, [r7, #28]
 801229c:	78fa      	ldrb	r2, [r7, #3]
 801229e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80122a0:	69fb      	ldr	r3, [r7, #28]
 80122a2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80122a6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681a      	ldr	r2, [r3, #0]
 80122ac:	69fb      	ldr	r3, [r7, #28]
 80122ae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80122b0:	8b7b      	ldrh	r3, [r7, #26]
 80122b2:	089b      	lsrs	r3, r3, #2
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	b2db      	uxtb	r3, r3
 80122b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122bc:	b2da      	uxtb	r2, r3
 80122be:	69fb      	ldr	r3, [r7, #28]
 80122c0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80122c2:	69fb      	ldr	r3, [r7, #28]
 80122c4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80122c8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	891b      	ldrh	r3, [r3, #8]
 80122ce:	4618      	mov	r0, r3
 80122d0:	f7f6 fa22 	bl	8008718 <lwip_htons>
 80122d4:	4603      	mov	r3, r0
 80122d6:	461a      	mov	r2, r3
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80122dc:	69fb      	ldr	r3, [r7, #28]
 80122de:	2200      	movs	r2, #0
 80122e0:	719a      	strb	r2, [r3, #6]
 80122e2:	2200      	movs	r2, #0
 80122e4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80122e6:	4b2a      	ldr	r3, [pc, #168]	@ (8012390 <ip4_output_if_src+0x154>)
 80122e8:	881b      	ldrh	r3, [r3, #0]
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7f6 fa14 	bl	8008718 <lwip_htons>
 80122f0:	4603      	mov	r3, r0
 80122f2:	461a      	mov	r2, r3
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80122f8:	4b25      	ldr	r3, [pc, #148]	@ (8012390 <ip4_output_if_src+0x154>)
 80122fa:	881b      	ldrh	r3, [r3, #0]
 80122fc:	3301      	adds	r3, #1
 80122fe:	b29a      	uxth	r2, r3
 8012300:	4b23      	ldr	r3, [pc, #140]	@ (8012390 <ip4_output_if_src+0x154>)
 8012302:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d104      	bne.n	8012314 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801230a:	4b22      	ldr	r3, [pc, #136]	@ (8012394 <ip4_output_if_src+0x158>)
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	69fb      	ldr	r3, [r7, #28]
 8012310:	60da      	str	r2, [r3, #12]
 8012312:	e003      	b.n	801231c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012314:	68bb      	ldr	r3, [r7, #8]
 8012316:	681a      	ldr	r2, [r3, #0]
 8012318:	69fb      	ldr	r3, [r7, #28]
 801231a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801231c:	69fb      	ldr	r3, [r7, #28]
 801231e:	2200      	movs	r2, #0
 8012320:	729a      	strb	r2, [r3, #10]
 8012322:	2200      	movs	r2, #0
 8012324:	72da      	strb	r2, [r3, #11]
 8012326:	e00f      	b.n	8012348 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	895b      	ldrh	r3, [r3, #10]
 801232c:	2b13      	cmp	r3, #19
 801232e:	d802      	bhi.n	8012336 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012330:	f06f 0301 	mvn.w	r3, #1
 8012334:	e020      	b.n	8012378 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	685b      	ldr	r3, [r3, #4]
 801233a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801233c:	69fb      	ldr	r3, [r7, #28]
 801233e:	691b      	ldr	r3, [r3, #16]
 8012340:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012342:	f107 0314 	add.w	r3, r7, #20
 8012346:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801234a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801234c:	2b00      	cmp	r3, #0
 801234e:	d00c      	beq.n	801236a <ip4_output_if_src+0x12e>
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	891a      	ldrh	r2, [r3, #8]
 8012354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012356:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012358:	429a      	cmp	r2, r3
 801235a:	d906      	bls.n	801236a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801235c:	687a      	ldr	r2, [r7, #4]
 801235e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012360:	68f8      	ldr	r0, [r7, #12]
 8012362:	f000 fd53 	bl	8012e0c <ip4_frag>
 8012366:	4603      	mov	r3, r0
 8012368:	e006      	b.n	8012378 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801236c:	695b      	ldr	r3, [r3, #20]
 801236e:	687a      	ldr	r2, [r7, #4]
 8012370:	68f9      	ldr	r1, [r7, #12]
 8012372:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012374:	4798      	blx	r3
 8012376:	4603      	mov	r3, r0
}
 8012378:	4618      	mov	r0, r3
 801237a:	3720      	adds	r7, #32
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	0801714c 	.word	0x0801714c
 8012384:	08017180 	.word	0x08017180
 8012388:	0801718c 	.word	0x0801718c
 801238c:	080171b4 	.word	0x080171b4
 8012390:	2404334e 	.word	0x2404334e
 8012394:	0801759c 	.word	0x0801759c

08012398 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012398:	b480      	push	{r7}
 801239a:	b085      	sub	sp, #20
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
 80123a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80123ac:	d002      	beq.n	80123b4 <ip4_addr_isbroadcast_u32+0x1c>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d101      	bne.n	80123b8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80123b4:	2301      	movs	r3, #1
 80123b6:	e02a      	b.n	801240e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80123be:	f003 0302 	and.w	r3, r3, #2
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d101      	bne.n	80123ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80123c6:	2300      	movs	r3, #0
 80123c8:	e021      	b.n	801240e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	3304      	adds	r3, #4
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	687a      	ldr	r2, [r7, #4]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d101      	bne.n	80123da <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80123d6:	2300      	movs	r3, #0
 80123d8:	e019      	b.n	801240e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80123da:	68fa      	ldr	r2, [r7, #12]
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	3304      	adds	r3, #4
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	405a      	eors	r2, r3
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	3308      	adds	r3, #8
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	4013      	ands	r3, r2
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d10d      	bne.n	801240c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	3308      	adds	r3, #8
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	43da      	mvns	r2, r3
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	3308      	adds	r3, #8
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012404:	429a      	cmp	r2, r3
 8012406:	d101      	bne.n	801240c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012408:	2301      	movs	r3, #1
 801240a:	e000      	b.n	801240e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801240c:	2300      	movs	r3, #0
  }
}
 801240e:	4618      	mov	r0, r3
 8012410:	3714      	adds	r7, #20
 8012412:	46bd      	mov	sp, r7
 8012414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012418:	4770      	bx	lr
	...

0801241c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b084      	sub	sp, #16
 8012420:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012422:	2300      	movs	r3, #0
 8012424:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012426:	4b12      	ldr	r3, [pc, #72]	@ (8012470 <ip_reass_tmr+0x54>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801242c:	e018      	b.n	8012460 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	7fdb      	ldrb	r3, [r3, #31]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d00b      	beq.n	801244e <ip_reass_tmr+0x32>
      r->timer--;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	7fdb      	ldrb	r3, [r3, #31]
 801243a:	3b01      	subs	r3, #1
 801243c:	b2da      	uxtb	r2, r3
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	60fb      	str	r3, [r7, #12]
 801244c:	e008      	b.n	8012460 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012458:	68b9      	ldr	r1, [r7, #8]
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f000 f80a 	bl	8012474 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d1e3      	bne.n	801242e <ip_reass_tmr+0x12>
    }
  }
}
 8012466:	bf00      	nop
 8012468:	bf00      	nop
 801246a:	3710      	adds	r7, #16
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	24043350 	.word	0x24043350

08012474 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b088      	sub	sp, #32
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801247e:	2300      	movs	r3, #0
 8012480:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012482:	683a      	ldr	r2, [r7, #0]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	429a      	cmp	r2, r3
 8012488:	d105      	bne.n	8012496 <ip_reass_free_complete_datagram+0x22>
 801248a:	4b45      	ldr	r3, [pc, #276]	@ (80125a0 <ip_reass_free_complete_datagram+0x12c>)
 801248c:	22ab      	movs	r2, #171	@ 0xab
 801248e:	4945      	ldr	r1, [pc, #276]	@ (80125a4 <ip_reass_free_complete_datagram+0x130>)
 8012490:	4845      	ldr	r0, [pc, #276]	@ (80125a8 <ip_reass_free_complete_datagram+0x134>)
 8012492:	f000 ffd7 	bl	8013444 <iprintf>
  if (prev != NULL) {
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d00a      	beq.n	80124b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	687a      	ldr	r2, [r7, #4]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d005      	beq.n	80124b2 <ip_reass_free_complete_datagram+0x3e>
 80124a6:	4b3e      	ldr	r3, [pc, #248]	@ (80125a0 <ip_reass_free_complete_datagram+0x12c>)
 80124a8:	22ad      	movs	r2, #173	@ 0xad
 80124aa:	4940      	ldr	r1, [pc, #256]	@ (80125ac <ip_reass_free_complete_datagram+0x138>)
 80124ac:	483e      	ldr	r0, [pc, #248]	@ (80125a8 <ip_reass_free_complete_datagram+0x134>)
 80124ae:	f000 ffc9 	bl	8013444 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	685b      	ldr	r3, [r3, #4]
 80124b6:	685b      	ldr	r3, [r3, #4]
 80124b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	889b      	ldrh	r3, [r3, #4]
 80124be:	b29b      	uxth	r3, r3
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d12a      	bne.n	801251a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	685b      	ldr	r3, [r3, #4]
 80124c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	681a      	ldr	r2, [r3, #0]
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80124d2:	69bb      	ldr	r3, [r7, #24]
 80124d4:	6858      	ldr	r0, [r3, #4]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	3308      	adds	r3, #8
 80124da:	2214      	movs	r2, #20
 80124dc:	4619      	mov	r1, r3
 80124de:	f001 f88c 	bl	80135fa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80124e2:	2101      	movs	r1, #1
 80124e4:	69b8      	ldr	r0, [r7, #24]
 80124e6:	f7ff fc3d 	bl	8011d64 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80124ea:	69b8      	ldr	r0, [r7, #24]
 80124ec:	f7f7 fdba 	bl	800a064 <pbuf_clen>
 80124f0:	4603      	mov	r3, r0
 80124f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80124f4:	8bfa      	ldrh	r2, [r7, #30]
 80124f6:	8a7b      	ldrh	r3, [r7, #18]
 80124f8:	4413      	add	r3, r2
 80124fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80124fe:	db05      	blt.n	801250c <ip_reass_free_complete_datagram+0x98>
 8012500:	4b27      	ldr	r3, [pc, #156]	@ (80125a0 <ip_reass_free_complete_datagram+0x12c>)
 8012502:	22bc      	movs	r2, #188	@ 0xbc
 8012504:	492a      	ldr	r1, [pc, #168]	@ (80125b0 <ip_reass_free_complete_datagram+0x13c>)
 8012506:	4828      	ldr	r0, [pc, #160]	@ (80125a8 <ip_reass_free_complete_datagram+0x134>)
 8012508:	f000 ff9c 	bl	8013444 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801250c:	8bfa      	ldrh	r2, [r7, #30]
 801250e:	8a7b      	ldrh	r3, [r7, #18]
 8012510:	4413      	add	r3, r2
 8012512:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012514:	69b8      	ldr	r0, [r7, #24]
 8012516:	f7f7 fd1d 	bl	8009f54 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012520:	e01f      	b.n	8012562 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012522:	69bb      	ldr	r3, [r7, #24]
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012528:	69bb      	ldr	r3, [r7, #24]
 801252a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012532:	68f8      	ldr	r0, [r7, #12]
 8012534:	f7f7 fd96 	bl	800a064 <pbuf_clen>
 8012538:	4603      	mov	r3, r0
 801253a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801253c:	8bfa      	ldrh	r2, [r7, #30]
 801253e:	8a7b      	ldrh	r3, [r7, #18]
 8012540:	4413      	add	r3, r2
 8012542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012546:	db05      	blt.n	8012554 <ip_reass_free_complete_datagram+0xe0>
 8012548:	4b15      	ldr	r3, [pc, #84]	@ (80125a0 <ip_reass_free_complete_datagram+0x12c>)
 801254a:	22cc      	movs	r2, #204	@ 0xcc
 801254c:	4918      	ldr	r1, [pc, #96]	@ (80125b0 <ip_reass_free_complete_datagram+0x13c>)
 801254e:	4816      	ldr	r0, [pc, #88]	@ (80125a8 <ip_reass_free_complete_datagram+0x134>)
 8012550:	f000 ff78 	bl	8013444 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012554:	8bfa      	ldrh	r2, [r7, #30]
 8012556:	8a7b      	ldrh	r3, [r7, #18]
 8012558:	4413      	add	r3, r2
 801255a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801255c:	68f8      	ldr	r0, [r7, #12]
 801255e:	f7f7 fcf9 	bl	8009f54 <pbuf_free>
  while (p != NULL) {
 8012562:	69bb      	ldr	r3, [r7, #24]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d1dc      	bne.n	8012522 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012568:	6839      	ldr	r1, [r7, #0]
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f000 f8c2 	bl	80126f4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012570:	4b10      	ldr	r3, [pc, #64]	@ (80125b4 <ip_reass_free_complete_datagram+0x140>)
 8012572:	881b      	ldrh	r3, [r3, #0]
 8012574:	8bfa      	ldrh	r2, [r7, #30]
 8012576:	429a      	cmp	r2, r3
 8012578:	d905      	bls.n	8012586 <ip_reass_free_complete_datagram+0x112>
 801257a:	4b09      	ldr	r3, [pc, #36]	@ (80125a0 <ip_reass_free_complete_datagram+0x12c>)
 801257c:	22d2      	movs	r2, #210	@ 0xd2
 801257e:	490e      	ldr	r1, [pc, #56]	@ (80125b8 <ip_reass_free_complete_datagram+0x144>)
 8012580:	4809      	ldr	r0, [pc, #36]	@ (80125a8 <ip_reass_free_complete_datagram+0x134>)
 8012582:	f000 ff5f 	bl	8013444 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012586:	4b0b      	ldr	r3, [pc, #44]	@ (80125b4 <ip_reass_free_complete_datagram+0x140>)
 8012588:	881a      	ldrh	r2, [r3, #0]
 801258a:	8bfb      	ldrh	r3, [r7, #30]
 801258c:	1ad3      	subs	r3, r2, r3
 801258e:	b29a      	uxth	r2, r3
 8012590:	4b08      	ldr	r3, [pc, #32]	@ (80125b4 <ip_reass_free_complete_datagram+0x140>)
 8012592:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012594:	8bfb      	ldrh	r3, [r7, #30]
}
 8012596:	4618      	mov	r0, r3
 8012598:	3720      	adds	r7, #32
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	080171e4 	.word	0x080171e4
 80125a4:	08017220 	.word	0x08017220
 80125a8:	0801722c 	.word	0x0801722c
 80125ac:	08017254 	.word	0x08017254
 80125b0:	08017268 	.word	0x08017268
 80125b4:	24043354 	.word	0x24043354
 80125b8:	08017288 	.word	0x08017288

080125bc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b08a      	sub	sp, #40	@ 0x28
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80125c6:	2300      	movs	r3, #0
 80125c8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80125ca:	2300      	movs	r3, #0
 80125cc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80125ce:	2300      	movs	r3, #0
 80125d0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80125d2:	2300      	movs	r3, #0
 80125d4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80125d6:	2300      	movs	r3, #0
 80125d8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80125da:	4b28      	ldr	r3, [pc, #160]	@ (801267c <ip_reass_remove_oldest_datagram+0xc0>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80125e0:	e030      	b.n	8012644 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80125e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125e4:	695a      	ldr	r2, [r3, #20]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d10c      	bne.n	8012608 <ip_reass_remove_oldest_datagram+0x4c>
 80125ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125f0:	699a      	ldr	r2, [r3, #24]
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	691b      	ldr	r3, [r3, #16]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d106      	bne.n	8012608 <ip_reass_remove_oldest_datagram+0x4c>
 80125fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125fc:	899a      	ldrh	r2, [r3, #12]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	889b      	ldrh	r3, [r3, #4]
 8012602:	b29b      	uxth	r3, r3
 8012604:	429a      	cmp	r2, r3
 8012606:	d014      	beq.n	8012632 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012608:	693b      	ldr	r3, [r7, #16]
 801260a:	3301      	adds	r3, #1
 801260c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801260e:	6a3b      	ldr	r3, [r7, #32]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d104      	bne.n	801261e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012616:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	61bb      	str	r3, [r7, #24]
 801261c:	e009      	b.n	8012632 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012620:	7fda      	ldrb	r2, [r3, #31]
 8012622:	6a3b      	ldr	r3, [r7, #32]
 8012624:	7fdb      	ldrb	r3, [r3, #31]
 8012626:	429a      	cmp	r2, r3
 8012628:	d803      	bhi.n	8012632 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801262c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801262e:	69fb      	ldr	r3, [r7, #28]
 8012630:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d001      	beq.n	801263e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801263c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8012644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012646:	2b00      	cmp	r3, #0
 8012648:	d1cb      	bne.n	80125e2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801264a:	6a3b      	ldr	r3, [r7, #32]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d008      	beq.n	8012662 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012650:	69b9      	ldr	r1, [r7, #24]
 8012652:	6a38      	ldr	r0, [r7, #32]
 8012654:	f7ff ff0e 	bl	8012474 <ip_reass_free_complete_datagram>
 8012658:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801265a:	697a      	ldr	r2, [r7, #20]
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	4413      	add	r3, r2
 8012660:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012662:	697a      	ldr	r2, [r7, #20]
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	429a      	cmp	r2, r3
 8012668:	da02      	bge.n	8012670 <ip_reass_remove_oldest_datagram+0xb4>
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	2b01      	cmp	r3, #1
 801266e:	dcac      	bgt.n	80125ca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012670:	697b      	ldr	r3, [r7, #20]
}
 8012672:	4618      	mov	r0, r3
 8012674:	3728      	adds	r7, #40	@ 0x28
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}
 801267a:	bf00      	nop
 801267c:	24043350 	.word	0x24043350

08012680 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b084      	sub	sp, #16
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801268a:	2004      	movs	r0, #4
 801268c:	f7f6 fd7e 	bl	800918c <memp_malloc>
 8012690:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d110      	bne.n	80126ba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012698:	6839      	ldr	r1, [r7, #0]
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f7ff ff8e 	bl	80125bc <ip_reass_remove_oldest_datagram>
 80126a0:	4602      	mov	r2, r0
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	4293      	cmp	r3, r2
 80126a6:	dc03      	bgt.n	80126b0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80126a8:	2004      	movs	r0, #4
 80126aa:	f7f6 fd6f 	bl	800918c <memp_malloc>
 80126ae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d101      	bne.n	80126ba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80126b6:	2300      	movs	r3, #0
 80126b8:	e016      	b.n	80126e8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80126ba:	2220      	movs	r2, #32
 80126bc:	2100      	movs	r1, #0
 80126be:	68f8      	ldr	r0, [r7, #12]
 80126c0:	f000 ff25 	bl	801350e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	220f      	movs	r2, #15
 80126c8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80126ca:	4b09      	ldr	r3, [pc, #36]	@ (80126f0 <ip_reass_enqueue_new_datagram+0x70>)
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80126d2:	4a07      	ldr	r2, [pc, #28]	@ (80126f0 <ip_reass_enqueue_new_datagram+0x70>)
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	3308      	adds	r3, #8
 80126dc:	2214      	movs	r2, #20
 80126de:	6879      	ldr	r1, [r7, #4]
 80126e0:	4618      	mov	r0, r3
 80126e2:	f000 ff8a 	bl	80135fa <memcpy>
  return ipr;
 80126e6:	68fb      	ldr	r3, [r7, #12]
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3710      	adds	r7, #16
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}
 80126f0:	24043350 	.word	0x24043350

080126f4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
 80126fc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80126fe:	4b10      	ldr	r3, [pc, #64]	@ (8012740 <ip_reass_dequeue_datagram+0x4c>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	687a      	ldr	r2, [r7, #4]
 8012704:	429a      	cmp	r2, r3
 8012706:	d104      	bne.n	8012712 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	4a0c      	ldr	r2, [pc, #48]	@ (8012740 <ip_reass_dequeue_datagram+0x4c>)
 801270e:	6013      	str	r3, [r2, #0]
 8012710:	e00d      	b.n	801272e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d106      	bne.n	8012726 <ip_reass_dequeue_datagram+0x32>
 8012718:	4b0a      	ldr	r3, [pc, #40]	@ (8012744 <ip_reass_dequeue_datagram+0x50>)
 801271a:	f240 1245 	movw	r2, #325	@ 0x145
 801271e:	490a      	ldr	r1, [pc, #40]	@ (8012748 <ip_reass_dequeue_datagram+0x54>)
 8012720:	480a      	ldr	r0, [pc, #40]	@ (801274c <ip_reass_dequeue_datagram+0x58>)
 8012722:	f000 fe8f 	bl	8013444 <iprintf>
    prev->next = ipr->next;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681a      	ldr	r2, [r3, #0]
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801272e:	6879      	ldr	r1, [r7, #4]
 8012730:	2004      	movs	r0, #4
 8012732:	f7f6 fd9b 	bl	800926c <memp_free>
}
 8012736:	bf00      	nop
 8012738:	3708      	adds	r7, #8
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}
 801273e:	bf00      	nop
 8012740:	24043350 	.word	0x24043350
 8012744:	080171e4 	.word	0x080171e4
 8012748:	080172ac 	.word	0x080172ac
 801274c:	0801722c 	.word	0x0801722c

08012750 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b08c      	sub	sp, #48	@ 0x30
 8012754:	af00      	add	r7, sp, #0
 8012756:	60f8      	str	r0, [r7, #12]
 8012758:	60b9      	str	r1, [r7, #8]
 801275a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801275c:	2300      	movs	r3, #0
 801275e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012760:	2301      	movs	r3, #1
 8012762:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801276a:	69fb      	ldr	r3, [r7, #28]
 801276c:	885b      	ldrh	r3, [r3, #2]
 801276e:	b29b      	uxth	r3, r3
 8012770:	4618      	mov	r0, r3
 8012772:	f7f5 ffd1 	bl	8008718 <lwip_htons>
 8012776:	4603      	mov	r3, r0
 8012778:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801277a:	69fb      	ldr	r3, [r7, #28]
 801277c:	781b      	ldrb	r3, [r3, #0]
 801277e:	f003 030f 	and.w	r3, r3, #15
 8012782:	b2db      	uxtb	r3, r3
 8012784:	009b      	lsls	r3, r3, #2
 8012786:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012788:	7e7b      	ldrb	r3, [r7, #25]
 801278a:	b29b      	uxth	r3, r3
 801278c:	8b7a      	ldrh	r2, [r7, #26]
 801278e:	429a      	cmp	r2, r3
 8012790:	d202      	bcs.n	8012798 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012796:	e135      	b.n	8012a04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012798:	7e7b      	ldrb	r3, [r7, #25]
 801279a:	b29b      	uxth	r3, r3
 801279c:	8b7a      	ldrh	r2, [r7, #26]
 801279e:	1ad3      	subs	r3, r2, r3
 80127a0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80127a2:	69fb      	ldr	r3, [r7, #28]
 80127a4:	88db      	ldrh	r3, [r3, #6]
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7f5 ffb5 	bl	8008718 <lwip_htons>
 80127ae:	4603      	mov	r3, r0
 80127b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	00db      	lsls	r3, r3, #3
 80127b8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80127c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127c2:	2200      	movs	r2, #0
 80127c4:	701a      	strb	r2, [r3, #0]
 80127c6:	2200      	movs	r2, #0
 80127c8:	705a      	strb	r2, [r3, #1]
 80127ca:	2200      	movs	r2, #0
 80127cc:	709a      	strb	r2, [r3, #2]
 80127ce:	2200      	movs	r2, #0
 80127d0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80127d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127d4:	8afa      	ldrh	r2, [r7, #22]
 80127d6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80127d8:	8afa      	ldrh	r2, [r7, #22]
 80127da:	8b7b      	ldrh	r3, [r7, #26]
 80127dc:	4413      	add	r3, r2
 80127de:	b29a      	uxth	r2, r3
 80127e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127e2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80127e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127e6:	88db      	ldrh	r3, [r3, #6]
 80127e8:	b29b      	uxth	r3, r3
 80127ea:	8afa      	ldrh	r2, [r7, #22]
 80127ec:	429a      	cmp	r2, r3
 80127ee:	d902      	bls.n	80127f6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80127f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80127f4:	e106      	b.n	8012a04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	685b      	ldr	r3, [r3, #4]
 80127fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80127fc:	e068      	b.n	80128d0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80127fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012806:	889b      	ldrh	r3, [r3, #4]
 8012808:	b29a      	uxth	r2, r3
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	889b      	ldrh	r3, [r3, #4]
 801280e:	b29b      	uxth	r3, r3
 8012810:	429a      	cmp	r2, r3
 8012812:	d235      	bcs.n	8012880 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012818:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801281a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801281c:	2b00      	cmp	r3, #0
 801281e:	d020      	beq.n	8012862 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012822:	889b      	ldrh	r3, [r3, #4]
 8012824:	b29a      	uxth	r2, r3
 8012826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012828:	88db      	ldrh	r3, [r3, #6]
 801282a:	b29b      	uxth	r3, r3
 801282c:	429a      	cmp	r2, r3
 801282e:	d307      	bcc.n	8012840 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012832:	88db      	ldrh	r3, [r3, #6]
 8012834:	b29a      	uxth	r2, r3
 8012836:	693b      	ldr	r3, [r7, #16]
 8012838:	889b      	ldrh	r3, [r3, #4]
 801283a:	b29b      	uxth	r3, r3
 801283c:	429a      	cmp	r2, r3
 801283e:	d902      	bls.n	8012846 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012840:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012844:	e0de      	b.n	8012a04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012848:	68ba      	ldr	r2, [r7, #8]
 801284a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801284c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801284e:	88db      	ldrh	r3, [r3, #6]
 8012850:	b29a      	uxth	r2, r3
 8012852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012854:	889b      	ldrh	r3, [r3, #4]
 8012856:	b29b      	uxth	r3, r3
 8012858:	429a      	cmp	r2, r3
 801285a:	d03d      	beq.n	80128d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801285c:	2300      	movs	r3, #0
 801285e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012860:	e03a      	b.n	80128d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012864:	88db      	ldrh	r3, [r3, #6]
 8012866:	b29a      	uxth	r2, r3
 8012868:	693b      	ldr	r3, [r7, #16]
 801286a:	889b      	ldrh	r3, [r3, #4]
 801286c:	b29b      	uxth	r3, r3
 801286e:	429a      	cmp	r2, r3
 8012870:	d902      	bls.n	8012878 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012876:	e0c5      	b.n	8012a04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	68ba      	ldr	r2, [r7, #8]
 801287c:	605a      	str	r2, [r3, #4]
      break;
 801287e:	e02b      	b.n	80128d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012882:	889b      	ldrh	r3, [r3, #4]
 8012884:	b29a      	uxth	r2, r3
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	889b      	ldrh	r3, [r3, #4]
 801288a:	b29b      	uxth	r3, r3
 801288c:	429a      	cmp	r2, r3
 801288e:	d102      	bne.n	8012896 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012890:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012894:	e0b6      	b.n	8012a04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012898:	889b      	ldrh	r3, [r3, #4]
 801289a:	b29a      	uxth	r2, r3
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	88db      	ldrh	r3, [r3, #6]
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d202      	bcs.n	80128ac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80128a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80128aa:	e0ab      	b.n	8012a04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80128ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d009      	beq.n	80128c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80128b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128b4:	88db      	ldrh	r3, [r3, #6]
 80128b6:	b29a      	uxth	r2, r3
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	889b      	ldrh	r3, [r3, #4]
 80128bc:	b29b      	uxth	r3, r3
 80128be:	429a      	cmp	r2, r3
 80128c0:	d001      	beq.n	80128c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80128c2:	2300      	movs	r3, #0
 80128c4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80128d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d193      	bne.n	80127fe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80128d6:	e000      	b.n	80128da <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80128d8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80128da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d12d      	bne.n	801293c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80128e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d01c      	beq.n	8012920 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80128e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128e8:	88db      	ldrh	r3, [r3, #6]
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128ee:	889b      	ldrh	r3, [r3, #4]
 80128f0:	b29b      	uxth	r3, r3
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d906      	bls.n	8012904 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80128f6:	4b45      	ldr	r3, [pc, #276]	@ (8012a0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80128f8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80128fc:	4944      	ldr	r1, [pc, #272]	@ (8012a10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80128fe:	4845      	ldr	r0, [pc, #276]	@ (8012a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012900:	f000 fda0 	bl	8013444 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012906:	68ba      	ldr	r2, [r7, #8]
 8012908:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801290a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801290c:	88db      	ldrh	r3, [r3, #6]
 801290e:	b29a      	uxth	r2, r3
 8012910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012912:	889b      	ldrh	r3, [r3, #4]
 8012914:	b29b      	uxth	r3, r3
 8012916:	429a      	cmp	r2, r3
 8012918:	d010      	beq.n	801293c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801291a:	2300      	movs	r3, #0
 801291c:	623b      	str	r3, [r7, #32]
 801291e:	e00d      	b.n	801293c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d006      	beq.n	8012936 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012928:	4b38      	ldr	r3, [pc, #224]	@ (8012a0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801292a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801292e:	493a      	ldr	r1, [pc, #232]	@ (8012a18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012930:	4838      	ldr	r0, [pc, #224]	@ (8012a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012932:	f000 fd87 	bl	8013444 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	68ba      	ldr	r2, [r7, #8]
 801293a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d105      	bne.n	801294e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	7f9b      	ldrb	r3, [r3, #30]
 8012946:	f003 0301 	and.w	r3, r3, #1
 801294a:	2b00      	cmp	r3, #0
 801294c:	d059      	beq.n	8012a02 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801294e:	6a3b      	ldr	r3, [r7, #32]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d04f      	beq.n	80129f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	685b      	ldr	r3, [r3, #4]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d006      	beq.n	801296a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	685b      	ldr	r3, [r3, #4]
 8012960:	685b      	ldr	r3, [r3, #4]
 8012962:	889b      	ldrh	r3, [r3, #4]
 8012964:	b29b      	uxth	r3, r3
 8012966:	2b00      	cmp	r3, #0
 8012968:	d002      	beq.n	8012970 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801296a:	2300      	movs	r3, #0
 801296c:	623b      	str	r3, [r7, #32]
 801296e:	e041      	b.n	80129f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012972:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8012974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801297a:	e012      	b.n	80129a2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8012982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012984:	88db      	ldrh	r3, [r3, #6]
 8012986:	b29a      	uxth	r2, r3
 8012988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801298a:	889b      	ldrh	r3, [r3, #4]
 801298c:	b29b      	uxth	r3, r3
 801298e:	429a      	cmp	r2, r3
 8012990:	d002      	beq.n	8012998 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012992:	2300      	movs	r3, #0
 8012994:	623b      	str	r3, [r7, #32]
            break;
 8012996:	e007      	b.n	80129a8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801299a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801299c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80129a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d1e9      	bne.n	801297c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80129a8:	6a3b      	ldr	r3, [r7, #32]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d022      	beq.n	80129f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	685b      	ldr	r3, [r3, #4]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d106      	bne.n	80129c4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80129b6:	4b15      	ldr	r3, [pc, #84]	@ (8012a0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80129b8:	f240 12df 	movw	r2, #479	@ 0x1df
 80129bc:	4917      	ldr	r1, [pc, #92]	@ (8012a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80129be:	4815      	ldr	r0, [pc, #84]	@ (8012a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80129c0:	f000 fd40 	bl	8013444 <iprintf>
          LWIP_ASSERT("sanity check",
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	685b      	ldr	r3, [r3, #4]
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d106      	bne.n	80129de <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80129d0:	4b0e      	ldr	r3, [pc, #56]	@ (8012a0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80129d2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80129d6:	4911      	ldr	r1, [pc, #68]	@ (8012a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80129d8:	480e      	ldr	r0, [pc, #56]	@ (8012a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80129da:	f000 fd33 	bl	8013444 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80129de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d006      	beq.n	80129f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80129e6:	4b09      	ldr	r3, [pc, #36]	@ (8012a0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80129e8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80129ec:	490c      	ldr	r1, [pc, #48]	@ (8012a20 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80129ee:	4809      	ldr	r0, [pc, #36]	@ (8012a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80129f0:	f000 fd28 	bl	8013444 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80129f4:	6a3b      	ldr	r3, [r7, #32]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	bf14      	ite	ne
 80129fa:	2301      	movne	r3, #1
 80129fc:	2300      	moveq	r3, #0
 80129fe:	b2db      	uxtb	r3, r3
 8012a00:	e000      	b.n	8012a04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012a02:	2300      	movs	r3, #0
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3730      	adds	r7, #48	@ 0x30
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	080171e4 	.word	0x080171e4
 8012a10:	080172c8 	.word	0x080172c8
 8012a14:	0801722c 	.word	0x0801722c
 8012a18:	080172e8 	.word	0x080172e8
 8012a1c:	08017320 	.word	0x08017320
 8012a20:	08017330 	.word	0x08017330

08012a24 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b08e      	sub	sp, #56	@ 0x38
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	f003 030f 	and.w	r3, r3, #15
 8012a3a:	b2db      	uxtb	r3, r3
 8012a3c:	009b      	lsls	r3, r3, #2
 8012a3e:	b2db      	uxtb	r3, r3
 8012a40:	2b14      	cmp	r3, #20
 8012a42:	f040 8171 	bne.w	8012d28 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a48:	88db      	ldrh	r3, [r3, #6]
 8012a4a:	b29b      	uxth	r3, r3
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7f5 fe63 	bl	8008718 <lwip_htons>
 8012a52:	4603      	mov	r3, r0
 8012a54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012a58:	b29b      	uxth	r3, r3
 8012a5a:	00db      	lsls	r3, r3, #3
 8012a5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a60:	885b      	ldrh	r3, [r3, #2]
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7f5 fe57 	bl	8008718 <lwip_htons>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	f003 030f 	and.w	r3, r3, #15
 8012a76:	b2db      	uxtb	r3, r3
 8012a78:	009b      	lsls	r3, r3, #2
 8012a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8012a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012a82:	b29b      	uxth	r3, r3
 8012a84:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012a86:	429a      	cmp	r2, r3
 8012a88:	f0c0 8150 	bcc.w	8012d2c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012a8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012a90:	b29b      	uxth	r3, r3
 8012a92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012a94:	1ad3      	subs	r3, r2, r3
 8012a96:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f7f7 fae3 	bl	800a064 <pbuf_clen>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012aa2:	4b8c      	ldr	r3, [pc, #560]	@ (8012cd4 <ip4_reass+0x2b0>)
 8012aa4:	881b      	ldrh	r3, [r3, #0]
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	8c3b      	ldrh	r3, [r7, #32]
 8012aaa:	4413      	add	r3, r2
 8012aac:	2b0a      	cmp	r3, #10
 8012aae:	dd10      	ble.n	8012ad2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012ab0:	8c3b      	ldrh	r3, [r7, #32]
 8012ab2:	4619      	mov	r1, r3
 8012ab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012ab6:	f7ff fd81 	bl	80125bc <ip_reass_remove_oldest_datagram>
 8012aba:	4603      	mov	r3, r0
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	f000 8137 	beq.w	8012d30 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012ac2:	4b84      	ldr	r3, [pc, #528]	@ (8012cd4 <ip4_reass+0x2b0>)
 8012ac4:	881b      	ldrh	r3, [r3, #0]
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	8c3b      	ldrh	r3, [r7, #32]
 8012aca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012acc:	2b0a      	cmp	r3, #10
 8012ace:	f300 812f 	bgt.w	8012d30 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012ad2:	4b81      	ldr	r3, [pc, #516]	@ (8012cd8 <ip4_reass+0x2b4>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	633b      	str	r3, [r7, #48]	@ 0x30
 8012ad8:	e015      	b.n	8012b06 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012adc:	695a      	ldr	r2, [r3, #20]
 8012ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ae0:	68db      	ldr	r3, [r3, #12]
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	d10c      	bne.n	8012b00 <ip4_reass+0xdc>
 8012ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ae8:	699a      	ldr	r2, [r3, #24]
 8012aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012aec:	691b      	ldr	r3, [r3, #16]
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d106      	bne.n	8012b00 <ip4_reass+0xdc>
 8012af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012af4:	899a      	ldrh	r2, [r3, #12]
 8012af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012af8:	889b      	ldrh	r3, [r3, #4]
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	429a      	cmp	r2, r3
 8012afe:	d006      	beq.n	8012b0e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8012b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d1e6      	bne.n	8012ada <ip4_reass+0xb6>
 8012b0c:	e000      	b.n	8012b10 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012b0e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d109      	bne.n	8012b2a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012b16:	8c3b      	ldrh	r3, [r7, #32]
 8012b18:	4619      	mov	r1, r3
 8012b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b1c:	f7ff fdb0 	bl	8012680 <ip_reass_enqueue_new_datagram>
 8012b20:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d11c      	bne.n	8012b62 <ip4_reass+0x13e>
      goto nullreturn;
 8012b28:	e105      	b.n	8012d36 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b2c:	88db      	ldrh	r3, [r3, #6]
 8012b2e:	b29b      	uxth	r3, r3
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7f5 fdf1 	bl	8008718 <lwip_htons>
 8012b36:	4603      	mov	r3, r0
 8012b38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d110      	bne.n	8012b62 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b42:	89db      	ldrh	r3, [r3, #14]
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7f5 fde7 	bl	8008718 <lwip_htons>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d006      	beq.n	8012b62 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b56:	3308      	adds	r3, #8
 8012b58:	2214      	movs	r2, #20
 8012b5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f000 fd4c 	bl	80135fa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b64:	88db      	ldrh	r3, [r3, #6]
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	f003 0320 	and.w	r3, r3, #32
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	bf0c      	ite	eq
 8012b70:	2301      	moveq	r3, #1
 8012b72:	2300      	movne	r3, #0
 8012b74:	b2db      	uxtb	r3, r3
 8012b76:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d00e      	beq.n	8012b9c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012b7e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012b80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b82:	4413      	add	r3, r2
 8012b84:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012b86:	8b7a      	ldrh	r2, [r7, #26]
 8012b88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	f0c0 80a0 	bcc.w	8012cd0 <ip4_reass+0x2ac>
 8012b90:	8b7b      	ldrh	r3, [r7, #26]
 8012b92:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8012b96:	4293      	cmp	r3, r2
 8012b98:	f200 809a 	bhi.w	8012cd0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012b9c:	69fa      	ldr	r2, [r7, #28]
 8012b9e:	6879      	ldr	r1, [r7, #4]
 8012ba0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012ba2:	f7ff fdd5 	bl	8012750 <ip_reass_chain_frag_into_datagram_and_validate>
 8012ba6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012bae:	f000 809b 	beq.w	8012ce8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012bb2:	4b48      	ldr	r3, [pc, #288]	@ (8012cd4 <ip4_reass+0x2b0>)
 8012bb4:	881a      	ldrh	r2, [r3, #0]
 8012bb6:	8c3b      	ldrh	r3, [r7, #32]
 8012bb8:	4413      	add	r3, r2
 8012bba:	b29a      	uxth	r2, r3
 8012bbc:	4b45      	ldr	r3, [pc, #276]	@ (8012cd4 <ip4_reass+0x2b0>)
 8012bbe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012bc0:	69fb      	ldr	r3, [r7, #28]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d00d      	beq.n	8012be2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012bc6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012bc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bca:	4413      	add	r3, r2
 8012bcc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bd0:	8a7a      	ldrh	r2, [r7, #18]
 8012bd2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bd6:	7f9b      	ldrb	r3, [r3, #30]
 8012bd8:	f043 0301 	orr.w	r3, r3, #1
 8012bdc:	b2da      	uxtb	r2, r3
 8012bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012be0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	2b01      	cmp	r3, #1
 8012be6:	d171      	bne.n	8012ccc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bea:	8b9b      	ldrh	r3, [r3, #28]
 8012bec:	3314      	adds	r3, #20
 8012bee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bf2:	685b      	ldr	r3, [r3, #4]
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bfc:	685b      	ldr	r3, [r3, #4]
 8012bfe:	685b      	ldr	r3, [r3, #4]
 8012c00:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c04:	3308      	adds	r3, #8
 8012c06:	2214      	movs	r2, #20
 8012c08:	4619      	mov	r1, r3
 8012c0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c0c:	f000 fcf5 	bl	80135fa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012c10:	8a3b      	ldrh	r3, [r7, #16]
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7f5 fd80 	bl	8008718 <lwip_htons>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	461a      	mov	r2, r3
 8012c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c1e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c22:	2200      	movs	r2, #0
 8012c24:	719a      	strb	r2, [r3, #6]
 8012c26:	2200      	movs	r2, #0
 8012c28:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	729a      	strb	r2, [r3, #10]
 8012c30:	2200      	movs	r2, #0
 8012c32:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012c3a:	e00d      	b.n	8012c58 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c3e:	685b      	ldr	r3, [r3, #4]
 8012c40:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012c42:	2114      	movs	r1, #20
 8012c44:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012c46:	f7f7 f8ff 	bl	8009e48 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012c4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f7f7 fa43 	bl	800a0d8 <pbuf_cat>
      r = iprh->next_pbuf;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8012c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d1ee      	bne.n	8012c3c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8012cd8 <ip4_reass+0x2b4>)
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c64:	429a      	cmp	r2, r3
 8012c66:	d102      	bne.n	8012c6e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c6c:	e010      	b.n	8012c90 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8012cd8 <ip4_reass+0x2b4>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c74:	e007      	b.n	8012c86 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	d006      	beq.n	8012c8e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d1f4      	bne.n	8012c76 <ip4_reass+0x252>
 8012c8c:	e000      	b.n	8012c90 <ip4_reass+0x26c>
          break;
 8012c8e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012c90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012c92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012c94:	f7ff fd2e 	bl	80126f4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f7f7 f9e3 	bl	800a064 <pbuf_clen>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8012cd4 <ip4_reass+0x2b0>)
 8012ca4:	881b      	ldrh	r3, [r3, #0]
 8012ca6:	8c3a      	ldrh	r2, [r7, #32]
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	d906      	bls.n	8012cba <ip4_reass+0x296>
 8012cac:	4b0b      	ldr	r3, [pc, #44]	@ (8012cdc <ip4_reass+0x2b8>)
 8012cae:	f240 229b 	movw	r2, #667	@ 0x29b
 8012cb2:	490b      	ldr	r1, [pc, #44]	@ (8012ce0 <ip4_reass+0x2bc>)
 8012cb4:	480b      	ldr	r0, [pc, #44]	@ (8012ce4 <ip4_reass+0x2c0>)
 8012cb6:	f000 fbc5 	bl	8013444 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012cba:	4b06      	ldr	r3, [pc, #24]	@ (8012cd4 <ip4_reass+0x2b0>)
 8012cbc:	881a      	ldrh	r2, [r3, #0]
 8012cbe:	8c3b      	ldrh	r3, [r7, #32]
 8012cc0:	1ad3      	subs	r3, r2, r3
 8012cc2:	b29a      	uxth	r2, r3
 8012cc4:	4b03      	ldr	r3, [pc, #12]	@ (8012cd4 <ip4_reass+0x2b0>)
 8012cc6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	e038      	b.n	8012d3e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	e036      	b.n	8012d3e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012cd0:	bf00      	nop
 8012cd2:	e00a      	b.n	8012cea <ip4_reass+0x2c6>
 8012cd4:	24043354 	.word	0x24043354
 8012cd8:	24043350 	.word	0x24043350
 8012cdc:	080171e4 	.word	0x080171e4
 8012ce0:	08017354 	.word	0x08017354
 8012ce4:	0801722c 	.word	0x0801722c
    goto nullreturn_ipr;
 8012ce8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d106      	bne.n	8012cfe <ip4_reass+0x2da>
 8012cf0:	4b15      	ldr	r3, [pc, #84]	@ (8012d48 <ip4_reass+0x324>)
 8012cf2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8012cf6:	4915      	ldr	r1, [pc, #84]	@ (8012d4c <ip4_reass+0x328>)
 8012cf8:	4815      	ldr	r0, [pc, #84]	@ (8012d50 <ip4_reass+0x32c>)
 8012cfa:	f000 fba3 	bl	8013444 <iprintf>
  if (ipr->p == NULL) {
 8012cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d116      	bne.n	8012d34 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012d06:	4b13      	ldr	r3, [pc, #76]	@ (8012d54 <ip4_reass+0x330>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d006      	beq.n	8012d1e <ip4_reass+0x2fa>
 8012d10:	4b0d      	ldr	r3, [pc, #52]	@ (8012d48 <ip4_reass+0x324>)
 8012d12:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8012d16:	4910      	ldr	r1, [pc, #64]	@ (8012d58 <ip4_reass+0x334>)
 8012d18:	480d      	ldr	r0, [pc, #52]	@ (8012d50 <ip4_reass+0x32c>)
 8012d1a:	f000 fb93 	bl	8013444 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012d1e:	2100      	movs	r1, #0
 8012d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012d22:	f7ff fce7 	bl	80126f4 <ip_reass_dequeue_datagram>
 8012d26:	e006      	b.n	8012d36 <ip4_reass+0x312>
    goto nullreturn;
 8012d28:	bf00      	nop
 8012d2a:	e004      	b.n	8012d36 <ip4_reass+0x312>
    goto nullreturn;
 8012d2c:	bf00      	nop
 8012d2e:	e002      	b.n	8012d36 <ip4_reass+0x312>
      goto nullreturn;
 8012d30:	bf00      	nop
 8012d32:	e000      	b.n	8012d36 <ip4_reass+0x312>
  }

nullreturn:
 8012d34:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f7f7 f90c 	bl	8009f54 <pbuf_free>
  return NULL;
 8012d3c:	2300      	movs	r3, #0
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3738      	adds	r7, #56	@ 0x38
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	080171e4 	.word	0x080171e4
 8012d4c:	08017370 	.word	0x08017370
 8012d50:	0801722c 	.word	0x0801722c
 8012d54:	24043350 	.word	0x24043350
 8012d58:	0801737c 	.word	0x0801737c

08012d5c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012d60:	2005      	movs	r0, #5
 8012d62:	f7f6 fa13 	bl	800918c <memp_malloc>
 8012d66:	4603      	mov	r3, r0
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b082      	sub	sp, #8
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d106      	bne.n	8012d88 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012d7a:	4b07      	ldr	r3, [pc, #28]	@ (8012d98 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012d7c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8012d80:	4906      	ldr	r1, [pc, #24]	@ (8012d9c <ip_frag_free_pbuf_custom_ref+0x30>)
 8012d82:	4807      	ldr	r0, [pc, #28]	@ (8012da0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012d84:	f000 fb5e 	bl	8013444 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012d88:	6879      	ldr	r1, [r7, #4]
 8012d8a:	2005      	movs	r0, #5
 8012d8c:	f7f6 fa6e 	bl	800926c <memp_free>
}
 8012d90:	bf00      	nop
 8012d92:	3708      	adds	r7, #8
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	080171e4 	.word	0x080171e4
 8012d9c:	0801739c 	.word	0x0801739c
 8012da0:	0801722c 	.word	0x0801722c

08012da4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b084      	sub	sp, #16
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d106      	bne.n	8012dc4 <ipfrag_free_pbuf_custom+0x20>
 8012db6:	4b11      	ldr	r3, [pc, #68]	@ (8012dfc <ipfrag_free_pbuf_custom+0x58>)
 8012db8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8012dbc:	4910      	ldr	r1, [pc, #64]	@ (8012e00 <ipfrag_free_pbuf_custom+0x5c>)
 8012dbe:	4811      	ldr	r0, [pc, #68]	@ (8012e04 <ipfrag_free_pbuf_custom+0x60>)
 8012dc0:	f000 fb40 	bl	8013444 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012dc4:	68fa      	ldr	r2, [r7, #12]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d006      	beq.n	8012dda <ipfrag_free_pbuf_custom+0x36>
 8012dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8012dfc <ipfrag_free_pbuf_custom+0x58>)
 8012dce:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8012dd2:	490d      	ldr	r1, [pc, #52]	@ (8012e08 <ipfrag_free_pbuf_custom+0x64>)
 8012dd4:	480b      	ldr	r0, [pc, #44]	@ (8012e04 <ipfrag_free_pbuf_custom+0x60>)
 8012dd6:	f000 fb35 	bl	8013444 <iprintf>
  if (pcr->original != NULL) {
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	695b      	ldr	r3, [r3, #20]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d004      	beq.n	8012dec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	695b      	ldr	r3, [r3, #20]
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7f7 f8b4 	bl	8009f54 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012dec:	68f8      	ldr	r0, [r7, #12]
 8012dee:	f7ff ffbd 	bl	8012d6c <ip_frag_free_pbuf_custom_ref>
}
 8012df2:	bf00      	nop
 8012df4:	3710      	adds	r7, #16
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}
 8012dfa:	bf00      	nop
 8012dfc:	080171e4 	.word	0x080171e4
 8012e00:	080173a8 	.word	0x080173a8
 8012e04:	0801722c 	.word	0x0801722c
 8012e08:	080173b4 	.word	0x080173b4

08012e0c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b094      	sub	sp, #80	@ 0x50
 8012e10:	af02      	add	r7, sp, #8
 8012e12:	60f8      	str	r0, [r7, #12]
 8012e14:	60b9      	str	r1, [r7, #8]
 8012e16:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012e22:	3b14      	subs	r3, #20
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	da00      	bge.n	8012e2a <ip4_frag+0x1e>
 8012e28:	3307      	adds	r3, #7
 8012e2a:	10db      	asrs	r3, r3, #3
 8012e2c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012e2e:	2314      	movs	r3, #20
 8012e30:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	685b      	ldr	r3, [r3, #4]
 8012e36:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8012e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e3a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	f003 030f 	and.w	r3, r3, #15
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	009b      	lsls	r3, r3, #2
 8012e48:	b2db      	uxtb	r3, r3
 8012e4a:	2b14      	cmp	r3, #20
 8012e4c:	d002      	beq.n	8012e54 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012e4e:	f06f 0305 	mvn.w	r3, #5
 8012e52:	e110      	b.n	8013076 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	895b      	ldrh	r3, [r3, #10]
 8012e58:	2b13      	cmp	r3, #19
 8012e5a:	d809      	bhi.n	8012e70 <ip4_frag+0x64>
 8012e5c:	4b88      	ldr	r3, [pc, #544]	@ (8013080 <ip4_frag+0x274>)
 8012e5e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8012e62:	4988      	ldr	r1, [pc, #544]	@ (8013084 <ip4_frag+0x278>)
 8012e64:	4888      	ldr	r0, [pc, #544]	@ (8013088 <ip4_frag+0x27c>)
 8012e66:	f000 faed 	bl	8013444 <iprintf>
 8012e6a:	f06f 0305 	mvn.w	r3, #5
 8012e6e:	e102      	b.n	8013076 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e72:	88db      	ldrh	r3, [r3, #6]
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7f5 fc4e 	bl	8008718 <lwip_htons>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8012e80:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012e82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012e86:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012e8a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012e8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012e90:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	891b      	ldrh	r3, [r3, #8]
 8012e96:	3b14      	subs	r3, #20
 8012e98:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8012e9c:	e0e1      	b.n	8013062 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012e9e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012ea0:	00db      	lsls	r3, r3, #3
 8012ea2:	b29b      	uxth	r3, r3
 8012ea4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012ea8:	4293      	cmp	r3, r2
 8012eaa:	bf28      	it	cs
 8012eac:	4613      	movcs	r3, r2
 8012eae:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012eb0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012eb4:	2114      	movs	r1, #20
 8012eb6:	200e      	movs	r0, #14
 8012eb8:	f7f6 fd6a 	bl	8009990 <pbuf_alloc>
 8012ebc:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8012ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	f000 80d5 	beq.w	8013070 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ec8:	895b      	ldrh	r3, [r3, #10]
 8012eca:	2b13      	cmp	r3, #19
 8012ecc:	d806      	bhi.n	8012edc <ip4_frag+0xd0>
 8012ece:	4b6c      	ldr	r3, [pc, #432]	@ (8013080 <ip4_frag+0x274>)
 8012ed0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8012ed4:	496d      	ldr	r1, [pc, #436]	@ (801308c <ip4_frag+0x280>)
 8012ed6:	486c      	ldr	r0, [pc, #432]	@ (8013088 <ip4_frag+0x27c>)
 8012ed8:	f000 fab4 	bl	8013444 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	2214      	movs	r2, #20
 8012ee2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f000 fb88 	bl	80135fa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8012ef0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012ef2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8012ef6:	e064      	b.n	8012fc2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	895a      	ldrh	r2, [r3, #10]
 8012efc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	895b      	ldrh	r3, [r3, #10]
 8012f06:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d906      	bls.n	8012f1a <ip4_frag+0x10e>
 8012f0c:	4b5c      	ldr	r3, [pc, #368]	@ (8013080 <ip4_frag+0x274>)
 8012f0e:	f240 322d 	movw	r2, #813	@ 0x32d
 8012f12:	495f      	ldr	r1, [pc, #380]	@ (8013090 <ip4_frag+0x284>)
 8012f14:	485c      	ldr	r0, [pc, #368]	@ (8013088 <ip4_frag+0x27c>)
 8012f16:	f000 fa95 	bl	8013444 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012f1a:	8bfa      	ldrh	r2, [r7, #30]
 8012f1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012f20:	4293      	cmp	r3, r2
 8012f22:	bf28      	it	cs
 8012f24:	4613      	movcs	r3, r2
 8012f26:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012f2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d105      	bne.n	8012f3e <ip4_frag+0x132>
        poff = 0;
 8012f32:	2300      	movs	r3, #0
 8012f34:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	60fb      	str	r3, [r7, #12]
        continue;
 8012f3c:	e041      	b.n	8012fc2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012f3e:	f7ff ff0d 	bl	8012d5c <ip_frag_alloc_pbuf_custom_ref>
 8012f42:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012f44:	69bb      	ldr	r3, [r7, #24]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d103      	bne.n	8012f52 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012f4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012f4c:	f7f7 f802 	bl	8009f54 <pbuf_free>
        goto memerr;
 8012f50:	e08f      	b.n	8013072 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012f52:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012f58:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012f5a:	4413      	add	r3, r2
 8012f5c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8012f60:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012f64:	9201      	str	r2, [sp, #4]
 8012f66:	9300      	str	r3, [sp, #0]
 8012f68:	4603      	mov	r3, r0
 8012f6a:	2241      	movs	r2, #65	@ 0x41
 8012f6c:	2000      	movs	r0, #0
 8012f6e:	f7f6 fe39 	bl	8009be4 <pbuf_alloced_custom>
 8012f72:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d106      	bne.n	8012f88 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012f7a:	69b8      	ldr	r0, [r7, #24]
 8012f7c:	f7ff fef6 	bl	8012d6c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012f80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012f82:	f7f6 ffe7 	bl	8009f54 <pbuf_free>
        goto memerr;
 8012f86:	e074      	b.n	8013072 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012f88:	68f8      	ldr	r0, [r7, #12]
 8012f8a:	f7f7 f883 	bl	800a094 <pbuf_ref>
      pcr->original = p;
 8012f8e:	69bb      	ldr	r3, [r7, #24]
 8012f90:	68fa      	ldr	r2, [r7, #12]
 8012f92:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012f94:	69bb      	ldr	r3, [r7, #24]
 8012f96:	4a3f      	ldr	r2, [pc, #252]	@ (8013094 <ip4_frag+0x288>)
 8012f98:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012f9a:	6979      	ldr	r1, [r7, #20]
 8012f9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012f9e:	f7f7 f89b 	bl	800a0d8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012fa2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8012fa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012faa:	1ad3      	subs	r3, r2, r3
 8012fac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8012fb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d004      	beq.n	8012fc2 <ip4_frag+0x1b6>
        poff = 0;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012fc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d196      	bne.n	8012ef8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012fca:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012fcc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012fd0:	4413      	add	r3, r2
 8012fd2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012fd8:	f1a3 0213 	sub.w	r2, r3, #19
 8012fdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	bfcc      	ite	gt
 8012fe4:	2301      	movgt	r3, #1
 8012fe6:	2300      	movle	r3, #0
 8012fe8:	b2db      	uxtb	r3, r3
 8012fea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012fec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012ff4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8012ff6:	6a3b      	ldr	r3, [r7, #32]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d002      	beq.n	8013002 <ip4_frag+0x1f6>
 8012ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d003      	beq.n	801300a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013002:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013004:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013008:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801300a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801300c:	4618      	mov	r0, r3
 801300e:	f7f5 fb83 	bl	8008718 <lwip_htons>
 8013012:	4603      	mov	r3, r0
 8013014:	461a      	mov	r2, r3
 8013016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013018:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801301a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801301c:	3314      	adds	r3, #20
 801301e:	b29b      	uxth	r3, r3
 8013020:	4618      	mov	r0, r3
 8013022:	f7f5 fb79 	bl	8008718 <lwip_htons>
 8013026:	4603      	mov	r3, r0
 8013028:	461a      	mov	r2, r3
 801302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801302c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013030:	2200      	movs	r2, #0
 8013032:	729a      	strb	r2, [r3, #10]
 8013034:	2200      	movs	r2, #0
 8013036:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	695b      	ldr	r3, [r3, #20]
 801303c:	687a      	ldr	r2, [r7, #4]
 801303e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013040:	68b8      	ldr	r0, [r7, #8]
 8013042:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013044:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013046:	f7f6 ff85 	bl	8009f54 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801304a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801304e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013050:	1ad3      	subs	r3, r2, r3
 8013052:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8013056:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801305a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801305c:	4413      	add	r3, r2
 801305e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8013062:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013066:	2b00      	cmp	r3, #0
 8013068:	f47f af19 	bne.w	8012e9e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801306c:	2300      	movs	r3, #0
 801306e:	e002      	b.n	8013076 <ip4_frag+0x26a>
      goto memerr;
 8013070:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8013076:	4618      	mov	r0, r3
 8013078:	3748      	adds	r7, #72	@ 0x48
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	080171e4 	.word	0x080171e4
 8013084:	080173c0 	.word	0x080173c0
 8013088:	0801722c 	.word	0x0801722c
 801308c:	080173dc 	.word	0x080173dc
 8013090:	080173fc 	.word	0x080173fc
 8013094:	08012da5 	.word	0x08012da5

08013098 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b086      	sub	sp, #24
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
 80130a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80130a2:	230e      	movs	r3, #14
 80130a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	895b      	ldrh	r3, [r3, #10]
 80130aa:	2b0e      	cmp	r3, #14
 80130ac:	d96e      	bls.n	801318c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	7bdb      	ldrb	r3, [r3, #15]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d106      	bne.n	80130c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80130bc:	3301      	adds	r3, #1
 80130be:	b2da      	uxtb	r2, r3
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	685b      	ldr	r3, [r3, #4]
 80130c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	7b1a      	ldrb	r2, [r3, #12]
 80130ce:	7b5b      	ldrb	r3, [r3, #13]
 80130d0:	021b      	lsls	r3, r3, #8
 80130d2:	4313      	orrs	r3, r2
 80130d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	781b      	ldrb	r3, [r3, #0]
 80130da:	f003 0301 	and.w	r3, r3, #1
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d023      	beq.n	801312a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	781b      	ldrb	r3, [r3, #0]
 80130e6:	2b01      	cmp	r3, #1
 80130e8:	d10f      	bne.n	801310a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80130ea:	693b      	ldr	r3, [r7, #16]
 80130ec:	785b      	ldrb	r3, [r3, #1]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d11b      	bne.n	801312a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80130f6:	2b5e      	cmp	r3, #94	@ 0x5e
 80130f8:	d117      	bne.n	801312a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	7b5b      	ldrb	r3, [r3, #13]
 80130fe:	f043 0310 	orr.w	r3, r3, #16
 8013102:	b2da      	uxtb	r2, r3
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	735a      	strb	r2, [r3, #13]
 8013108:	e00f      	b.n	801312a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	2206      	movs	r2, #6
 801310e:	4928      	ldr	r1, [pc, #160]	@ (80131b0 <ethernet_input+0x118>)
 8013110:	4618      	mov	r0, r3
 8013112:	f000 f9ec 	bl	80134ee <memcmp>
 8013116:	4603      	mov	r3, r0
 8013118:	2b00      	cmp	r3, #0
 801311a:	d106      	bne.n	801312a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	7b5b      	ldrb	r3, [r3, #13]
 8013120:	f043 0308 	orr.w	r3, r3, #8
 8013124:	b2da      	uxtb	r2, r3
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801312a:	89fb      	ldrh	r3, [r7, #14]
 801312c:	2b08      	cmp	r3, #8
 801312e:	d003      	beq.n	8013138 <ethernet_input+0xa0>
 8013130:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8013134:	d014      	beq.n	8013160 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013136:	e032      	b.n	801319e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801313e:	f003 0308 	and.w	r3, r3, #8
 8013142:	2b00      	cmp	r3, #0
 8013144:	d024      	beq.n	8013190 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013146:	8afb      	ldrh	r3, [r7, #22]
 8013148:	4619      	mov	r1, r3
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f7f6 fe7c 	bl	8009e48 <pbuf_remove_header>
 8013150:	4603      	mov	r3, r0
 8013152:	2b00      	cmp	r3, #0
 8013154:	d11e      	bne.n	8013194 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013156:	6839      	ldr	r1, [r7, #0]
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f7fe ff21 	bl	8011fa0 <ip4_input>
      break;
 801315e:	e013      	b.n	8013188 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013166:	f003 0308 	and.w	r3, r3, #8
 801316a:	2b00      	cmp	r3, #0
 801316c:	d014      	beq.n	8013198 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801316e:	8afb      	ldrh	r3, [r7, #22]
 8013170:	4619      	mov	r1, r3
 8013172:	6878      	ldr	r0, [r7, #4]
 8013174:	f7f6 fe68 	bl	8009e48 <pbuf_remove_header>
 8013178:	4603      	mov	r3, r0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d10e      	bne.n	801319c <ethernet_input+0x104>
        etharp_input(p, netif);
 801317e:	6839      	ldr	r1, [r7, #0]
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	f7fe f89b 	bl	80112bc <etharp_input>
      break;
 8013186:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013188:	2300      	movs	r3, #0
 801318a:	e00c      	b.n	80131a6 <ethernet_input+0x10e>
    goto free_and_return;
 801318c:	bf00      	nop
 801318e:	e006      	b.n	801319e <ethernet_input+0x106>
        goto free_and_return;
 8013190:	bf00      	nop
 8013192:	e004      	b.n	801319e <ethernet_input+0x106>
        goto free_and_return;
 8013194:	bf00      	nop
 8013196:	e002      	b.n	801319e <ethernet_input+0x106>
        goto free_and_return;
 8013198:	bf00      	nop
 801319a:	e000      	b.n	801319e <ethernet_input+0x106>
        goto free_and_return;
 801319c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f7f6 fed8 	bl	8009f54 <pbuf_free>
  return ERR_OK;
 80131a4:	2300      	movs	r3, #0
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3718      	adds	r7, #24
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}
 80131ae:	bf00      	nop
 80131b0:	080175a0 	.word	0x080175a0

080131b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b086      	sub	sp, #24
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	60f8      	str	r0, [r7, #12]
 80131bc:	60b9      	str	r1, [r7, #8]
 80131be:	607a      	str	r2, [r7, #4]
 80131c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80131c2:	8c3b      	ldrh	r3, [r7, #32]
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7f5 faa7 	bl	8008718 <lwip_htons>
 80131ca:	4603      	mov	r3, r0
 80131cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80131ce:	210e      	movs	r1, #14
 80131d0:	68b8      	ldr	r0, [r7, #8]
 80131d2:	f7f6 fe29 	bl	8009e28 <pbuf_add_header>
 80131d6:	4603      	mov	r3, r0
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d125      	bne.n	8013228 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	685b      	ldr	r3, [r3, #4]
 80131e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	8afa      	ldrh	r2, [r7, #22]
 80131e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	2206      	movs	r2, #6
 80131ec:	6839      	ldr	r1, [r7, #0]
 80131ee:	4618      	mov	r0, r3
 80131f0:	f000 fa03 	bl	80135fa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	3306      	adds	r3, #6
 80131f8:	2206      	movs	r2, #6
 80131fa:	6879      	ldr	r1, [r7, #4]
 80131fc:	4618      	mov	r0, r3
 80131fe:	f000 f9fc 	bl	80135fa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013208:	2b06      	cmp	r3, #6
 801320a:	d006      	beq.n	801321a <ethernet_output+0x66>
 801320c:	4b0a      	ldr	r3, [pc, #40]	@ (8013238 <ethernet_output+0x84>)
 801320e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8013212:	490a      	ldr	r1, [pc, #40]	@ (801323c <ethernet_output+0x88>)
 8013214:	480a      	ldr	r0, [pc, #40]	@ (8013240 <ethernet_output+0x8c>)
 8013216:	f000 f915 	bl	8013444 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	699b      	ldr	r3, [r3, #24]
 801321e:	68b9      	ldr	r1, [r7, #8]
 8013220:	68f8      	ldr	r0, [r7, #12]
 8013222:	4798      	blx	r3
 8013224:	4603      	mov	r3, r0
 8013226:	e002      	b.n	801322e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013228:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801322a:	f06f 0301 	mvn.w	r3, #1
}
 801322e:	4618      	mov	r0, r3
 8013230:	3718      	adds	r7, #24
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}
 8013236:	bf00      	nop
 8013238:	0801740c 	.word	0x0801740c
 801323c:	08017444 	.word	0x08017444
 8013240:	08017478 	.word	0x08017478

08013244 <rand>:
 8013244:	4b16      	ldr	r3, [pc, #88]	@ (80132a0 <rand+0x5c>)
 8013246:	b510      	push	{r4, lr}
 8013248:	681c      	ldr	r4, [r3, #0]
 801324a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801324c:	b9b3      	cbnz	r3, 801327c <rand+0x38>
 801324e:	2018      	movs	r0, #24
 8013250:	f000 fa4a 	bl	80136e8 <malloc>
 8013254:	4602      	mov	r2, r0
 8013256:	6320      	str	r0, [r4, #48]	@ 0x30
 8013258:	b920      	cbnz	r0, 8013264 <rand+0x20>
 801325a:	4b12      	ldr	r3, [pc, #72]	@ (80132a4 <rand+0x60>)
 801325c:	4812      	ldr	r0, [pc, #72]	@ (80132a8 <rand+0x64>)
 801325e:	2152      	movs	r1, #82	@ 0x52
 8013260:	f000 f9da 	bl	8013618 <__assert_func>
 8013264:	4911      	ldr	r1, [pc, #68]	@ (80132ac <rand+0x68>)
 8013266:	4b12      	ldr	r3, [pc, #72]	@ (80132b0 <rand+0x6c>)
 8013268:	e9c0 1300 	strd	r1, r3, [r0]
 801326c:	4b11      	ldr	r3, [pc, #68]	@ (80132b4 <rand+0x70>)
 801326e:	6083      	str	r3, [r0, #8]
 8013270:	230b      	movs	r3, #11
 8013272:	8183      	strh	r3, [r0, #12]
 8013274:	2100      	movs	r1, #0
 8013276:	2001      	movs	r0, #1
 8013278:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801327c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801327e:	480e      	ldr	r0, [pc, #56]	@ (80132b8 <rand+0x74>)
 8013280:	690b      	ldr	r3, [r1, #16]
 8013282:	694c      	ldr	r4, [r1, #20]
 8013284:	4a0d      	ldr	r2, [pc, #52]	@ (80132bc <rand+0x78>)
 8013286:	4358      	muls	r0, r3
 8013288:	fb02 0004 	mla	r0, r2, r4, r0
 801328c:	fba3 3202 	umull	r3, r2, r3, r2
 8013290:	3301      	adds	r3, #1
 8013292:	eb40 0002 	adc.w	r0, r0, r2
 8013296:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801329a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801329e:	bd10      	pop	{r4, pc}
 80132a0:	2400003c 	.word	0x2400003c
 80132a4:	080175ae 	.word	0x080175ae
 80132a8:	080175c5 	.word	0x080175c5
 80132ac:	abcd330e 	.word	0xabcd330e
 80132b0:	e66d1234 	.word	0xe66d1234
 80132b4:	0005deec 	.word	0x0005deec
 80132b8:	5851f42d 	.word	0x5851f42d
 80132bc:	4c957f2d 	.word	0x4c957f2d

080132c0 <std>:
 80132c0:	2300      	movs	r3, #0
 80132c2:	b510      	push	{r4, lr}
 80132c4:	4604      	mov	r4, r0
 80132c6:	e9c0 3300 	strd	r3, r3, [r0]
 80132ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80132ce:	6083      	str	r3, [r0, #8]
 80132d0:	8181      	strh	r1, [r0, #12]
 80132d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80132d4:	81c2      	strh	r2, [r0, #14]
 80132d6:	6183      	str	r3, [r0, #24]
 80132d8:	4619      	mov	r1, r3
 80132da:	2208      	movs	r2, #8
 80132dc:	305c      	adds	r0, #92	@ 0x5c
 80132de:	f000 f916 	bl	801350e <memset>
 80132e2:	4b0d      	ldr	r3, [pc, #52]	@ (8013318 <std+0x58>)
 80132e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80132e6:	4b0d      	ldr	r3, [pc, #52]	@ (801331c <std+0x5c>)
 80132e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80132ea:	4b0d      	ldr	r3, [pc, #52]	@ (8013320 <std+0x60>)
 80132ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80132ee:	4b0d      	ldr	r3, [pc, #52]	@ (8013324 <std+0x64>)
 80132f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80132f2:	4b0d      	ldr	r3, [pc, #52]	@ (8013328 <std+0x68>)
 80132f4:	6224      	str	r4, [r4, #32]
 80132f6:	429c      	cmp	r4, r3
 80132f8:	d006      	beq.n	8013308 <std+0x48>
 80132fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80132fe:	4294      	cmp	r4, r2
 8013300:	d002      	beq.n	8013308 <std+0x48>
 8013302:	33d0      	adds	r3, #208	@ 0xd0
 8013304:	429c      	cmp	r4, r3
 8013306:	d105      	bne.n	8013314 <std+0x54>
 8013308:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801330c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013310:	f000 b970 	b.w	80135f4 <__retarget_lock_init_recursive>
 8013314:	bd10      	pop	{r4, pc}
 8013316:	bf00      	nop
 8013318:	08013469 	.word	0x08013469
 801331c:	0801348b 	.word	0x0801348b
 8013320:	080134c3 	.word	0x080134c3
 8013324:	080134e7 	.word	0x080134e7
 8013328:	24043358 	.word	0x24043358

0801332c <stdio_exit_handler>:
 801332c:	4a02      	ldr	r2, [pc, #8]	@ (8013338 <stdio_exit_handler+0xc>)
 801332e:	4903      	ldr	r1, [pc, #12]	@ (801333c <stdio_exit_handler+0x10>)
 8013330:	4803      	ldr	r0, [pc, #12]	@ (8013340 <stdio_exit_handler+0x14>)
 8013332:	f000 b869 	b.w	8013408 <_fwalk_sglue>
 8013336:	bf00      	nop
 8013338:	24000030 	.word	0x24000030
 801333c:	08013ef9 	.word	0x08013ef9
 8013340:	24000040 	.word	0x24000040

08013344 <cleanup_stdio>:
 8013344:	6841      	ldr	r1, [r0, #4]
 8013346:	4b0c      	ldr	r3, [pc, #48]	@ (8013378 <cleanup_stdio+0x34>)
 8013348:	4299      	cmp	r1, r3
 801334a:	b510      	push	{r4, lr}
 801334c:	4604      	mov	r4, r0
 801334e:	d001      	beq.n	8013354 <cleanup_stdio+0x10>
 8013350:	f000 fdd2 	bl	8013ef8 <_fflush_r>
 8013354:	68a1      	ldr	r1, [r4, #8]
 8013356:	4b09      	ldr	r3, [pc, #36]	@ (801337c <cleanup_stdio+0x38>)
 8013358:	4299      	cmp	r1, r3
 801335a:	d002      	beq.n	8013362 <cleanup_stdio+0x1e>
 801335c:	4620      	mov	r0, r4
 801335e:	f000 fdcb 	bl	8013ef8 <_fflush_r>
 8013362:	68e1      	ldr	r1, [r4, #12]
 8013364:	4b06      	ldr	r3, [pc, #24]	@ (8013380 <cleanup_stdio+0x3c>)
 8013366:	4299      	cmp	r1, r3
 8013368:	d004      	beq.n	8013374 <cleanup_stdio+0x30>
 801336a:	4620      	mov	r0, r4
 801336c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013370:	f000 bdc2 	b.w	8013ef8 <_fflush_r>
 8013374:	bd10      	pop	{r4, pc}
 8013376:	bf00      	nop
 8013378:	24043358 	.word	0x24043358
 801337c:	240433c0 	.word	0x240433c0
 8013380:	24043428 	.word	0x24043428

08013384 <global_stdio_init.part.0>:
 8013384:	b510      	push	{r4, lr}
 8013386:	4b0b      	ldr	r3, [pc, #44]	@ (80133b4 <global_stdio_init.part.0+0x30>)
 8013388:	4c0b      	ldr	r4, [pc, #44]	@ (80133b8 <global_stdio_init.part.0+0x34>)
 801338a:	4a0c      	ldr	r2, [pc, #48]	@ (80133bc <global_stdio_init.part.0+0x38>)
 801338c:	601a      	str	r2, [r3, #0]
 801338e:	4620      	mov	r0, r4
 8013390:	2200      	movs	r2, #0
 8013392:	2104      	movs	r1, #4
 8013394:	f7ff ff94 	bl	80132c0 <std>
 8013398:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801339c:	2201      	movs	r2, #1
 801339e:	2109      	movs	r1, #9
 80133a0:	f7ff ff8e 	bl	80132c0 <std>
 80133a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80133a8:	2202      	movs	r2, #2
 80133aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133ae:	2112      	movs	r1, #18
 80133b0:	f7ff bf86 	b.w	80132c0 <std>
 80133b4:	24043490 	.word	0x24043490
 80133b8:	24043358 	.word	0x24043358
 80133bc:	0801332d 	.word	0x0801332d

080133c0 <__sfp_lock_acquire>:
 80133c0:	4801      	ldr	r0, [pc, #4]	@ (80133c8 <__sfp_lock_acquire+0x8>)
 80133c2:	f000 b918 	b.w	80135f6 <__retarget_lock_acquire_recursive>
 80133c6:	bf00      	nop
 80133c8:	24043499 	.word	0x24043499

080133cc <__sfp_lock_release>:
 80133cc:	4801      	ldr	r0, [pc, #4]	@ (80133d4 <__sfp_lock_release+0x8>)
 80133ce:	f000 b913 	b.w	80135f8 <__retarget_lock_release_recursive>
 80133d2:	bf00      	nop
 80133d4:	24043499 	.word	0x24043499

080133d8 <__sinit>:
 80133d8:	b510      	push	{r4, lr}
 80133da:	4604      	mov	r4, r0
 80133dc:	f7ff fff0 	bl	80133c0 <__sfp_lock_acquire>
 80133e0:	6a23      	ldr	r3, [r4, #32]
 80133e2:	b11b      	cbz	r3, 80133ec <__sinit+0x14>
 80133e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133e8:	f7ff bff0 	b.w	80133cc <__sfp_lock_release>
 80133ec:	4b04      	ldr	r3, [pc, #16]	@ (8013400 <__sinit+0x28>)
 80133ee:	6223      	str	r3, [r4, #32]
 80133f0:	4b04      	ldr	r3, [pc, #16]	@ (8013404 <__sinit+0x2c>)
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d1f5      	bne.n	80133e4 <__sinit+0xc>
 80133f8:	f7ff ffc4 	bl	8013384 <global_stdio_init.part.0>
 80133fc:	e7f2      	b.n	80133e4 <__sinit+0xc>
 80133fe:	bf00      	nop
 8013400:	08013345 	.word	0x08013345
 8013404:	24043490 	.word	0x24043490

08013408 <_fwalk_sglue>:
 8013408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801340c:	4607      	mov	r7, r0
 801340e:	4688      	mov	r8, r1
 8013410:	4614      	mov	r4, r2
 8013412:	2600      	movs	r6, #0
 8013414:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013418:	f1b9 0901 	subs.w	r9, r9, #1
 801341c:	d505      	bpl.n	801342a <_fwalk_sglue+0x22>
 801341e:	6824      	ldr	r4, [r4, #0]
 8013420:	2c00      	cmp	r4, #0
 8013422:	d1f7      	bne.n	8013414 <_fwalk_sglue+0xc>
 8013424:	4630      	mov	r0, r6
 8013426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801342a:	89ab      	ldrh	r3, [r5, #12]
 801342c:	2b01      	cmp	r3, #1
 801342e:	d907      	bls.n	8013440 <_fwalk_sglue+0x38>
 8013430:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013434:	3301      	adds	r3, #1
 8013436:	d003      	beq.n	8013440 <_fwalk_sglue+0x38>
 8013438:	4629      	mov	r1, r5
 801343a:	4638      	mov	r0, r7
 801343c:	47c0      	blx	r8
 801343e:	4306      	orrs	r6, r0
 8013440:	3568      	adds	r5, #104	@ 0x68
 8013442:	e7e9      	b.n	8013418 <_fwalk_sglue+0x10>

08013444 <iprintf>:
 8013444:	b40f      	push	{r0, r1, r2, r3}
 8013446:	b507      	push	{r0, r1, r2, lr}
 8013448:	4906      	ldr	r1, [pc, #24]	@ (8013464 <iprintf+0x20>)
 801344a:	ab04      	add	r3, sp, #16
 801344c:	6808      	ldr	r0, [r1, #0]
 801344e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013452:	6881      	ldr	r1, [r0, #8]
 8013454:	9301      	str	r3, [sp, #4]
 8013456:	f000 fa27 	bl	80138a8 <_vfiprintf_r>
 801345a:	b003      	add	sp, #12
 801345c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013460:	b004      	add	sp, #16
 8013462:	4770      	bx	lr
 8013464:	2400003c 	.word	0x2400003c

08013468 <__sread>:
 8013468:	b510      	push	{r4, lr}
 801346a:	460c      	mov	r4, r1
 801346c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013470:	f000 f878 	bl	8013564 <_read_r>
 8013474:	2800      	cmp	r0, #0
 8013476:	bfab      	itete	ge
 8013478:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801347a:	89a3      	ldrhlt	r3, [r4, #12]
 801347c:	181b      	addge	r3, r3, r0
 801347e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013482:	bfac      	ite	ge
 8013484:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013486:	81a3      	strhlt	r3, [r4, #12]
 8013488:	bd10      	pop	{r4, pc}

0801348a <__swrite>:
 801348a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801348e:	461f      	mov	r7, r3
 8013490:	898b      	ldrh	r3, [r1, #12]
 8013492:	05db      	lsls	r3, r3, #23
 8013494:	4605      	mov	r5, r0
 8013496:	460c      	mov	r4, r1
 8013498:	4616      	mov	r6, r2
 801349a:	d505      	bpl.n	80134a8 <__swrite+0x1e>
 801349c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134a0:	2302      	movs	r3, #2
 80134a2:	2200      	movs	r2, #0
 80134a4:	f000 f84c 	bl	8013540 <_lseek_r>
 80134a8:	89a3      	ldrh	r3, [r4, #12]
 80134aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80134b2:	81a3      	strh	r3, [r4, #12]
 80134b4:	4632      	mov	r2, r6
 80134b6:	463b      	mov	r3, r7
 80134b8:	4628      	mov	r0, r5
 80134ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134be:	f000 b863 	b.w	8013588 <_write_r>

080134c2 <__sseek>:
 80134c2:	b510      	push	{r4, lr}
 80134c4:	460c      	mov	r4, r1
 80134c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134ca:	f000 f839 	bl	8013540 <_lseek_r>
 80134ce:	1c43      	adds	r3, r0, #1
 80134d0:	89a3      	ldrh	r3, [r4, #12]
 80134d2:	bf15      	itete	ne
 80134d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80134d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80134da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80134de:	81a3      	strheq	r3, [r4, #12]
 80134e0:	bf18      	it	ne
 80134e2:	81a3      	strhne	r3, [r4, #12]
 80134e4:	bd10      	pop	{r4, pc}

080134e6 <__sclose>:
 80134e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134ea:	f000 b819 	b.w	8013520 <_close_r>

080134ee <memcmp>:
 80134ee:	b510      	push	{r4, lr}
 80134f0:	3901      	subs	r1, #1
 80134f2:	4402      	add	r2, r0
 80134f4:	4290      	cmp	r0, r2
 80134f6:	d101      	bne.n	80134fc <memcmp+0xe>
 80134f8:	2000      	movs	r0, #0
 80134fa:	e005      	b.n	8013508 <memcmp+0x1a>
 80134fc:	7803      	ldrb	r3, [r0, #0]
 80134fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013502:	42a3      	cmp	r3, r4
 8013504:	d001      	beq.n	801350a <memcmp+0x1c>
 8013506:	1b18      	subs	r0, r3, r4
 8013508:	bd10      	pop	{r4, pc}
 801350a:	3001      	adds	r0, #1
 801350c:	e7f2      	b.n	80134f4 <memcmp+0x6>

0801350e <memset>:
 801350e:	4402      	add	r2, r0
 8013510:	4603      	mov	r3, r0
 8013512:	4293      	cmp	r3, r2
 8013514:	d100      	bne.n	8013518 <memset+0xa>
 8013516:	4770      	bx	lr
 8013518:	f803 1b01 	strb.w	r1, [r3], #1
 801351c:	e7f9      	b.n	8013512 <memset+0x4>
	...

08013520 <_close_r>:
 8013520:	b538      	push	{r3, r4, r5, lr}
 8013522:	4d06      	ldr	r5, [pc, #24]	@ (801353c <_close_r+0x1c>)
 8013524:	2300      	movs	r3, #0
 8013526:	4604      	mov	r4, r0
 8013528:	4608      	mov	r0, r1
 801352a:	602b      	str	r3, [r5, #0]
 801352c:	f7ed fc8a 	bl	8000e44 <_close>
 8013530:	1c43      	adds	r3, r0, #1
 8013532:	d102      	bne.n	801353a <_close_r+0x1a>
 8013534:	682b      	ldr	r3, [r5, #0]
 8013536:	b103      	cbz	r3, 801353a <_close_r+0x1a>
 8013538:	6023      	str	r3, [r4, #0]
 801353a:	bd38      	pop	{r3, r4, r5, pc}
 801353c:	24043494 	.word	0x24043494

08013540 <_lseek_r>:
 8013540:	b538      	push	{r3, r4, r5, lr}
 8013542:	4d07      	ldr	r5, [pc, #28]	@ (8013560 <_lseek_r+0x20>)
 8013544:	4604      	mov	r4, r0
 8013546:	4608      	mov	r0, r1
 8013548:	4611      	mov	r1, r2
 801354a:	2200      	movs	r2, #0
 801354c:	602a      	str	r2, [r5, #0]
 801354e:	461a      	mov	r2, r3
 8013550:	f7ed fc9f 	bl	8000e92 <_lseek>
 8013554:	1c43      	adds	r3, r0, #1
 8013556:	d102      	bne.n	801355e <_lseek_r+0x1e>
 8013558:	682b      	ldr	r3, [r5, #0]
 801355a:	b103      	cbz	r3, 801355e <_lseek_r+0x1e>
 801355c:	6023      	str	r3, [r4, #0]
 801355e:	bd38      	pop	{r3, r4, r5, pc}
 8013560:	24043494 	.word	0x24043494

08013564 <_read_r>:
 8013564:	b538      	push	{r3, r4, r5, lr}
 8013566:	4d07      	ldr	r5, [pc, #28]	@ (8013584 <_read_r+0x20>)
 8013568:	4604      	mov	r4, r0
 801356a:	4608      	mov	r0, r1
 801356c:	4611      	mov	r1, r2
 801356e:	2200      	movs	r2, #0
 8013570:	602a      	str	r2, [r5, #0]
 8013572:	461a      	mov	r2, r3
 8013574:	f7ed fc2d 	bl	8000dd2 <_read>
 8013578:	1c43      	adds	r3, r0, #1
 801357a:	d102      	bne.n	8013582 <_read_r+0x1e>
 801357c:	682b      	ldr	r3, [r5, #0]
 801357e:	b103      	cbz	r3, 8013582 <_read_r+0x1e>
 8013580:	6023      	str	r3, [r4, #0]
 8013582:	bd38      	pop	{r3, r4, r5, pc}
 8013584:	24043494 	.word	0x24043494

08013588 <_write_r>:
 8013588:	b538      	push	{r3, r4, r5, lr}
 801358a:	4d07      	ldr	r5, [pc, #28]	@ (80135a8 <_write_r+0x20>)
 801358c:	4604      	mov	r4, r0
 801358e:	4608      	mov	r0, r1
 8013590:	4611      	mov	r1, r2
 8013592:	2200      	movs	r2, #0
 8013594:	602a      	str	r2, [r5, #0]
 8013596:	461a      	mov	r2, r3
 8013598:	f7ed fc38 	bl	8000e0c <_write>
 801359c:	1c43      	adds	r3, r0, #1
 801359e:	d102      	bne.n	80135a6 <_write_r+0x1e>
 80135a0:	682b      	ldr	r3, [r5, #0]
 80135a2:	b103      	cbz	r3, 80135a6 <_write_r+0x1e>
 80135a4:	6023      	str	r3, [r4, #0]
 80135a6:	bd38      	pop	{r3, r4, r5, pc}
 80135a8:	24043494 	.word	0x24043494

080135ac <__libc_init_array>:
 80135ac:	b570      	push	{r4, r5, r6, lr}
 80135ae:	4d0d      	ldr	r5, [pc, #52]	@ (80135e4 <__libc_init_array+0x38>)
 80135b0:	4c0d      	ldr	r4, [pc, #52]	@ (80135e8 <__libc_init_array+0x3c>)
 80135b2:	1b64      	subs	r4, r4, r5
 80135b4:	10a4      	asrs	r4, r4, #2
 80135b6:	2600      	movs	r6, #0
 80135b8:	42a6      	cmp	r6, r4
 80135ba:	d109      	bne.n	80135d0 <__libc_init_array+0x24>
 80135bc:	4d0b      	ldr	r5, [pc, #44]	@ (80135ec <__libc_init_array+0x40>)
 80135be:	4c0c      	ldr	r4, [pc, #48]	@ (80135f0 <__libc_init_array+0x44>)
 80135c0:	f000 fe48 	bl	8014254 <_init>
 80135c4:	1b64      	subs	r4, r4, r5
 80135c6:	10a4      	asrs	r4, r4, #2
 80135c8:	2600      	movs	r6, #0
 80135ca:	42a6      	cmp	r6, r4
 80135cc:	d105      	bne.n	80135da <__libc_init_array+0x2e>
 80135ce:	bd70      	pop	{r4, r5, r6, pc}
 80135d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80135d4:	4798      	blx	r3
 80135d6:	3601      	adds	r6, #1
 80135d8:	e7ee      	b.n	80135b8 <__libc_init_array+0xc>
 80135da:	f855 3b04 	ldr.w	r3, [r5], #4
 80135de:	4798      	blx	r3
 80135e0:	3601      	adds	r6, #1
 80135e2:	e7f2      	b.n	80135ca <__libc_init_array+0x1e>
 80135e4:	08017694 	.word	0x08017694
 80135e8:	08017694 	.word	0x08017694
 80135ec:	08017694 	.word	0x08017694
 80135f0:	08017698 	.word	0x08017698

080135f4 <__retarget_lock_init_recursive>:
 80135f4:	4770      	bx	lr

080135f6 <__retarget_lock_acquire_recursive>:
 80135f6:	4770      	bx	lr

080135f8 <__retarget_lock_release_recursive>:
 80135f8:	4770      	bx	lr

080135fa <memcpy>:
 80135fa:	440a      	add	r2, r1
 80135fc:	4291      	cmp	r1, r2
 80135fe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013602:	d100      	bne.n	8013606 <memcpy+0xc>
 8013604:	4770      	bx	lr
 8013606:	b510      	push	{r4, lr}
 8013608:	f811 4b01 	ldrb.w	r4, [r1], #1
 801360c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013610:	4291      	cmp	r1, r2
 8013612:	d1f9      	bne.n	8013608 <memcpy+0xe>
 8013614:	bd10      	pop	{r4, pc}
	...

08013618 <__assert_func>:
 8013618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801361a:	4614      	mov	r4, r2
 801361c:	461a      	mov	r2, r3
 801361e:	4b09      	ldr	r3, [pc, #36]	@ (8013644 <__assert_func+0x2c>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	4605      	mov	r5, r0
 8013624:	68d8      	ldr	r0, [r3, #12]
 8013626:	b14c      	cbz	r4, 801363c <__assert_func+0x24>
 8013628:	4b07      	ldr	r3, [pc, #28]	@ (8013648 <__assert_func+0x30>)
 801362a:	9100      	str	r1, [sp, #0]
 801362c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013630:	4906      	ldr	r1, [pc, #24]	@ (801364c <__assert_func+0x34>)
 8013632:	462b      	mov	r3, r5
 8013634:	f000 fc88 	bl	8013f48 <fiprintf>
 8013638:	f000 fd3c 	bl	80140b4 <abort>
 801363c:	4b04      	ldr	r3, [pc, #16]	@ (8013650 <__assert_func+0x38>)
 801363e:	461c      	mov	r4, r3
 8013640:	e7f3      	b.n	801362a <__assert_func+0x12>
 8013642:	bf00      	nop
 8013644:	2400003c 	.word	0x2400003c
 8013648:	0801761d 	.word	0x0801761d
 801364c:	0801762a 	.word	0x0801762a
 8013650:	08017658 	.word	0x08017658

08013654 <_free_r>:
 8013654:	b538      	push	{r3, r4, r5, lr}
 8013656:	4605      	mov	r5, r0
 8013658:	2900      	cmp	r1, #0
 801365a:	d041      	beq.n	80136e0 <_free_r+0x8c>
 801365c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013660:	1f0c      	subs	r4, r1, #4
 8013662:	2b00      	cmp	r3, #0
 8013664:	bfb8      	it	lt
 8013666:	18e4      	addlt	r4, r4, r3
 8013668:	f000 f8e8 	bl	801383c <__malloc_lock>
 801366c:	4a1d      	ldr	r2, [pc, #116]	@ (80136e4 <_free_r+0x90>)
 801366e:	6813      	ldr	r3, [r2, #0]
 8013670:	b933      	cbnz	r3, 8013680 <_free_r+0x2c>
 8013672:	6063      	str	r3, [r4, #4]
 8013674:	6014      	str	r4, [r2, #0]
 8013676:	4628      	mov	r0, r5
 8013678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801367c:	f000 b8e4 	b.w	8013848 <__malloc_unlock>
 8013680:	42a3      	cmp	r3, r4
 8013682:	d908      	bls.n	8013696 <_free_r+0x42>
 8013684:	6820      	ldr	r0, [r4, #0]
 8013686:	1821      	adds	r1, r4, r0
 8013688:	428b      	cmp	r3, r1
 801368a:	bf01      	itttt	eq
 801368c:	6819      	ldreq	r1, [r3, #0]
 801368e:	685b      	ldreq	r3, [r3, #4]
 8013690:	1809      	addeq	r1, r1, r0
 8013692:	6021      	streq	r1, [r4, #0]
 8013694:	e7ed      	b.n	8013672 <_free_r+0x1e>
 8013696:	461a      	mov	r2, r3
 8013698:	685b      	ldr	r3, [r3, #4]
 801369a:	b10b      	cbz	r3, 80136a0 <_free_r+0x4c>
 801369c:	42a3      	cmp	r3, r4
 801369e:	d9fa      	bls.n	8013696 <_free_r+0x42>
 80136a0:	6811      	ldr	r1, [r2, #0]
 80136a2:	1850      	adds	r0, r2, r1
 80136a4:	42a0      	cmp	r0, r4
 80136a6:	d10b      	bne.n	80136c0 <_free_r+0x6c>
 80136a8:	6820      	ldr	r0, [r4, #0]
 80136aa:	4401      	add	r1, r0
 80136ac:	1850      	adds	r0, r2, r1
 80136ae:	4283      	cmp	r3, r0
 80136b0:	6011      	str	r1, [r2, #0]
 80136b2:	d1e0      	bne.n	8013676 <_free_r+0x22>
 80136b4:	6818      	ldr	r0, [r3, #0]
 80136b6:	685b      	ldr	r3, [r3, #4]
 80136b8:	6053      	str	r3, [r2, #4]
 80136ba:	4408      	add	r0, r1
 80136bc:	6010      	str	r0, [r2, #0]
 80136be:	e7da      	b.n	8013676 <_free_r+0x22>
 80136c0:	d902      	bls.n	80136c8 <_free_r+0x74>
 80136c2:	230c      	movs	r3, #12
 80136c4:	602b      	str	r3, [r5, #0]
 80136c6:	e7d6      	b.n	8013676 <_free_r+0x22>
 80136c8:	6820      	ldr	r0, [r4, #0]
 80136ca:	1821      	adds	r1, r4, r0
 80136cc:	428b      	cmp	r3, r1
 80136ce:	bf04      	itt	eq
 80136d0:	6819      	ldreq	r1, [r3, #0]
 80136d2:	685b      	ldreq	r3, [r3, #4]
 80136d4:	6063      	str	r3, [r4, #4]
 80136d6:	bf04      	itt	eq
 80136d8:	1809      	addeq	r1, r1, r0
 80136da:	6021      	streq	r1, [r4, #0]
 80136dc:	6054      	str	r4, [r2, #4]
 80136de:	e7ca      	b.n	8013676 <_free_r+0x22>
 80136e0:	bd38      	pop	{r3, r4, r5, pc}
 80136e2:	bf00      	nop
 80136e4:	240434a0 	.word	0x240434a0

080136e8 <malloc>:
 80136e8:	4b02      	ldr	r3, [pc, #8]	@ (80136f4 <malloc+0xc>)
 80136ea:	4601      	mov	r1, r0
 80136ec:	6818      	ldr	r0, [r3, #0]
 80136ee:	f000 b825 	b.w	801373c <_malloc_r>
 80136f2:	bf00      	nop
 80136f4:	2400003c 	.word	0x2400003c

080136f8 <sbrk_aligned>:
 80136f8:	b570      	push	{r4, r5, r6, lr}
 80136fa:	4e0f      	ldr	r6, [pc, #60]	@ (8013738 <sbrk_aligned+0x40>)
 80136fc:	460c      	mov	r4, r1
 80136fe:	6831      	ldr	r1, [r6, #0]
 8013700:	4605      	mov	r5, r0
 8013702:	b911      	cbnz	r1, 801370a <sbrk_aligned+0x12>
 8013704:	f000 fcc6 	bl	8014094 <_sbrk_r>
 8013708:	6030      	str	r0, [r6, #0]
 801370a:	4621      	mov	r1, r4
 801370c:	4628      	mov	r0, r5
 801370e:	f000 fcc1 	bl	8014094 <_sbrk_r>
 8013712:	1c43      	adds	r3, r0, #1
 8013714:	d103      	bne.n	801371e <sbrk_aligned+0x26>
 8013716:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801371a:	4620      	mov	r0, r4
 801371c:	bd70      	pop	{r4, r5, r6, pc}
 801371e:	1cc4      	adds	r4, r0, #3
 8013720:	f024 0403 	bic.w	r4, r4, #3
 8013724:	42a0      	cmp	r0, r4
 8013726:	d0f8      	beq.n	801371a <sbrk_aligned+0x22>
 8013728:	1a21      	subs	r1, r4, r0
 801372a:	4628      	mov	r0, r5
 801372c:	f000 fcb2 	bl	8014094 <_sbrk_r>
 8013730:	3001      	adds	r0, #1
 8013732:	d1f2      	bne.n	801371a <sbrk_aligned+0x22>
 8013734:	e7ef      	b.n	8013716 <sbrk_aligned+0x1e>
 8013736:	bf00      	nop
 8013738:	2404349c 	.word	0x2404349c

0801373c <_malloc_r>:
 801373c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013740:	1ccd      	adds	r5, r1, #3
 8013742:	f025 0503 	bic.w	r5, r5, #3
 8013746:	3508      	adds	r5, #8
 8013748:	2d0c      	cmp	r5, #12
 801374a:	bf38      	it	cc
 801374c:	250c      	movcc	r5, #12
 801374e:	2d00      	cmp	r5, #0
 8013750:	4606      	mov	r6, r0
 8013752:	db01      	blt.n	8013758 <_malloc_r+0x1c>
 8013754:	42a9      	cmp	r1, r5
 8013756:	d904      	bls.n	8013762 <_malloc_r+0x26>
 8013758:	230c      	movs	r3, #12
 801375a:	6033      	str	r3, [r6, #0]
 801375c:	2000      	movs	r0, #0
 801375e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013762:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013838 <_malloc_r+0xfc>
 8013766:	f000 f869 	bl	801383c <__malloc_lock>
 801376a:	f8d8 3000 	ldr.w	r3, [r8]
 801376e:	461c      	mov	r4, r3
 8013770:	bb44      	cbnz	r4, 80137c4 <_malloc_r+0x88>
 8013772:	4629      	mov	r1, r5
 8013774:	4630      	mov	r0, r6
 8013776:	f7ff ffbf 	bl	80136f8 <sbrk_aligned>
 801377a:	1c43      	adds	r3, r0, #1
 801377c:	4604      	mov	r4, r0
 801377e:	d158      	bne.n	8013832 <_malloc_r+0xf6>
 8013780:	f8d8 4000 	ldr.w	r4, [r8]
 8013784:	4627      	mov	r7, r4
 8013786:	2f00      	cmp	r7, #0
 8013788:	d143      	bne.n	8013812 <_malloc_r+0xd6>
 801378a:	2c00      	cmp	r4, #0
 801378c:	d04b      	beq.n	8013826 <_malloc_r+0xea>
 801378e:	6823      	ldr	r3, [r4, #0]
 8013790:	4639      	mov	r1, r7
 8013792:	4630      	mov	r0, r6
 8013794:	eb04 0903 	add.w	r9, r4, r3
 8013798:	f000 fc7c 	bl	8014094 <_sbrk_r>
 801379c:	4581      	cmp	r9, r0
 801379e:	d142      	bne.n	8013826 <_malloc_r+0xea>
 80137a0:	6821      	ldr	r1, [r4, #0]
 80137a2:	1a6d      	subs	r5, r5, r1
 80137a4:	4629      	mov	r1, r5
 80137a6:	4630      	mov	r0, r6
 80137a8:	f7ff ffa6 	bl	80136f8 <sbrk_aligned>
 80137ac:	3001      	adds	r0, #1
 80137ae:	d03a      	beq.n	8013826 <_malloc_r+0xea>
 80137b0:	6823      	ldr	r3, [r4, #0]
 80137b2:	442b      	add	r3, r5
 80137b4:	6023      	str	r3, [r4, #0]
 80137b6:	f8d8 3000 	ldr.w	r3, [r8]
 80137ba:	685a      	ldr	r2, [r3, #4]
 80137bc:	bb62      	cbnz	r2, 8013818 <_malloc_r+0xdc>
 80137be:	f8c8 7000 	str.w	r7, [r8]
 80137c2:	e00f      	b.n	80137e4 <_malloc_r+0xa8>
 80137c4:	6822      	ldr	r2, [r4, #0]
 80137c6:	1b52      	subs	r2, r2, r5
 80137c8:	d420      	bmi.n	801380c <_malloc_r+0xd0>
 80137ca:	2a0b      	cmp	r2, #11
 80137cc:	d917      	bls.n	80137fe <_malloc_r+0xc2>
 80137ce:	1961      	adds	r1, r4, r5
 80137d0:	42a3      	cmp	r3, r4
 80137d2:	6025      	str	r5, [r4, #0]
 80137d4:	bf18      	it	ne
 80137d6:	6059      	strne	r1, [r3, #4]
 80137d8:	6863      	ldr	r3, [r4, #4]
 80137da:	bf08      	it	eq
 80137dc:	f8c8 1000 	streq.w	r1, [r8]
 80137e0:	5162      	str	r2, [r4, r5]
 80137e2:	604b      	str	r3, [r1, #4]
 80137e4:	4630      	mov	r0, r6
 80137e6:	f000 f82f 	bl	8013848 <__malloc_unlock>
 80137ea:	f104 000b 	add.w	r0, r4, #11
 80137ee:	1d23      	adds	r3, r4, #4
 80137f0:	f020 0007 	bic.w	r0, r0, #7
 80137f4:	1ac2      	subs	r2, r0, r3
 80137f6:	bf1c      	itt	ne
 80137f8:	1a1b      	subne	r3, r3, r0
 80137fa:	50a3      	strne	r3, [r4, r2]
 80137fc:	e7af      	b.n	801375e <_malloc_r+0x22>
 80137fe:	6862      	ldr	r2, [r4, #4]
 8013800:	42a3      	cmp	r3, r4
 8013802:	bf0c      	ite	eq
 8013804:	f8c8 2000 	streq.w	r2, [r8]
 8013808:	605a      	strne	r2, [r3, #4]
 801380a:	e7eb      	b.n	80137e4 <_malloc_r+0xa8>
 801380c:	4623      	mov	r3, r4
 801380e:	6864      	ldr	r4, [r4, #4]
 8013810:	e7ae      	b.n	8013770 <_malloc_r+0x34>
 8013812:	463c      	mov	r4, r7
 8013814:	687f      	ldr	r7, [r7, #4]
 8013816:	e7b6      	b.n	8013786 <_malloc_r+0x4a>
 8013818:	461a      	mov	r2, r3
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	42a3      	cmp	r3, r4
 801381e:	d1fb      	bne.n	8013818 <_malloc_r+0xdc>
 8013820:	2300      	movs	r3, #0
 8013822:	6053      	str	r3, [r2, #4]
 8013824:	e7de      	b.n	80137e4 <_malloc_r+0xa8>
 8013826:	230c      	movs	r3, #12
 8013828:	6033      	str	r3, [r6, #0]
 801382a:	4630      	mov	r0, r6
 801382c:	f000 f80c 	bl	8013848 <__malloc_unlock>
 8013830:	e794      	b.n	801375c <_malloc_r+0x20>
 8013832:	6005      	str	r5, [r0, #0]
 8013834:	e7d6      	b.n	80137e4 <_malloc_r+0xa8>
 8013836:	bf00      	nop
 8013838:	240434a0 	.word	0x240434a0

0801383c <__malloc_lock>:
 801383c:	4801      	ldr	r0, [pc, #4]	@ (8013844 <__malloc_lock+0x8>)
 801383e:	f7ff beda 	b.w	80135f6 <__retarget_lock_acquire_recursive>
 8013842:	bf00      	nop
 8013844:	24043498 	.word	0x24043498

08013848 <__malloc_unlock>:
 8013848:	4801      	ldr	r0, [pc, #4]	@ (8013850 <__malloc_unlock+0x8>)
 801384a:	f7ff bed5 	b.w	80135f8 <__retarget_lock_release_recursive>
 801384e:	bf00      	nop
 8013850:	24043498 	.word	0x24043498

08013854 <__sfputc_r>:
 8013854:	6893      	ldr	r3, [r2, #8]
 8013856:	3b01      	subs	r3, #1
 8013858:	2b00      	cmp	r3, #0
 801385a:	b410      	push	{r4}
 801385c:	6093      	str	r3, [r2, #8]
 801385e:	da08      	bge.n	8013872 <__sfputc_r+0x1e>
 8013860:	6994      	ldr	r4, [r2, #24]
 8013862:	42a3      	cmp	r3, r4
 8013864:	db01      	blt.n	801386a <__sfputc_r+0x16>
 8013866:	290a      	cmp	r1, #10
 8013868:	d103      	bne.n	8013872 <__sfputc_r+0x1e>
 801386a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801386e:	f000 bb7d 	b.w	8013f6c <__swbuf_r>
 8013872:	6813      	ldr	r3, [r2, #0]
 8013874:	1c58      	adds	r0, r3, #1
 8013876:	6010      	str	r0, [r2, #0]
 8013878:	7019      	strb	r1, [r3, #0]
 801387a:	4608      	mov	r0, r1
 801387c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013880:	4770      	bx	lr

08013882 <__sfputs_r>:
 8013882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013884:	4606      	mov	r6, r0
 8013886:	460f      	mov	r7, r1
 8013888:	4614      	mov	r4, r2
 801388a:	18d5      	adds	r5, r2, r3
 801388c:	42ac      	cmp	r4, r5
 801388e:	d101      	bne.n	8013894 <__sfputs_r+0x12>
 8013890:	2000      	movs	r0, #0
 8013892:	e007      	b.n	80138a4 <__sfputs_r+0x22>
 8013894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013898:	463a      	mov	r2, r7
 801389a:	4630      	mov	r0, r6
 801389c:	f7ff ffda 	bl	8013854 <__sfputc_r>
 80138a0:	1c43      	adds	r3, r0, #1
 80138a2:	d1f3      	bne.n	801388c <__sfputs_r+0xa>
 80138a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080138a8 <_vfiprintf_r>:
 80138a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ac:	460d      	mov	r5, r1
 80138ae:	b09d      	sub	sp, #116	@ 0x74
 80138b0:	4614      	mov	r4, r2
 80138b2:	4698      	mov	r8, r3
 80138b4:	4606      	mov	r6, r0
 80138b6:	b118      	cbz	r0, 80138c0 <_vfiprintf_r+0x18>
 80138b8:	6a03      	ldr	r3, [r0, #32]
 80138ba:	b90b      	cbnz	r3, 80138c0 <_vfiprintf_r+0x18>
 80138bc:	f7ff fd8c 	bl	80133d8 <__sinit>
 80138c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80138c2:	07d9      	lsls	r1, r3, #31
 80138c4:	d405      	bmi.n	80138d2 <_vfiprintf_r+0x2a>
 80138c6:	89ab      	ldrh	r3, [r5, #12]
 80138c8:	059a      	lsls	r2, r3, #22
 80138ca:	d402      	bmi.n	80138d2 <_vfiprintf_r+0x2a>
 80138cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80138ce:	f7ff fe92 	bl	80135f6 <__retarget_lock_acquire_recursive>
 80138d2:	89ab      	ldrh	r3, [r5, #12]
 80138d4:	071b      	lsls	r3, r3, #28
 80138d6:	d501      	bpl.n	80138dc <_vfiprintf_r+0x34>
 80138d8:	692b      	ldr	r3, [r5, #16]
 80138da:	b99b      	cbnz	r3, 8013904 <_vfiprintf_r+0x5c>
 80138dc:	4629      	mov	r1, r5
 80138de:	4630      	mov	r0, r6
 80138e0:	f000 fb82 	bl	8013fe8 <__swsetup_r>
 80138e4:	b170      	cbz	r0, 8013904 <_vfiprintf_r+0x5c>
 80138e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80138e8:	07dc      	lsls	r4, r3, #31
 80138ea:	d504      	bpl.n	80138f6 <_vfiprintf_r+0x4e>
 80138ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80138f0:	b01d      	add	sp, #116	@ 0x74
 80138f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138f6:	89ab      	ldrh	r3, [r5, #12]
 80138f8:	0598      	lsls	r0, r3, #22
 80138fa:	d4f7      	bmi.n	80138ec <_vfiprintf_r+0x44>
 80138fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80138fe:	f7ff fe7b 	bl	80135f8 <__retarget_lock_release_recursive>
 8013902:	e7f3      	b.n	80138ec <_vfiprintf_r+0x44>
 8013904:	2300      	movs	r3, #0
 8013906:	9309      	str	r3, [sp, #36]	@ 0x24
 8013908:	2320      	movs	r3, #32
 801390a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801390e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013912:	2330      	movs	r3, #48	@ 0x30
 8013914:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013ac4 <_vfiprintf_r+0x21c>
 8013918:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801391c:	f04f 0901 	mov.w	r9, #1
 8013920:	4623      	mov	r3, r4
 8013922:	469a      	mov	sl, r3
 8013924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013928:	b10a      	cbz	r2, 801392e <_vfiprintf_r+0x86>
 801392a:	2a25      	cmp	r2, #37	@ 0x25
 801392c:	d1f9      	bne.n	8013922 <_vfiprintf_r+0x7a>
 801392e:	ebba 0b04 	subs.w	fp, sl, r4
 8013932:	d00b      	beq.n	801394c <_vfiprintf_r+0xa4>
 8013934:	465b      	mov	r3, fp
 8013936:	4622      	mov	r2, r4
 8013938:	4629      	mov	r1, r5
 801393a:	4630      	mov	r0, r6
 801393c:	f7ff ffa1 	bl	8013882 <__sfputs_r>
 8013940:	3001      	adds	r0, #1
 8013942:	f000 80a7 	beq.w	8013a94 <_vfiprintf_r+0x1ec>
 8013946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013948:	445a      	add	r2, fp
 801394a:	9209      	str	r2, [sp, #36]	@ 0x24
 801394c:	f89a 3000 	ldrb.w	r3, [sl]
 8013950:	2b00      	cmp	r3, #0
 8013952:	f000 809f 	beq.w	8013a94 <_vfiprintf_r+0x1ec>
 8013956:	2300      	movs	r3, #0
 8013958:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801395c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013960:	f10a 0a01 	add.w	sl, sl, #1
 8013964:	9304      	str	r3, [sp, #16]
 8013966:	9307      	str	r3, [sp, #28]
 8013968:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801396c:	931a      	str	r3, [sp, #104]	@ 0x68
 801396e:	4654      	mov	r4, sl
 8013970:	2205      	movs	r2, #5
 8013972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013976:	4853      	ldr	r0, [pc, #332]	@ (8013ac4 <_vfiprintf_r+0x21c>)
 8013978:	f7ec fcca 	bl	8000310 <memchr>
 801397c:	9a04      	ldr	r2, [sp, #16]
 801397e:	b9d8      	cbnz	r0, 80139b8 <_vfiprintf_r+0x110>
 8013980:	06d1      	lsls	r1, r2, #27
 8013982:	bf44      	itt	mi
 8013984:	2320      	movmi	r3, #32
 8013986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801398a:	0713      	lsls	r3, r2, #28
 801398c:	bf44      	itt	mi
 801398e:	232b      	movmi	r3, #43	@ 0x2b
 8013990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013994:	f89a 3000 	ldrb.w	r3, [sl]
 8013998:	2b2a      	cmp	r3, #42	@ 0x2a
 801399a:	d015      	beq.n	80139c8 <_vfiprintf_r+0x120>
 801399c:	9a07      	ldr	r2, [sp, #28]
 801399e:	4654      	mov	r4, sl
 80139a0:	2000      	movs	r0, #0
 80139a2:	f04f 0c0a 	mov.w	ip, #10
 80139a6:	4621      	mov	r1, r4
 80139a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139ac:	3b30      	subs	r3, #48	@ 0x30
 80139ae:	2b09      	cmp	r3, #9
 80139b0:	d94b      	bls.n	8013a4a <_vfiprintf_r+0x1a2>
 80139b2:	b1b0      	cbz	r0, 80139e2 <_vfiprintf_r+0x13a>
 80139b4:	9207      	str	r2, [sp, #28]
 80139b6:	e014      	b.n	80139e2 <_vfiprintf_r+0x13a>
 80139b8:	eba0 0308 	sub.w	r3, r0, r8
 80139bc:	fa09 f303 	lsl.w	r3, r9, r3
 80139c0:	4313      	orrs	r3, r2
 80139c2:	9304      	str	r3, [sp, #16]
 80139c4:	46a2      	mov	sl, r4
 80139c6:	e7d2      	b.n	801396e <_vfiprintf_r+0xc6>
 80139c8:	9b03      	ldr	r3, [sp, #12]
 80139ca:	1d19      	adds	r1, r3, #4
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	9103      	str	r1, [sp, #12]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	bfbb      	ittet	lt
 80139d4:	425b      	neglt	r3, r3
 80139d6:	f042 0202 	orrlt.w	r2, r2, #2
 80139da:	9307      	strge	r3, [sp, #28]
 80139dc:	9307      	strlt	r3, [sp, #28]
 80139de:	bfb8      	it	lt
 80139e0:	9204      	strlt	r2, [sp, #16]
 80139e2:	7823      	ldrb	r3, [r4, #0]
 80139e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80139e6:	d10a      	bne.n	80139fe <_vfiprintf_r+0x156>
 80139e8:	7863      	ldrb	r3, [r4, #1]
 80139ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80139ec:	d132      	bne.n	8013a54 <_vfiprintf_r+0x1ac>
 80139ee:	9b03      	ldr	r3, [sp, #12]
 80139f0:	1d1a      	adds	r2, r3, #4
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	9203      	str	r2, [sp, #12]
 80139f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80139fa:	3402      	adds	r4, #2
 80139fc:	9305      	str	r3, [sp, #20]
 80139fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013ad4 <_vfiprintf_r+0x22c>
 8013a02:	7821      	ldrb	r1, [r4, #0]
 8013a04:	2203      	movs	r2, #3
 8013a06:	4650      	mov	r0, sl
 8013a08:	f7ec fc82 	bl	8000310 <memchr>
 8013a0c:	b138      	cbz	r0, 8013a1e <_vfiprintf_r+0x176>
 8013a0e:	9b04      	ldr	r3, [sp, #16]
 8013a10:	eba0 000a 	sub.w	r0, r0, sl
 8013a14:	2240      	movs	r2, #64	@ 0x40
 8013a16:	4082      	lsls	r2, r0
 8013a18:	4313      	orrs	r3, r2
 8013a1a:	3401      	adds	r4, #1
 8013a1c:	9304      	str	r3, [sp, #16]
 8013a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a22:	4829      	ldr	r0, [pc, #164]	@ (8013ac8 <_vfiprintf_r+0x220>)
 8013a24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013a28:	2206      	movs	r2, #6
 8013a2a:	f7ec fc71 	bl	8000310 <memchr>
 8013a2e:	2800      	cmp	r0, #0
 8013a30:	d03f      	beq.n	8013ab2 <_vfiprintf_r+0x20a>
 8013a32:	4b26      	ldr	r3, [pc, #152]	@ (8013acc <_vfiprintf_r+0x224>)
 8013a34:	bb1b      	cbnz	r3, 8013a7e <_vfiprintf_r+0x1d6>
 8013a36:	9b03      	ldr	r3, [sp, #12]
 8013a38:	3307      	adds	r3, #7
 8013a3a:	f023 0307 	bic.w	r3, r3, #7
 8013a3e:	3308      	adds	r3, #8
 8013a40:	9303      	str	r3, [sp, #12]
 8013a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a44:	443b      	add	r3, r7
 8013a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a48:	e76a      	b.n	8013920 <_vfiprintf_r+0x78>
 8013a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a4e:	460c      	mov	r4, r1
 8013a50:	2001      	movs	r0, #1
 8013a52:	e7a8      	b.n	80139a6 <_vfiprintf_r+0xfe>
 8013a54:	2300      	movs	r3, #0
 8013a56:	3401      	adds	r4, #1
 8013a58:	9305      	str	r3, [sp, #20]
 8013a5a:	4619      	mov	r1, r3
 8013a5c:	f04f 0c0a 	mov.w	ip, #10
 8013a60:	4620      	mov	r0, r4
 8013a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a66:	3a30      	subs	r2, #48	@ 0x30
 8013a68:	2a09      	cmp	r2, #9
 8013a6a:	d903      	bls.n	8013a74 <_vfiprintf_r+0x1cc>
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d0c6      	beq.n	80139fe <_vfiprintf_r+0x156>
 8013a70:	9105      	str	r1, [sp, #20]
 8013a72:	e7c4      	b.n	80139fe <_vfiprintf_r+0x156>
 8013a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a78:	4604      	mov	r4, r0
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	e7f0      	b.n	8013a60 <_vfiprintf_r+0x1b8>
 8013a7e:	ab03      	add	r3, sp, #12
 8013a80:	9300      	str	r3, [sp, #0]
 8013a82:	462a      	mov	r2, r5
 8013a84:	4b12      	ldr	r3, [pc, #72]	@ (8013ad0 <_vfiprintf_r+0x228>)
 8013a86:	a904      	add	r1, sp, #16
 8013a88:	4630      	mov	r0, r6
 8013a8a:	f3af 8000 	nop.w
 8013a8e:	4607      	mov	r7, r0
 8013a90:	1c78      	adds	r0, r7, #1
 8013a92:	d1d6      	bne.n	8013a42 <_vfiprintf_r+0x19a>
 8013a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013a96:	07d9      	lsls	r1, r3, #31
 8013a98:	d405      	bmi.n	8013aa6 <_vfiprintf_r+0x1fe>
 8013a9a:	89ab      	ldrh	r3, [r5, #12]
 8013a9c:	059a      	lsls	r2, r3, #22
 8013a9e:	d402      	bmi.n	8013aa6 <_vfiprintf_r+0x1fe>
 8013aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013aa2:	f7ff fda9 	bl	80135f8 <__retarget_lock_release_recursive>
 8013aa6:	89ab      	ldrh	r3, [r5, #12]
 8013aa8:	065b      	lsls	r3, r3, #25
 8013aaa:	f53f af1f 	bmi.w	80138ec <_vfiprintf_r+0x44>
 8013aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ab0:	e71e      	b.n	80138f0 <_vfiprintf_r+0x48>
 8013ab2:	ab03      	add	r3, sp, #12
 8013ab4:	9300      	str	r3, [sp, #0]
 8013ab6:	462a      	mov	r2, r5
 8013ab8:	4b05      	ldr	r3, [pc, #20]	@ (8013ad0 <_vfiprintf_r+0x228>)
 8013aba:	a904      	add	r1, sp, #16
 8013abc:	4630      	mov	r0, r6
 8013abe:	f000 f879 	bl	8013bb4 <_printf_i>
 8013ac2:	e7e4      	b.n	8013a8e <_vfiprintf_r+0x1e6>
 8013ac4:	08017659 	.word	0x08017659
 8013ac8:	08017663 	.word	0x08017663
 8013acc:	00000000 	.word	0x00000000
 8013ad0:	08013883 	.word	0x08013883
 8013ad4:	0801765f 	.word	0x0801765f

08013ad8 <_printf_common>:
 8013ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013adc:	4616      	mov	r6, r2
 8013ade:	4698      	mov	r8, r3
 8013ae0:	688a      	ldr	r2, [r1, #8]
 8013ae2:	690b      	ldr	r3, [r1, #16]
 8013ae4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013ae8:	4293      	cmp	r3, r2
 8013aea:	bfb8      	it	lt
 8013aec:	4613      	movlt	r3, r2
 8013aee:	6033      	str	r3, [r6, #0]
 8013af0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013af4:	4607      	mov	r7, r0
 8013af6:	460c      	mov	r4, r1
 8013af8:	b10a      	cbz	r2, 8013afe <_printf_common+0x26>
 8013afa:	3301      	adds	r3, #1
 8013afc:	6033      	str	r3, [r6, #0]
 8013afe:	6823      	ldr	r3, [r4, #0]
 8013b00:	0699      	lsls	r1, r3, #26
 8013b02:	bf42      	ittt	mi
 8013b04:	6833      	ldrmi	r3, [r6, #0]
 8013b06:	3302      	addmi	r3, #2
 8013b08:	6033      	strmi	r3, [r6, #0]
 8013b0a:	6825      	ldr	r5, [r4, #0]
 8013b0c:	f015 0506 	ands.w	r5, r5, #6
 8013b10:	d106      	bne.n	8013b20 <_printf_common+0x48>
 8013b12:	f104 0a19 	add.w	sl, r4, #25
 8013b16:	68e3      	ldr	r3, [r4, #12]
 8013b18:	6832      	ldr	r2, [r6, #0]
 8013b1a:	1a9b      	subs	r3, r3, r2
 8013b1c:	42ab      	cmp	r3, r5
 8013b1e:	dc26      	bgt.n	8013b6e <_printf_common+0x96>
 8013b20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013b24:	6822      	ldr	r2, [r4, #0]
 8013b26:	3b00      	subs	r3, #0
 8013b28:	bf18      	it	ne
 8013b2a:	2301      	movne	r3, #1
 8013b2c:	0692      	lsls	r2, r2, #26
 8013b2e:	d42b      	bmi.n	8013b88 <_printf_common+0xb0>
 8013b30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013b34:	4641      	mov	r1, r8
 8013b36:	4638      	mov	r0, r7
 8013b38:	47c8      	blx	r9
 8013b3a:	3001      	adds	r0, #1
 8013b3c:	d01e      	beq.n	8013b7c <_printf_common+0xa4>
 8013b3e:	6823      	ldr	r3, [r4, #0]
 8013b40:	6922      	ldr	r2, [r4, #16]
 8013b42:	f003 0306 	and.w	r3, r3, #6
 8013b46:	2b04      	cmp	r3, #4
 8013b48:	bf02      	ittt	eq
 8013b4a:	68e5      	ldreq	r5, [r4, #12]
 8013b4c:	6833      	ldreq	r3, [r6, #0]
 8013b4e:	1aed      	subeq	r5, r5, r3
 8013b50:	68a3      	ldr	r3, [r4, #8]
 8013b52:	bf0c      	ite	eq
 8013b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b58:	2500      	movne	r5, #0
 8013b5a:	4293      	cmp	r3, r2
 8013b5c:	bfc4      	itt	gt
 8013b5e:	1a9b      	subgt	r3, r3, r2
 8013b60:	18ed      	addgt	r5, r5, r3
 8013b62:	2600      	movs	r6, #0
 8013b64:	341a      	adds	r4, #26
 8013b66:	42b5      	cmp	r5, r6
 8013b68:	d11a      	bne.n	8013ba0 <_printf_common+0xc8>
 8013b6a:	2000      	movs	r0, #0
 8013b6c:	e008      	b.n	8013b80 <_printf_common+0xa8>
 8013b6e:	2301      	movs	r3, #1
 8013b70:	4652      	mov	r2, sl
 8013b72:	4641      	mov	r1, r8
 8013b74:	4638      	mov	r0, r7
 8013b76:	47c8      	blx	r9
 8013b78:	3001      	adds	r0, #1
 8013b7a:	d103      	bne.n	8013b84 <_printf_common+0xac>
 8013b7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b84:	3501      	adds	r5, #1
 8013b86:	e7c6      	b.n	8013b16 <_printf_common+0x3e>
 8013b88:	18e1      	adds	r1, r4, r3
 8013b8a:	1c5a      	adds	r2, r3, #1
 8013b8c:	2030      	movs	r0, #48	@ 0x30
 8013b8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013b92:	4422      	add	r2, r4
 8013b94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013b98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013b9c:	3302      	adds	r3, #2
 8013b9e:	e7c7      	b.n	8013b30 <_printf_common+0x58>
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	4622      	mov	r2, r4
 8013ba4:	4641      	mov	r1, r8
 8013ba6:	4638      	mov	r0, r7
 8013ba8:	47c8      	blx	r9
 8013baa:	3001      	adds	r0, #1
 8013bac:	d0e6      	beq.n	8013b7c <_printf_common+0xa4>
 8013bae:	3601      	adds	r6, #1
 8013bb0:	e7d9      	b.n	8013b66 <_printf_common+0x8e>
	...

08013bb4 <_printf_i>:
 8013bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013bb8:	7e0f      	ldrb	r7, [r1, #24]
 8013bba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013bbc:	2f78      	cmp	r7, #120	@ 0x78
 8013bbe:	4691      	mov	r9, r2
 8013bc0:	4680      	mov	r8, r0
 8013bc2:	460c      	mov	r4, r1
 8013bc4:	469a      	mov	sl, r3
 8013bc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013bca:	d807      	bhi.n	8013bdc <_printf_i+0x28>
 8013bcc:	2f62      	cmp	r7, #98	@ 0x62
 8013bce:	d80a      	bhi.n	8013be6 <_printf_i+0x32>
 8013bd0:	2f00      	cmp	r7, #0
 8013bd2:	f000 80d1 	beq.w	8013d78 <_printf_i+0x1c4>
 8013bd6:	2f58      	cmp	r7, #88	@ 0x58
 8013bd8:	f000 80b8 	beq.w	8013d4c <_printf_i+0x198>
 8013bdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013be0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013be4:	e03a      	b.n	8013c5c <_printf_i+0xa8>
 8013be6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013bea:	2b15      	cmp	r3, #21
 8013bec:	d8f6      	bhi.n	8013bdc <_printf_i+0x28>
 8013bee:	a101      	add	r1, pc, #4	@ (adr r1, 8013bf4 <_printf_i+0x40>)
 8013bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013bf4:	08013c4d 	.word	0x08013c4d
 8013bf8:	08013c61 	.word	0x08013c61
 8013bfc:	08013bdd 	.word	0x08013bdd
 8013c00:	08013bdd 	.word	0x08013bdd
 8013c04:	08013bdd 	.word	0x08013bdd
 8013c08:	08013bdd 	.word	0x08013bdd
 8013c0c:	08013c61 	.word	0x08013c61
 8013c10:	08013bdd 	.word	0x08013bdd
 8013c14:	08013bdd 	.word	0x08013bdd
 8013c18:	08013bdd 	.word	0x08013bdd
 8013c1c:	08013bdd 	.word	0x08013bdd
 8013c20:	08013d5f 	.word	0x08013d5f
 8013c24:	08013c8b 	.word	0x08013c8b
 8013c28:	08013d19 	.word	0x08013d19
 8013c2c:	08013bdd 	.word	0x08013bdd
 8013c30:	08013bdd 	.word	0x08013bdd
 8013c34:	08013d81 	.word	0x08013d81
 8013c38:	08013bdd 	.word	0x08013bdd
 8013c3c:	08013c8b 	.word	0x08013c8b
 8013c40:	08013bdd 	.word	0x08013bdd
 8013c44:	08013bdd 	.word	0x08013bdd
 8013c48:	08013d21 	.word	0x08013d21
 8013c4c:	6833      	ldr	r3, [r6, #0]
 8013c4e:	1d1a      	adds	r2, r3, #4
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	6032      	str	r2, [r6, #0]
 8013c54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013c58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	e09c      	b.n	8013d9a <_printf_i+0x1e6>
 8013c60:	6833      	ldr	r3, [r6, #0]
 8013c62:	6820      	ldr	r0, [r4, #0]
 8013c64:	1d19      	adds	r1, r3, #4
 8013c66:	6031      	str	r1, [r6, #0]
 8013c68:	0606      	lsls	r6, r0, #24
 8013c6a:	d501      	bpl.n	8013c70 <_printf_i+0xbc>
 8013c6c:	681d      	ldr	r5, [r3, #0]
 8013c6e:	e003      	b.n	8013c78 <_printf_i+0xc4>
 8013c70:	0645      	lsls	r5, r0, #25
 8013c72:	d5fb      	bpl.n	8013c6c <_printf_i+0xb8>
 8013c74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013c78:	2d00      	cmp	r5, #0
 8013c7a:	da03      	bge.n	8013c84 <_printf_i+0xd0>
 8013c7c:	232d      	movs	r3, #45	@ 0x2d
 8013c7e:	426d      	negs	r5, r5
 8013c80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c84:	4858      	ldr	r0, [pc, #352]	@ (8013de8 <_printf_i+0x234>)
 8013c86:	230a      	movs	r3, #10
 8013c88:	e011      	b.n	8013cae <_printf_i+0xfa>
 8013c8a:	6821      	ldr	r1, [r4, #0]
 8013c8c:	6833      	ldr	r3, [r6, #0]
 8013c8e:	0608      	lsls	r0, r1, #24
 8013c90:	f853 5b04 	ldr.w	r5, [r3], #4
 8013c94:	d402      	bmi.n	8013c9c <_printf_i+0xe8>
 8013c96:	0649      	lsls	r1, r1, #25
 8013c98:	bf48      	it	mi
 8013c9a:	b2ad      	uxthmi	r5, r5
 8013c9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8013c9e:	4852      	ldr	r0, [pc, #328]	@ (8013de8 <_printf_i+0x234>)
 8013ca0:	6033      	str	r3, [r6, #0]
 8013ca2:	bf14      	ite	ne
 8013ca4:	230a      	movne	r3, #10
 8013ca6:	2308      	moveq	r3, #8
 8013ca8:	2100      	movs	r1, #0
 8013caa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013cae:	6866      	ldr	r6, [r4, #4]
 8013cb0:	60a6      	str	r6, [r4, #8]
 8013cb2:	2e00      	cmp	r6, #0
 8013cb4:	db05      	blt.n	8013cc2 <_printf_i+0x10e>
 8013cb6:	6821      	ldr	r1, [r4, #0]
 8013cb8:	432e      	orrs	r6, r5
 8013cba:	f021 0104 	bic.w	r1, r1, #4
 8013cbe:	6021      	str	r1, [r4, #0]
 8013cc0:	d04b      	beq.n	8013d5a <_printf_i+0x1a6>
 8013cc2:	4616      	mov	r6, r2
 8013cc4:	fbb5 f1f3 	udiv	r1, r5, r3
 8013cc8:	fb03 5711 	mls	r7, r3, r1, r5
 8013ccc:	5dc7      	ldrb	r7, [r0, r7]
 8013cce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013cd2:	462f      	mov	r7, r5
 8013cd4:	42bb      	cmp	r3, r7
 8013cd6:	460d      	mov	r5, r1
 8013cd8:	d9f4      	bls.n	8013cc4 <_printf_i+0x110>
 8013cda:	2b08      	cmp	r3, #8
 8013cdc:	d10b      	bne.n	8013cf6 <_printf_i+0x142>
 8013cde:	6823      	ldr	r3, [r4, #0]
 8013ce0:	07df      	lsls	r7, r3, #31
 8013ce2:	d508      	bpl.n	8013cf6 <_printf_i+0x142>
 8013ce4:	6923      	ldr	r3, [r4, #16]
 8013ce6:	6861      	ldr	r1, [r4, #4]
 8013ce8:	4299      	cmp	r1, r3
 8013cea:	bfde      	ittt	le
 8013cec:	2330      	movle	r3, #48	@ 0x30
 8013cee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013cf2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8013cf6:	1b92      	subs	r2, r2, r6
 8013cf8:	6122      	str	r2, [r4, #16]
 8013cfa:	f8cd a000 	str.w	sl, [sp]
 8013cfe:	464b      	mov	r3, r9
 8013d00:	aa03      	add	r2, sp, #12
 8013d02:	4621      	mov	r1, r4
 8013d04:	4640      	mov	r0, r8
 8013d06:	f7ff fee7 	bl	8013ad8 <_printf_common>
 8013d0a:	3001      	adds	r0, #1
 8013d0c:	d14a      	bne.n	8013da4 <_printf_i+0x1f0>
 8013d0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013d12:	b004      	add	sp, #16
 8013d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d18:	6823      	ldr	r3, [r4, #0]
 8013d1a:	f043 0320 	orr.w	r3, r3, #32
 8013d1e:	6023      	str	r3, [r4, #0]
 8013d20:	4832      	ldr	r0, [pc, #200]	@ (8013dec <_printf_i+0x238>)
 8013d22:	2778      	movs	r7, #120	@ 0x78
 8013d24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013d28:	6823      	ldr	r3, [r4, #0]
 8013d2a:	6831      	ldr	r1, [r6, #0]
 8013d2c:	061f      	lsls	r7, r3, #24
 8013d2e:	f851 5b04 	ldr.w	r5, [r1], #4
 8013d32:	d402      	bmi.n	8013d3a <_printf_i+0x186>
 8013d34:	065f      	lsls	r7, r3, #25
 8013d36:	bf48      	it	mi
 8013d38:	b2ad      	uxthmi	r5, r5
 8013d3a:	6031      	str	r1, [r6, #0]
 8013d3c:	07d9      	lsls	r1, r3, #31
 8013d3e:	bf44      	itt	mi
 8013d40:	f043 0320 	orrmi.w	r3, r3, #32
 8013d44:	6023      	strmi	r3, [r4, #0]
 8013d46:	b11d      	cbz	r5, 8013d50 <_printf_i+0x19c>
 8013d48:	2310      	movs	r3, #16
 8013d4a:	e7ad      	b.n	8013ca8 <_printf_i+0xf4>
 8013d4c:	4826      	ldr	r0, [pc, #152]	@ (8013de8 <_printf_i+0x234>)
 8013d4e:	e7e9      	b.n	8013d24 <_printf_i+0x170>
 8013d50:	6823      	ldr	r3, [r4, #0]
 8013d52:	f023 0320 	bic.w	r3, r3, #32
 8013d56:	6023      	str	r3, [r4, #0]
 8013d58:	e7f6      	b.n	8013d48 <_printf_i+0x194>
 8013d5a:	4616      	mov	r6, r2
 8013d5c:	e7bd      	b.n	8013cda <_printf_i+0x126>
 8013d5e:	6833      	ldr	r3, [r6, #0]
 8013d60:	6825      	ldr	r5, [r4, #0]
 8013d62:	6961      	ldr	r1, [r4, #20]
 8013d64:	1d18      	adds	r0, r3, #4
 8013d66:	6030      	str	r0, [r6, #0]
 8013d68:	062e      	lsls	r6, r5, #24
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	d501      	bpl.n	8013d72 <_printf_i+0x1be>
 8013d6e:	6019      	str	r1, [r3, #0]
 8013d70:	e002      	b.n	8013d78 <_printf_i+0x1c4>
 8013d72:	0668      	lsls	r0, r5, #25
 8013d74:	d5fb      	bpl.n	8013d6e <_printf_i+0x1ba>
 8013d76:	8019      	strh	r1, [r3, #0]
 8013d78:	2300      	movs	r3, #0
 8013d7a:	6123      	str	r3, [r4, #16]
 8013d7c:	4616      	mov	r6, r2
 8013d7e:	e7bc      	b.n	8013cfa <_printf_i+0x146>
 8013d80:	6833      	ldr	r3, [r6, #0]
 8013d82:	1d1a      	adds	r2, r3, #4
 8013d84:	6032      	str	r2, [r6, #0]
 8013d86:	681e      	ldr	r6, [r3, #0]
 8013d88:	6862      	ldr	r2, [r4, #4]
 8013d8a:	2100      	movs	r1, #0
 8013d8c:	4630      	mov	r0, r6
 8013d8e:	f7ec fabf 	bl	8000310 <memchr>
 8013d92:	b108      	cbz	r0, 8013d98 <_printf_i+0x1e4>
 8013d94:	1b80      	subs	r0, r0, r6
 8013d96:	6060      	str	r0, [r4, #4]
 8013d98:	6863      	ldr	r3, [r4, #4]
 8013d9a:	6123      	str	r3, [r4, #16]
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013da2:	e7aa      	b.n	8013cfa <_printf_i+0x146>
 8013da4:	6923      	ldr	r3, [r4, #16]
 8013da6:	4632      	mov	r2, r6
 8013da8:	4649      	mov	r1, r9
 8013daa:	4640      	mov	r0, r8
 8013dac:	47d0      	blx	sl
 8013dae:	3001      	adds	r0, #1
 8013db0:	d0ad      	beq.n	8013d0e <_printf_i+0x15a>
 8013db2:	6823      	ldr	r3, [r4, #0]
 8013db4:	079b      	lsls	r3, r3, #30
 8013db6:	d413      	bmi.n	8013de0 <_printf_i+0x22c>
 8013db8:	68e0      	ldr	r0, [r4, #12]
 8013dba:	9b03      	ldr	r3, [sp, #12]
 8013dbc:	4298      	cmp	r0, r3
 8013dbe:	bfb8      	it	lt
 8013dc0:	4618      	movlt	r0, r3
 8013dc2:	e7a6      	b.n	8013d12 <_printf_i+0x15e>
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	4632      	mov	r2, r6
 8013dc8:	4649      	mov	r1, r9
 8013dca:	4640      	mov	r0, r8
 8013dcc:	47d0      	blx	sl
 8013dce:	3001      	adds	r0, #1
 8013dd0:	d09d      	beq.n	8013d0e <_printf_i+0x15a>
 8013dd2:	3501      	adds	r5, #1
 8013dd4:	68e3      	ldr	r3, [r4, #12]
 8013dd6:	9903      	ldr	r1, [sp, #12]
 8013dd8:	1a5b      	subs	r3, r3, r1
 8013dda:	42ab      	cmp	r3, r5
 8013ddc:	dcf2      	bgt.n	8013dc4 <_printf_i+0x210>
 8013dde:	e7eb      	b.n	8013db8 <_printf_i+0x204>
 8013de0:	2500      	movs	r5, #0
 8013de2:	f104 0619 	add.w	r6, r4, #25
 8013de6:	e7f5      	b.n	8013dd4 <_printf_i+0x220>
 8013de8:	0801766a 	.word	0x0801766a
 8013dec:	0801767b 	.word	0x0801767b

08013df0 <__sflush_r>:
 8013df0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013df8:	0716      	lsls	r6, r2, #28
 8013dfa:	4605      	mov	r5, r0
 8013dfc:	460c      	mov	r4, r1
 8013dfe:	d454      	bmi.n	8013eaa <__sflush_r+0xba>
 8013e00:	684b      	ldr	r3, [r1, #4]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	dc02      	bgt.n	8013e0c <__sflush_r+0x1c>
 8013e06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	dd48      	ble.n	8013e9e <__sflush_r+0xae>
 8013e0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013e0e:	2e00      	cmp	r6, #0
 8013e10:	d045      	beq.n	8013e9e <__sflush_r+0xae>
 8013e12:	2300      	movs	r3, #0
 8013e14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013e18:	682f      	ldr	r7, [r5, #0]
 8013e1a:	6a21      	ldr	r1, [r4, #32]
 8013e1c:	602b      	str	r3, [r5, #0]
 8013e1e:	d030      	beq.n	8013e82 <__sflush_r+0x92>
 8013e20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013e22:	89a3      	ldrh	r3, [r4, #12]
 8013e24:	0759      	lsls	r1, r3, #29
 8013e26:	d505      	bpl.n	8013e34 <__sflush_r+0x44>
 8013e28:	6863      	ldr	r3, [r4, #4]
 8013e2a:	1ad2      	subs	r2, r2, r3
 8013e2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013e2e:	b10b      	cbz	r3, 8013e34 <__sflush_r+0x44>
 8013e30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013e32:	1ad2      	subs	r2, r2, r3
 8013e34:	2300      	movs	r3, #0
 8013e36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013e38:	6a21      	ldr	r1, [r4, #32]
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	47b0      	blx	r6
 8013e3e:	1c43      	adds	r3, r0, #1
 8013e40:	89a3      	ldrh	r3, [r4, #12]
 8013e42:	d106      	bne.n	8013e52 <__sflush_r+0x62>
 8013e44:	6829      	ldr	r1, [r5, #0]
 8013e46:	291d      	cmp	r1, #29
 8013e48:	d82b      	bhi.n	8013ea2 <__sflush_r+0xb2>
 8013e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8013ef4 <__sflush_r+0x104>)
 8013e4c:	40ca      	lsrs	r2, r1
 8013e4e:	07d6      	lsls	r6, r2, #31
 8013e50:	d527      	bpl.n	8013ea2 <__sflush_r+0xb2>
 8013e52:	2200      	movs	r2, #0
 8013e54:	6062      	str	r2, [r4, #4]
 8013e56:	04d9      	lsls	r1, r3, #19
 8013e58:	6922      	ldr	r2, [r4, #16]
 8013e5a:	6022      	str	r2, [r4, #0]
 8013e5c:	d504      	bpl.n	8013e68 <__sflush_r+0x78>
 8013e5e:	1c42      	adds	r2, r0, #1
 8013e60:	d101      	bne.n	8013e66 <__sflush_r+0x76>
 8013e62:	682b      	ldr	r3, [r5, #0]
 8013e64:	b903      	cbnz	r3, 8013e68 <__sflush_r+0x78>
 8013e66:	6560      	str	r0, [r4, #84]	@ 0x54
 8013e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013e6a:	602f      	str	r7, [r5, #0]
 8013e6c:	b1b9      	cbz	r1, 8013e9e <__sflush_r+0xae>
 8013e6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013e72:	4299      	cmp	r1, r3
 8013e74:	d002      	beq.n	8013e7c <__sflush_r+0x8c>
 8013e76:	4628      	mov	r0, r5
 8013e78:	f7ff fbec 	bl	8013654 <_free_r>
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8013e80:	e00d      	b.n	8013e9e <__sflush_r+0xae>
 8013e82:	2301      	movs	r3, #1
 8013e84:	4628      	mov	r0, r5
 8013e86:	47b0      	blx	r6
 8013e88:	4602      	mov	r2, r0
 8013e8a:	1c50      	adds	r0, r2, #1
 8013e8c:	d1c9      	bne.n	8013e22 <__sflush_r+0x32>
 8013e8e:	682b      	ldr	r3, [r5, #0]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d0c6      	beq.n	8013e22 <__sflush_r+0x32>
 8013e94:	2b1d      	cmp	r3, #29
 8013e96:	d001      	beq.n	8013e9c <__sflush_r+0xac>
 8013e98:	2b16      	cmp	r3, #22
 8013e9a:	d11e      	bne.n	8013eda <__sflush_r+0xea>
 8013e9c:	602f      	str	r7, [r5, #0]
 8013e9e:	2000      	movs	r0, #0
 8013ea0:	e022      	b.n	8013ee8 <__sflush_r+0xf8>
 8013ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ea6:	b21b      	sxth	r3, r3
 8013ea8:	e01b      	b.n	8013ee2 <__sflush_r+0xf2>
 8013eaa:	690f      	ldr	r7, [r1, #16]
 8013eac:	2f00      	cmp	r7, #0
 8013eae:	d0f6      	beq.n	8013e9e <__sflush_r+0xae>
 8013eb0:	0793      	lsls	r3, r2, #30
 8013eb2:	680e      	ldr	r6, [r1, #0]
 8013eb4:	bf08      	it	eq
 8013eb6:	694b      	ldreq	r3, [r1, #20]
 8013eb8:	600f      	str	r7, [r1, #0]
 8013eba:	bf18      	it	ne
 8013ebc:	2300      	movne	r3, #0
 8013ebe:	eba6 0807 	sub.w	r8, r6, r7
 8013ec2:	608b      	str	r3, [r1, #8]
 8013ec4:	f1b8 0f00 	cmp.w	r8, #0
 8013ec8:	dde9      	ble.n	8013e9e <__sflush_r+0xae>
 8013eca:	6a21      	ldr	r1, [r4, #32]
 8013ecc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013ece:	4643      	mov	r3, r8
 8013ed0:	463a      	mov	r2, r7
 8013ed2:	4628      	mov	r0, r5
 8013ed4:	47b0      	blx	r6
 8013ed6:	2800      	cmp	r0, #0
 8013ed8:	dc08      	bgt.n	8013eec <__sflush_r+0xfc>
 8013eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ee2:	81a3      	strh	r3, [r4, #12]
 8013ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eec:	4407      	add	r7, r0
 8013eee:	eba8 0800 	sub.w	r8, r8, r0
 8013ef2:	e7e7      	b.n	8013ec4 <__sflush_r+0xd4>
 8013ef4:	20400001 	.word	0x20400001

08013ef8 <_fflush_r>:
 8013ef8:	b538      	push	{r3, r4, r5, lr}
 8013efa:	690b      	ldr	r3, [r1, #16]
 8013efc:	4605      	mov	r5, r0
 8013efe:	460c      	mov	r4, r1
 8013f00:	b913      	cbnz	r3, 8013f08 <_fflush_r+0x10>
 8013f02:	2500      	movs	r5, #0
 8013f04:	4628      	mov	r0, r5
 8013f06:	bd38      	pop	{r3, r4, r5, pc}
 8013f08:	b118      	cbz	r0, 8013f12 <_fflush_r+0x1a>
 8013f0a:	6a03      	ldr	r3, [r0, #32]
 8013f0c:	b90b      	cbnz	r3, 8013f12 <_fflush_r+0x1a>
 8013f0e:	f7ff fa63 	bl	80133d8 <__sinit>
 8013f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d0f3      	beq.n	8013f02 <_fflush_r+0xa>
 8013f1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013f1c:	07d0      	lsls	r0, r2, #31
 8013f1e:	d404      	bmi.n	8013f2a <_fflush_r+0x32>
 8013f20:	0599      	lsls	r1, r3, #22
 8013f22:	d402      	bmi.n	8013f2a <_fflush_r+0x32>
 8013f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f26:	f7ff fb66 	bl	80135f6 <__retarget_lock_acquire_recursive>
 8013f2a:	4628      	mov	r0, r5
 8013f2c:	4621      	mov	r1, r4
 8013f2e:	f7ff ff5f 	bl	8013df0 <__sflush_r>
 8013f32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013f34:	07da      	lsls	r2, r3, #31
 8013f36:	4605      	mov	r5, r0
 8013f38:	d4e4      	bmi.n	8013f04 <_fflush_r+0xc>
 8013f3a:	89a3      	ldrh	r3, [r4, #12]
 8013f3c:	059b      	lsls	r3, r3, #22
 8013f3e:	d4e1      	bmi.n	8013f04 <_fflush_r+0xc>
 8013f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f42:	f7ff fb59 	bl	80135f8 <__retarget_lock_release_recursive>
 8013f46:	e7dd      	b.n	8013f04 <_fflush_r+0xc>

08013f48 <fiprintf>:
 8013f48:	b40e      	push	{r1, r2, r3}
 8013f4a:	b503      	push	{r0, r1, lr}
 8013f4c:	4601      	mov	r1, r0
 8013f4e:	ab03      	add	r3, sp, #12
 8013f50:	4805      	ldr	r0, [pc, #20]	@ (8013f68 <fiprintf+0x20>)
 8013f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f56:	6800      	ldr	r0, [r0, #0]
 8013f58:	9301      	str	r3, [sp, #4]
 8013f5a:	f7ff fca5 	bl	80138a8 <_vfiprintf_r>
 8013f5e:	b002      	add	sp, #8
 8013f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f64:	b003      	add	sp, #12
 8013f66:	4770      	bx	lr
 8013f68:	2400003c 	.word	0x2400003c

08013f6c <__swbuf_r>:
 8013f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f6e:	460e      	mov	r6, r1
 8013f70:	4614      	mov	r4, r2
 8013f72:	4605      	mov	r5, r0
 8013f74:	b118      	cbz	r0, 8013f7e <__swbuf_r+0x12>
 8013f76:	6a03      	ldr	r3, [r0, #32]
 8013f78:	b90b      	cbnz	r3, 8013f7e <__swbuf_r+0x12>
 8013f7a:	f7ff fa2d 	bl	80133d8 <__sinit>
 8013f7e:	69a3      	ldr	r3, [r4, #24]
 8013f80:	60a3      	str	r3, [r4, #8]
 8013f82:	89a3      	ldrh	r3, [r4, #12]
 8013f84:	071a      	lsls	r2, r3, #28
 8013f86:	d501      	bpl.n	8013f8c <__swbuf_r+0x20>
 8013f88:	6923      	ldr	r3, [r4, #16]
 8013f8a:	b943      	cbnz	r3, 8013f9e <__swbuf_r+0x32>
 8013f8c:	4621      	mov	r1, r4
 8013f8e:	4628      	mov	r0, r5
 8013f90:	f000 f82a 	bl	8013fe8 <__swsetup_r>
 8013f94:	b118      	cbz	r0, 8013f9e <__swbuf_r+0x32>
 8013f96:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013f9a:	4638      	mov	r0, r7
 8013f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f9e:	6823      	ldr	r3, [r4, #0]
 8013fa0:	6922      	ldr	r2, [r4, #16]
 8013fa2:	1a98      	subs	r0, r3, r2
 8013fa4:	6963      	ldr	r3, [r4, #20]
 8013fa6:	b2f6      	uxtb	r6, r6
 8013fa8:	4283      	cmp	r3, r0
 8013faa:	4637      	mov	r7, r6
 8013fac:	dc05      	bgt.n	8013fba <__swbuf_r+0x4e>
 8013fae:	4621      	mov	r1, r4
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	f7ff ffa1 	bl	8013ef8 <_fflush_r>
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	d1ed      	bne.n	8013f96 <__swbuf_r+0x2a>
 8013fba:	68a3      	ldr	r3, [r4, #8]
 8013fbc:	3b01      	subs	r3, #1
 8013fbe:	60a3      	str	r3, [r4, #8]
 8013fc0:	6823      	ldr	r3, [r4, #0]
 8013fc2:	1c5a      	adds	r2, r3, #1
 8013fc4:	6022      	str	r2, [r4, #0]
 8013fc6:	701e      	strb	r6, [r3, #0]
 8013fc8:	6962      	ldr	r2, [r4, #20]
 8013fca:	1c43      	adds	r3, r0, #1
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d004      	beq.n	8013fda <__swbuf_r+0x6e>
 8013fd0:	89a3      	ldrh	r3, [r4, #12]
 8013fd2:	07db      	lsls	r3, r3, #31
 8013fd4:	d5e1      	bpl.n	8013f9a <__swbuf_r+0x2e>
 8013fd6:	2e0a      	cmp	r6, #10
 8013fd8:	d1df      	bne.n	8013f9a <__swbuf_r+0x2e>
 8013fda:	4621      	mov	r1, r4
 8013fdc:	4628      	mov	r0, r5
 8013fde:	f7ff ff8b 	bl	8013ef8 <_fflush_r>
 8013fe2:	2800      	cmp	r0, #0
 8013fe4:	d0d9      	beq.n	8013f9a <__swbuf_r+0x2e>
 8013fe6:	e7d6      	b.n	8013f96 <__swbuf_r+0x2a>

08013fe8 <__swsetup_r>:
 8013fe8:	b538      	push	{r3, r4, r5, lr}
 8013fea:	4b29      	ldr	r3, [pc, #164]	@ (8014090 <__swsetup_r+0xa8>)
 8013fec:	4605      	mov	r5, r0
 8013fee:	6818      	ldr	r0, [r3, #0]
 8013ff0:	460c      	mov	r4, r1
 8013ff2:	b118      	cbz	r0, 8013ffc <__swsetup_r+0x14>
 8013ff4:	6a03      	ldr	r3, [r0, #32]
 8013ff6:	b90b      	cbnz	r3, 8013ffc <__swsetup_r+0x14>
 8013ff8:	f7ff f9ee 	bl	80133d8 <__sinit>
 8013ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014000:	0719      	lsls	r1, r3, #28
 8014002:	d422      	bmi.n	801404a <__swsetup_r+0x62>
 8014004:	06da      	lsls	r2, r3, #27
 8014006:	d407      	bmi.n	8014018 <__swsetup_r+0x30>
 8014008:	2209      	movs	r2, #9
 801400a:	602a      	str	r2, [r5, #0]
 801400c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014010:	81a3      	strh	r3, [r4, #12]
 8014012:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014016:	e033      	b.n	8014080 <__swsetup_r+0x98>
 8014018:	0758      	lsls	r0, r3, #29
 801401a:	d512      	bpl.n	8014042 <__swsetup_r+0x5a>
 801401c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801401e:	b141      	cbz	r1, 8014032 <__swsetup_r+0x4a>
 8014020:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014024:	4299      	cmp	r1, r3
 8014026:	d002      	beq.n	801402e <__swsetup_r+0x46>
 8014028:	4628      	mov	r0, r5
 801402a:	f7ff fb13 	bl	8013654 <_free_r>
 801402e:	2300      	movs	r3, #0
 8014030:	6363      	str	r3, [r4, #52]	@ 0x34
 8014032:	89a3      	ldrh	r3, [r4, #12]
 8014034:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014038:	81a3      	strh	r3, [r4, #12]
 801403a:	2300      	movs	r3, #0
 801403c:	6063      	str	r3, [r4, #4]
 801403e:	6923      	ldr	r3, [r4, #16]
 8014040:	6023      	str	r3, [r4, #0]
 8014042:	89a3      	ldrh	r3, [r4, #12]
 8014044:	f043 0308 	orr.w	r3, r3, #8
 8014048:	81a3      	strh	r3, [r4, #12]
 801404a:	6923      	ldr	r3, [r4, #16]
 801404c:	b94b      	cbnz	r3, 8014062 <__swsetup_r+0x7a>
 801404e:	89a3      	ldrh	r3, [r4, #12]
 8014050:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014058:	d003      	beq.n	8014062 <__swsetup_r+0x7a>
 801405a:	4621      	mov	r1, r4
 801405c:	4628      	mov	r0, r5
 801405e:	f000 f856 	bl	801410e <__smakebuf_r>
 8014062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014066:	f013 0201 	ands.w	r2, r3, #1
 801406a:	d00a      	beq.n	8014082 <__swsetup_r+0x9a>
 801406c:	2200      	movs	r2, #0
 801406e:	60a2      	str	r2, [r4, #8]
 8014070:	6962      	ldr	r2, [r4, #20]
 8014072:	4252      	negs	r2, r2
 8014074:	61a2      	str	r2, [r4, #24]
 8014076:	6922      	ldr	r2, [r4, #16]
 8014078:	b942      	cbnz	r2, 801408c <__swsetup_r+0xa4>
 801407a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801407e:	d1c5      	bne.n	801400c <__swsetup_r+0x24>
 8014080:	bd38      	pop	{r3, r4, r5, pc}
 8014082:	0799      	lsls	r1, r3, #30
 8014084:	bf58      	it	pl
 8014086:	6962      	ldrpl	r2, [r4, #20]
 8014088:	60a2      	str	r2, [r4, #8]
 801408a:	e7f4      	b.n	8014076 <__swsetup_r+0x8e>
 801408c:	2000      	movs	r0, #0
 801408e:	e7f7      	b.n	8014080 <__swsetup_r+0x98>
 8014090:	2400003c 	.word	0x2400003c

08014094 <_sbrk_r>:
 8014094:	b538      	push	{r3, r4, r5, lr}
 8014096:	4d06      	ldr	r5, [pc, #24]	@ (80140b0 <_sbrk_r+0x1c>)
 8014098:	2300      	movs	r3, #0
 801409a:	4604      	mov	r4, r0
 801409c:	4608      	mov	r0, r1
 801409e:	602b      	str	r3, [r5, #0]
 80140a0:	f7ec ff04 	bl	8000eac <_sbrk>
 80140a4:	1c43      	adds	r3, r0, #1
 80140a6:	d102      	bne.n	80140ae <_sbrk_r+0x1a>
 80140a8:	682b      	ldr	r3, [r5, #0]
 80140aa:	b103      	cbz	r3, 80140ae <_sbrk_r+0x1a>
 80140ac:	6023      	str	r3, [r4, #0]
 80140ae:	bd38      	pop	{r3, r4, r5, pc}
 80140b0:	24043494 	.word	0x24043494

080140b4 <abort>:
 80140b4:	b508      	push	{r3, lr}
 80140b6:	2006      	movs	r0, #6
 80140b8:	f000 f88e 	bl	80141d8 <raise>
 80140bc:	2001      	movs	r0, #1
 80140be:	f7ec fe7d 	bl	8000dbc <_exit>

080140c2 <__swhatbuf_r>:
 80140c2:	b570      	push	{r4, r5, r6, lr}
 80140c4:	460c      	mov	r4, r1
 80140c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140ca:	2900      	cmp	r1, #0
 80140cc:	b096      	sub	sp, #88	@ 0x58
 80140ce:	4615      	mov	r5, r2
 80140d0:	461e      	mov	r6, r3
 80140d2:	da0d      	bge.n	80140f0 <__swhatbuf_r+0x2e>
 80140d4:	89a3      	ldrh	r3, [r4, #12]
 80140d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80140da:	f04f 0100 	mov.w	r1, #0
 80140de:	bf14      	ite	ne
 80140e0:	2340      	movne	r3, #64	@ 0x40
 80140e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80140e6:	2000      	movs	r0, #0
 80140e8:	6031      	str	r1, [r6, #0]
 80140ea:	602b      	str	r3, [r5, #0]
 80140ec:	b016      	add	sp, #88	@ 0x58
 80140ee:	bd70      	pop	{r4, r5, r6, pc}
 80140f0:	466a      	mov	r2, sp
 80140f2:	f000 f879 	bl	80141e8 <_fstat_r>
 80140f6:	2800      	cmp	r0, #0
 80140f8:	dbec      	blt.n	80140d4 <__swhatbuf_r+0x12>
 80140fa:	9901      	ldr	r1, [sp, #4]
 80140fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014100:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014104:	4259      	negs	r1, r3
 8014106:	4159      	adcs	r1, r3
 8014108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801410c:	e7eb      	b.n	80140e6 <__swhatbuf_r+0x24>

0801410e <__smakebuf_r>:
 801410e:	898b      	ldrh	r3, [r1, #12]
 8014110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014112:	079d      	lsls	r5, r3, #30
 8014114:	4606      	mov	r6, r0
 8014116:	460c      	mov	r4, r1
 8014118:	d507      	bpl.n	801412a <__smakebuf_r+0x1c>
 801411a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801411e:	6023      	str	r3, [r4, #0]
 8014120:	6123      	str	r3, [r4, #16]
 8014122:	2301      	movs	r3, #1
 8014124:	6163      	str	r3, [r4, #20]
 8014126:	b003      	add	sp, #12
 8014128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801412a:	ab01      	add	r3, sp, #4
 801412c:	466a      	mov	r2, sp
 801412e:	f7ff ffc8 	bl	80140c2 <__swhatbuf_r>
 8014132:	9f00      	ldr	r7, [sp, #0]
 8014134:	4605      	mov	r5, r0
 8014136:	4639      	mov	r1, r7
 8014138:	4630      	mov	r0, r6
 801413a:	f7ff faff 	bl	801373c <_malloc_r>
 801413e:	b948      	cbnz	r0, 8014154 <__smakebuf_r+0x46>
 8014140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014144:	059a      	lsls	r2, r3, #22
 8014146:	d4ee      	bmi.n	8014126 <__smakebuf_r+0x18>
 8014148:	f023 0303 	bic.w	r3, r3, #3
 801414c:	f043 0302 	orr.w	r3, r3, #2
 8014150:	81a3      	strh	r3, [r4, #12]
 8014152:	e7e2      	b.n	801411a <__smakebuf_r+0xc>
 8014154:	89a3      	ldrh	r3, [r4, #12]
 8014156:	6020      	str	r0, [r4, #0]
 8014158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801415c:	81a3      	strh	r3, [r4, #12]
 801415e:	9b01      	ldr	r3, [sp, #4]
 8014160:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014164:	b15b      	cbz	r3, 801417e <__smakebuf_r+0x70>
 8014166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801416a:	4630      	mov	r0, r6
 801416c:	f000 f84e 	bl	801420c <_isatty_r>
 8014170:	b128      	cbz	r0, 801417e <__smakebuf_r+0x70>
 8014172:	89a3      	ldrh	r3, [r4, #12]
 8014174:	f023 0303 	bic.w	r3, r3, #3
 8014178:	f043 0301 	orr.w	r3, r3, #1
 801417c:	81a3      	strh	r3, [r4, #12]
 801417e:	89a3      	ldrh	r3, [r4, #12]
 8014180:	431d      	orrs	r5, r3
 8014182:	81a5      	strh	r5, [r4, #12]
 8014184:	e7cf      	b.n	8014126 <__smakebuf_r+0x18>

08014186 <_raise_r>:
 8014186:	291f      	cmp	r1, #31
 8014188:	b538      	push	{r3, r4, r5, lr}
 801418a:	4605      	mov	r5, r0
 801418c:	460c      	mov	r4, r1
 801418e:	d904      	bls.n	801419a <_raise_r+0x14>
 8014190:	2316      	movs	r3, #22
 8014192:	6003      	str	r3, [r0, #0]
 8014194:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014198:	bd38      	pop	{r3, r4, r5, pc}
 801419a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801419c:	b112      	cbz	r2, 80141a4 <_raise_r+0x1e>
 801419e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80141a2:	b94b      	cbnz	r3, 80141b8 <_raise_r+0x32>
 80141a4:	4628      	mov	r0, r5
 80141a6:	f000 f853 	bl	8014250 <_getpid_r>
 80141aa:	4622      	mov	r2, r4
 80141ac:	4601      	mov	r1, r0
 80141ae:	4628      	mov	r0, r5
 80141b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141b4:	f000 b83a 	b.w	801422c <_kill_r>
 80141b8:	2b01      	cmp	r3, #1
 80141ba:	d00a      	beq.n	80141d2 <_raise_r+0x4c>
 80141bc:	1c59      	adds	r1, r3, #1
 80141be:	d103      	bne.n	80141c8 <_raise_r+0x42>
 80141c0:	2316      	movs	r3, #22
 80141c2:	6003      	str	r3, [r0, #0]
 80141c4:	2001      	movs	r0, #1
 80141c6:	e7e7      	b.n	8014198 <_raise_r+0x12>
 80141c8:	2100      	movs	r1, #0
 80141ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80141ce:	4620      	mov	r0, r4
 80141d0:	4798      	blx	r3
 80141d2:	2000      	movs	r0, #0
 80141d4:	e7e0      	b.n	8014198 <_raise_r+0x12>
	...

080141d8 <raise>:
 80141d8:	4b02      	ldr	r3, [pc, #8]	@ (80141e4 <raise+0xc>)
 80141da:	4601      	mov	r1, r0
 80141dc:	6818      	ldr	r0, [r3, #0]
 80141de:	f7ff bfd2 	b.w	8014186 <_raise_r>
 80141e2:	bf00      	nop
 80141e4:	2400003c 	.word	0x2400003c

080141e8 <_fstat_r>:
 80141e8:	b538      	push	{r3, r4, r5, lr}
 80141ea:	4d07      	ldr	r5, [pc, #28]	@ (8014208 <_fstat_r+0x20>)
 80141ec:	2300      	movs	r3, #0
 80141ee:	4604      	mov	r4, r0
 80141f0:	4608      	mov	r0, r1
 80141f2:	4611      	mov	r1, r2
 80141f4:	602b      	str	r3, [r5, #0]
 80141f6:	f7ec fe31 	bl	8000e5c <_fstat>
 80141fa:	1c43      	adds	r3, r0, #1
 80141fc:	d102      	bne.n	8014204 <_fstat_r+0x1c>
 80141fe:	682b      	ldr	r3, [r5, #0]
 8014200:	b103      	cbz	r3, 8014204 <_fstat_r+0x1c>
 8014202:	6023      	str	r3, [r4, #0]
 8014204:	bd38      	pop	{r3, r4, r5, pc}
 8014206:	bf00      	nop
 8014208:	24043494 	.word	0x24043494

0801420c <_isatty_r>:
 801420c:	b538      	push	{r3, r4, r5, lr}
 801420e:	4d06      	ldr	r5, [pc, #24]	@ (8014228 <_isatty_r+0x1c>)
 8014210:	2300      	movs	r3, #0
 8014212:	4604      	mov	r4, r0
 8014214:	4608      	mov	r0, r1
 8014216:	602b      	str	r3, [r5, #0]
 8014218:	f7ec fe30 	bl	8000e7c <_isatty>
 801421c:	1c43      	adds	r3, r0, #1
 801421e:	d102      	bne.n	8014226 <_isatty_r+0x1a>
 8014220:	682b      	ldr	r3, [r5, #0]
 8014222:	b103      	cbz	r3, 8014226 <_isatty_r+0x1a>
 8014224:	6023      	str	r3, [r4, #0]
 8014226:	bd38      	pop	{r3, r4, r5, pc}
 8014228:	24043494 	.word	0x24043494

0801422c <_kill_r>:
 801422c:	b538      	push	{r3, r4, r5, lr}
 801422e:	4d07      	ldr	r5, [pc, #28]	@ (801424c <_kill_r+0x20>)
 8014230:	2300      	movs	r3, #0
 8014232:	4604      	mov	r4, r0
 8014234:	4608      	mov	r0, r1
 8014236:	4611      	mov	r1, r2
 8014238:	602b      	str	r3, [r5, #0]
 801423a:	f7ec fdad 	bl	8000d98 <_kill>
 801423e:	1c43      	adds	r3, r0, #1
 8014240:	d102      	bne.n	8014248 <_kill_r+0x1c>
 8014242:	682b      	ldr	r3, [r5, #0]
 8014244:	b103      	cbz	r3, 8014248 <_kill_r+0x1c>
 8014246:	6023      	str	r3, [r4, #0]
 8014248:	bd38      	pop	{r3, r4, r5, pc}
 801424a:	bf00      	nop
 801424c:	24043494 	.word	0x24043494

08014250 <_getpid_r>:
 8014250:	f7ec bd99 	b.w	8000d86 <_getpid>

08014254 <_init>:
 8014254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014256:	bf00      	nop
 8014258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801425a:	bc08      	pop	{r3}
 801425c:	469e      	mov	lr, r3
 801425e:	4770      	bx	lr

08014260 <_fini>:
 8014260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014262:	bf00      	nop
 8014264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014266:	bc08      	pop	{r3}
 8014268:	469e      	mov	lr, r3
 801426a:	4770      	bx	lr
