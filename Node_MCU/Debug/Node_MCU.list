
Node_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cec  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003eb0  08003eb0  00004eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec8  08003ec8  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003ec8  08003ec8  00004ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed0  08003ed0  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed0  08003ed0  00004ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ed4  08003ed4  00004ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003ed8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000010  08003ee8  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08003ee8  000050f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b774  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203c  00000000  00000000  000107b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  000127f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079d  00000000  00000000  000131e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020dd0  00000000  00000000  00013985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5b8  00000000  00000000  00034755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7c54  00000000  00000000  0003fd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107961  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002840  00000000  00000000  001079a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0010a1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003e98 	.word	0x08003e98

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003e98 	.word	0x08003e98

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <Flash_Erase>:

typedef void (*pFunction)(void);


void Flash_Erase(uint32_t start_addr, uint32_t size)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	@ 0x30
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 800053a:	f001 fd3f 	bl	8001fbc <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
    // Sectors 5-11: 128KB each (0x08020000-0x080FFFFF)

    uint32_t start_sector;
    uint32_t num_sectors;

    if (start_addr >= 0x08020000) {
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a24      	ldr	r2, [pc, #144]	@ (80005d8 <Flash_Erase+0xa8>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d90f      	bls.n	800056a <Flash_Erase+0x3a>
        // Application area - 128KB sectors
        start_sector = 5 + (start_addr - 0x08020000) / 0x20000;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f103 4377 	add.w	r3, r3, #4143972352	@ 0xf7000000
 8000550:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 8000554:	0c5b      	lsrs	r3, r3, #17
 8000556:	3305      	adds	r3, #5
 8000558:	62fb      	str	r3, [r7, #44]	@ 0x2c
        num_sectors = (size + 0x1FFFF) / 0x20000; // Round up
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f503 33ff 	add.w	r3, r3, #130560	@ 0x1fe00
 8000560:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8000564:	0c5b      	lsrs	r3, r3, #17
 8000566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000568:	e013      	b.n	8000592 <Flash_Erase+0x62>
    } else if (start_addr >= 0x08010000) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a1b      	ldr	r2, [pc, #108]	@ (80005dc <Flash_Erase+0xac>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d904      	bls.n	800057c <Flash_Erase+0x4c>
        // 64KB sector
        start_sector = 4;
 8000572:	2304      	movs	r3, #4
 8000574:	62fb      	str	r3, [r7, #44]	@ 0x2c
        num_sectors = 1;
 8000576:	2301      	movs	r3, #1
 8000578:	62bb      	str	r3, [r7, #40]	@ 0x28
 800057a:	e00a      	b.n	8000592 <Flash_Erase+0x62>
    } else {
        // 16KB sectors
        start_sector = (start_addr - 0x08000000) / 0x4000;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8000582:	0b9b      	lsrs	r3, r3, #14
 8000584:	62fb      	str	r3, [r7, #44]	@ 0x2c
        num_sectors = (size + 0x3FFF) / 0x4000; // Round up
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 800058c:	333f      	adds	r3, #63	@ 0x3f
 800058e:	0b9b      	lsrs	r3, r3, #14
 8000590:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3; // 2.7-3.6V
 8000596:	2302      	movs	r3, #2
 8000598:	623b      	str	r3, [r7, #32]
    EraseInitStruct.Sector = start_sector;
 800059a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800059c:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = num_sectors;
 800059e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005a0:	61fb      	str	r3, [r7, #28]

    HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80005a2:	f107 020c 	add.w	r2, r7, #12
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	4611      	mov	r1, r2
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fe77 	bl	80022a0 <HAL_FLASHEx_Erase>
 80005b2:	4603      	mov	r3, r0
 80005b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    HAL_FLASH_Lock();
 80005b8:	f001 fd22 	bl	8002000 <HAL_FLASH_Lock>

    if (status != HAL_OK || SectorError != 0xFFFFFFFF) {
 80005bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d103      	bne.n	80005cc <Flash_Erase+0x9c>
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80005ca:	d001      	beq.n	80005d0 <Flash_Erase+0xa0>
        // Handle erase error
        Error_Handler();
 80005cc:	f000 fb10 	bl	8000bf0 <Error_Handler>
    }
}
 80005d0:	bf00      	nop
 80005d2:	3730      	adds	r7, #48	@ 0x30
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	0801ffff 	.word	0x0801ffff
 80005dc:	0800ffff 	.word	0x0800ffff

080005e0 <IsValidApplication>:

// Enhanced application validation
uint8_t IsValidApplication(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
    uint32_t appStack = *(volatile uint32_t*)FLASH_START_ADDR;
 80005e6:	4b1d      	ldr	r3, [pc, #116]	@ (800065c <IsValidApplication+0x7c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	607b      	str	r3, [r7, #4]
    uint32_t appResetHandler = *(volatile uint32_t*)(FLASH_START_ADDR + 4);
 80005ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <IsValidApplication+0x80>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	603b      	str	r3, [r7, #0]

    // Check if flash is erased (all 0xFF)
    if (appStack == 0xFFFFFFFF || appResetHandler == 0xFFFFFFFF)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80005f8:	d003      	beq.n	8000602 <IsValidApplication+0x22>
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000600:	d101      	bne.n	8000606 <IsValidApplication+0x26>
        return 0;
 8000602:	2300      	movs	r3, #0
 8000604:	e023      	b.n	800064e <IsValidApplication+0x6e>

    // Check if flash is blank (all 0x00)
    if (appStack == 0x00000000 || appResetHandler == 0x00000000)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d002      	beq.n	8000612 <IsValidApplication+0x32>
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <IsValidApplication+0x36>
        return 0;
 8000612:	2300      	movs	r3, #0
 8000614:	e01b      	b.n	800064e <IsValidApplication+0x6e>

    // Check stack pointer is in RAM range (adjust for your MCU)
    if (appStack < 0x20000000 || appStack > 0x20020000)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800061c:	d303      	bcc.n	8000626 <IsValidApplication+0x46>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a10      	ldr	r2, [pc, #64]	@ (8000664 <IsValidApplication+0x84>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d901      	bls.n	800062a <IsValidApplication+0x4a>
        return 0;
 8000626:	2300      	movs	r3, #0
 8000628:	e011      	b.n	800064e <IsValidApplication+0x6e>

    // Check reset handler is in valid flash range
    if (appResetHandler < 0x08020000 || appResetHandler > 0x0803FFFF)
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	4a0e      	ldr	r2, [pc, #56]	@ (8000668 <IsValidApplication+0x88>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d903      	bls.n	800063a <IsValidApplication+0x5a>
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	4a0d      	ldr	r2, [pc, #52]	@ (800066c <IsValidApplication+0x8c>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d901      	bls.n	800063e <IsValidApplication+0x5e>
        return 0;
 800063a:	2300      	movs	r3, #0
 800063c:	e007      	b.n	800064e <IsValidApplication+0x6e>

    // Check reset handler has Thumb bit set (bit 0 = 1 for Cortex-M)
    if ((appResetHandler & 0x01) == 0)
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <IsValidApplication+0x6c>
        return 0;
 8000648:	2300      	movs	r3, #0
 800064a:	e000      	b.n	800064e <IsValidApplication+0x6e>

    return 1;
 800064c:	2301      	movs	r3, #1
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	08020000 	.word	0x08020000
 8000660:	08020004 	.word	0x08020004
 8000664:	20020000 	.word	0x20020000
 8000668:	0801ffff 	.word	0x0801ffff
 800066c:	0803ffff 	.word	0x0803ffff

08000670 <JumpToApplication>:

void JumpToApplication(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
    if (!IsValidApplication()) {
 8000676:	f7ff ffb3 	bl	80005e0 <IsValidApplication>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d110      	bne.n	80006a2 <JumpToApplication+0x32>
        // Flash LED to indicate no valid app
        for(int i = 0; i < 10; i++) {
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	e009      	b.n	800069a <JumpToApplication+0x2a>
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000686:	2120      	movs	r1, #32
 8000688:	4826      	ldr	r0, [pc, #152]	@ (8000724 <JumpToApplication+0xb4>)
 800068a:	f002 f9ca 	bl	8002a22 <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 800068e:	2064      	movs	r0, #100	@ 0x64
 8000690:	f000 fcda 	bl	8001048 <HAL_Delay>
        for(int i = 0; i < 10; i++) {
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	2b09      	cmp	r3, #9
 800069e:	ddf2      	ble.n	8000686 <JumpToApplication+0x16>
        }
        return;
 80006a0:	e03c      	b.n	800071c <JumpToApplication+0xac>
    }

    uint32_t appStack = *(volatile uint32_t*)FLASH_START_ADDR;
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <JumpToApplication+0xb8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	60fb      	str	r3, [r7, #12]
    uint32_t appResetHandler = *(volatile uint32_t*)(FLASH_START_ADDR + 4);
 80006a8:	4b20      	ldr	r3, [pc, #128]	@ (800072c <JumpToApplication+0xbc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	60bb      	str	r3, [r7, #8]

    // Proper system cleanup
    HAL_CAN_Stop(&hcan1);
 80006ae:	4820      	ldr	r0, [pc, #128]	@ (8000730 <JumpToApplication+0xc0>)
 80006b0:	f000 ff2e 	bl	8001510 <HAL_CAN_Stop>
    HAL_CAN_DeInit(&hcan1);
 80006b4:	481e      	ldr	r0, [pc, #120]	@ (8000730 <JumpToApplication+0xc0>)
 80006b6:	f000 fde6 	bl	8001286 <HAL_CAN_DeInit>
    HAL_RCC_DeInit();
 80006ba:	f002 fd67 	bl	800318c <HAL_RCC_DeInit>
    HAL_DeInit();
 80006be:	f000 fc3d 	bl	8000f3c <HAL_DeInit>

    // Disable SysTick
    SysTick->CTRL = 0;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <JumpToApplication+0xc4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <JumpToApplication+0xc4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 80006ce:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <JumpToApplication+0xc4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop

    // Disable all interrupts
    __disable_irq();

    // Clear pending interrupts
    for (int i = 0; i < 8; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	e010      	b.n	8000700 <JumpToApplication+0x90>
        NVIC->ICER[i] = 0xFFFFFFFF;
 80006de:	4a16      	ldr	r2, [pc, #88]	@ (8000738 <JumpToApplication+0xc8>)
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	3320      	adds	r3, #32
 80006e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80006ec:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <JumpToApplication+0xc8>)
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	3360      	adds	r3, #96	@ 0x60
 80006f2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 8; i++) {
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	3301      	adds	r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	2b07      	cmp	r3, #7
 8000704:	ddeb      	ble.n	80006de <JumpToApplication+0x6e>
    }

    // Relocate vector table
    SCB->VTOR = FLASH_START_ADDR;
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <JumpToApplication+0xcc>)
 8000708:	4a07      	ldr	r2, [pc, #28]	@ (8000728 <JumpToApplication+0xb8>)
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f383 8808 	msr	MSP, r3
}
 8000716:	bf00      	nop

    // Set stack pointer and jump
    __set_MSP(appStack);
    ((pFunction)appResetHandler)();
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	4798      	blx	r3
}
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40020000 	.word	0x40020000
 8000728:	08020000 	.word	0x08020000
 800072c:	08020004 	.word	0x08020004
 8000730:	2000002c 	.word	0x2000002c
 8000734:	e000e010 	.word	0xe000e010
 8000738:	e000e100 	.word	0xe000e100
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <Flash_Write_Buffered>:

// Improved flash write with proper buffering
void Flash_Write_Buffered(uint32_t address, uint8_t* data, uint8_t len)
{
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	4613      	mov	r3, r2
 800074c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < len; i++) {
 800074e:	2300      	movs	r3, #0
 8000750:	77fb      	strb	r3, [r7, #31]
 8000752:	e034      	b.n	80007be <Flash_Write_Buffered+0x7e>
        write_buffer[buffer_index++] = data[i];
 8000754:	7ffb      	ldrb	r3, [r7, #31]
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	441a      	add	r2, r3
 800075a:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <Flash_Write_Buffered+0x90>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	1c59      	adds	r1, r3, #1
 8000760:	b2c8      	uxtb	r0, r1
 8000762:	491b      	ldr	r1, [pc, #108]	@ (80007d0 <Flash_Write_Buffered+0x90>)
 8000764:	7008      	strb	r0, [r1, #0]
 8000766:	4619      	mov	r1, r3
 8000768:	7812      	ldrb	r2, [r2, #0]
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <Flash_Write_Buffered+0x94>)
 800076c:	545a      	strb	r2, [r3, r1]

        if (buffer_index == 4) {
 800076e:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <Flash_Write_Buffered+0x90>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b04      	cmp	r3, #4
 8000774:	d120      	bne.n	80007b8 <Flash_Write_Buffered+0x78>
            HAL_FLASH_Unlock();
 8000776:	f001 fc21 	bl	8001fbc <HAL_FLASH_Unlock>
            uint32_t word = *(uint32_t*)write_buffer;
 800077a:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <Flash_Write_Buffered+0x94>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	61bb      	str	r3, [r7, #24]
            HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, current_flash_addr, word);
 8000780:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <Flash_Write_Buffered+0x98>)
 8000782:	6819      	ldr	r1, [r3, #0]
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	2200      	movs	r2, #0
 8000788:	461c      	mov	r4, r3
 800078a:	4615      	mov	r5, r2
 800078c:	4622      	mov	r2, r4
 800078e:	462b      	mov	r3, r5
 8000790:	2002      	movs	r0, #2
 8000792:	f001 fbc1 	bl	8001f18 <HAL_FLASH_Program>
 8000796:	4603      	mov	r3, r0
 8000798:	75fb      	strb	r3, [r7, #23]
            HAL_FLASH_Lock();
 800079a:	f001 fc31 	bl	8002000 <HAL_FLASH_Lock>

            if (status != HAL_OK) {
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <Flash_Write_Buffered+0x68>
                Error_Handler();
 80007a4:	f000 fa24 	bl	8000bf0 <Error_Handler>
            }

            buffer_index = 0;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <Flash_Write_Buffered+0x90>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
            current_flash_addr += 4;  // 🔁 aggiorna solo dopo il write
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <Flash_Write_Buffered+0x98>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3304      	adds	r3, #4
 80007b4:	4a08      	ldr	r2, [pc, #32]	@ (80007d8 <Flash_Write_Buffered+0x98>)
 80007b6:	6013      	str	r3, [r2, #0]
    for (uint8_t i = 0; i < len; i++) {
 80007b8:	7ffb      	ldrb	r3, [r7, #31]
 80007ba:	3301      	adds	r3, #1
 80007bc:	77fb      	strb	r3, [r7, #31]
 80007be:	7ffa      	ldrb	r2, [r7, #31]
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d3c6      	bcc.n	8000754 <Flash_Write_Buffered+0x14>
        }
    }
}
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bdb0      	pop	{r4, r5, r7, pc}
 80007d0:	200000c8 	.word	0x200000c8
 80007d4:	200000c4 	.word	0x200000c4
 80007d8:	20000000 	.word	0x20000000

080007dc <Flash_Write_Flush>:

// Flush remaining bytes in buffer
void Flash_Write_Flush(void)
{
 80007dc:	b5b0      	push	{r4, r5, r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
    if (buffer_index > 0) {
 80007e2:	4b16      	ldr	r3, [pc, #88]	@ (800083c <Flash_Write_Flush+0x60>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d023      	beq.n	8000832 <Flash_Write_Flush+0x56>
        // Pad buffer with 0xFF
        while (buffer_index < 4) {
 80007ea:	e009      	b.n	8000800 <Flash_Write_Flush+0x24>
            write_buffer[buffer_index++] = 0xFF;
 80007ec:	4b13      	ldr	r3, [pc, #76]	@ (800083c <Flash_Write_Flush+0x60>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	1c5a      	adds	r2, r3, #1
 80007f2:	b2d1      	uxtb	r1, r2
 80007f4:	4a11      	ldr	r2, [pc, #68]	@ (800083c <Flash_Write_Flush+0x60>)
 80007f6:	7011      	strb	r1, [r2, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <Flash_Write_Flush+0x64>)
 80007fc:	21ff      	movs	r1, #255	@ 0xff
 80007fe:	5499      	strb	r1, [r3, r2]
        while (buffer_index < 4) {
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <Flash_Write_Flush+0x60>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d9f1      	bls.n	80007ec <Flash_Write_Flush+0x10>
        }

        HAL_FLASH_Unlock();
 8000808:	f001 fbd8 	bl	8001fbc <HAL_FLASH_Unlock>
        uint32_t word = *(uint32_t*)write_buffer;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <Flash_Write_Flush+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	607b      	str	r3, [r7, #4]
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, current_flash_addr, word);
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <Flash_Write_Flush+0x68>)
 8000814:	6819      	ldr	r1, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	461c      	mov	r4, r3
 800081c:	4615      	mov	r5, r2
 800081e:	4622      	mov	r2, r4
 8000820:	462b      	mov	r3, r5
 8000822:	2002      	movs	r0, #2
 8000824:	f001 fb78 	bl	8001f18 <HAL_FLASH_Program>
        HAL_FLASH_Lock();
 8000828:	f001 fbea 	bl	8002000 <HAL_FLASH_Lock>

        buffer_index = 0;
 800082c:	4b03      	ldr	r3, [pc, #12]	@ (800083c <Flash_Write_Flush+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
    }
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bdb0      	pop	{r4, r5, r7, pc}
 800083a:	bf00      	nop
 800083c:	200000c8 	.word	0x200000c8
 8000840:	200000c4 	.word	0x200000c4
 8000844:	20000000 	.word	0x20000000

08000848 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000850:	4b23      	ldr	r3, [pc, #140]	@ (80008e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000852:	4a24      	ldr	r2, [pc, #144]	@ (80008e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000854:	2100      	movs	r1, #0
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f000 fea3 	bl	80015a2 <HAL_CAN_GetRxMessage>

    switch (RxHeader.StdId) {
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b10      	cmp	r3, #16
 8000862:	d002      	beq.n	800086a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
 8000864:	2b12      	cmp	r3, #18
 8000866:	d014      	beq.n	8000892 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8000868:	e024      	b.n	80008b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
        case FIRMWARE_START_ID:
            // Start programming - erase flash first
            programming_mode = 1;
 800086a:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
            current_flash_addr = FLASH_START_ADDR;
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000872:	4a1f      	ldr	r2, [pc, #124]	@ (80008f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000874:	601a      	str	r2, [r3, #0]
            buffer_index = 0;
 8000876:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]

            // Erase application flash area
            Flash_Erase(FLASH_START_ADDR, FIRMWARE_MAX_SIZE);
 800087c:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8000880:	481b      	ldr	r0, [pc, #108]	@ (80008f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000882:	f7ff fe55 	bl	8000530 <Flash_Erase>

            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2120      	movs	r1, #32
 800088a:	481b      	ldr	r0, [pc, #108]	@ (80008f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800088c:	f002 f8b0 	bl	80029f0 <HAL_GPIO_WritePin>
            break;
 8000890:	e021      	b.n	80008d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>

        case FIRMWARE_DONE_ID:
            if (programming_mode) {
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d01a      	beq.n	80008d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
                // Flush any remaining data
                Flash_Write_Flush();
 800089a:	f7ff ff9f 	bl	80007dc <Flash_Write_Flush>
                programming_mode = 0;
 800089e:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]

                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2120      	movs	r1, #32
 80008a8:	4813      	ldr	r0, [pc, #76]	@ (80008f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80008aa:	f002 f8a1 	bl	80029f0 <HAL_GPIO_WritePin>
                JumpToApplication();
 80008ae:	f7ff fedf 	bl	8000670 <JumpToApplication>
            }
            break;
 80008b2:	e00d      	b.n	80008d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>

        default:
            // Data packet
            if (programming_mode) {
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00b      	beq.n	80008d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
                Flash_Write_Buffered(current_flash_addr, RxData, RxHeader.DLC);
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a08      	ldr	r2, [pc, #32]	@ (80008e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80008c2:	6912      	ldr	r2, [r2, #16]
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	4906      	ldr	r1, [pc, #24]	@ (80008e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff39 	bl	8000740 <Flash_Write_Buffered>
            }
            break;
 80008ce:	e001      	b.n	80008d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
            break;
 80008d0:	bf00      	nop
 80008d2:	e000      	b.n	80008d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
            break;
 80008d4:	bf00      	nop
    }
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000b8 	.word	0x200000b8
 80008e4:	2000009c 	.word	0x2000009c
 80008e8:	200000c0 	.word	0x200000c0
 80008ec:	20000000 	.word	0x20000000
 80008f0:	08020000 	.word	0x08020000
 80008f4:	200000c8 	.word	0x200000c8
 80008f8:	40020000 	.word	0x40020000

080008fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000900:	f000 fafa 	bl	8000ef8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000904:	f000 f818 	bl	8000938 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000908:	f000 f904 	bl	8000b14 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800090c:	f000 f8d8 	bl	8000ac0 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 8000910:	f000 f884 	bl	8000a1c <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */

	HAL_CAN_Start(&hcan1);
 8000914:	4807      	ldr	r0, [pc, #28]	@ (8000934 <main+0x38>)
 8000916:	f000 fdb7 	bl	8001488 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800091a:	2102      	movs	r1, #2
 800091c:	4805      	ldr	r0, [pc, #20]	@ (8000934 <main+0x38>)
 800091e:	f000 ff62 	bl	80017e6 <HAL_CAN_ActivateNotification>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d002      	beq.n	800092e <main+0x32>
	{
		Error_Handler();
 8000928:	f000 f962 	bl	8000bf0 <Error_Handler>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	e7fd      	b.n	800092e <main+0x32>
 8000932:	bf00      	nop
 8000934:	2000002c 	.word	0x2000002c

08000938 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	@ 0x50
 800093c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2234      	movs	r2, #52	@ 0x34
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f003 fa7a 	bl	8003e40 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	4b2c      	ldr	r3, [pc, #176]	@ (8000a14 <SystemClock_Config+0xdc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	4a2b      	ldr	r2, [pc, #172]	@ (8000a14 <SystemClock_Config+0xdc>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	@ 0x40
 800096c:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <SystemClock_Config+0xdc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	2300      	movs	r3, #0
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <SystemClock_Config+0xe0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a25      	ldr	r2, [pc, #148]	@ (8000a18 <SystemClock_Config+0xe0>)
 8000982:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <SystemClock_Config+0xe0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000994:	2302      	movs	r3, #2
 8000996:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099c:	2310      	movs	r3, #16
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80009a8:	2308      	movs	r3, #8
 80009aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80009ac:	23b4      	movs	r3, #180	@ 0xb4
 80009ae:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fcdb 	bl	800337c <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80009cc:	f000 f910 	bl	8000bf0 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009d0:	f002 f842 	bl	8002a58 <HAL_PWREx_EnableOverDrive>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xa6>
	{
		Error_Handler();
 80009da:	f000 f909 	bl	8000bf0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2302      	movs	r3, #2
 80009e4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009ee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2105      	movs	r1, #5
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 f87b 	bl	8002af8 <HAL_RCC_ClockConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8000a08:	f000 f8f2 	bl	8000bf0 <Error_Handler>
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	3750      	adds	r7, #80	@ 0x50
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40007000 	.word	0x40007000

08000a1c <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	@ 0x28
 8000a20:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000a22:	4b25      	ldr	r3, [pc, #148]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000a24:	4a25      	ldr	r2, [pc, #148]	@ (8000abc <MX_CAN1_Init+0xa0>)
 8000a26:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 9;
 8000a28:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000a2a:	2209      	movs	r2, #9
 8000a2c:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a2e:	4b22      	ldr	r3, [pc, #136]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a34:	4b20      	ldr	r3, [pc, #128]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000a3c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a40:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000a44:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a48:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a6e:	4812      	ldr	r0, [pc, #72]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000a70:	f000 fb0e 	bl	8001090 <HAL_CAN_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_CAN1_Init+0x62>
	{
		Error_Handler();
 8000a7a:	f000 f8b9 	bl	8000bf0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8000a82:	2312      	movs	r3, #18
 8000a84:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000aa2:	2314      	movs	r3, #20
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <MX_CAN1_Init+0x9c>)
 8000aac:	f000 fc0e 	bl	80012cc <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	@ 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000002c 	.word	0x2000002c
 8000abc:	40006400 	.word	0x40006400

08000ac0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <MX_USART2_UART_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af8:	f002 fede 	bl	80038b8 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000b02:	f000 f875 	bl	8000bf0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000054 	.word	0x20000054
 8000b10:	40004400 	.word	0x40004400

08000b14 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	@ 0x28
 8000b18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000be4 <MX_GPIO_Init+0xd0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a2c      	ldr	r2, [pc, #176]	@ (8000be4 <MX_GPIO_Init+0xd0>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000be4 <MX_GPIO_Init+0xd0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b26      	ldr	r3, [pc, #152]	@ (8000be4 <MX_GPIO_Init+0xd0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a25      	ldr	r2, [pc, #148]	@ (8000be4 <MX_GPIO_Init+0xd0>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b23      	ldr	r3, [pc, #140]	@ (8000be4 <MX_GPIO_Init+0xd0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <MX_GPIO_Init+0xd0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000be4 <MX_GPIO_Init+0xd0>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <MX_GPIO_Init+0xd0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <MX_GPIO_Init+0xd0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a17      	ldr	r2, [pc, #92]	@ (8000be4 <MX_GPIO_Init+0xd0>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <MX_GPIO_Init+0xd0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	4812      	ldr	r0, [pc, #72]	@ (8000be8 <MX_GPIO_Init+0xd4>)
 8000ba0:	f001 ff26 	bl	80029f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000ba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000baa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	@ (8000bec <MX_GPIO_Init+0xd8>)
 8000bbc:	f001 fc90 	bl	80024e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000bc0:	2320      	movs	r3, #32
 8000bc2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <MX_GPIO_Init+0xd4>)
 8000bd8:	f001 fc82 	bl	80024e0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	@ 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020800 	.word	0x40020800

08000bf0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <Error_Handler+0x8>

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c12:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	4a08      	ldr	r2, [pc, #32]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c3a:	2007      	movs	r0, #7
 8000c3c:	f001 f91c 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800

08000c4c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	@ 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a2a      	ldr	r2, [pc, #168]	@ (8000d14 <HAL_CAN_MspInit+0xc8>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d14d      	bne.n	8000d0a <HAL_CAN_MspInit+0xbe>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b29      	ldr	r3, [pc, #164]	@ (8000d18 <HAL_CAN_MspInit+0xcc>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	4a28      	ldr	r2, [pc, #160]	@ (8000d18 <HAL_CAN_MspInit+0xcc>)
 8000c78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7e:	4b26      	ldr	r3, [pc, #152]	@ (8000d18 <HAL_CAN_MspInit+0xcc>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <HAL_CAN_MspInit+0xcc>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a21      	ldr	r2, [pc, #132]	@ (8000d18 <HAL_CAN_MspInit+0xcc>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <HAL_CAN_MspInit+0xcc>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ca6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cb8:	2309      	movs	r3, #9
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4816      	ldr	r0, [pc, #88]	@ (8000d1c <HAL_CAN_MspInit+0xd0>)
 8000cc4:	f001 fc0c 	bl	80024e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cda:	2309      	movs	r3, #9
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480d      	ldr	r0, [pc, #52]	@ (8000d1c <HAL_CAN_MspInit+0xd0>)
 8000ce6:	f001 fbfb 	bl	80024e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2014      	movs	r0, #20
 8000cf0:	f001 f8cd 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cf4:	2014      	movs	r0, #20
 8000cf6:	f001 f8e6 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2015      	movs	r0, #21
 8000d00:	f001 f8c5 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d04:	2015      	movs	r0, #21
 8000d06:	f001 f8de 	bl	8001ec6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	@ 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40006400 	.word	0x40006400
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020000 	.word	0x40020000

08000d20 <HAL_CAN_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d5c <HAL_CAN_MspDeInit+0x3c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d110      	bne.n	8000d54 <HAL_CAN_MspDeInit+0x34>
  {
    /* USER CODE BEGIN CAN1_MspDeInit 0 */

    /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <HAL_CAN_MspDeInit+0x40>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <HAL_CAN_MspDeInit+0x40>)
 8000d38:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8000d3e:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000d42:	4808      	ldr	r0, [pc, #32]	@ (8000d64 <HAL_CAN_MspDeInit+0x44>)
 8000d44:	f001 fd60 	bl	8002808 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000d48:	2014      	movs	r0, #20
 8000d4a:	f001 f8ca 	bl	8001ee2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8000d4e:	2015      	movs	r0, #21
 8000d50:	f001 f8c7 	bl	8001ee2 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN CAN1_MspDeInit 1 */

    /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40006400 	.word	0x40006400
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a19      	ldr	r2, [pc, #100]	@ (8000dec <HAL_UART_MspInit+0x84>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d12b      	bne.n	8000de2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <HAL_UART_MspInit+0x88>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a17      	ldr	r2, [pc, #92]	@ (8000df0 <HAL_UART_MspInit+0x88>)
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <HAL_UART_MspInit+0x88>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <HAL_UART_MspInit+0x88>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a10      	ldr	r2, [pc, #64]	@ (8000df0 <HAL_UART_MspInit+0x88>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <HAL_UART_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <HAL_UART_MspInit+0x8c>)
 8000dde:	f001 fb7f 	bl	80024e0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	@ 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40004400 	.word	0x40004400
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020000 	.word	0x40020000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <NMI_Handler+0x4>

08000e00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <MemManage_Handler+0x4>

08000e10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4e:	f000 f8db 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <CAN1_RX0_IRQHandler+0x10>)
 8000e5e:	f000 fce8 	bl	8001832 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000002c 	.word	0x2000002c

08000e6c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <CAN1_RX1_IRQHandler+0x10>)
 8000e72:	f000 fcde 	bl	8001832 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000002c 	.word	0x2000002c

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <SystemInit+0x20>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ea0 <SystemInit+0x20>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000edc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ea8:	f7ff ffea 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eae:	490d      	ldr	r1, [pc, #52]	@ (8000ee4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f002 ffbd 	bl	8003e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff fd11 	bl	80008fc <main>
  bx  lr    
 8000eda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ee8:	08003ed8 	.word	0x08003ed8
  ldr r2, =_sbss
 8000eec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ef0:	200000f0 	.word	0x200000f0

08000ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	@ (8000f38 <HAL_Init+0x40>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <HAL_Init+0x40>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <HAL_Init+0x40>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 ffa9 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f83e 	bl	8000fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff fe66 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <HAL_DeInit+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <HAL_DeInit+0x50>)
 8000f44:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <HAL_DeInit+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <HAL_DeInit+0x4c>)
 8000f4e:	4a10      	ldr	r2, [pc, #64]	@ (8000f90 <HAL_DeInit+0x54>)
 8000f50:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000f52:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <HAL_DeInit+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000f58:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <HAL_DeInit+0x4c>)
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f94 <HAL_DeInit+0x58>)
 8000f5c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <HAL_DeInit+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <HAL_DeInit+0x4c>)
 8000f66:	2281      	movs	r2, #129	@ 0x81
 8000f68:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000f6a:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <HAL_DeInit+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <HAL_DeInit+0x4c>)
 8000f72:	2203      	movs	r2, #3
 8000f74:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000f76:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <HAL_DeInit+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000f7c:	f000 f80c 	bl	8000f98 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	3fffc9ff 	.word	0x3fffc9ff
 8000f90:	00c77933 	.word	0x00c77933
 8000f94:	206010ff 	.word	0x206010ff

08000f98 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_InitTick+0x54>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_InitTick+0x58>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 ff99 	bl	8001efe <HAL_SYSTICK_Config>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00e      	b.n	8000ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d80a      	bhi.n	8000ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fe4:	f000 ff53 	bl	8001e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4a06      	ldr	r2, [pc, #24]	@ (8001004 <HAL_InitTick+0x5c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000004 	.word	0x20000004
 8001000:	2000000c 	.word	0x2000000c
 8001004:	20000008 	.word	0x20000008

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	@ (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	2000000c 	.word	0x2000000c
 800102c:	200000cc 	.word	0x200000cc

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200000cc 	.word	0x200000cc

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff ffee 	bl	8001030 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_Delay+0x44>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800106e:	bf00      	nop
 8001070:	f7ff ffde 	bl	8001030 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f7      	bhi.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000000c 	.word	0x2000000c

08001090 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e0ed      	b.n	800127e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fdcc 	bl	8000c4c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0201 	orr.w	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c4:	f7ff ffb4 	bl	8001030 <HAL_GetTick>
 80010c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ca:	e012      	b.n	80010f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010cc:	f7ff ffb0 	bl	8001030 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	d90b      	bls.n	80010f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2205      	movs	r2, #5
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0c5      	b.n	800127e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0e5      	beq.n	80010cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0202 	bic.w	r2, r2, #2
 800110e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001110:	f7ff ff8e 	bl	8001030 <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001116:	e012      	b.n	800113e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001118:	f7ff ff8a 	bl	8001030 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b0a      	cmp	r3, #10
 8001124:	d90b      	bls.n	800113e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2205      	movs	r2, #5
 8001136:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e09f      	b.n	800127e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e5      	bne.n	8001118 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7e1b      	ldrb	r3, [r3, #24]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d108      	bne.n	8001166 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e007      	b.n	8001176 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7e5b      	ldrb	r3, [r3, #25]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d108      	bne.n	8001190 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e007      	b.n	80011a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800119e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7e9b      	ldrb	r3, [r3, #26]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d108      	bne.n	80011ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0220 	orr.w	r2, r2, #32
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e007      	b.n	80011ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0220 	bic.w	r2, r2, #32
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7edb      	ldrb	r3, [r3, #27]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d108      	bne.n	80011e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0210 	bic.w	r2, r2, #16
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e007      	b.n	80011f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0210 	orr.w	r2, r2, #16
 80011f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7f1b      	ldrb	r3, [r3, #28]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0208 	orr.w	r2, r2, #8
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e007      	b.n	800121e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0208 	bic.w	r2, r2, #8
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7f5b      	ldrb	r3, [r3, #29]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0204 	orr.w	r2, r2, #4
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e007      	b.n	8001248 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0204 	bic.w	r2, r2, #4
 8001246:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	ea42 0103 	orr.w	r1, r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	1e5a      	subs	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e015      	b.n	80012c4 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f939 	bl	8001510 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fd3e 	bl	8000d20 <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012b2:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012dc:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d003      	beq.n	80012ec <HAL_CAN_ConfigFilter+0x20>
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	f040 80be 	bne.w	8001468 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80012ec:	4b65      	ldr	r3, [pc, #404]	@ (8001484 <HAL_CAN_ConfigFilter+0x1b8>)
 80012ee:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012f6:	f043 0201 	orr.w	r2, r3, #1
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001306:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	431a      	orrs	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	2201      	movs	r2, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	43db      	mvns	r3, r3
 800133e:	401a      	ands	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d123      	bne.n	8001396 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	401a      	ands	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001370:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	3248      	adds	r2, #72	@ 0x48
 8001376:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800138a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800138c:	6939      	ldr	r1, [r7, #16]
 800138e:	3348      	adds	r3, #72	@ 0x48
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	440b      	add	r3, r1
 8001394:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d122      	bne.n	80013e4 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	3248      	adds	r2, #72	@ 0x48
 80013c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013da:	6939      	ldr	r1, [r7, #16]
 80013dc:	3348      	adds	r3, #72	@ 0x48
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d109      	bne.n	8001400 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	401a      	ands	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80013fe:	e007      	b.n	8001410 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	431a      	orrs	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d109      	bne.n	800142c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43db      	mvns	r3, r3
 8001422:	401a      	ands	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800142a:	e007      	b.n	800143c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	431a      	orrs	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d107      	bne.n	8001454 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	431a      	orrs	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800145a:	f023 0201 	bic.w	r2, r3, #1
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	e006      	b.n	8001476 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
  }
}
 8001476:	4618      	mov	r0, r3
 8001478:	371c      	adds	r7, #28
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40006400 	.word	0x40006400

08001488 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d12e      	bne.n	80014fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2202      	movs	r2, #2
 80014a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0201 	bic.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014b4:	f7ff fdbc 	bl	8001030 <HAL_GetTick>
 80014b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014ba:	e012      	b.n	80014e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014bc:	f7ff fdb8 	bl	8001030 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b0a      	cmp	r3, #10
 80014c8:	d90b      	bls.n	80014e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2205      	movs	r2, #5
 80014da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e012      	b.n	8001508 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e5      	bne.n	80014bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e006      	b.n	8001508 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
  }
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d133      	bne.n	800158c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001534:	f7ff fd7c 	bl	8001030 <HAL_GetTick>
 8001538:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800153a:	e012      	b.n	8001562 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800153c:	f7ff fd78 	bl	8001030 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b0a      	cmp	r3, #10
 8001548:	d90b      	bls.n	8001562 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2205      	movs	r2, #5
 800155a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e01b      	b.n	800159a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0e5      	beq.n	800153c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0202 	bic.w	r2, r2, #2
 800157e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	e006      	b.n	800159a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001590:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
  }
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80015a2:	b480      	push	{r7}
 80015a4:	b087      	sub	sp, #28
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d003      	beq.n	80015c6 <HAL_CAN_GetRxMessage+0x24>
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	f040 8103 	bne.w	80017cc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10e      	bne.n	80015ea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d116      	bne.n	8001608 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e0f7      	b.n	80017da <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d107      	bne.n	8001608 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0e8      	b.n	80017da <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	331b      	adds	r3, #27
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	4413      	add	r3, r2
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0204 	and.w	r2, r3, #4
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10c      	bne.n	8001640 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	331b      	adds	r3, #27
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4413      	add	r3, r2
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	0d5b      	lsrs	r3, r3, #21
 8001636:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e00b      	b.n	8001658 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	331b      	adds	r3, #27
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	4413      	add	r3, r2
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	08db      	lsrs	r3, r3, #3
 8001650:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	331b      	adds	r3, #27
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	4413      	add	r3, r2
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0202 	and.w	r2, r3, #2
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	331b      	adds	r3, #27
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	4413      	add	r3, r2
 800167a:	3304      	adds	r3, #4
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2208      	movs	r2, #8
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	e00b      	b.n	80016a6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	331b      	adds	r3, #27
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	4413      	add	r3, r2
 800169a:	3304      	adds	r3, #4
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 020f 	and.w	r2, r3, #15
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	331b      	adds	r3, #27
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	4413      	add	r3, r2
 80016b2:	3304      	adds	r3, #4
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	331b      	adds	r3, #27
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	4413      	add	r3, r2
 80016ca:	3304      	adds	r3, #4
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	0c1b      	lsrs	r3, r3, #16
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	4413      	add	r3, r2
 80016e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0a1a      	lsrs	r2, r3, #8
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4413      	add	r3, r2
 8001710:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	0c1a      	lsrs	r2, r3, #16
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	3302      	adds	r3, #2
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0e1a      	lsrs	r2, r3, #24
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	3303      	adds	r3, #3
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	4413      	add	r3, r2
 8001744:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	3304      	adds	r3, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	4413      	add	r3, r2
 800175c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0a1a      	lsrs	r2, r3, #8
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	3305      	adds	r3, #5
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	0c1a      	lsrs	r2, r3, #16
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	3306      	adds	r3, #6
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	4413      	add	r3, r2
 8001790:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	0e1a      	lsrs	r2, r3, #24
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	3307      	adds	r3, #7
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d108      	bne.n	80017b8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0220 	orr.w	r2, r2, #32
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	e007      	b.n	80017c8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691a      	ldr	r2, [r3, #16]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0220 	orr.w	r2, r2, #32
 80017c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e006      	b.n	80017da <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d002      	beq.n	8001804 <HAL_CAN_ActivateNotification+0x1e>
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d109      	bne.n	8001818 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6959      	ldr	r1, [r3, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e006      	b.n	8001826 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
  }
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b08a      	sub	sp, #40	@ 0x28
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d07c      	beq.n	8001972 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d023      	beq.n	80018ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2201      	movs	r2, #1
 8001888:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f983 	bl	8001ba0 <HAL_CAN_TxMailbox0CompleteCallback>
 800189a:	e016      	b.n	80018ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d004      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ae:	e00c      	b.n	80018ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c2:	e002      	b.n	80018ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f989 	bl	8001bdc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d024      	beq.n	800191e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f963 	bl	8001bb4 <HAL_CAN_TxMailbox1CompleteCallback>
 80018ee:	e016      	b.n	800191e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d004      	beq.n	8001904 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
 8001902:	e00c      	b.n	800191e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800190a:	2b00      	cmp	r3, #0
 800190c:	d004      	beq.n	8001918 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
 8001916:	e002      	b.n	800191e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f969 	bl	8001bf0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d024      	beq.n	8001972 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001930:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f943 	bl	8001bc8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001942:	e016      	b.n	8001972 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
 8001956:	e00c      	b.n	8001972 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
 800196a:	e002      	b.n	8001972 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f949 	bl	8001c04 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00c      	beq.n	8001996 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2210      	movs	r2, #16
 8001994:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00b      	beq.n	80019b8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2208      	movs	r2, #8
 80019b0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f930 	bl	8001c18 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7fe ff39 	bl	8000848 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00c      	beq.n	80019fa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2210      	movs	r2, #16
 80019f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00b      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2208      	movs	r2, #8
 8001a14:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f912 	bl	8001c40 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f8f9 	bl	8001c2c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00b      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2210      	movs	r2, #16
 8001a54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f8fc 	bl	8001c54 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00b      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2208      	movs	r2, #8
 8001a76:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f8f5 	bl	8001c68 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d07b      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d072      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d043      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d03e      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b00:	2b60      	cmp	r3, #96	@ 0x60
 8001b02:	d02b      	beq.n	8001b5c <HAL_CAN_IRQHandler+0x32a>
 8001b04:	2b60      	cmp	r3, #96	@ 0x60
 8001b06:	d82e      	bhi.n	8001b66 <HAL_CAN_IRQHandler+0x334>
 8001b08:	2b50      	cmp	r3, #80	@ 0x50
 8001b0a:	d022      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x320>
 8001b0c:	2b50      	cmp	r3, #80	@ 0x50
 8001b0e:	d82a      	bhi.n	8001b66 <HAL_CAN_IRQHandler+0x334>
 8001b10:	2b40      	cmp	r3, #64	@ 0x40
 8001b12:	d019      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x316>
 8001b14:	2b40      	cmp	r3, #64	@ 0x40
 8001b16:	d826      	bhi.n	8001b66 <HAL_CAN_IRQHandler+0x334>
 8001b18:	2b30      	cmp	r3, #48	@ 0x30
 8001b1a:	d010      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x30c>
 8001b1c:	2b30      	cmp	r3, #48	@ 0x30
 8001b1e:	d822      	bhi.n	8001b66 <HAL_CAN_IRQHandler+0x334>
 8001b20:	2b10      	cmp	r3, #16
 8001b22:	d002      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x2f8>
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	d005      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b28:	e01d      	b.n	8001b66 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b32:	e019      	b.n	8001b68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	f043 0310 	orr.w	r3, r3, #16
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b3c:	e014      	b.n	8001b68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	f043 0320 	orr.w	r3, r3, #32
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b46:	e00f      	b.n	8001b68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b50:	e00a      	b.n	8001b68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b5a:	e005      	b.n	8001b68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b64:	e000      	b.n	8001b68 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b66:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b76:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d008      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f872 	bl	8001c7c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	@ 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cac:	4013      	ands	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc2:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	60d3      	str	r3, [r2, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cdc:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	f003 0307 	and.w	r3, r3, #7
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	db0b      	blt.n	8001d1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	f003 021f 	and.w	r2, r3, #31
 8001d0c:	4907      	ldr	r1, [pc, #28]	@ (8001d2c <__NVIC_EnableIRQ+0x38>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	2001      	movs	r0, #1
 8001d16:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e100 	.word	0xe000e100

08001d30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db12      	blt.n	8001d68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	490a      	ldr	r1, [pc, #40]	@ (8001d74 <__NVIC_DisableIRQ+0x44>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f202 	lsl.w	r2, r0, r2
 8001d56:	3320      	adds	r3, #32
 8001d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d5c:	f3bf 8f4f 	dsb	sy
}
 8001d60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d62:	f3bf 8f6f 	isb	sy
}
 8001d66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	@ (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	@ (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	@ 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	@ 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e44:	d301      	bcc.n	8001e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00f      	b.n	8001e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <SysTick_Config+0x40>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e52:	210f      	movs	r1, #15
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e58:	f7ff ff8e 	bl	8001d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <SysTick_Config+0x40>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e62:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <SysTick_Config+0x40>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	e000e010 	.word	0xe000e010

08001e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff05 	bl	8001c90 <__NVIC_SetPriorityGrouping>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea0:	f7ff ff1a 	bl	8001cd8 <__NVIC_GetPriorityGrouping>
 8001ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	f7ff ff8e 	bl	8001dcc <NVIC_EncodePriority>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff5d 	bl	8001d78 <__NVIC_SetPriority>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff0d 	bl	8001cf4 <__NVIC_EnableIRQ>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff1d 	bl	8001d30 <__NVIC_DisableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ff94 	bl	8001e34 <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f26:	4b23      	ldr	r3, [pc, #140]	@ (8001fb4 <HAL_FLASH_Program+0x9c>)
 8001f28:	7e1b      	ldrb	r3, [r3, #24]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_FLASH_Program+0x1a>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e03b      	b.n	8001faa <HAL_FLASH_Program+0x92>
 8001f32:	4b20      	ldr	r3, [pc, #128]	@ (8001fb4 <HAL_FLASH_Program+0x9c>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f38:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001f3c:	f000 f870 	bl	8002020 <FLASH_WaitForLastOperation>
 8001f40:	4603      	mov	r3, r0
 8001f42:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d12b      	bne.n	8001fa2 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d105      	bne.n	8001f5c <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001f50:	783b      	ldrb	r3, [r7, #0]
 8001f52:	4619      	mov	r1, r3
 8001f54:	68b8      	ldr	r0, [r7, #8]
 8001f56:	f000 f91b 	bl	8002190 <FLASH_Program_Byte>
 8001f5a:	e016      	b.n	8001f8a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d105      	bne.n	8001f6e <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001f62:	883b      	ldrh	r3, [r7, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	68b8      	ldr	r0, [r7, #8]
 8001f68:	f000 f8ee 	bl	8002148 <FLASH_Program_HalfWord>
 8001f6c:	e00d      	b.n	8001f8a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d105      	bne.n	8001f80 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4619      	mov	r1, r3
 8001f78:	68b8      	ldr	r0, [r7, #8]
 8001f7a:	f000 f8c3 	bl	8002104 <FLASH_Program_Word>
 8001f7e:	e004      	b.n	8001f8a <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f84:	68b8      	ldr	r0, [r7, #8]
 8001f86:	f000 f88b 	bl	80020a0 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f8a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001f8e:	f000 f847 	bl	8002020 <FLASH_WaitForLastOperation>
 8001f92:	4603      	mov	r3, r0
 8001f94:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001f96:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <HAL_FLASH_Program+0xa0>)
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <HAL_FLASH_Program+0xa0>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001fa2:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <HAL_FLASH_Program+0x9c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	761a      	strb	r2, [r3, #24]

  return status;
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200000d0 	.word	0x200000d0
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <HAL_FLASH_Unlock+0x38>)
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da0b      	bge.n	8001fe6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_FLASH_Unlock+0x38>)
 8001fd0:	4a09      	ldr	r2, [pc, #36]	@ (8001ff8 <HAL_FLASH_Unlock+0x3c>)
 8001fd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fd4:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <HAL_FLASH_Unlock+0x38>)
 8001fd6:	4a09      	ldr	r2, [pc, #36]	@ (8001ffc <HAL_FLASH_Unlock+0x40>)
 8001fd8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <HAL_FLASH_Unlock+0x38>)
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da01      	bge.n	8001fe6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	40023c00 	.word	0x40023c00
 8001ff8:	45670123 	.word	0x45670123
 8001ffc:	cdef89ab 	.word	0xcdef89ab

08002000 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_FLASH_Lock+0x1c>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	4a04      	ldr	r2, [pc, #16]	@ (800201c <HAL_FLASH_Lock+0x1c>)
 800200a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800200e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	40023c00 	.word	0x40023c00

08002020 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800202c:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <FLASH_WaitForLastOperation+0x78>)
 800202e:	2200      	movs	r2, #0
 8002030:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002032:	f7fe fffd 	bl	8001030 <HAL_GetTick>
 8002036:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002038:	e010      	b.n	800205c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002040:	d00c      	beq.n	800205c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <FLASH_WaitForLastOperation+0x38>
 8002048:	f7fe fff2 	bl	8001030 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d201      	bcs.n	800205c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e019      	b.n	8002090 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800205c:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <FLASH_WaitForLastOperation+0x7c>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e8      	bne.n	800203a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002068:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <FLASH_WaitForLastOperation+0x7c>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <FLASH_WaitForLastOperation+0x7c>)
 8002076:	2201      	movs	r2, #1
 8002078:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800207a:	4b08      	ldr	r3, [pc, #32]	@ (800209c <FLASH_WaitForLastOperation+0x7c>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002086:	f000 f8a5 	bl	80021d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0

}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200000d0 	.word	0x200000d0
 800209c:	40023c00 	.word	0x40023c00

080020a0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020ac:	4b14      	ldr	r3, [pc, #80]	@ (8002100 <FLASH_Program_DoubleWord+0x60>)
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	4a13      	ldr	r2, [pc, #76]	@ (8002100 <FLASH_Program_DoubleWord+0x60>)
 80020b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <FLASH_Program_DoubleWord+0x60>)
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	4a10      	ldr	r2, [pc, #64]	@ (8002100 <FLASH_Program_DoubleWord+0x60>)
 80020be:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80020c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <FLASH_Program_DoubleWord+0x60>)
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002100 <FLASH_Program_DoubleWord+0x60>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80020d6:	f3bf 8f6f 	isb	sy
}
 80020da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80020dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	000a      	movs	r2, r1
 80020ea:	2300      	movs	r3, #0
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	3104      	adds	r1, #4
 80020f0:	4613      	mov	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	40023c00 	.word	0x40023c00

08002104 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800210e:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <FLASH_Program_Word+0x40>)
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	4a0c      	ldr	r2, [pc, #48]	@ (8002144 <FLASH_Program_Word+0x40>)
 8002114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002118:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800211a:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <FLASH_Program_Word+0x40>)
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	4a09      	ldr	r2, [pc, #36]	@ (8002144 <FLASH_Program_Word+0x40>)
 8002120:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002124:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002126:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <FLASH_Program_Word+0x40>)
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	4a06      	ldr	r2, [pc, #24]	@ (8002144 <FLASH_Program_Word+0x40>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	601a      	str	r2, [r3, #0]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40023c00 	.word	0x40023c00

08002148 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002154:	4b0d      	ldr	r3, [pc, #52]	@ (800218c <FLASH_Program_HalfWord+0x44>)
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	4a0c      	ldr	r2, [pc, #48]	@ (800218c <FLASH_Program_HalfWord+0x44>)
 800215a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800215e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002160:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <FLASH_Program_HalfWord+0x44>)
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	4a09      	ldr	r2, [pc, #36]	@ (800218c <FLASH_Program_HalfWord+0x44>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800216c:	4b07      	ldr	r3, [pc, #28]	@ (800218c <FLASH_Program_HalfWord+0x44>)
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	4a06      	ldr	r2, [pc, #24]	@ (800218c <FLASH_Program_HalfWord+0x44>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	801a      	strh	r2, [r3, #0]
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00

08002190 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <FLASH_Program_Byte+0x40>)
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	4a0b      	ldr	r2, [pc, #44]	@ (80021d0 <FLASH_Program_Byte+0x40>)
 80021a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80021a8:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <FLASH_Program_Byte+0x40>)
 80021aa:	4a09      	ldr	r2, [pc, #36]	@ (80021d0 <FLASH_Program_Byte+0x40>)
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80021b0:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <FLASH_Program_Byte+0x40>)
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	4a06      	ldr	r2, [pc, #24]	@ (80021d0 <FLASH_Program_Byte+0x40>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	701a      	strb	r2, [r3, #0]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40023c00 	.word	0x40023c00

080021d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80021d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002298 <FLASH_SetErrorCode+0xc4>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80021e4:	4b2d      	ldr	r3, [pc, #180]	@ (800229c <FLASH_SetErrorCode+0xc8>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	f043 0310 	orr.w	r3, r3, #16
 80021ec:	4a2b      	ldr	r2, [pc, #172]	@ (800229c <FLASH_SetErrorCode+0xc8>)
 80021ee:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80021f0:	4b29      	ldr	r3, [pc, #164]	@ (8002298 <FLASH_SetErrorCode+0xc4>)
 80021f2:	2210      	movs	r2, #16
 80021f4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80021f6:	4b28      	ldr	r3, [pc, #160]	@ (8002298 <FLASH_SetErrorCode+0xc4>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002202:	4b26      	ldr	r3, [pc, #152]	@ (800229c <FLASH_SetErrorCode+0xc8>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f043 0308 	orr.w	r3, r3, #8
 800220a:	4a24      	ldr	r2, [pc, #144]	@ (800229c <FLASH_SetErrorCode+0xc8>)
 800220c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800220e:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <FLASH_SetErrorCode+0xc4>)
 8002210:	2220      	movs	r2, #32
 8002212:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002214:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <FLASH_SetErrorCode+0xc4>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002220:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <FLASH_SetErrorCode+0xc8>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	4a1c      	ldr	r2, [pc, #112]	@ (800229c <FLASH_SetErrorCode+0xc8>)
 800222a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800222c:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <FLASH_SetErrorCode+0xc4>)
 800222e:	2240      	movs	r2, #64	@ 0x40
 8002230:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002232:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <FLASH_SetErrorCode+0xc4>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800223e:	4b17      	ldr	r3, [pc, #92]	@ (800229c <FLASH_SetErrorCode+0xc8>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f043 0302 	orr.w	r3, r3, #2
 8002246:	4a15      	ldr	r2, [pc, #84]	@ (800229c <FLASH_SetErrorCode+0xc8>)
 8002248:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800224a:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <FLASH_SetErrorCode+0xc4>)
 800224c:	2280      	movs	r2, #128	@ 0x80
 800224e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002250:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <FLASH_SetErrorCode+0xc4>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d009      	beq.n	8002270 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800225c:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <FLASH_SetErrorCode+0xc8>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <FLASH_SetErrorCode+0xc8>)
 8002266:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002268:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <FLASH_SetErrorCode+0xc4>)
 800226a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800226e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <FLASH_SetErrorCode+0xc4>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800227c:	4b07      	ldr	r3, [pc, #28]	@ (800229c <FLASH_SetErrorCode+0xc8>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	f043 0320 	orr.w	r3, r3, #32
 8002284:	4a05      	ldr	r2, [pc, #20]	@ (800229c <FLASH_SetErrorCode+0xc8>)
 8002286:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002288:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <FLASH_SetErrorCode+0xc4>)
 800228a:	2202      	movs	r2, #2
 800228c:	60da      	str	r2, [r3, #12]
  }
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40023c00 	.word	0x40023c00
 800229c:	200000d0 	.word	0x200000d0

080022a0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022ae:	4b31      	ldr	r3, [pc, #196]	@ (8002374 <HAL_FLASHEx_Erase+0xd4>)
 80022b0:	7e1b      	ldrb	r3, [r3, #24]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_FLASHEx_Erase+0x1a>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e058      	b.n	800236c <HAL_FLASHEx_Erase+0xcc>
 80022ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002374 <HAL_FLASHEx_Erase+0xd4>)
 80022bc:	2201      	movs	r2, #1
 80022be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022c0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022c4:	f7ff feac 	bl	8002020 <FLASH_WaitForLastOperation>
 80022c8:	4603      	mov	r3, r0
 80022ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d148      	bne.n	8002364 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022d8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d115      	bne.n	800230e <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f000 f844 	bl	800237c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022f4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022f8:	f7ff fe92 	bl	8002020 <FLASH_WaitForLastOperation>
 80022fc:	4603      	mov	r3, r0
 80022fe:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002300:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <HAL_FLASHEx_Erase+0xd8>)
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	4a1c      	ldr	r2, [pc, #112]	@ (8002378 <HAL_FLASHEx_Erase+0xd8>)
 8002306:	f023 0304 	bic.w	r3, r3, #4
 800230a:	6113      	str	r3, [r2, #16]
 800230c:	e028      	b.n	8002360 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	e01c      	b.n	8002350 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	4619      	mov	r1, r3
 800231e:	68b8      	ldr	r0, [r7, #8]
 8002320:	f000 f850 	bl	80023c4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002324:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002328:	f7ff fe7a 	bl	8002020 <FLASH_WaitForLastOperation>
 800232c:	4603      	mov	r3, r0
 800232e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <HAL_FLASHEx_Erase+0xd8>)
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	4a10      	ldr	r2, [pc, #64]	@ (8002378 <HAL_FLASHEx_Erase+0xd8>)
 8002336:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800233a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	601a      	str	r2, [r3, #0]
          break;
 8002348:	e00a      	b.n	8002360 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3301      	adds	r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4413      	add	r3, r2
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	429a      	cmp	r2, r3
 800235e:	d3da      	bcc.n	8002316 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002360:	f000 f878 	bl	8002454 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <HAL_FLASHEx_Erase+0xd4>)
 8002366:	2200      	movs	r2, #0
 8002368:	761a      	strb	r2, [r3, #24]

  return status;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200000d0 	.word	0x200000d0
 8002378:	40023c00 	.word	0x40023c00

0800237c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002388:	4b0d      	ldr	r3, [pc, #52]	@ (80023c0 <FLASH_MassErase+0x44>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	4a0c      	ldr	r2, [pc, #48]	@ (80023c0 <FLASH_MassErase+0x44>)
 800238e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002392:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002394:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <FLASH_MassErase+0x44>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	4a09      	ldr	r2, [pc, #36]	@ (80023c0 <FLASH_MassErase+0x44>)
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80023a0:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <FLASH_MassErase+0x44>)
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	4313      	orrs	r3, r2
 80023aa:	4a05      	ldr	r2, [pc, #20]	@ (80023c0 <FLASH_MassErase+0x44>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b0:	6113      	str	r3, [r2, #16]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40023c00 	.word	0x40023c00

080023c4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	e010      	b.n	8002402 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d103      	bne.n	80023ee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80023e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e009      	b.n	8002402 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d103      	bne.n	80023fc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80023f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	e002      	b.n	8002402 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80023fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002400:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002402:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <FLASH_Erase_Sector+0x8c>)
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	4a12      	ldr	r2, [pc, #72]	@ (8002450 <FLASH_Erase_Sector+0x8c>)
 8002408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800240c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800240e:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <FLASH_Erase_Sector+0x8c>)
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	490f      	ldr	r1, [pc, #60]	@ (8002450 <FLASH_Erase_Sector+0x8c>)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800241a:	4b0d      	ldr	r3, [pc, #52]	@ (8002450 <FLASH_Erase_Sector+0x8c>)
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	4a0c      	ldr	r2, [pc, #48]	@ (8002450 <FLASH_Erase_Sector+0x8c>)
 8002420:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002424:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002426:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <FLASH_Erase_Sector+0x8c>)
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4313      	orrs	r3, r2
 8002430:	4a07      	ldr	r2, [pc, #28]	@ (8002450 <FLASH_Erase_Sector+0x8c>)
 8002432:	f043 0302 	orr.w	r3, r3, #2
 8002436:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <FLASH_Erase_Sector+0x8c>)
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <FLASH_Erase_Sector+0x8c>)
 800243e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002442:	6113      	str	r3, [r2, #16]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40023c00 	.word	0x40023c00

08002454 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002458:	4b20      	ldr	r3, [pc, #128]	@ (80024dc <FLASH_FlushCaches+0x88>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002460:	2b00      	cmp	r3, #0
 8002462:	d017      	beq.n	8002494 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002464:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <FLASH_FlushCaches+0x88>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1c      	ldr	r2, [pc, #112]	@ (80024dc <FLASH_FlushCaches+0x88>)
 800246a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800246e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002470:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <FLASH_FlushCaches+0x88>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a19      	ldr	r2, [pc, #100]	@ (80024dc <FLASH_FlushCaches+0x88>)
 8002476:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b17      	ldr	r3, [pc, #92]	@ (80024dc <FLASH_FlushCaches+0x88>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a16      	ldr	r2, [pc, #88]	@ (80024dc <FLASH_FlushCaches+0x88>)
 8002482:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002486:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002488:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <FLASH_FlushCaches+0x88>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a13      	ldr	r2, [pc, #76]	@ (80024dc <FLASH_FlushCaches+0x88>)
 800248e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002492:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <FLASH_FlushCaches+0x88>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	d017      	beq.n	80024d0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80024a0:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <FLASH_FlushCaches+0x88>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <FLASH_FlushCaches+0x88>)
 80024a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024aa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80024ac:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <FLASH_FlushCaches+0x88>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <FLASH_FlushCaches+0x88>)
 80024b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <FLASH_FlushCaches+0x88>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <FLASH_FlushCaches+0x88>)
 80024be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024c2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <FLASH_FlushCaches+0x88>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a04      	ldr	r2, [pc, #16]	@ (80024dc <FLASH_FlushCaches+0x88>)
 80024ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024ce:	6013      	str	r3, [r2, #0]
  }
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023c00 	.word	0x40023c00

080024e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	@ 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	e165      	b.n	80027c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024fc:	2201      	movs	r2, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	429a      	cmp	r2, r3
 8002516:	f040 8154 	bne.w	80027c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d005      	beq.n	8002532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252e:	2b02      	cmp	r3, #2
 8002530:	d130      	bne.n	8002594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002568:	2201      	movs	r2, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 0201 	and.w	r2, r3, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b03      	cmp	r3, #3
 800259e:	d017      	beq.n	80025d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d123      	bne.n	8002624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	08da      	lsrs	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3208      	adds	r2, #8
 80025e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	220f      	movs	r2, #15
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	08da      	lsrs	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3208      	adds	r2, #8
 800261e:	69b9      	ldr	r1, [r7, #24]
 8002620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0203 	and.w	r2, r3, #3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80ae 	beq.w	80027c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	4b5d      	ldr	r3, [pc, #372]	@ (80027e0 <HAL_GPIO_Init+0x300>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266e:	4a5c      	ldr	r2, [pc, #368]	@ (80027e0 <HAL_GPIO_Init+0x300>)
 8002670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002674:	6453      	str	r3, [r2, #68]	@ 0x44
 8002676:	4b5a      	ldr	r3, [pc, #360]	@ (80027e0 <HAL_GPIO_Init+0x300>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002682:	4a58      	ldr	r2, [pc, #352]	@ (80027e4 <HAL_GPIO_Init+0x304>)
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	3302      	adds	r3, #2
 800268a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	220f      	movs	r2, #15
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4f      	ldr	r2, [pc, #316]	@ (80027e8 <HAL_GPIO_Init+0x308>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d025      	beq.n	80026fa <HAL_GPIO_Init+0x21a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4e      	ldr	r2, [pc, #312]	@ (80027ec <HAL_GPIO_Init+0x30c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01f      	beq.n	80026f6 <HAL_GPIO_Init+0x216>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4d      	ldr	r2, [pc, #308]	@ (80027f0 <HAL_GPIO_Init+0x310>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d019      	beq.n	80026f2 <HAL_GPIO_Init+0x212>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4c      	ldr	r2, [pc, #304]	@ (80027f4 <HAL_GPIO_Init+0x314>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_GPIO_Init+0x20e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4b      	ldr	r2, [pc, #300]	@ (80027f8 <HAL_GPIO_Init+0x318>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00d      	beq.n	80026ea <HAL_GPIO_Init+0x20a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4a      	ldr	r2, [pc, #296]	@ (80027fc <HAL_GPIO_Init+0x31c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <HAL_GPIO_Init+0x206>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a49      	ldr	r2, [pc, #292]	@ (8002800 <HAL_GPIO_Init+0x320>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_GPIO_Init+0x202>
 80026de:	2306      	movs	r3, #6
 80026e0:	e00c      	b.n	80026fc <HAL_GPIO_Init+0x21c>
 80026e2:	2307      	movs	r3, #7
 80026e4:	e00a      	b.n	80026fc <HAL_GPIO_Init+0x21c>
 80026e6:	2305      	movs	r3, #5
 80026e8:	e008      	b.n	80026fc <HAL_GPIO_Init+0x21c>
 80026ea:	2304      	movs	r3, #4
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x21c>
 80026ee:	2303      	movs	r3, #3
 80026f0:	e004      	b.n	80026fc <HAL_GPIO_Init+0x21c>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e002      	b.n	80026fc <HAL_GPIO_Init+0x21c>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_GPIO_Init+0x21c>
 80026fa:	2300      	movs	r3, #0
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	f002 0203 	and.w	r2, r2, #3
 8002702:	0092      	lsls	r2, r2, #2
 8002704:	4093      	lsls	r3, r2
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800270c:	4935      	ldr	r1, [pc, #212]	@ (80027e4 <HAL_GPIO_Init+0x304>)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	3302      	adds	r3, #2
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271a:	4b3a      	ldr	r3, [pc, #232]	@ (8002804 <HAL_GPIO_Init+0x324>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273e:	4a31      	ldr	r2, [pc, #196]	@ (8002804 <HAL_GPIO_Init+0x324>)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002744:	4b2f      	ldr	r3, [pc, #188]	@ (8002804 <HAL_GPIO_Init+0x324>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002768:	4a26      	ldr	r2, [pc, #152]	@ (8002804 <HAL_GPIO_Init+0x324>)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800276e:	4b25      	ldr	r3, [pc, #148]	@ (8002804 <HAL_GPIO_Init+0x324>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002792:	4a1c      	ldr	r2, [pc, #112]	@ (8002804 <HAL_GPIO_Init+0x324>)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002798:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <HAL_GPIO_Init+0x324>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027bc:	4a11      	ldr	r2, [pc, #68]	@ (8002804 <HAL_GPIO_Init+0x324>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3301      	adds	r3, #1
 80027c6:	61fb      	str	r3, [r7, #28]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b0f      	cmp	r3, #15
 80027cc:	f67f ae96 	bls.w	80024fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3724      	adds	r7, #36	@ 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40013800 	.word	0x40013800
 80027e8:	40020000 	.word	0x40020000
 80027ec:	40020400 	.word	0x40020400
 80027f0:	40020800 	.word	0x40020800
 80027f4:	40020c00 	.word	0x40020c00
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40021400 	.word	0x40021400
 8002800:	40021800 	.word	0x40021800
 8002804:	40013c00 	.word	0x40013c00

08002808 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e0c7      	b.n	80029b4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002824:	2201      	movs	r2, #1
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	429a      	cmp	r2, r3
 800283c:	f040 80b7 	bne.w	80029ae <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002840:	4a62      	ldr	r2, [pc, #392]	@ (80029cc <HAL_GPIO_DeInit+0x1c4>)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	3302      	adds	r3, #2
 8002848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	220f      	movs	r2, #15
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	4013      	ands	r3, r2
 8002860:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a5a      	ldr	r2, [pc, #360]	@ (80029d0 <HAL_GPIO_DeInit+0x1c8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d025      	beq.n	80028b6 <HAL_GPIO_DeInit+0xae>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a59      	ldr	r2, [pc, #356]	@ (80029d4 <HAL_GPIO_DeInit+0x1cc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <HAL_GPIO_DeInit+0xaa>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a58      	ldr	r2, [pc, #352]	@ (80029d8 <HAL_GPIO_DeInit+0x1d0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_DeInit+0xa6>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a57      	ldr	r2, [pc, #348]	@ (80029dc <HAL_GPIO_DeInit+0x1d4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_DeInit+0xa2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a56      	ldr	r2, [pc, #344]	@ (80029e0 <HAL_GPIO_DeInit+0x1d8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00d      	beq.n	80028a6 <HAL_GPIO_DeInit+0x9e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a55      	ldr	r2, [pc, #340]	@ (80029e4 <HAL_GPIO_DeInit+0x1dc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_DeInit+0x9a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a54      	ldr	r2, [pc, #336]	@ (80029e8 <HAL_GPIO_DeInit+0x1e0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_GPIO_DeInit+0x96>
 800289a:	2306      	movs	r3, #6
 800289c:	e00c      	b.n	80028b8 <HAL_GPIO_DeInit+0xb0>
 800289e:	2307      	movs	r3, #7
 80028a0:	e00a      	b.n	80028b8 <HAL_GPIO_DeInit+0xb0>
 80028a2:	2305      	movs	r3, #5
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_DeInit+0xb0>
 80028a6:	2304      	movs	r3, #4
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_DeInit+0xb0>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_DeInit+0xb0>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_DeInit+0xb0>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_DeInit+0xb0>
 80028b6:	2300      	movs	r3, #0
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d132      	bne.n	800292e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80028c8:	4b48      	ldr	r3, [pc, #288]	@ (80029ec <HAL_GPIO_DeInit+0x1e4>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	4946      	ldr	r1, [pc, #280]	@ (80029ec <HAL_GPIO_DeInit+0x1e4>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80028d6:	4b45      	ldr	r3, [pc, #276]	@ (80029ec <HAL_GPIO_DeInit+0x1e4>)
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	43db      	mvns	r3, r3
 80028de:	4943      	ldr	r1, [pc, #268]	@ (80029ec <HAL_GPIO_DeInit+0x1e4>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80028e4:	4b41      	ldr	r3, [pc, #260]	@ (80029ec <HAL_GPIO_DeInit+0x1e4>)
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	493f      	ldr	r1, [pc, #252]	@ (80029ec <HAL_GPIO_DeInit+0x1e4>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80028f2:	4b3e      	ldr	r3, [pc, #248]	@ (80029ec <HAL_GPIO_DeInit+0x1e4>)
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	493c      	ldr	r1, [pc, #240]	@ (80029ec <HAL_GPIO_DeInit+0x1e4>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002910:	4a2e      	ldr	r2, [pc, #184]	@ (80029cc <HAL_GPIO_DeInit+0x1c4>)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	089b      	lsrs	r3, r3, #2
 8002916:	3302      	adds	r3, #2
 8002918:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	43da      	mvns	r2, r3
 8002920:	482a      	ldr	r0, [pc, #168]	@ (80029cc <HAL_GPIO_DeInit+0x1c4>)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	400a      	ands	r2, r1
 8002928:	3302      	adds	r3, #2
 800292a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2103      	movs	r1, #3
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	401a      	ands	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	08da      	lsrs	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3208      	adds	r2, #8
 800294c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	220f      	movs	r2, #15
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	08d2      	lsrs	r2, r2, #3
 8002964:	4019      	ands	r1, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2103      	movs	r1, #3
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	401a      	ands	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	2101      	movs	r1, #1
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	401a      	ands	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2103      	movs	r1, #3
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	401a      	ands	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3301      	adds	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	f67f af34 	bls.w	8002824 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40013800 	.word	0x40013800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40020400 	.word	0x40020400
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40021400 	.word	0x40021400
 80029e8:	40021800 	.word	0x40021800
 80029ec:	40013c00 	.word	0x40013c00

080029f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	807b      	strh	r3, [r7, #2]
 80029fc:	4613      	mov	r3, r2
 80029fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a00:	787b      	ldrb	r3, [r7, #1]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a06:	887a      	ldrh	r2, [r7, #2]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a0c:	e003      	b.n	8002a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	041a      	lsls	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	619a      	str	r2, [r3, #24]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b085      	sub	sp, #20
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a34:	887a      	ldrh	r2, [r7, #2]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	041a      	lsls	r2, r3, #16
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	43d9      	mvns	r1, r3
 8002a40:	887b      	ldrh	r3, [r7, #2]
 8002a42:	400b      	ands	r3, r1
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	619a      	str	r2, [r3, #24]
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002aec <HAL_PWREx_EnableOverDrive+0x94>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a84:	f7fe fad4 	bl	8001030 <HAL_GetTick>
 8002a88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a8a:	e009      	b.n	8002aa0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a8c:	f7fe fad0 	bl	8001030 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a9a:	d901      	bls.n	8002aa0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e01f      	b.n	8002ae0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002aa0:	4b13      	ldr	r3, [pc, #76]	@ (8002af0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aac:	d1ee      	bne.n	8002a8c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002aae:	4b11      	ldr	r3, [pc, #68]	@ (8002af4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab4:	f7fe fabc 	bl	8001030 <HAL_GetTick>
 8002ab8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002aba:	e009      	b.n	8002ad0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002abc:	f7fe fab8 	bl	8001030 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002aca:	d901      	bls.n	8002ad0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e007      	b.n	8002ae0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ad0:	4b07      	ldr	r3, [pc, #28]	@ (8002af0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002adc:	d1ee      	bne.n	8002abc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	420e0040 	.word	0x420e0040
 8002af0:	40007000 	.word	0x40007000
 8002af4:	420e0044 	.word	0x420e0044

08002af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0cc      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b68      	ldr	r3, [pc, #416]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d90c      	bls.n	8002b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b65      	ldr	r3, [pc, #404]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b63      	ldr	r3, [pc, #396]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0b8      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b4c:	4b59      	ldr	r3, [pc, #356]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a58      	ldr	r2, [pc, #352]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b64:	4b53      	ldr	r3, [pc, #332]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a52      	ldr	r2, [pc, #328]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b70:	4b50      	ldr	r3, [pc, #320]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	494d      	ldr	r1, [pc, #308]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d044      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	4b47      	ldr	r3, [pc, #284]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d119      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e07f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d003      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e06f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e067      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	4b37      	ldr	r3, [pc, #220]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4934      	ldr	r1, [pc, #208]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fa22 	bl	8001030 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe fa1e 	bl	8001030 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e04f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 020c 	and.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1eb      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c18:	4b25      	ldr	r3, [pc, #148]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d20c      	bcs.n	8002c40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b22      	ldr	r3, [pc, #136]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e032      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c4c:	4b19      	ldr	r3, [pc, #100]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4916      	ldr	r1, [pc, #88]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6a:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	490e      	ldr	r1, [pc, #56]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c7e:	f000 f855 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002c82:	4602      	mov	r2, r0
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	490a      	ldr	r1, [pc, #40]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	5ccb      	ldrb	r3, [r1, r3]
 8002c92:	fa22 f303 	lsr.w	r3, r2, r3
 8002c96:	4a09      	ldr	r2, [pc, #36]	@ (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c9a:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe f982 	bl	8000fa8 <HAL_InitTick>

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023c00 	.word	0x40023c00
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	08003eb0 	.word	0x08003eb0
 8002cbc:	20000004 	.word	0x20000004
 8002cc0:	20000008 	.word	0x20000008

08002cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	@ (8002cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000004 	.word	0x20000004

08002cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ce0:	f7ff fff0 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0a9b      	lsrs	r3, r3, #10
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4903      	ldr	r1, [pc, #12]	@ (8002d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	08003ec0 	.word	0x08003ec0

08002d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d08:	f7ff ffdc 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	0b5b      	lsrs	r3, r3, #13
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4903      	ldr	r1, [pc, #12]	@ (8002d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40023800 	.word	0x40023800
 8002d28:	08003ec0 	.word	0x08003ec0

08002d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d30:	b0ae      	sub	sp, #184	@ 0xb8
 8002d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d52:	4bcb      	ldr	r3, [pc, #812]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	f200 8206 	bhi.w	800316c <HAL_RCC_GetSysClockFreq+0x440>
 8002d60:	a201      	add	r2, pc, #4	@ (adr r2, 8002d68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d66:	bf00      	nop
 8002d68:	08002d9d 	.word	0x08002d9d
 8002d6c:	0800316d 	.word	0x0800316d
 8002d70:	0800316d 	.word	0x0800316d
 8002d74:	0800316d 	.word	0x0800316d
 8002d78:	08002da5 	.word	0x08002da5
 8002d7c:	0800316d 	.word	0x0800316d
 8002d80:	0800316d 	.word	0x0800316d
 8002d84:	0800316d 	.word	0x0800316d
 8002d88:	08002dad 	.word	0x08002dad
 8002d8c:	0800316d 	.word	0x0800316d
 8002d90:	0800316d 	.word	0x0800316d
 8002d94:	0800316d 	.word	0x0800316d
 8002d98:	08002f9d 	.word	0x08002f9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4bb9      	ldr	r3, [pc, #740]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002da2:	e1e7      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002da4:	4bb8      	ldr	r3, [pc, #736]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002da6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002daa:	e1e3      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dac:	4bb4      	ldr	r3, [pc, #720]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002db4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002db8:	4bb1      	ldr	r3, [pc, #708]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d071      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc4:	4bae      	ldr	r3, [pc, #696]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	099b      	lsrs	r3, r3, #6
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002dd0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ddc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002de6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002dea:	4622      	mov	r2, r4
 8002dec:	462b      	mov	r3, r5
 8002dee:	f04f 0000 	mov.w	r0, #0
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	0159      	lsls	r1, r3, #5
 8002df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfc:	0150      	lsls	r0, r2, #5
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4621      	mov	r1, r4
 8002e04:	1a51      	subs	r1, r2, r1
 8002e06:	6439      	str	r1, [r7, #64]	@ 0x40
 8002e08:	4629      	mov	r1, r5
 8002e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	018b      	lsls	r3, r1, #6
 8002e20:	4641      	mov	r1, r8
 8002e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e26:	4641      	mov	r1, r8
 8002e28:	018a      	lsls	r2, r1, #6
 8002e2a:	4641      	mov	r1, r8
 8002e2c:	1a51      	subs	r1, r2, r1
 8002e2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e30:	4649      	mov	r1, r9
 8002e32:	eb63 0301 	sbc.w	r3, r3, r1
 8002e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002e44:	4649      	mov	r1, r9
 8002e46:	00cb      	lsls	r3, r1, #3
 8002e48:	4641      	mov	r1, r8
 8002e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e4e:	4641      	mov	r1, r8
 8002e50:	00ca      	lsls	r2, r1, #3
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	4622      	mov	r2, r4
 8002e5a:	189b      	adds	r3, r3, r2
 8002e5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e5e:	462b      	mov	r3, r5
 8002e60:	460a      	mov	r2, r1
 8002e62:	eb42 0303 	adc.w	r3, r2, r3
 8002e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e74:	4629      	mov	r1, r5
 8002e76:	024b      	lsls	r3, r1, #9
 8002e78:	4621      	mov	r1, r4
 8002e7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e7e:	4621      	mov	r1, r4
 8002e80:	024a      	lsls	r2, r1, #9
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002e98:	f7fd f9b4 	bl	8000204 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ea6:	e067      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea8:	4b75      	ldr	r3, [pc, #468]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002eb4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ec6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002eca:	4622      	mov	r2, r4
 8002ecc:	462b      	mov	r3, r5
 8002ece:	f04f 0000 	mov.w	r0, #0
 8002ed2:	f04f 0100 	mov.w	r1, #0
 8002ed6:	0159      	lsls	r1, r3, #5
 8002ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002edc:	0150      	lsls	r0, r2, #5
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	1a51      	subs	r1, r2, r1
 8002ee6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ee8:	4629      	mov	r1, r5
 8002eea:	eb63 0301 	sbc.w	r3, r3, r1
 8002eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002efc:	4649      	mov	r1, r9
 8002efe:	018b      	lsls	r3, r1, #6
 8002f00:	4641      	mov	r1, r8
 8002f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f06:	4641      	mov	r1, r8
 8002f08:	018a      	lsls	r2, r1, #6
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f10:	4649      	mov	r1, r9
 8002f12:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f2a:	4692      	mov	sl, r2
 8002f2c:	469b      	mov	fp, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	eb1a 0303 	adds.w	r3, sl, r3
 8002f34:	623b      	str	r3, [r7, #32]
 8002f36:	462b      	mov	r3, r5
 8002f38:	eb4b 0303 	adc.w	r3, fp, r3
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	028b      	lsls	r3, r1, #10
 8002f4e:	4621      	mov	r1, r4
 8002f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f54:	4621      	mov	r1, r4
 8002f56:	028a      	lsls	r2, r1, #10
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f60:	2200      	movs	r2, #0
 8002f62:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f64:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002f6a:	f7fd f94b 	bl	8000204 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4613      	mov	r3, r2
 8002f74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f78:	4b41      	ldr	r3, [pc, #260]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	3301      	adds	r3, #1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f9a:	e0eb      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f9c:	4b38      	ldr	r3, [pc, #224]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fa8:	4b35      	ldr	r3, [pc, #212]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d06b      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb4:	4b32      	ldr	r3, [pc, #200]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	099b      	lsrs	r3, r3, #6
 8002fba:	2200      	movs	r2, #0
 8002fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fc8:	2300      	movs	r3, #0
 8002fca:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fcc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002fd0:	4622      	mov	r2, r4
 8002fd2:	462b      	mov	r3, r5
 8002fd4:	f04f 0000 	mov.w	r0, #0
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	0159      	lsls	r1, r3, #5
 8002fde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe2:	0150      	lsls	r0, r2, #5
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4621      	mov	r1, r4
 8002fea:	1a51      	subs	r1, r2, r1
 8002fec:	61b9      	str	r1, [r7, #24]
 8002fee:	4629      	mov	r1, r5
 8002ff0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003002:	4659      	mov	r1, fp
 8003004:	018b      	lsls	r3, r1, #6
 8003006:	4651      	mov	r1, sl
 8003008:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800300c:	4651      	mov	r1, sl
 800300e:	018a      	lsls	r2, r1, #6
 8003010:	4651      	mov	r1, sl
 8003012:	ebb2 0801 	subs.w	r8, r2, r1
 8003016:	4659      	mov	r1, fp
 8003018:	eb63 0901 	sbc.w	r9, r3, r1
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003028:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800302c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003030:	4690      	mov	r8, r2
 8003032:	4699      	mov	r9, r3
 8003034:	4623      	mov	r3, r4
 8003036:	eb18 0303 	adds.w	r3, r8, r3
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	462b      	mov	r3, r5
 800303e:	eb49 0303 	adc.w	r3, r9, r3
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003050:	4629      	mov	r1, r5
 8003052:	024b      	lsls	r3, r1, #9
 8003054:	4621      	mov	r1, r4
 8003056:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800305a:	4621      	mov	r1, r4
 800305c:	024a      	lsls	r2, r1, #9
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003066:	2200      	movs	r2, #0
 8003068:	65bb      	str	r3, [r7, #88]	@ 0x58
 800306a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800306c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003070:	f7fd f8c8 	bl	8000204 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800307e:	e065      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x420>
 8003080:	40023800 	.word	0x40023800
 8003084:	00f42400 	.word	0x00f42400
 8003088:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308c:	4b3d      	ldr	r3, [pc, #244]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x458>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	2200      	movs	r2, #0
 8003094:	4618      	mov	r0, r3
 8003096:	4611      	mov	r1, r2
 8003098:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800309c:	653b      	str	r3, [r7, #80]	@ 0x50
 800309e:	2300      	movs	r3, #0
 80030a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80030a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80030a6:	4642      	mov	r2, r8
 80030a8:	464b      	mov	r3, r9
 80030aa:	f04f 0000 	mov.w	r0, #0
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	0159      	lsls	r1, r3, #5
 80030b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b8:	0150      	lsls	r0, r2, #5
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4641      	mov	r1, r8
 80030c0:	1a51      	subs	r1, r2, r1
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	4649      	mov	r1, r9
 80030c6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030d8:	4659      	mov	r1, fp
 80030da:	018b      	lsls	r3, r1, #6
 80030dc:	4651      	mov	r1, sl
 80030de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e2:	4651      	mov	r1, sl
 80030e4:	018a      	lsls	r2, r1, #6
 80030e6:	4651      	mov	r1, sl
 80030e8:	1a54      	subs	r4, r2, r1
 80030ea:	4659      	mov	r1, fp
 80030ec:	eb63 0501 	sbc.w	r5, r3, r1
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	00eb      	lsls	r3, r5, #3
 80030fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fe:	00e2      	lsls	r2, r4, #3
 8003100:	4614      	mov	r4, r2
 8003102:	461d      	mov	r5, r3
 8003104:	4643      	mov	r3, r8
 8003106:	18e3      	adds	r3, r4, r3
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	464b      	mov	r3, r9
 800310c:	eb45 0303 	adc.w	r3, r5, r3
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800311e:	4629      	mov	r1, r5
 8003120:	028b      	lsls	r3, r1, #10
 8003122:	4621      	mov	r1, r4
 8003124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003128:	4621      	mov	r1, r4
 800312a:	028a      	lsls	r2, r1, #10
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003134:	2200      	movs	r2, #0
 8003136:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003138:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800313a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800313e:	f7fd f861 	bl	8000204 <__aeabi_uldivmod>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4613      	mov	r3, r2
 8003148:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800314c:	4b0d      	ldr	r3, [pc, #52]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x458>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	0f1b      	lsrs	r3, r3, #28
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800315a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800315e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003162:	fbb2 f3f3 	udiv	r3, r2, r3
 8003166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800316a:	e003      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x45c>)
 800316e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003172:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003174:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003178:	4618      	mov	r0, r3
 800317a:	37b8      	adds	r7, #184	@ 0xb8
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	00f42400 	.word	0x00f42400

0800318c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003192:	f7fd ff4d 	bl	8001030 <HAL_GetTick>
 8003196:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003198:	4b72      	ldr	r3, [pc, #456]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a71      	ldr	r2, [pc, #452]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a6:	f7fd ff43 	bl	8001030 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e0d0      	b.n	800335a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80031b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80031c4:	4b67      	ldr	r3, [pc, #412]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a66      	ldr	r2, [pc, #408]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80031ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80031d0:	f7fd ff2e 	bl	8001030 <HAL_GetTick>
 80031d4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80031d6:	4b63      	ldr	r3, [pc, #396]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031de:	f7fd ff27 	bl	8001030 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0b2      	b.n	800335a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80031f4:	4b5b      	ldr	r3, [pc, #364]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1ee      	bne.n	80031de <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003200:	f7fd ff16 	bl	8001030 <HAL_GetTick>
 8003204:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003206:	4b57      	ldr	r3, [pc, #348]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a56      	ldr	r2, [pc, #344]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 800320c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8003210:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003214:	f7fd ff0c 	bl	8001030 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	@ 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e099      	b.n	800335a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003226:	4b4f      	ldr	r3, [pc, #316]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003232:	f7fd fefd 	bl	8001030 <HAL_GetTick>
 8003236:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003238:	4b4a      	ldr	r3, [pc, #296]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a49      	ldr	r2, [pc, #292]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 800323e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003242:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003246:	f7fd fef3 	bl	8001030 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e080      	b.n	800335a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003258:	4b42      	ldr	r3, [pc, #264]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003264:	f7fd fee4 	bl	8001030 <HAL_GetTick>
 8003268:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800326a:	4b3e      	ldr	r3, [pc, #248]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a3d      	ldr	r2, [pc, #244]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 8003270:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003274:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003278:	f7fd feda 	bl	8001030 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e067      	b.n	800335a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800328a:	4b36      	ldr	r3, [pc, #216]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003296:	f7fd fecb 	bl	8001030 <HAL_GetTick>
 800329a:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 800329c:	4b31      	ldr	r3, [pc, #196]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a30      	ldr	r2, [pc, #192]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80032a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032aa:	f7fd fec1 	bl	8001030 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e04e      	b.n	800335a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80032bc:	4b29      	ldr	r3, [pc, #164]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f0      	bne.n	80032aa <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 80032c8:	4b26      	ldr	r3, [pc, #152]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80032ca:	4a27      	ldr	r2, [pc, #156]	@ (8003368 <HAL_RCC_DeInit+0x1dc>)
 80032cc:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80032ce:	4b25      	ldr	r3, [pc, #148]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80032d0:	4a25      	ldr	r2, [pc, #148]	@ (8003368 <HAL_RCC_DeInit+0x1dc>)
 80032d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 80032d6:	4b23      	ldr	r3, [pc, #140]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80032d8:	4a24      	ldr	r2, [pc, #144]	@ (800336c <HAL_RCC_DeInit+0x1e0>)
 80032da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80032de:	4b21      	ldr	r3, [pc, #132]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	4a20      	ldr	r2, [pc, #128]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80032e4:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80032e8:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80032ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80032f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 80032f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 80032fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003300:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8003302:	4b18      	ldr	r3, [pc, #96]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4a17      	ldr	r2, [pc, #92]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 8003308:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 800330c:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800330e:	4b15      	ldr	r3, [pc, #84]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4a14      	ldr	r2, [pc, #80]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 8003314:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003318:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 800331a:	4b12      	ldr	r3, [pc, #72]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	4a11      	ldr	r2, [pc, #68]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 8003320:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003324:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003326:	4b0f      	ldr	r3, [pc, #60]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 8003328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332a:	4a0e      	ldr	r2, [pc, #56]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003332:	4b0c      	ldr	r3, [pc, #48]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 8003334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003336:	4a0b      	ldr	r2, [pc, #44]	@ (8003364 <HAL_RCC_DeInit+0x1d8>)
 8003338:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800333c:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800333e:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <HAL_RCC_DeInit+0x1e4>)
 8003340:	4a0c      	ldr	r2, [pc, #48]	@ (8003374 <HAL_RCC_DeInit+0x1e8>)
 8003342:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <HAL_RCC_DeInit+0x1ec>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd fe2d 	bl	8000fa8 <HAL_InitTick>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8003358:	2300      	movs	r3, #0
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	24003010 	.word	0x24003010
 800336c:	04003010 	.word	0x04003010
 8003370:	20000004 	.word	0x20000004
 8003374:	00f42400 	.word	0x00f42400
 8003378:	20000008 	.word	0x20000008

0800337c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e28d      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8083 	beq.w	80034a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800339c:	4b94      	ldr	r3, [pc, #592]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d019      	beq.n	80033dc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80033a8:	4b91      	ldr	r3, [pc, #580]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 030c 	and.w	r3, r3, #12
        || \
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80033b4:	4b8e      	ldr	r3, [pc, #568]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033c0:	d00c      	beq.n	80033dc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c2:	4b8b      	ldr	r3, [pc, #556]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80033ca:	2b0c      	cmp	r3, #12
 80033cc:	d112      	bne.n	80033f4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ce:	4b88      	ldr	r3, [pc, #544]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033da:	d10b      	bne.n	80033f4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	4b84      	ldr	r3, [pc, #528]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d05b      	beq.n	80034a0 <HAL_RCC_OscConfig+0x124>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d157      	bne.n	80034a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e25a      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033fc:	d106      	bne.n	800340c <HAL_RCC_OscConfig+0x90>
 80033fe:	4b7c      	ldr	r3, [pc, #496]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7b      	ldr	r2, [pc, #492]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e01d      	b.n	8003448 <HAL_RCC_OscConfig+0xcc>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0xb4>
 8003416:	4b76      	ldr	r3, [pc, #472]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a75      	ldr	r2, [pc, #468]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 800341c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b73      	ldr	r3, [pc, #460]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a72      	ldr	r2, [pc, #456]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e00b      	b.n	8003448 <HAL_RCC_OscConfig+0xcc>
 8003430:	4b6f      	ldr	r3, [pc, #444]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a6e      	ldr	r2, [pc, #440]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4b6c      	ldr	r3, [pc, #432]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a6b      	ldr	r2, [pc, #428]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d013      	beq.n	8003478 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fd fdee 	bl	8001030 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003458:	f7fd fdea 	bl	8001030 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	@ 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e21f      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b61      	ldr	r3, [pc, #388]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0xdc>
 8003476:	e014      	b.n	80034a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fd fdda 	bl	8001030 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003480:	f7fd fdd6 	bl	8001030 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	@ 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e20b      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003492:	4b57      	ldr	r3, [pc, #348]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x104>
 800349e:	e000      	b.n	80034a2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d06f      	beq.n	800358e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034ae:	4b50      	ldr	r3, [pc, #320]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d017      	beq.n	80034ea <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034ba:	4b4d      	ldr	r3, [pc, #308]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
        || \
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d105      	bne.n	80034d2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034c6:	4b4a      	ldr	r3, [pc, #296]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d2:	4b47      	ldr	r3, [pc, #284]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d11c      	bne.n	8003518 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034de:	4b44      	ldr	r3, [pc, #272]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d116      	bne.n	8003518 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ea:	4b41      	ldr	r3, [pc, #260]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_RCC_OscConfig+0x186>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d001      	beq.n	8003502 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e1d3      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003502:	4b3b      	ldr	r3, [pc, #236]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4937      	ldr	r1, [pc, #220]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003516:	e03a      	b.n	800358e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003520:	4b34      	ldr	r3, [pc, #208]	@ (80035f4 <HAL_RCC_OscConfig+0x278>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fd fd83 	bl	8001030 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352e:	f7fd fd7f 	bl	8001030 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e1b4      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003540:	4b2b      	ldr	r3, [pc, #172]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354c:	4b28      	ldr	r3, [pc, #160]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4925      	ldr	r1, [pc, #148]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]
 8003560:	e015      	b.n	800358e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003562:	4b24      	ldr	r3, [pc, #144]	@ (80035f4 <HAL_RCC_OscConfig+0x278>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fd fd62 	bl	8001030 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003570:	f7fd fd5e 	bl	8001030 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e193      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003582:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d036      	beq.n	8003608 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d016      	beq.n	80035d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a2:	4b15      	ldr	r3, [pc, #84]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a8:	f7fd fd42 	bl	8001030 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b0:	f7fd fd3e 	bl	8001030 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e173      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c2:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_RCC_OscConfig+0x274>)
 80035c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x234>
 80035ce:	e01b      	b.n	8003608 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d0:	4b09      	ldr	r3, [pc, #36]	@ (80035f8 <HAL_RCC_OscConfig+0x27c>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d6:	f7fd fd2b 	bl	8001030 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035dc:	e00e      	b.n	80035fc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035de:	f7fd fd27 	bl	8001030 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d907      	bls.n	80035fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e15c      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
 80035f0:	40023800 	.word	0x40023800
 80035f4:	42470000 	.word	0x42470000
 80035f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fc:	4b8a      	ldr	r3, [pc, #552]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 80035fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1ea      	bne.n	80035de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8097 	beq.w	8003744 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003616:	2300      	movs	r3, #0
 8003618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361a:	4b83      	ldr	r3, [pc, #524]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	4b7f      	ldr	r3, [pc, #508]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	4a7e      	ldr	r2, [pc, #504]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003634:	6413      	str	r3, [r2, #64]	@ 0x40
 8003636:	4b7c      	ldr	r3, [pc, #496]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003646:	4b79      	ldr	r3, [pc, #484]	@ (800382c <HAL_RCC_OscConfig+0x4b0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d118      	bne.n	8003684 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003652:	4b76      	ldr	r3, [pc, #472]	@ (800382c <HAL_RCC_OscConfig+0x4b0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a75      	ldr	r2, [pc, #468]	@ (800382c <HAL_RCC_OscConfig+0x4b0>)
 8003658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800365c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365e:	f7fd fce7 	bl	8001030 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003666:	f7fd fce3 	bl	8001030 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e118      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003678:	4b6c      	ldr	r3, [pc, #432]	@ (800382c <HAL_RCC_OscConfig+0x4b0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x31e>
 800368c:	4b66      	ldr	r3, [pc, #408]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003690:	4a65      	ldr	r2, [pc, #404]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6713      	str	r3, [r2, #112]	@ 0x70
 8003698:	e01c      	b.n	80036d4 <HAL_RCC_OscConfig+0x358>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b05      	cmp	r3, #5
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x340>
 80036a2:	4b61      	ldr	r3, [pc, #388]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a6:	4a60      	ldr	r2, [pc, #384]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 80036a8:	f043 0304 	orr.w	r3, r3, #4
 80036ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ae:	4b5e      	ldr	r3, [pc, #376]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ba:	e00b      	b.n	80036d4 <HAL_RCC_OscConfig+0x358>
 80036bc:	4b5a      	ldr	r3, [pc, #360]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c0:	4a59      	ldr	r2, [pc, #356]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c8:	4b57      	ldr	r3, [pc, #348]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036cc:	4a56      	ldr	r2, [pc, #344]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 80036ce:	f023 0304 	bic.w	r3, r3, #4
 80036d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d015      	beq.n	8003708 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036dc:	f7fd fca8 	bl	8001030 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e2:	e00a      	b.n	80036fa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e4:	f7fd fca4 	bl	8001030 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e0d7      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0ee      	beq.n	80036e4 <HAL_RCC_OscConfig+0x368>
 8003706:	e014      	b.n	8003732 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003708:	f7fd fc92 	bl	8001030 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370e:	e00a      	b.n	8003726 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003710:	f7fd fc8e 	bl	8001030 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e0c1      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003726:	4b40      	ldr	r3, [pc, #256]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1ee      	bne.n	8003710 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d105      	bne.n	8003744 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003738:	4b3b      	ldr	r3, [pc, #236]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	4a3a      	ldr	r2, [pc, #232]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 800373e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003742:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80ad 	beq.w	80038a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800374e:	4b36      	ldr	r3, [pc, #216]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b08      	cmp	r3, #8
 8003758:	d060      	beq.n	800381c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d145      	bne.n	80037ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003762:	4b33      	ldr	r3, [pc, #204]	@ (8003830 <HAL_RCC_OscConfig+0x4b4>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fd fc62 	bl	8001030 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003770:	f7fd fc5e 	bl	8001030 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e093      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	4b29      	ldr	r3, [pc, #164]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379c:	019b      	lsls	r3, r3, #6
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	085b      	lsrs	r3, r3, #1
 80037a6:	3b01      	subs	r3, #1
 80037a8:	041b      	lsls	r3, r3, #16
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b0:	061b      	lsls	r3, r3, #24
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b8:	071b      	lsls	r3, r3, #28
 80037ba:	491b      	ldr	r1, [pc, #108]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003830 <HAL_RCC_OscConfig+0x4b4>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fd fc33 	bl	8001030 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fd fc2f 	bl	8001030 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e064      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e0:	4b11      	ldr	r3, [pc, #68]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x452>
 80037ec:	e05c      	b.n	80038a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ee:	4b10      	ldr	r3, [pc, #64]	@ (8003830 <HAL_RCC_OscConfig+0x4b4>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fd fc1c 	bl	8001030 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fd fc18 	bl	8001030 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e04d      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380e:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <HAL_RCC_OscConfig+0x4ac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x480>
 800381a:	e045      	b.n	80038a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d107      	bne.n	8003834 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e040      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
 8003828:	40023800 	.word	0x40023800
 800382c:	40007000 	.word	0x40007000
 8003830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003834:	4b1f      	ldr	r3, [pc, #124]	@ (80038b4 <HAL_RCC_OscConfig+0x538>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d030      	beq.n	80038a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d129      	bne.n	80038a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d122      	bne.n	80038a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003864:	4013      	ands	r3, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800386a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800386c:	4293      	cmp	r3, r2
 800386e:	d119      	bne.n	80038a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	3b01      	subs	r3, #1
 800387e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d10f      	bne.n	80038a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003890:	429a      	cmp	r2, r3
 8003892:	d107      	bne.n	80038a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d001      	beq.n	80038a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40023800 	.word	0x40023800

080038b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e042      	b.n	8003950 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd fa42 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	@ 0x24
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f82b 	bl	8003958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003920:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003930:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800395c:	b0c0      	sub	sp, #256	@ 0x100
 800395e:	af00      	add	r7, sp, #0
 8003960:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003974:	68d9      	ldr	r1, [r3, #12]
 8003976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	ea40 0301 	orr.w	r3, r0, r1
 8003980:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	431a      	orrs	r2, r3
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	431a      	orrs	r2, r3
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039b0:	f021 010c 	bic.w	r1, r1, #12
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039be:	430b      	orrs	r3, r1
 80039c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d2:	6999      	ldr	r1, [r3, #24]
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	ea40 0301 	orr.w	r3, r0, r1
 80039de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b8f      	ldr	r3, [pc, #572]	@ (8003c24 <UART_SetConfig+0x2cc>)
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d005      	beq.n	80039f8 <UART_SetConfig+0xa0>
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4b8d      	ldr	r3, [pc, #564]	@ (8003c28 <UART_SetConfig+0x2d0>)
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d104      	bne.n	8003a02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039f8:	f7ff f984 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 80039fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a00:	e003      	b.n	8003a0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a02:	f7ff f96b 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 8003a06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a14:	f040 810c 	bne.w	8003c30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a2a:	4622      	mov	r2, r4
 8003a2c:	462b      	mov	r3, r5
 8003a2e:	1891      	adds	r1, r2, r2
 8003a30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a32:	415b      	adcs	r3, r3
 8003a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	eb12 0801 	adds.w	r8, r2, r1
 8003a40:	4629      	mov	r1, r5
 8003a42:	eb43 0901 	adc.w	r9, r3, r1
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a5a:	4690      	mov	r8, r2
 8003a5c:	4699      	mov	r9, r3
 8003a5e:	4623      	mov	r3, r4
 8003a60:	eb18 0303 	adds.w	r3, r8, r3
 8003a64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a68:	462b      	mov	r3, r5
 8003a6a:	eb49 0303 	adc.w	r3, r9, r3
 8003a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a86:	460b      	mov	r3, r1
 8003a88:	18db      	adds	r3, r3, r3
 8003a8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	eb42 0303 	adc.w	r3, r2, r3
 8003a92:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a9c:	f7fc fbb2 	bl	8000204 <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4b61      	ldr	r3, [pc, #388]	@ (8003c2c <UART_SetConfig+0x2d4>)
 8003aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	011c      	lsls	r4, r3, #4
 8003aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ab8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003abc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	1891      	adds	r1, r2, r2
 8003ac6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ac8:	415b      	adcs	r3, r3
 8003aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003acc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ad0:	4641      	mov	r1, r8
 8003ad2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	eb43 0b01 	adc.w	fp, r3, r1
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ae8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003af0:	4692      	mov	sl, r2
 8003af2:	469b      	mov	fp, r3
 8003af4:	4643      	mov	r3, r8
 8003af6:	eb1a 0303 	adds.w	r3, sl, r3
 8003afa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003afe:	464b      	mov	r3, r9
 8003b00:	eb4b 0303 	adc.w	r3, fp, r3
 8003b04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	18db      	adds	r3, r3, r3
 8003b20:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b22:	4613      	mov	r3, r2
 8003b24:	eb42 0303 	adc.w	r3, r2, r3
 8003b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b32:	f7fc fb67 	bl	8000204 <__aeabi_uldivmod>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c2c <UART_SetConfig+0x2d4>)
 8003b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2264      	movs	r2, #100	@ 0x64
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	1acb      	subs	r3, r1, r3
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b52:	4b36      	ldr	r3, [pc, #216]	@ (8003c2c <UART_SetConfig+0x2d4>)
 8003b54:	fba3 2302 	umull	r2, r3, r3, r2
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b60:	441c      	add	r4, r3
 8003b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b66:	2200      	movs	r2, #0
 8003b68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b74:	4642      	mov	r2, r8
 8003b76:	464b      	mov	r3, r9
 8003b78:	1891      	adds	r1, r2, r2
 8003b7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b7c:	415b      	adcs	r3, r3
 8003b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b84:	4641      	mov	r1, r8
 8003b86:	1851      	adds	r1, r2, r1
 8003b88:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	414b      	adcs	r3, r1
 8003b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b9c:	4659      	mov	r1, fp
 8003b9e:	00cb      	lsls	r3, r1, #3
 8003ba0:	4651      	mov	r1, sl
 8003ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ba6:	4651      	mov	r1, sl
 8003ba8:	00ca      	lsls	r2, r1, #3
 8003baa:	4610      	mov	r0, r2
 8003bac:	4619      	mov	r1, r3
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4642      	mov	r2, r8
 8003bb2:	189b      	adds	r3, r3, r2
 8003bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bb8:	464b      	mov	r3, r9
 8003bba:	460a      	mov	r2, r1
 8003bbc:	eb42 0303 	adc.w	r3, r2, r3
 8003bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bd8:	460b      	mov	r3, r1
 8003bda:	18db      	adds	r3, r3, r3
 8003bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bde:	4613      	mov	r3, r2
 8003be0:	eb42 0303 	adc.w	r3, r2, r3
 8003be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003be6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bee:	f7fc fb09 	bl	8000204 <__aeabi_uldivmod>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c2c <UART_SetConfig+0x2d4>)
 8003bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	2164      	movs	r1, #100	@ 0x64
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	3332      	adds	r3, #50	@ 0x32
 8003c0a:	4a08      	ldr	r2, [pc, #32]	@ (8003c2c <UART_SetConfig+0x2d4>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	f003 0207 	and.w	r2, r3, #7
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4422      	add	r2, r4
 8003c1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c20:	e106      	b.n	8003e30 <UART_SetConfig+0x4d8>
 8003c22:	bf00      	nop
 8003c24:	40011000 	.word	0x40011000
 8003c28:	40011400 	.word	0x40011400
 8003c2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c34:	2200      	movs	r2, #0
 8003c36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c42:	4642      	mov	r2, r8
 8003c44:	464b      	mov	r3, r9
 8003c46:	1891      	adds	r1, r2, r2
 8003c48:	6239      	str	r1, [r7, #32]
 8003c4a:	415b      	adcs	r3, r3
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c52:	4641      	mov	r1, r8
 8003c54:	1854      	adds	r4, r2, r1
 8003c56:	4649      	mov	r1, r9
 8003c58:	eb43 0501 	adc.w	r5, r3, r1
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	00eb      	lsls	r3, r5, #3
 8003c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c6a:	00e2      	lsls	r2, r4, #3
 8003c6c:	4614      	mov	r4, r2
 8003c6e:	461d      	mov	r5, r3
 8003c70:	4643      	mov	r3, r8
 8003c72:	18e3      	adds	r3, r4, r3
 8003c74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c78:	464b      	mov	r3, r9
 8003c7a:	eb45 0303 	adc.w	r3, r5, r3
 8003c7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	008b      	lsls	r3, r1, #2
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ca8:	4621      	mov	r1, r4
 8003caa:	008a      	lsls	r2, r1, #2
 8003cac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cb0:	f7fc faa8 	bl	8000204 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4b60      	ldr	r3, [pc, #384]	@ (8003e3c <UART_SetConfig+0x4e4>)
 8003cba:	fba3 2302 	umull	r2, r3, r3, r2
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	011c      	lsls	r4, r3, #4
 8003cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ccc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	1891      	adds	r1, r2, r2
 8003cda:	61b9      	str	r1, [r7, #24]
 8003cdc:	415b      	adcs	r3, r3
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	1851      	adds	r1, r2, r1
 8003ce8:	6139      	str	r1, [r7, #16]
 8003cea:	4649      	mov	r1, r9
 8003cec:	414b      	adcs	r3, r1
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cfc:	4659      	mov	r1, fp
 8003cfe:	00cb      	lsls	r3, r1, #3
 8003d00:	4651      	mov	r1, sl
 8003d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d06:	4651      	mov	r1, sl
 8003d08:	00ca      	lsls	r2, r1, #3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4642      	mov	r2, r8
 8003d12:	189b      	adds	r3, r3, r2
 8003d14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d18:	464b      	mov	r3, r9
 8003d1a:	460a      	mov	r2, r1
 8003d1c:	eb42 0303 	adc.w	r3, r2, r3
 8003d20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d3c:	4649      	mov	r1, r9
 8003d3e:	008b      	lsls	r3, r1, #2
 8003d40:	4641      	mov	r1, r8
 8003d42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d46:	4641      	mov	r1, r8
 8003d48:	008a      	lsls	r2, r1, #2
 8003d4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d4e:	f7fc fa59 	bl	8000204 <__aeabi_uldivmod>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4611      	mov	r1, r2
 8003d58:	4b38      	ldr	r3, [pc, #224]	@ (8003e3c <UART_SetConfig+0x4e4>)
 8003d5a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	2264      	movs	r2, #100	@ 0x64
 8003d62:	fb02 f303 	mul.w	r3, r2, r3
 8003d66:	1acb      	subs	r3, r1, r3
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	3332      	adds	r3, #50	@ 0x32
 8003d6c:	4a33      	ldr	r2, [pc, #204]	@ (8003e3c <UART_SetConfig+0x4e4>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d78:	441c      	add	r4, r3
 8003d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d7e:	2200      	movs	r2, #0
 8003d80:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d82:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d88:	4642      	mov	r2, r8
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	1891      	adds	r1, r2, r2
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	415b      	adcs	r3, r3
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d98:	4641      	mov	r1, r8
 8003d9a:	1851      	adds	r1, r2, r1
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	4649      	mov	r1, r9
 8003da0:	414b      	adcs	r3, r1
 8003da2:	607b      	str	r3, [r7, #4]
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003db0:	4659      	mov	r1, fp
 8003db2:	00cb      	lsls	r3, r1, #3
 8003db4:	4651      	mov	r1, sl
 8003db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dba:	4651      	mov	r1, sl
 8003dbc:	00ca      	lsls	r2, r1, #3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4642      	mov	r2, r8
 8003dc6:	189b      	adds	r3, r3, r2
 8003dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dca:	464b      	mov	r3, r9
 8003dcc:	460a      	mov	r2, r1
 8003dce:	eb42 0303 	adc.w	r3, r2, r3
 8003dd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dde:	667a      	str	r2, [r7, #100]	@ 0x64
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003dec:	4649      	mov	r1, r9
 8003dee:	008b      	lsls	r3, r1, #2
 8003df0:	4641      	mov	r1, r8
 8003df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003df6:	4641      	mov	r1, r8
 8003df8:	008a      	lsls	r2, r1, #2
 8003dfa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dfe:	f7fc fa01 	bl	8000204 <__aeabi_uldivmod>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4b0d      	ldr	r3, [pc, #52]	@ (8003e3c <UART_SetConfig+0x4e4>)
 8003e08:	fba3 1302 	umull	r1, r3, r3, r2
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	2164      	movs	r1, #100	@ 0x64
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	3332      	adds	r3, #50	@ 0x32
 8003e1a:	4a08      	ldr	r2, [pc, #32]	@ (8003e3c <UART_SetConfig+0x4e4>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	f003 020f 	and.w	r2, r3, #15
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4422      	add	r2, r4
 8003e2e:	609a      	str	r2, [r3, #8]
}
 8003e30:	bf00      	nop
 8003e32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e36:	46bd      	mov	sp, r7
 8003e38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e3c:	51eb851f 	.word	0x51eb851f

08003e40 <memset>:
 8003e40:	4402      	add	r2, r0
 8003e42:	4603      	mov	r3, r0
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d100      	bne.n	8003e4a <memset+0xa>
 8003e48:	4770      	bx	lr
 8003e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4e:	e7f9      	b.n	8003e44 <memset+0x4>

08003e50 <__libc_init_array>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	4d0d      	ldr	r5, [pc, #52]	@ (8003e88 <__libc_init_array+0x38>)
 8003e54:	4c0d      	ldr	r4, [pc, #52]	@ (8003e8c <__libc_init_array+0x3c>)
 8003e56:	1b64      	subs	r4, r4, r5
 8003e58:	10a4      	asrs	r4, r4, #2
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	42a6      	cmp	r6, r4
 8003e5e:	d109      	bne.n	8003e74 <__libc_init_array+0x24>
 8003e60:	4d0b      	ldr	r5, [pc, #44]	@ (8003e90 <__libc_init_array+0x40>)
 8003e62:	4c0c      	ldr	r4, [pc, #48]	@ (8003e94 <__libc_init_array+0x44>)
 8003e64:	f000 f818 	bl	8003e98 <_init>
 8003e68:	1b64      	subs	r4, r4, r5
 8003e6a:	10a4      	asrs	r4, r4, #2
 8003e6c:	2600      	movs	r6, #0
 8003e6e:	42a6      	cmp	r6, r4
 8003e70:	d105      	bne.n	8003e7e <__libc_init_array+0x2e>
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
 8003e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e78:	4798      	blx	r3
 8003e7a:	3601      	adds	r6, #1
 8003e7c:	e7ee      	b.n	8003e5c <__libc_init_array+0xc>
 8003e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e82:	4798      	blx	r3
 8003e84:	3601      	adds	r6, #1
 8003e86:	e7f2      	b.n	8003e6e <__libc_init_array+0x1e>
 8003e88:	08003ed0 	.word	0x08003ed0
 8003e8c:	08003ed0 	.word	0x08003ed0
 8003e90:	08003ed0 	.word	0x08003ed0
 8003e94:	08003ed4 	.word	0x08003ed4

08003e98 <_init>:
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	bf00      	nop
 8003e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9e:	bc08      	pop	{r3}
 8003ea0:	469e      	mov	lr, r3
 8003ea2:	4770      	bx	lr

08003ea4 <_fini>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	bf00      	nop
 8003ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eaa:	bc08      	pop	{r3}
 8003eac:	469e      	mov	lr, r3
 8003eae:	4770      	bx	lr
